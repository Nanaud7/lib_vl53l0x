
lib_vl53l0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000994c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08009b1c  08009b1c  00019b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c50  08009c50  0002032c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c50  08009c50  00019c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c58  08009c58  0002032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c58  08009c58  00019c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c5c  08009c5c  00019c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  08009c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000032c  08009f8c  0002032c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08009f8c  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a87  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002936  00000000  00000000  00037de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  0003a720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e48  00000000  00000000  0003b698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002498d  00000000  00000000  0003c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed9a  00000000  00000000  00060e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d230e  00000000  00000000  0006fc07  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141f15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004780  00000000  00000000  00141f90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000032c 	.word	0x2000032c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009b04 	.word	0x08009b04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000330 	.word	0x20000330
 800020c:	08009b04 	.word	0x08009b04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b36      	ldr	r3, [pc, #216]	; (80006a4 <MX_GPIO_Init+0xf4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a35      	ldr	r2, [pc, #212]	; (80006a4 <MX_GPIO_Init+0xf4>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <MX_GPIO_Init+0xf4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b2f      	ldr	r3, [pc, #188]	; (80006a4 <MX_GPIO_Init+0xf4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a2e      	ldr	r2, [pc, #184]	; (80006a4 <MX_GPIO_Init+0xf4>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <MX_GPIO_Init+0xf4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_GPIO_Init+0xf4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <MX_GPIO_Init+0xf4>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <MX_GPIO_Init+0xf4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_GPIO_Init+0xf4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <MX_GPIO_Init+0xf4>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_GPIO_Init+0xf4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2103      	movs	r1, #3
 800063a:	481b      	ldr	r0, [pc, #108]	; (80006a8 <MX_GPIO_Init+0xf8>)
 800063c:	f000 ffd8 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2120      	movs	r1, #32
 8000644:	4819      	ldr	r0, [pc, #100]	; (80006ac <MX_GPIO_Init+0xfc>)
 8000646:	f000 ffd3 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_GPIO_Init+0x100>)
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	4812      	ldr	r0, [pc, #72]	; (80006a8 <MX_GPIO_Init+0xf8>)
 8000660:	f000 fe34 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000664:	2303      	movs	r3, #3
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	480b      	ldr	r0, [pc, #44]	; (80006a8 <MX_GPIO_Init+0xf8>)
 800067c:	f000 fe26 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000680:	2320      	movs	r3, #32
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_GPIO_Init+0xfc>)
 8000698:	f000 fe18 	bl	80012cc <HAL_GPIO_Init>

}
 800069c:	bf00      	nop
 800069e:	3728      	adds	r7, #40	; 0x28
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020800 	.word	0x40020800
 80006ac:	40020000 	.word	0x40020000
 80006b0:	10210000 	.word	0x10210000

080006b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_I2C1_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_I2C1_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_I2C1_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_I2C1_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_I2C1_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_I2C1_Init+0x50>)
 80006f2:	f000 ff97 	bl	8001624 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 fa68 	bl	8000bd0 <Error_Handler>
  }

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000354 	.word	0x20000354
 8000708:	40005400 	.word	0x40005400
 800070c:	00061a80 	.word	0x00061a80

08000710 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a19      	ldr	r2, [pc, #100]	; (8000794 <HAL_I2C_MspInit+0x84>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d12b      	bne.n	800078a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_I2C_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <HAL_I2C_MspInit+0x88>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_I2C_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800074e:	23c0      	movs	r3, #192	; 0xc0
 8000750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000752:	2312      	movs	r3, #18
 8000754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000756:	2301      	movs	r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075e:	2304      	movs	r3, #4
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <HAL_I2C_MspInit+0x8c>)
 800076a:	f000 fdaf 	bl	80012cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_I2C_MspInit+0x88>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_I2C_MspInit+0x88>)
 8000778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_I2C_MspInit+0x88>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	; 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40005400 	.word	0x40005400
 8000798:	40023800 	.word	0x40023800
 800079c:	40020400 	.word	0x40020400

080007a0 <vl53l0x_Initialization_Flow>:
 *      Author: Arnaud CHOBERT
 */

#include "lib_vl53l0x.h"

uint8_t vl53l0x_Initialization_Flow(VL53L0X_Dev_t* dev){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	// Device initialization
	vl53l0x_Device_Initialization(dev);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f80f 	bl	80007cc <vl53l0x_Device_Initialization>

	// Calibration data loading
	vl53l0x_Calibration_Data_Load(dev);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f000 f83a 	bl	8000828 <vl53l0x_Calibration_Data_Load>

	// System settings
	vl53l0x_System_Settings(dev);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f850 	bl	800085a <vl53l0x_System_Settings>

	// Start Measurement
	VL53L0X_StartMeasurement(dev);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f004 f9de 	bl	8004b7c <VL53L0X_StartMeasurement>

	return 0;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <vl53l0x_Device_Initialization>:

uint8_t vl53l0x_Device_Initialization(VL53L0X_Dev_t* dev){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]

	// DataInit
	if(VL53L0X_ERROR_NONE != (status = VL53L0X_DataInit(dev))){
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f003 f93f 	bl	8003a5c <VL53L0X_DataInit>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d006      	beq.n	80007f6 <vl53l0x_Device_Initialization+0x2a>
		printf("Error DataInit() : %d\r\n",status);
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	4619      	mov	r1, r3
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <vl53l0x_Device_Initialization+0x54>)
 80007ee:	f008 f983 	bl	8008af8 <iprintf>
		return 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00f      	b.n	8000816 <vl53l0x_Device_Initialization+0x4a>
	}

	// StaticInit
	if(VL53L0X_ERROR_NONE != (status = VL53L0X_StaticInit(dev))){
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f003 fa94 	bl	8003d24 <VL53L0X_StaticInit>
 80007fc:	4603      	mov	r3, r0
 80007fe:	73fb      	strb	r3, [r7, #15]
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d006      	beq.n	8000814 <vl53l0x_Device_Initialization+0x48>
		printf("Error StaticInit() : %d\r\n",status);
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <vl53l0x_Device_Initialization+0x58>)
 800080c:	f008 f974 	bl	8008af8 <iprintf>
		return 1;
 8000810:	2301      	movs	r3, #1
 8000812:	e000      	b.n	8000816 <vl53l0x_Device_Initialization+0x4a>
	}

	return 0;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	08009b1c 	.word	0x08009b1c
 8000824:	08009b34 	.word	0x08009b34

08000828 <vl53l0x_Calibration_Data_Load>:

uint8_t vl53l0x_Calibration_Data_Load(VL53L0X_Dev_t* dev){
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	// Reference SPADs
	uint32_t count; uint8_t isApertureSpads;
	VL53L0X_PerformRefSpadManagement(dev, &count, &isApertureSpads);
 8000830:	f107 020b 	add.w	r2, r7, #11
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f004 fdbe 	bl	80053bc <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_GetReferenceSpads(dev, &count, &isApertureSpads);


	// Ref calibration
    uint8_t VhvSettings, PhaseCal;
	VL53L0X_PerformRefCalibration(dev, &VhvSettings, &PhaseCal);
 8000840:	f107 0209 	add.w	r2, r7, #9
 8000844:	f107 030a 	add.w	r3, r7, #10
 8000848:	4619      	mov	r1, r3
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f004 f91a 	bl	8004a84 <VL53L0X_PerformRefCalibration>

	// Offset calibration

	// Cross-talk correction

	return 0;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <vl53l0x_System_Settings>:

uint8_t vl53l0x_System_Settings(VL53L0X_Dev_t* dev){
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	// Device Mode
	VL53L0X_SetDeviceMode(dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8000862:	2101      	movs	r1, #1
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f003 fc6f 	bl	8004148 <VL53L0X_SetDeviceMode>

	// Polling and interrupt mode
	//VL53L0X_SetGpioConfig(dev, Pin, DeviceMode, Functionality, Polarity)

	// API range profiles
	vl53l0x_Range_Profiles(dev);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f806 	bl	800087c <vl53l0x_Range_Profiles>

	return 0;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <vl53l0x_Range_Profiles>:

uint8_t vl53l0x_Range_Profiles(VL53L0X_Dev_t* dev){
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8000884:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000888:	617b      	str	r3, [r7, #20]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800088a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800088e:	613b      	str	r3, [r7, #16]
	uint32_t timingBudget = 33000;
 8000890:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8000894:	60fb      	str	r3, [r7, #12]
	uint8_t preRangeVcselPeriod = 14;
 8000896:	230e      	movs	r3, #14
 8000898:	72fb      	strb	r3, [r7, #11]
	uint8_t finalRangeVcselPeriod = 10;
 800089a:	230a      	movs	r3, #10
 800089c:	72bb      	strb	r3, [r7, #10]
		timingBudget = 33000;
		preRangeVcselPeriod = 18;
		finalRangeVcselPeriod = 14;
		break;
	case HIGH_ACCURACY:
		signalLimit = (FixPoint1616_t)(0.25*65536);
 800089e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008a2:	617b      	str	r3, [r7, #20]
		sigmaLimit = (FixPoint1616_t)(18*65536);
 80008a4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008a8:	613b      	str	r3, [r7, #16]
		timingBudget = 200000;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <vl53l0x_Range_Profiles+0x7c>)
 80008ac:	60fb      	str	r3, [r7, #12]
		preRangeVcselPeriod = 14;
 80008ae:	230e      	movs	r3, #14
 80008b0:	72fb      	strb	r3, [r7, #11]
		finalRangeVcselPeriod = 10;
 80008b2:	230a      	movs	r3, #10
 80008b4:	72bb      	strb	r3, [r7, #10]
		break;
 80008b6:	bf00      	nop
		break;
	default:
		printf("Not Supported");
	}

	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	2101      	movs	r1, #1
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f003 ff8b 	bl	80047d8 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	2100      	movs	r1, #0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f003 ff86 	bl	80047d8 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(dev, timingBudget);
 80008cc:	68f9      	ldr	r1, [r7, #12]
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f003 fcb4 	bl	800423c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2100      	movs	r1, #0
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f003 fcd4 	bl	8004288 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 80008e0:	7abb      	ldrb	r3, [r7, #10]
 80008e2:	461a      	mov	r2, r3
 80008e4:	2101      	movs	r1, #1
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f003 fcce 	bl	8004288 <VL53L0X_SetVcselPulsePeriod>
}
 80008ec:	bf00      	nop
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	00030d40 	.word	0x00030d40

080008fc <vl53l0x_PerformMeasurement>:
	VL53L0X_PerformXTalkCalibration(dev, XTalkCalDistance, &XTalkCompensationRateMegaCps);

	return 0;
}

uint8_t vl53l0x_PerformMeasurement(VL53L0X_Dev_t* dev, VL53L0X_RangingMeasurementData_t* VL53L0X_RangingMeasurementData){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L0X_ERROR_NONE;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]

	VL53L0X_WaitDeviceReadyForNewMeasurement(dev, 100);
 800090a:	2164      	movs	r1, #100	; 0x64
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f004 fa34 	bl	8004d7a <VL53L0X_WaitDeviceReadyForNewMeasurement>

	if(VL53L0X_ERROR_NONE != (status = VL53L0X_GetRangingMeasurementData(dev, VL53L0X_RangingMeasurementData))){
 8000912:	6839      	ldr	r1, [r7, #0]
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f004 fa3f 	bl	8004d98 <VL53L0X_GetRangingMeasurementData>
 800091a:	4603      	mov	r3, r0
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d006      	beq.n	8000932 <vl53l0x_PerformMeasurement+0x36>
		printf("Error GetRangingMeasurementData() : %d\r\n",status);
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	4619      	mov	r1, r3
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <vl53l0x_PerformMeasurement+0x40>)
 800092a:	f008 f8e5 	bl	8008af8 <iprintf>
		return 1;
 800092e:	2301      	movs	r3, #1
 8000930:	e000      	b.n	8000934 <vl53l0x_PerformMeasurement+0x38>
	}

	return 0;
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	08009b50 	.word	0x08009b50

08000940 <vl53l0x_PerformRangingMeasurement>:

uint16_t vl53l0x_PerformRangingMeasurement(VL53L0X_Dev_t* dev){
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;

	vl53l0x_PerformMeasurement(dev, &VL53L0X_RangingMeasurementData);
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4619      	mov	r1, r3
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffd4 	bl	80008fc <vl53l0x_PerformMeasurement>

	return VL53L0X_RangingMeasurementData.RangeMilliMeter;
 8000954:	8abb      	ldrh	r3, [r7, #20]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <vl53l0x_SetDeviceAddress>:

uint8_t vl53l0x_SetDeviceAddress(VL53L0X_Dev_t* dev, uint8_t deviceAddress){
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	70fb      	strb	r3, [r7, #3]
	VL53L0X_SetDeviceAddress(dev, deviceAddress);
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	4619      	mov	r1, r3
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f003 f85b 	bl	8003a2a <VL53L0X_SetDeviceAddress>
	dev->I2cDevAddr = deviceAddress;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	78fa      	ldrb	r2, [r7, #3]
 8000978:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	return 0;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f000 fb22 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f8ae 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f7ff fe0a 	bl	80005b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800099c:	f000 fa80 	bl	8000ea0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009a0:	f7ff fe88 	bl	80006b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80009a4:	484e      	ldr	r0, [pc, #312]	; (8000ae0 <main+0x158>)
 80009a6:	f000 f917 	bl	8000bd8 <RetargetInit>
  printf("lib_vl53l0x\r\n");
 80009aa:	484e      	ldr	r0, [pc, #312]	; (8000ae4 <main+0x15c>)
 80009ac:	f008 f918 	bl	8008be0 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2101      	movs	r1, #1
 80009b4:	484c      	ldr	r0, [pc, #304]	; (8000ae8 <main+0x160>)
 80009b6:	f000 fe1b 	bl	80015f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2102      	movs	r1, #2
 80009be:	484a      	ldr	r0, [pc, #296]	; (8000ae8 <main+0x160>)
 80009c0:	f000 fe16 	bl	80015f0 <HAL_GPIO_WritePin>
  // PC_0 => XSHUT of sensor 1
  // PC_1 => XSHUT of sensor 2

  VL53L0X_Dev_t dev[nbOfSensors];

  for(int i=0; i<nbOfSensors; i++){
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80009ca:	e035      	b.n	8000a38 <main+0xb0>
	  dev[i].I2cHandle = &hi2c1;
 80009cc:	463a      	mov	r2, r7
 80009ce:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80009d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009d6:	fb01 f303 	mul.w	r3, r1, r3
 80009da:	4413      	add	r3, r2
 80009dc:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80009e0:	4a42      	ldr	r2, [pc, #264]	; (8000aec <main+0x164>)
 80009e2:	601a      	str	r2, [r3, #0]
	  dev[i].I2cDevAddr = 0x52;
 80009e4:	463a      	mov	r2, r7
 80009e6:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80009ea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009ee:	fb01 f303 	mul.w	r3, r1, r3
 80009f2:	4413      	add	r3, r2
 80009f4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80009f8:	2252      	movs	r2, #82	; 0x52
 80009fa:	701a      	strb	r2, [r3, #0]
	  dev[i].comms_speed_khz = 400;
 80009fc:	463a      	mov	r2, r7
 80009fe:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8000a02:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a06:	fb01 f303 	mul.w	r3, r1, r3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	f503 73bb 	add.w	r3, r3, #374	; 0x176
 8000a10:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a14:	801a      	strh	r2, [r3, #0]
	  dev[i].comms_type = 1;
 8000a16:	463a      	mov	r2, r7
 8000a18:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8000a1c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a20:	fb01 f303 	mul.w	r3, r1, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<nbOfSensors; i++){
 8000a2e:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8000a32:	3301      	adds	r3, #1
 8000a34:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8000a38:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	ddc5      	ble.n	80009cc <main+0x44>
  }

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2101      	movs	r1, #1
 8000a44:	4828      	ldr	r0, [pc, #160]	; (8000ae8 <main+0x160>)
 8000a46:	f000 fdd3 	bl	80015f0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000a4a:	20c8      	movs	r0, #200	; 0xc8
 8000a4c:	f000 fb36 	bl	80010bc <HAL_Delay>
  vl53l0x_Initialization_Flow(&dev[0]);
 8000a50:	463b      	mov	r3, r7
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fea4 	bl	80007a0 <vl53l0x_Initialization_Flow>
  vl53l0x_SetDeviceAddress(&dev[0], 0x55);
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2155      	movs	r1, #85	; 0x55
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff7e 	bl	800095e <vl53l0x_SetDeviceAddress>
  HAL_Delay(200);
 8000a62:	20c8      	movs	r0, #200	; 0xc8
 8000a64:	f000 fb2a 	bl	80010bc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <main+0x160>)
 8000a6e:	f000 fdbf 	bl	80015f0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000a72:	20c8      	movs	r0, #200	; 0xc8
 8000a74:	f000 fb22 	bl	80010bc <HAL_Delay>
  vl53l0x_Initialization_Flow(&dev[1]);
 8000a78:	463b      	mov	r3, r7
 8000a7a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fe8e 	bl	80007a0 <vl53l0x_Initialization_Flow>
  vl53l0x_SetDeviceAddress(&dev[1], 0x58);
 8000a84:	463b      	mov	r3, r7
 8000a86:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000a8a:	2158      	movs	r1, #88	; 0x58
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff66 	bl	800095e <vl53l0x_SetDeviceAddress>
  HAL_Delay(200);
 8000a92:	20c8      	movs	r0, #200	; 0xc8
 8000a94:	f000 fb12 	bl	80010bc <HAL_Delay>

  while (1)
  {
	  for(int i=0; i<nbOfSensors; i++){
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8000a9e:	e016      	b.n	8000ace <main+0x146>
		  printf("Sensor %d : %d\r\n",i, vl53l0x_PerformRangingMeasurement(&dev[i]));
 8000aa0:	463a      	mov	r2, r7
 8000aa2:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8000aa6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000aaa:	fb01 f303 	mul.w	r3, r1, r3
 8000aae:	4413      	add	r3, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff45 	bl	8000940 <vl53l0x_PerformRangingMeasurement>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	f8d7 1320 	ldr.w	r1, [r7, #800]	; 0x320
 8000abe:	480c      	ldr	r0, [pc, #48]	; (8000af0 <main+0x168>)
 8000ac0:	f008 f81a 	bl	8008af8 <iprintf>
	  for(int i=0; i<nbOfSensors; i++){
 8000ac4:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8000ac8:	3301      	adds	r3, #1
 8000aca:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8000ace:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	dde4      	ble.n	8000aa0 <main+0x118>
	  }
	  HAL_Delay(1000);
 8000ad6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ada:	f000 faef 	bl	80010bc <HAL_Delay>
	  for(int i=0; i<nbOfSensors; i++){
 8000ade:	e7db      	b.n	8000a98 <main+0x110>
 8000ae0:	200003ac 	.word	0x200003ac
 8000ae4:	08009b7c 	.word	0x08009b7c
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	20000354 	.word	0x20000354
 8000af0:	08009b8c 	.word	0x08009b8c

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b094      	sub	sp, #80	; 0x50
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	2234      	movs	r2, #52	; 0x34
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f007 ffef 	bl	8008ae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <SystemClock_Config+0xd4>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <SystemClock_Config+0xd4>)
 8000b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <SystemClock_Config+0xd4>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b34:	2300      	movs	r3, #0
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <SystemClock_Config+0xd8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <SystemClock_Config+0xd8>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <SystemClock_Config+0xd8>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	2302      	movs	r3, #2
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b72:	2304      	movs	r3, #4
 8000b74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 ff92 	bl	8002aac <HAL_RCC_OscConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b8e:	f000 f81f 	bl	8000bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b92:	230f      	movs	r3, #15
 8000b94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b96:	2302      	movs	r3, #2
 8000b98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	2102      	movs	r1, #2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fcc2 	bl	8002538 <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000bba:	f000 f809 	bl	8000bd0 <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3750      	adds	r7, #80	; 0x50
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <Error_Handler+0x6>

08000bd8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <RetargetInit+0x28>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <RetargetInit+0x2c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6898      	ldr	r0, [r3, #8]
 8000bec:	2300      	movs	r3, #0
 8000bee:	2202      	movs	r2, #2
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f007 fffd 	bl	8008bf0 <setvbuf>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200003a8 	.word	0x200003a8
 8000c04:	200002c8 	.word	0x200002c8

08000c08 <_isatty>:

int _isatty(int fd) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db04      	blt.n	8000c20 <_isatty+0x18>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	dc01      	bgt.n	8000c20 <_isatty+0x18>
    return 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e005      	b.n	8000c2c <_isatty+0x24>

  errno = EBADF;
 8000c20:	f007 ff2c 	bl	8008a7c <__errno>
 8000c24:	4602      	mov	r2, r0
 8000c26:	2309      	movs	r3, #9
 8000c28:	6013      	str	r3, [r2, #0]
  return 0;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_write>:

int _write(int fd, char* ptr, int len) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d002      	beq.n	8000c4c <_write+0x18>
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d111      	bne.n	8000c70 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <_write+0x54>)
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	f002 f9ce 	bl	8002ffa <HAL_UART_Transmit>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <_write+0x38>
      return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	e008      	b.n	8000c7e <_write+0x4a>
    else
      return EIO;
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	e006      	b.n	8000c7e <_write+0x4a>
  }
  errno = EBADF;
 8000c70:	f007 ff04 	bl	8008a7c <__errno>
 8000c74:	4602      	mov	r2, r0
 8000c76:	2309      	movs	r3, #9
 8000c78:	6013      	str	r3, [r2, #0]
  return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200003a8 	.word	0x200003a8

08000c8c <_close>:

int _close(int fd) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db04      	blt.n	8000ca4 <_close+0x18>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	dc01      	bgt.n	8000ca4 <_close+0x18>
    return 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e006      	b.n	8000cb2 <_close+0x26>

  errno = EBADF;
 8000ca4:	f007 feea 	bl	8008a7c <__errno>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	2309      	movs	r3, #9
 8000cac:	6013      	str	r3, [r2, #0]
  return -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000cc6:	f007 fed9 	bl	8008a7c <__errno>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	2309      	movs	r3, #9
 8000cce:	6013      	str	r3, [r2, #0]
  return -1;
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_read>:

int _read(int fd, char* ptr, int len) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d110      	bne.n	8000d10 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <_read+0x4c>)
 8000cf0:	6818      	ldr	r0, [r3, #0]
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	f002 fa17 	bl	800312c <HAL_UART_Receive>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d02:	7dfb      	ldrb	r3, [r7, #23]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <_read+0x30>
      return 1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e008      	b.n	8000d1e <_read+0x42>
    else
      return EIO;
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	e006      	b.n	8000d1e <_read+0x42>
  }
  errno = EBADF;
 8000d10:	f007 feb4 	bl	8008a7c <__errno>
 8000d14:	4602      	mov	r2, r0
 8000d16:	2309      	movs	r3, #9
 8000d18:	6013      	str	r3, [r2, #0]
  return -1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200003a8 	.word	0x200003a8

08000d2c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db08      	blt.n	8000d4e <_fstat+0x22>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	dc05      	bgt.n	8000d4e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d48:	605a      	str	r2, [r3, #4]
    return 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e005      	b.n	8000d5a <_fstat+0x2e>
  }

  errno = EBADF;
 8000d4e:	f007 fe95 	bl	8008a7c <__errno>
 8000d52:	4602      	mov	r2, r0
 8000d54:	2309      	movs	r3, #9
 8000d56:	6013      	str	r3, [r2, #0]
  return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000da2:	2007      	movs	r0, #7
 8000da4:	f000 fa5e 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40023800 	.word	0x40023800

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <NMI_Handler+0x4>

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 f93c 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e10:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <_sbrk+0x5c>)
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <_sbrk+0x60>)
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <_sbrk+0x64>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <_sbrk+0x68>)
 8000e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d207      	bcs.n	8000e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e38:	f007 fe20 	bl	8008a7c <__errno>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	230c      	movs	r3, #12
 8000e40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	e009      	b.n	8000e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <_sbrk+0x64>)
 8000e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20020000 	.word	0x20020000
 8000e68:	00000400 	.word	0x00000400
 8000e6c:	20000348 	.word	0x20000348
 8000e70:	20000438 	.word	0x20000438

08000e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <SystemInit+0x28>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7e:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <SystemInit+0x28>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SystemInit+0x28>)
 8000e8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <MX_USART2_UART_Init+0x50>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000eac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_USART2_UART_Init+0x4c>)
 8000ed8:	f002 f842 	bl	8002f60 <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ee2:	f7ff fe75 	bl	8000bd0 <Error_Handler>
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200003ac 	.word	0x200003ac
 8000ef0:	40004400 	.word	0x40004400

08000ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <HAL_UART_MspInit+0x84>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d12b      	bne.n	8000f6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f4e:	230c      	movs	r3, #12
 8000f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <HAL_UART_MspInit+0x8c>)
 8000f6a:	f000 f9af 	bl	80012cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000

08000f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f8a:	e003      	b.n	8000f94 <LoopCopyDataInit>

08000f8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f92:	3104      	adds	r1, #4

08000f94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f9c:	d3f6      	bcc.n	8000f8c <CopyDataInit>
  ldr  r2, =_sbss
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fa0:	e002      	b.n	8000fa8 <LoopFillZerobss>

08000fa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fa4:	f842 3b04 	str.w	r3, [r2], #4

08000fa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000faa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fac:	d3f9      	bcc.n	8000fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fae:	f7ff ff61 	bl	8000e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f007 fd69 	bl	8008a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb6:	f7ff fce7 	bl	8000988 <main>
  bx  lr    
 8000fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fc0:	08009c60 	.word	0x08009c60
  ldr  r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fc8:	2000032c 	.word	0x2000032c
  ldr  r2, =_sbss
 8000fcc:	2000032c 	.word	0x2000032c
  ldr  r3, = _ebss
 8000fd0:	20000434 	.word	0x20000434

08000fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <HAL_Init+0x40>)
 8000fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_Init+0x40>)
 8000fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_Init+0x40>)
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f92f 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff feaa 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023c00 	.word	0x40023c00

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f939 	bl	80012b2 <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f90f 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	200003ec 	.word	0x200003ec

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	200003ec 	.word	0x200003ec

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_Delay+0x40>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000008 	.word	0x20000008

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	; (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff47 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff5c 	bl	8001148 <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff8e 	bl	80011b8 <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffb0 	bl	8001220 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e165      	b.n	80015b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 8154 	bne.w	80015ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d00b      	beq.n	8001326 <HAL_GPIO_Init+0x5a>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131a:	2b11      	cmp	r3, #17
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b12      	cmp	r3, #18
 8001324:	d130      	bne.n	8001388 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 0201 	and.w	r2, r3, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0xfc>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b12      	cmp	r3, #18
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80ae 	beq.w	80015ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b5c      	ldr	r3, [pc, #368]	; (80015c8 <HAL_GPIO_Init+0x2fc>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a5b      	ldr	r2, [pc, #364]	; (80015c8 <HAL_GPIO_Init+0x2fc>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <HAL_GPIO_Init+0x2fc>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146e:	4a57      	ldr	r2, [pc, #348]	; (80015cc <HAL_GPIO_Init+0x300>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <HAL_GPIO_Init+0x304>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d025      	beq.n	80014e6 <HAL_GPIO_Init+0x21a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4d      	ldr	r2, [pc, #308]	; (80015d4 <HAL_GPIO_Init+0x308>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01f      	beq.n	80014e2 <HAL_GPIO_Init+0x216>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x212>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4b      	ldr	r2, [pc, #300]	; (80015dc <HAL_GPIO_Init+0x310>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x20e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4a      	ldr	r2, [pc, #296]	; (80015e0 <HAL_GPIO_Init+0x314>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x20a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a49      	ldr	r2, [pc, #292]	; (80015e4 <HAL_GPIO_Init+0x318>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x206>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a48      	ldr	r2, [pc, #288]	; (80015e8 <HAL_GPIO_Init+0x31c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x202>
 80014ca:	2306      	movs	r3, #6
 80014cc:	e00c      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014ce:	2307      	movs	r3, #7
 80014d0:	e00a      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014d2:	2305      	movs	r3, #5
 80014d4:	e008      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014d6:	2304      	movs	r3, #4
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014da:	2303      	movs	r3, #3
 80014dc:	e004      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014de:	2302      	movs	r3, #2
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014e6:	2300      	movs	r3, #0
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	f002 0203 	and.w	r2, r2, #3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4093      	lsls	r3, r2
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f8:	4934      	ldr	r1, [pc, #208]	; (80015cc <HAL_GPIO_Init+0x300>)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <HAL_GPIO_Init+0x320>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800152a:	4a30      	ldr	r2, [pc, #192]	; (80015ec <HAL_GPIO_Init+0x320>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001530:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <HAL_GPIO_Init+0x320>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001554:	4a25      	ldr	r2, [pc, #148]	; (80015ec <HAL_GPIO_Init+0x320>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_GPIO_Init+0x320>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800157e:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <HAL_GPIO_Init+0x320>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_GPIO_Init+0x320>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a8:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_GPIO_Init+0x320>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3301      	adds	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	f67f ae96 	bls.w	80012e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015bc:	bf00      	nop
 80015be:	3724      	adds	r7, #36	; 0x24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40013800 	.word	0x40013800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020800 	.word	0x40020800
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40021400 	.word	0x40021400
 80015e8:	40021800 	.word	0x40021800
 80015ec:	40013c00 	.word	0x40013c00

080015f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
 80015fc:	4613      	mov	r3, r2
 80015fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001600:	787b      	ldrb	r3, [r7, #1]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001606:	887a      	ldrh	r2, [r7, #2]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800160c:	e003      	b.n	8001616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800160e:	887b      	ldrh	r3, [r7, #2]
 8001610:	041a      	lsls	r2, r3, #16
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	619a      	str	r2, [r3, #24]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e11f      	b.n	8001876 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d106      	bne.n	8001650 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff f860 	bl	8000710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2224      	movs	r2, #36	; 0x24
 8001654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001676:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001686:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001688:	f001 f848 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 800168c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4a7b      	ldr	r2, [pc, #492]	; (8001880 <HAL_I2C_Init+0x25c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d807      	bhi.n	80016a8 <HAL_I2C_Init+0x84>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4a7a      	ldr	r2, [pc, #488]	; (8001884 <HAL_I2C_Init+0x260>)
 800169c:	4293      	cmp	r3, r2
 800169e:	bf94      	ite	ls
 80016a0:	2301      	movls	r3, #1
 80016a2:	2300      	movhi	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	e006      	b.n	80016b6 <HAL_I2C_Init+0x92>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4a77      	ldr	r2, [pc, #476]	; (8001888 <HAL_I2C_Init+0x264>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	bf94      	ite	ls
 80016b0:	2301      	movls	r3, #1
 80016b2:	2300      	movhi	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0db      	b.n	8001876 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4a72      	ldr	r2, [pc, #456]	; (800188c <HAL_I2C_Init+0x268>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0c9b      	lsrs	r3, r3, #18
 80016c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	430a      	orrs	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a64      	ldr	r2, [pc, #400]	; (8001880 <HAL_I2C_Init+0x25c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d802      	bhi.n	80016f8 <HAL_I2C_Init+0xd4>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	3301      	adds	r3, #1
 80016f6:	e009      	b.n	800170c <HAL_I2C_Init+0xe8>
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	4a63      	ldr	r2, [pc, #396]	; (8001890 <HAL_I2C_Init+0x26c>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	099b      	lsrs	r3, r3, #6
 800170a:	3301      	adds	r3, #1
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	430b      	orrs	r3, r1
 8001712:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800171e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4956      	ldr	r1, [pc, #344]	; (8001880 <HAL_I2C_Init+0x25c>)
 8001728:	428b      	cmp	r3, r1
 800172a:	d80d      	bhi.n	8001748 <HAL_I2C_Init+0x124>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1e59      	subs	r1, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fbb1 f3f3 	udiv	r3, r1, r3
 800173a:	3301      	adds	r3, #1
 800173c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001740:	2b04      	cmp	r3, #4
 8001742:	bf38      	it	cc
 8001744:	2304      	movcc	r3, #4
 8001746:	e04f      	b.n	80017e8 <HAL_I2C_Init+0x1c4>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d111      	bne.n	8001774 <HAL_I2C_Init+0x150>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1e58      	subs	r0, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6859      	ldr	r1, [r3, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	440b      	add	r3, r1
 800175e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001762:	3301      	adds	r3, #1
 8001764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001768:	2b00      	cmp	r3, #0
 800176a:	bf0c      	ite	eq
 800176c:	2301      	moveq	r3, #1
 800176e:	2300      	movne	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	e012      	b.n	800179a <HAL_I2C_Init+0x176>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1e58      	subs	r0, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6859      	ldr	r1, [r3, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	0099      	lsls	r1, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	fbb0 f3f3 	udiv	r3, r0, r3
 800178a:	3301      	adds	r3, #1
 800178c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf0c      	ite	eq
 8001794:	2301      	moveq	r3, #1
 8001796:	2300      	movne	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_I2C_Init+0x17e>
 800179e:	2301      	movs	r3, #1
 80017a0:	e022      	b.n	80017e8 <HAL_I2C_Init+0x1c4>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10e      	bne.n	80017c8 <HAL_I2C_Init+0x1a4>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1e58      	subs	r0, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	440b      	add	r3, r1
 80017b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c6:	e00f      	b.n	80017e8 <HAL_I2C_Init+0x1c4>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1e58      	subs	r0, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6859      	ldr	r1, [r3, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	0099      	lsls	r1, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	fbb0 f3f3 	udiv	r3, r0, r3
 80017de:	3301      	adds	r3, #1
 80017e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	6809      	ldr	r1, [r1, #0]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001816:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6911      	ldr	r1, [r2, #16]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68d2      	ldr	r2, [r2, #12]
 8001822:	4311      	orrs	r1, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	430b      	orrs	r3, r1
 800182a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2220      	movs	r2, #32
 8001862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	000186a0 	.word	0x000186a0
 8001884:	001e847f 	.word	0x001e847f
 8001888:	003d08ff 	.word	0x003d08ff
 800188c:	431bde83 	.word	0x431bde83
 8001890:	10624dd3 	.word	0x10624dd3

08001894 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af02      	add	r7, sp, #8
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	461a      	mov	r2, r3
 80018a0:	460b      	mov	r3, r1
 80018a2:	817b      	strh	r3, [r7, #10]
 80018a4:	4613      	mov	r3, r2
 80018a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff fbfc 	bl	80010a4 <HAL_GetTick>
 80018ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	f040 80e0 	bne.w	8001a7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2319      	movs	r3, #25
 80018c2:	2201      	movs	r2, #1
 80018c4:	4970      	ldr	r1, [pc, #448]	; (8001a88 <HAL_I2C_Master_Transmit+0x1f4>)
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 fc58 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018d2:	2302      	movs	r3, #2
 80018d4:	e0d3      	b.n	8001a7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_I2C_Master_Transmit+0x50>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e0cc      	b.n	8001a7e <HAL_I2C_Master_Transmit+0x1ea>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d007      	beq.n	800190a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f042 0201 	orr.w	r2, r2, #1
 8001908:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001918:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2221      	movs	r2, #33	; 0x21
 800191e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2210      	movs	r2, #16
 8001926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	893a      	ldrh	r2, [r7, #8]
 800193a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4a50      	ldr	r2, [pc, #320]	; (8001a8c <HAL_I2C_Master_Transmit+0x1f8>)
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800194c:	8979      	ldrh	r1, [r7, #10]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	6a3a      	ldr	r2, [r7, #32]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 fac2 	bl	8001edc <I2C_MasterRequestWrite>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e08d      	b.n	8001a7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001978:	e066      	b.n	8001a48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	6a39      	ldr	r1, [r7, #32]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 fcd2 	bl	8002328 <I2C_WaitOnTXEFlagUntilTimeout>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00d      	beq.n	80019a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	2b04      	cmp	r3, #4
 8001990:	d107      	bne.n	80019a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e06b      	b.n	8001a7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d11b      	bne.n	8001a1c <HAL_I2C_Master_Transmit+0x188>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d017      	beq.n	8001a1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	781a      	ldrb	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a14:	3b01      	subs	r3, #1
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	6a39      	ldr	r1, [r7, #32]
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 fcc2 	bl	80023aa <I2C_WaitOnBTFFlagUntilTimeout>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00d      	beq.n	8001a48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d107      	bne.n	8001a44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e01a      	b.n	8001a7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d194      	bne.n	800197a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a7c:	2302      	movs	r3, #2
  }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	00100002 	.word	0x00100002
 8001a8c:	ffff0000 	.word	0xffff0000

08001a90 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	; 0x30
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	817b      	strh	r3, [r7, #10]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff fafe 	bl	80010a4 <HAL_GetTick>
 8001aa8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	f040 820b 	bne.w	8001ece <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	2319      	movs	r3, #25
 8001abe:	2201      	movs	r2, #1
 8001ac0:	497c      	ldr	r1, [pc, #496]	; (8001cb4 <HAL_I2C_Master_Receive+0x224>)
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 fb5a 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e1fe      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_I2C_Master_Receive+0x50>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e1f7      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x440>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d007      	beq.n	8001b06 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2222      	movs	r2, #34	; 0x22
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2210      	movs	r2, #16
 8001b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	893a      	ldrh	r2, [r7, #8]
 8001b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4a5c      	ldr	r2, [pc, #368]	; (8001cb8 <HAL_I2C_Master_Receive+0x228>)
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b48:	8979      	ldrh	r1, [r7, #10]
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fa46 	bl	8001fe0 <I2C_MasterRequestRead>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1b8      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d113      	bne.n	8001b8e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	623b      	str	r3, [r7, #32]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	623b      	str	r3, [r7, #32]
 8001b7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e18c      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d11b      	bne.n	8001bce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e16c      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d11b      	bne.n	8001c0e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	e14c      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c34:	e138      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	f200 80f1 	bhi.w	8001e22 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d123      	bne.n	8001c90 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 fbed 	bl	800242c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e139      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c8e:	e10b      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d14e      	bne.n	8001d36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	4906      	ldr	r1, [pc, #24]	; (8001cbc <HAL_I2C_Master_Receive+0x22c>)
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 fa6a 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e10e      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x440>
 8001cb2:	bf00      	nop
 8001cb4:	00100002 	.word	0x00100002
 8001cb8:	ffff0000 	.word	0xffff0000
 8001cbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d34:	e0b8      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4966      	ldr	r1, [pc, #408]	; (8001ed8 <HAL_I2C_Master_Receive+0x448>)
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 fa1b 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0bf      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d98:	2200      	movs	r2, #0
 8001d9a:	494f      	ldr	r1, [pc, #316]	; (8001ed8 <HAL_I2C_Master_Receive+0x448>)
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f9ed 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e091      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e20:	e042      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 fb00 	bl	800242c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e04c      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d118      	bne.n	8001ea8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f47f aec2 	bne.w	8001c36 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3728      	adds	r7, #40	; 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	00010004 	.word	0x00010004

08001edc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d006      	beq.n	8001f06 <I2C_MasterRequestWrite+0x2a>
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d003      	beq.n	8001f06 <I2C_MasterRequestWrite+0x2a>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f04:	d108      	bne.n	8001f18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e00b      	b.n	8001f30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	2b12      	cmp	r3, #18
 8001f1e:	d107      	bne.n	8001f30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f91d 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00d      	beq.n	8001f64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f56:	d103      	bne.n	8001f60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e035      	b.n	8001fd0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f6c:	d108      	bne.n	8001f80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f6e:	897b      	ldrh	r3, [r7, #10]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f7c:	611a      	str	r2, [r3, #16]
 8001f7e:	e01b      	b.n	8001fb8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f80:	897b      	ldrh	r3, [r7, #10]
 8001f82:	11db      	asrs	r3, r3, #7
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f003 0306 	and.w	r3, r3, #6
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f063 030f 	orn	r3, r3, #15
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	490e      	ldr	r1, [pc, #56]	; (8001fd8 <I2C_MasterRequestWrite+0xfc>)
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f943 	bl	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e010      	b.n	8001fd0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fae:	897b      	ldrh	r3, [r7, #10]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4907      	ldr	r1, [pc, #28]	; (8001fdc <I2C_MasterRequestWrite+0x100>)
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f933 	bl	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	00010008 	.word	0x00010008
 8001fdc:	00010002 	.word	0x00010002

08001fe0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002004:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d006      	beq.n	800201a <I2C_MasterRequestRead+0x3a>
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d003      	beq.n	800201a <I2C_MasterRequestRead+0x3a>
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002018:	d108      	bne.n	800202c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e00b      	b.n	8002044 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	2b11      	cmp	r3, #17
 8002032:	d107      	bne.n	8002044 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002042:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f893 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00d      	beq.n	8002078 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800206a:	d103      	bne.n	8002074 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e079      	b.n	800216c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002080:	d108      	bne.n	8002094 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002082:	897b      	ldrh	r3, [r7, #10]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	b2da      	uxtb	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	611a      	str	r2, [r3, #16]
 8002092:	e05f      	b.n	8002154 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002094:	897b      	ldrh	r3, [r7, #10]
 8002096:	11db      	asrs	r3, r3, #7
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f003 0306 	and.w	r3, r3, #6
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f063 030f 	orn	r3, r3, #15
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4930      	ldr	r1, [pc, #192]	; (8002174 <I2C_MasterRequestRead+0x194>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f8b9 	bl	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e054      	b.n	800216c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020c2:	897b      	ldrh	r3, [r7, #10]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4929      	ldr	r1, [pc, #164]	; (8002178 <I2C_MasterRequestRead+0x198>)
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f8a9 	bl	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e044      	b.n	800216c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002106:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f831 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00d      	beq.n	800213c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800212e:	d103      	bne.n	8002138 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e017      	b.n	800216c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800213c:	897b      	ldrh	r3, [r7, #10]
 800213e:	11db      	asrs	r3, r3, #7
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 0306 	and.w	r3, r3, #6
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f063 030e 	orn	r3, r3, #14
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <I2C_MasterRequestRead+0x198>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f865 	bl	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	00010008 	.word	0x00010008
 8002178:	00010002 	.word	0x00010002

0800217c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800218c:	e025      	b.n	80021da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d021      	beq.n	80021da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002196:	f7fe ff85 	bl	80010a4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d302      	bcc.n	80021ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d116      	bne.n	80021da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f043 0220 	orr.w	r2, r3, #32
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e023      	b.n	8002222 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d10d      	bne.n	8002200 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4013      	ands	r3, r2
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf0c      	ite	eq
 80021f6:	2301      	moveq	r3, #1
 80021f8:	2300      	movne	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	e00c      	b.n	800221a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4013      	ands	r3, r2
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf0c      	ite	eq
 8002212:	2301      	moveq	r3, #1
 8002214:	2300      	movne	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	429a      	cmp	r2, r3
 800221e:	d0b6      	beq.n	800218e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002238:	e051      	b.n	80022de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002248:	d123      	bne.n	8002292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002258:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002262:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f043 0204 	orr.w	r2, r3, #4
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e046      	b.n	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d021      	beq.n	80022de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229a:	f7fe ff03 	bl	80010a4 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d302      	bcc.n	80022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d116      	bne.n	80022de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e020      	b.n	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d10c      	bne.n	8002302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	43da      	mvns	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4013      	ands	r3, r2
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf14      	ite	ne
 80022fa:	2301      	movne	r3, #1
 80022fc:	2300      	moveq	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	e00b      	b.n	800231a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	43da      	mvns	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4013      	ands	r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf14      	ite	ne
 8002314:	2301      	movne	r3, #1
 8002316:	2300      	moveq	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d18d      	bne.n	800223a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002334:	e02d      	b.n	8002392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f8ce 	bl	80024d8 <I2C_IsAcknowledgeFailed>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e02d      	b.n	80023a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d021      	beq.n	8002392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234e:	f7fe fea9 	bl	80010a4 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	429a      	cmp	r2, r3
 800235c:	d302      	bcc.n	8002364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d116      	bne.n	8002392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f043 0220 	orr.w	r2, r3, #32
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e007      	b.n	80023a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239c:	2b80      	cmp	r3, #128	; 0x80
 800239e:	d1ca      	bne.n	8002336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023b6:	e02d      	b.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f88d 	bl	80024d8 <I2C_IsAcknowledgeFailed>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e02d      	b.n	8002424 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ce:	d021      	beq.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d0:	f7fe fe68 	bl	80010a4 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d302      	bcc.n	80023e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d116      	bne.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f043 0220 	orr.w	r2, r3, #32
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e007      	b.n	8002424 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b04      	cmp	r3, #4
 8002420:	d1ca      	bne.n	80023b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002438:	e042      	b.n	80024c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b10      	cmp	r3, #16
 8002446:	d119      	bne.n	800247c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0210 	mvn.w	r2, #16
 8002450:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e029      	b.n	80024d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247c:	f7fe fe12 	bl	80010a4 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	429a      	cmp	r2, r3
 800248a:	d302      	bcc.n	8002492 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d116      	bne.n	80024c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0220 	orr.w	r2, r3, #32
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e007      	b.n	80024d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ca:	2b40      	cmp	r3, #64	; 0x40
 80024cc:	d1b5      	bne.n	800243a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ee:	d11b      	bne.n	8002528 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f043 0204 	orr.w	r2, r3, #4
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0cc      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b68      	ldr	r3, [pc, #416]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d90c      	bls.n	8002574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b65      	ldr	r3, [pc, #404]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b63      	ldr	r3, [pc, #396]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0b8      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800258c:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a4:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	494d      	ldr	r1, [pc, #308]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d044      	beq.n	8002658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d119      	bne.n	8002616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e07f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f6:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002606:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e067      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002616:	4b37      	ldr	r3, [pc, #220]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f023 0203 	bic.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4934      	ldr	r1, [pc, #208]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002628:	f7fe fd3c 	bl	80010a4 <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	e00a      	b.n	8002646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002630:	f7fe fd38 	bl	80010a4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	; 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e04f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 020c 	and.w	r2, r3, #12
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	429a      	cmp	r2, r3
 8002656:	d1eb      	bne.n	8002630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d20c      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e032      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4916      	ldr	r1, [pc, #88]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	490e      	ldr	r1, [pc, #56]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026be:	f000 f855 	bl	800276c <HAL_RCC_GetSysClockFreq>
 80026c2:	4601      	mov	r1, r0
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	5cd3      	ldrb	r3, [r2, r3]
 80026d2:	fa21 f303 	lsr.w	r3, r1, r3
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fc9c 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023c00 	.word	0x40023c00
 80026f4:	40023800 	.word	0x40023800
 80026f8:	08009ba0 	.word	0x08009ba0
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000004 	.word	0x20000004

08002704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_RCC_GetHCLKFreq+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002720:	f7ff fff0 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002724:	4601      	mov	r1, r0
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	0a9b      	lsrs	r3, r3, #10
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4a03      	ldr	r2, [pc, #12]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002732:	5cd3      	ldrb	r3, [r2, r3]
 8002734:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	08009bb0 	.word	0x08009bb0

08002744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002748:	f7ff ffdc 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 800274c:	4601      	mov	r1, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0b5b      	lsrs	r3, r3, #13
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4a03      	ldr	r2, [pc, #12]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	08009bb0 	.word	0x08009bb0

0800276c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800276c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002786:	4bc6      	ldr	r3, [pc, #792]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b0c      	cmp	r3, #12
 8002790:	f200 817e 	bhi.w	8002a90 <HAL_RCC_GetSysClockFreq+0x324>
 8002794:	a201      	add	r2, pc, #4	; (adr r2, 800279c <HAL_RCC_GetSysClockFreq+0x30>)
 8002796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279a:	bf00      	nop
 800279c:	080027d1 	.word	0x080027d1
 80027a0:	08002a91 	.word	0x08002a91
 80027a4:	08002a91 	.word	0x08002a91
 80027a8:	08002a91 	.word	0x08002a91
 80027ac:	080027d7 	.word	0x080027d7
 80027b0:	08002a91 	.word	0x08002a91
 80027b4:	08002a91 	.word	0x08002a91
 80027b8:	08002a91 	.word	0x08002a91
 80027bc:	080027dd 	.word	0x080027dd
 80027c0:	08002a91 	.word	0x08002a91
 80027c4:	08002a91 	.word	0x08002a91
 80027c8:	08002a91 	.word	0x08002a91
 80027cc:	08002939 	.word	0x08002939
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d0:	4bb4      	ldr	r3, [pc, #720]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x338>)
 80027d2:	613b      	str	r3, [r7, #16]
       break;
 80027d4:	e15f      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d6:	4bb4      	ldr	r3, [pc, #720]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x33c>)
 80027d8:	613b      	str	r3, [r7, #16]
      break;
 80027da:	e15c      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027dc:	4bb0      	ldr	r3, [pc, #704]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x334>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e6:	4bae      	ldr	r3, [pc, #696]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x334>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d04a      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f2:	4bab      	ldr	r3, [pc, #684]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x334>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	f04f 0400 	mov.w	r4, #0
 80027fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	ea03 0501 	and.w	r5, r3, r1
 8002808:	ea04 0602 	and.w	r6, r4, r2
 800280c:	4629      	mov	r1, r5
 800280e:	4632      	mov	r2, r6
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	f04f 0400 	mov.w	r4, #0
 8002818:	0154      	lsls	r4, r2, #5
 800281a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800281e:	014b      	lsls	r3, r1, #5
 8002820:	4619      	mov	r1, r3
 8002822:	4622      	mov	r2, r4
 8002824:	1b49      	subs	r1, r1, r5
 8002826:	eb62 0206 	sbc.w	r2, r2, r6
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	f04f 0400 	mov.w	r4, #0
 8002832:	0194      	lsls	r4, r2, #6
 8002834:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002838:	018b      	lsls	r3, r1, #6
 800283a:	1a5b      	subs	r3, r3, r1
 800283c:	eb64 0402 	sbc.w	r4, r4, r2
 8002840:	f04f 0100 	mov.w	r1, #0
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	00e2      	lsls	r2, r4, #3
 800284a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800284e:	00d9      	lsls	r1, r3, #3
 8002850:	460b      	mov	r3, r1
 8002852:	4614      	mov	r4, r2
 8002854:	195b      	adds	r3, r3, r5
 8002856:	eb44 0406 	adc.w	r4, r4, r6
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	0262      	lsls	r2, r4, #9
 8002864:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002868:	0259      	lsls	r1, r3, #9
 800286a:	460b      	mov	r3, r1
 800286c:	4614      	mov	r4, r2
 800286e:	4618      	mov	r0, r3
 8002870:	4621      	mov	r1, r4
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f04f 0400 	mov.w	r4, #0
 8002878:	461a      	mov	r2, r3
 800287a:	4623      	mov	r3, r4
 800287c:	f7fd fd18 	bl	80002b0 <__aeabi_uldivmod>
 8002880:	4603      	mov	r3, r0
 8002882:	460c      	mov	r4, r1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e049      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002888:	4b85      	ldr	r3, [pc, #532]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x334>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	f04f 0400 	mov.w	r4, #0
 8002892:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	ea03 0501 	and.w	r5, r3, r1
 800289e:	ea04 0602 	and.w	r6, r4, r2
 80028a2:	4629      	mov	r1, r5
 80028a4:	4632      	mov	r2, r6
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	f04f 0400 	mov.w	r4, #0
 80028ae:	0154      	lsls	r4, r2, #5
 80028b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028b4:	014b      	lsls	r3, r1, #5
 80028b6:	4619      	mov	r1, r3
 80028b8:	4622      	mov	r2, r4
 80028ba:	1b49      	subs	r1, r1, r5
 80028bc:	eb62 0206 	sbc.w	r2, r2, r6
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	f04f 0400 	mov.w	r4, #0
 80028c8:	0194      	lsls	r4, r2, #6
 80028ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028ce:	018b      	lsls	r3, r1, #6
 80028d0:	1a5b      	subs	r3, r3, r1
 80028d2:	eb64 0402 	sbc.w	r4, r4, r2
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	00e2      	lsls	r2, r4, #3
 80028e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028e4:	00d9      	lsls	r1, r3, #3
 80028e6:	460b      	mov	r3, r1
 80028e8:	4614      	mov	r4, r2
 80028ea:	195b      	adds	r3, r3, r5
 80028ec:	eb44 0406 	adc.w	r4, r4, r6
 80028f0:	f04f 0100 	mov.w	r1, #0
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	02a2      	lsls	r2, r4, #10
 80028fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80028fe:	0299      	lsls	r1, r3, #10
 8002900:	460b      	mov	r3, r1
 8002902:	4614      	mov	r4, r2
 8002904:	4618      	mov	r0, r3
 8002906:	4621      	mov	r1, r4
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f04f 0400 	mov.w	r4, #0
 800290e:	461a      	mov	r2, r3
 8002910:	4623      	mov	r3, r4
 8002912:	f7fd fccd 	bl	80002b0 <__aeabi_uldivmod>
 8002916:	4603      	mov	r3, r0
 8002918:	460c      	mov	r4, r1
 800291a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800291c:	4b60      	ldr	r3, [pc, #384]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x334>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	3301      	adds	r3, #1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	613b      	str	r3, [r7, #16]
      break;
 8002936:	e0ae      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x334>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002940:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002942:	4b57      	ldr	r3, [pc, #348]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d04a      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294e:	4b54      	ldr	r3, [pc, #336]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	099b      	lsrs	r3, r3, #6
 8002954:	f04f 0400 	mov.w	r4, #0
 8002958:	f240 11ff 	movw	r1, #511	; 0x1ff
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	ea03 0501 	and.w	r5, r3, r1
 8002964:	ea04 0602 	and.w	r6, r4, r2
 8002968:	4629      	mov	r1, r5
 800296a:	4632      	mov	r2, r6
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	f04f 0400 	mov.w	r4, #0
 8002974:	0154      	lsls	r4, r2, #5
 8002976:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800297a:	014b      	lsls	r3, r1, #5
 800297c:	4619      	mov	r1, r3
 800297e:	4622      	mov	r2, r4
 8002980:	1b49      	subs	r1, r1, r5
 8002982:	eb62 0206 	sbc.w	r2, r2, r6
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	f04f 0400 	mov.w	r4, #0
 800298e:	0194      	lsls	r4, r2, #6
 8002990:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002994:	018b      	lsls	r3, r1, #6
 8002996:	1a5b      	subs	r3, r3, r1
 8002998:	eb64 0402 	sbc.w	r4, r4, r2
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	00e2      	lsls	r2, r4, #3
 80029a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029aa:	00d9      	lsls	r1, r3, #3
 80029ac:	460b      	mov	r3, r1
 80029ae:	4614      	mov	r4, r2
 80029b0:	195b      	adds	r3, r3, r5
 80029b2:	eb44 0406 	adc.w	r4, r4, r6
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	0262      	lsls	r2, r4, #9
 80029c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029c4:	0259      	lsls	r1, r3, #9
 80029c6:	460b      	mov	r3, r1
 80029c8:	4614      	mov	r4, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	4621      	mov	r1, r4
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f04f 0400 	mov.w	r4, #0
 80029d4:	461a      	mov	r2, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	f7fd fc6a 	bl	80002b0 <__aeabi_uldivmod>
 80029dc:	4603      	mov	r3, r0
 80029de:	460c      	mov	r4, r1
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	e049      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e4:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x334>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	099b      	lsrs	r3, r3, #6
 80029ea:	f04f 0400 	mov.w	r4, #0
 80029ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	ea03 0501 	and.w	r5, r3, r1
 80029fa:	ea04 0602 	and.w	r6, r4, r2
 80029fe:	4629      	mov	r1, r5
 8002a00:	4632      	mov	r2, r6
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f04f 0400 	mov.w	r4, #0
 8002a0a:	0154      	lsls	r4, r2, #5
 8002a0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a10:	014b      	lsls	r3, r1, #5
 8002a12:	4619      	mov	r1, r3
 8002a14:	4622      	mov	r2, r4
 8002a16:	1b49      	subs	r1, r1, r5
 8002a18:	eb62 0206 	sbc.w	r2, r2, r6
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	f04f 0400 	mov.w	r4, #0
 8002a24:	0194      	lsls	r4, r2, #6
 8002a26:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a2a:	018b      	lsls	r3, r1, #6
 8002a2c:	1a5b      	subs	r3, r3, r1
 8002a2e:	eb64 0402 	sbc.w	r4, r4, r2
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	00e2      	lsls	r2, r4, #3
 8002a3c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a40:	00d9      	lsls	r1, r3, #3
 8002a42:	460b      	mov	r3, r1
 8002a44:	4614      	mov	r4, r2
 8002a46:	195b      	adds	r3, r3, r5
 8002a48:	eb44 0406 	adc.w	r4, r4, r6
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	02a2      	lsls	r2, r4, #10
 8002a56:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a5a:	0299      	lsls	r1, r3, #10
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4614      	mov	r4, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	4621      	mov	r1, r4
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f04f 0400 	mov.w	r4, #0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	f7fd fc1f 	bl	80002b0 <__aeabi_uldivmod>
 8002a72:	4603      	mov	r3, r0
 8002a74:	460c      	mov	r4, r1
 8002a76:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0f1b      	lsrs	r3, r3, #28
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	613b      	str	r3, [r7, #16]
      break;
 8002a8e:	e002      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x338>)
 8002a92:	613b      	str	r3, [r7, #16]
      break;
 8002a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a96:	693b      	ldr	r3, [r7, #16]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	007a1200 	.word	0x007a1200

08002aac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8083 	beq.w	8002bcc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ac6:	4b95      	ldr	r3, [pc, #596]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d019      	beq.n	8002b06 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ad2:	4b92      	ldr	r3, [pc, #584]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d106      	bne.n	8002aec <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ade:	4b8f      	ldr	r3, [pc, #572]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aea:	d00c      	beq.n	8002b06 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aec:	4b8b      	ldr	r3, [pc, #556]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002af4:	2b0c      	cmp	r3, #12
 8002af6:	d112      	bne.n	8002b1e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af8:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b04:	d10b      	bne.n	8002b1e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b06:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d05b      	beq.n	8002bca <HAL_RCC_OscConfig+0x11e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d157      	bne.n	8002bca <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e216      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b26:	d106      	bne.n	8002b36 <HAL_RCC_OscConfig+0x8a>
 8002b28:	4b7c      	ldr	r3, [pc, #496]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a7b      	ldr	r2, [pc, #492]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	e01d      	b.n	8002b72 <HAL_RCC_OscConfig+0xc6>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b3e:	d10c      	bne.n	8002b5a <HAL_RCC_OscConfig+0xae>
 8002b40:	4b76      	ldr	r3, [pc, #472]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a75      	ldr	r2, [pc, #468]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b73      	ldr	r3, [pc, #460]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a72      	ldr	r2, [pc, #456]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	e00b      	b.n	8002b72 <HAL_RCC_OscConfig+0xc6>
 8002b5a:	4b70      	ldr	r3, [pc, #448]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6f      	ldr	r2, [pc, #444]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b6d      	ldr	r3, [pc, #436]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6c      	ldr	r2, [pc, #432]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d013      	beq.n	8002ba2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fa93 	bl	80010a4 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b82:	f7fe fa8f 	bl	80010a4 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b64      	cmp	r3, #100	; 0x64
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1db      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b94:	4b61      	ldr	r3, [pc, #388]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0xd6>
 8002ba0:	e014      	b.n	8002bcc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fa7f 	bl	80010a4 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002baa:	f7fe fa7b 	bl	80010a4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b64      	cmp	r3, #100	; 0x64
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1c7      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbc:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0xfe>
 8002bc8:	e000      	b.n	8002bcc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d06f      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002bd8:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d017      	beq.n	8002c14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002be4:	4b4d      	ldr	r3, [pc, #308]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d105      	bne.n	8002bfc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bf0:	4b4a      	ldr	r3, [pc, #296]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfc:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c04:	2b0c      	cmp	r3, #12
 8002c06:	d11c      	bne.n	8002c42 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c08:	4b44      	ldr	r3, [pc, #272]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d116      	bne.n	8002c42 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c14:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_OscConfig+0x180>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e18f      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4938      	ldr	r1, [pc, #224]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c40:	e03a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d020      	beq.n	8002c8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4a:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fa28 	bl	80010a4 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c58:	f7fe fa24 	bl	80010a4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e170      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c76:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4925      	ldr	r1, [pc, #148]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
 8002c8a:	e015      	b.n	8002cb8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fe fa07 	bl	80010a4 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c9a:	f7fe fa03 	bl	80010a4 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e14f      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d037      	beq.n	8002d34 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d016      	beq.n	8002cfa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCC_OscConfig+0x278>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7fe f9e7 	bl	80010a4 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cda:	f7fe f9e3 	bl	80010a4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e12f      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x22e>
 8002cf8:	e01c      	b.n	8002d34 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_RCC_OscConfig+0x278>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7fe f9d0 	bl	80010a4 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d06:	e00f      	b.n	8002d28 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d08:	f7fe f9cc 	bl	80010a4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d908      	bls.n	8002d28 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e118      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	42470000 	.word	0x42470000
 8002d24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d28:	4b8a      	ldr	r3, [pc, #552]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1e9      	bne.n	8002d08 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8097 	beq.w	8002e70 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d46:	4b83      	ldr	r3, [pc, #524]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b7f      	ldr	r3, [pc, #508]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a7e      	ldr	r2, [pc, #504]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b7c      	ldr	r3, [pc, #496]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d72:	4b79      	ldr	r3, [pc, #484]	; (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7e:	4b76      	ldr	r3, [pc, #472]	; (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a75      	ldr	r2, [pc, #468]	; (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe f98b 	bl	80010a4 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7fe f987 	bl	80010a4 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0d3      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	4b6c      	ldr	r3, [pc, #432]	; (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x31a>
 8002db8:	4b66      	ldr	r3, [pc, #408]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	4a65      	ldr	r2, [pc, #404]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc4:	e01c      	b.n	8002e00 <HAL_RCC_OscConfig+0x354>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x33c>
 8002dce:	4b61      	ldr	r3, [pc, #388]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a60      	ldr	r2, [pc, #384]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002dd4:	f043 0304 	orr.w	r3, r3, #4
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	4b5e      	ldr	r3, [pc, #376]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a5d      	ldr	r2, [pc, #372]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
 8002de6:	e00b      	b.n	8002e00 <HAL_RCC_OscConfig+0x354>
 8002de8:	4b5a      	ldr	r3, [pc, #360]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a59      	ldr	r2, [pc, #356]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	4b57      	ldr	r3, [pc, #348]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a56      	ldr	r2, [pc, #344]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002dfa:	f023 0304 	bic.w	r3, r3, #4
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d015      	beq.n	8002e34 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fe f94c 	bl	80010a4 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fe f948 	bl	80010a4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e092      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e26:	4b4b      	ldr	r3, [pc, #300]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0ee      	beq.n	8002e10 <HAL_RCC_OscConfig+0x364>
 8002e32:	e014      	b.n	8002e5e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fe f936 	bl	80010a4 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3c:	f7fe f932 	bl	80010a4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e07c      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e52:	4b40      	ldr	r3, [pc, #256]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1ee      	bne.n	8002e3c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	4a3a      	ldr	r2, [pc, #232]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d068      	beq.n	8002f4a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e78:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d060      	beq.n	8002f46 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d145      	bne.n	8002f18 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8c:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <HAL_RCC_OscConfig+0x4b0>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fe f907 	bl	80010a4 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9a:	f7fe f903 	bl	80010a4 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e04f      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eac:	4b29      	ldr	r3, [pc, #164]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f0      	bne.n	8002e9a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	019b      	lsls	r3, r3, #6
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	041b      	lsls	r3, r3, #16
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	071b      	lsls	r3, r3, #28
 8002ee4:	491b      	ldr	r1, [pc, #108]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eea:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <HAL_RCC_OscConfig+0x4b0>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe f8d8 	bl	80010a4 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe f8d4 	bl	80010a4 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e020      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x44c>
 8002f16:	e018      	b.n	8002f4a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f18:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_RCC_OscConfig+0x4b0>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1e:	f7fe f8c1 	bl	80010a4 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f26:	f7fe f8bd 	bl	80010a4 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e009      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_RCC_OscConfig+0x4a8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x47a>
 8002f44:	e001      	b.n	8002f4a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40007000 	.word	0x40007000
 8002f5c:	42470060 	.word	0x42470060

08002f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e03f      	b.n	8002ff2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd ffb4 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	; 0x24
 8002f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f9b1 	bl	800330c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b088      	sub	sp, #32
 8002ffe:	af02      	add	r7, sp, #8
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	4613      	mov	r3, r2
 8003008:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b20      	cmp	r3, #32
 8003018:	f040 8083 	bne.w	8003122 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_UART_Transmit+0x2e>
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e07b      	b.n	8003124 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_UART_Transmit+0x40>
 8003036:	2302      	movs	r3, #2
 8003038:	e074      	b.n	8003124 <HAL_UART_Transmit+0x12a>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2221      	movs	r2, #33	; 0x21
 800304c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003050:	f7fe f828 	bl	80010a4 <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	88fa      	ldrh	r2, [r7, #6]
 800305a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	88fa      	ldrh	r2, [r7, #6]
 8003060:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800306a:	e042      	b.n	80030f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003082:	d122      	bne.n	80030ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2200      	movs	r2, #0
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f8f2 	bl	8003278 <UART_WaitOnFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e042      	b.n	8003124 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	3302      	adds	r3, #2
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	e017      	b.n	80030f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3301      	adds	r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	e013      	b.n	80030f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f8cf 	bl	8003278 <UART_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e01f      	b.n	8003124 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	60ba      	str	r2, [r7, #8]
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1b7      	bne.n	800306c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2200      	movs	r2, #0
 8003104:	2140      	movs	r1, #64	; 0x40
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f8b6 	bl	8003278 <UART_WaitOnFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e006      	b.n	8003124 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	e000      	b.n	8003124 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003122:	2302      	movs	r3, #2
  }
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b20      	cmp	r3, #32
 800314a:	f040 8090 	bne.w	800326e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_UART_Receive+0x2e>
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e088      	b.n	8003270 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_UART_Receive+0x40>
 8003168:	2302      	movs	r3, #2
 800316a:	e081      	b.n	8003270 <HAL_UART_Receive+0x144>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2222      	movs	r2, #34	; 0x22
 800317e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003182:	f7fd ff8f 	bl	80010a4 <HAL_GetTick>
 8003186:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	88fa      	ldrh	r2, [r7, #6]
 800318c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	88fa      	ldrh	r2, [r7, #6]
 8003192:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800319c:	e05c      	b.n	8003258 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b4:	d12b      	bne.n	800320e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	2120      	movs	r1, #32
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f859 	bl	8003278 <UART_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e04f      	b.n	8003270 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10c      	bne.n	80031f6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3302      	adds	r3, #2
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	e030      	b.n	8003258 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	b29a      	uxth	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3301      	adds	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	e024      	b.n	8003258 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2200      	movs	r2, #0
 8003216:	2120      	movs	r1, #32
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f82d 	bl	8003278 <UART_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e023      	b.n	8003270 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d108      	bne.n	8003242 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	60ba      	str	r2, [r7, #8]
 800323c:	b2ca      	uxtb	r2, r1
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e00a      	b.n	8003258 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	1c59      	adds	r1, r3, #1
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d19d      	bne.n	800319e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e000      	b.n	8003270 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800326e:	2302      	movs	r3, #2
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003288:	e02c      	b.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d028      	beq.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d007      	beq.n	80032a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003298:	f7fd ff04 	bl	80010a4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d21d      	bcs.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e00f      	b.n	8003304 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4013      	ands	r3, r2
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d0c3      	beq.n	800328a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800330c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800334e:	f023 030c 	bic.w	r3, r3, #12
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	68f9      	ldr	r1, [r7, #12]
 8003358:	430b      	orrs	r3, r1
 800335a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337a:	f040 818b 	bne.w	8003694 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4ac1      	ldr	r2, [pc, #772]	; (8003688 <UART_SetConfig+0x37c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d005      	beq.n	8003394 <UART_SetConfig+0x88>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4abf      	ldr	r2, [pc, #764]	; (800368c <UART_SetConfig+0x380>)
 800338e:	4293      	cmp	r3, r2
 8003390:	f040 80bd 	bne.w	800350e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003394:	f7ff f9d6 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8003398:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	461d      	mov	r5, r3
 800339e:	f04f 0600 	mov.w	r6, #0
 80033a2:	46a8      	mov	r8, r5
 80033a4:	46b1      	mov	r9, r6
 80033a6:	eb18 0308 	adds.w	r3, r8, r8
 80033aa:	eb49 0409 	adc.w	r4, r9, r9
 80033ae:	4698      	mov	r8, r3
 80033b0:	46a1      	mov	r9, r4
 80033b2:	eb18 0805 	adds.w	r8, r8, r5
 80033b6:	eb49 0906 	adc.w	r9, r9, r6
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033ce:	4688      	mov	r8, r1
 80033d0:	4691      	mov	r9, r2
 80033d2:	eb18 0005 	adds.w	r0, r8, r5
 80033d6:	eb49 0106 	adc.w	r1, r9, r6
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	461d      	mov	r5, r3
 80033e0:	f04f 0600 	mov.w	r6, #0
 80033e4:	196b      	adds	r3, r5, r5
 80033e6:	eb46 0406 	adc.w	r4, r6, r6
 80033ea:	461a      	mov	r2, r3
 80033ec:	4623      	mov	r3, r4
 80033ee:	f7fc ff5f 	bl	80002b0 <__aeabi_uldivmod>
 80033f2:	4603      	mov	r3, r0
 80033f4:	460c      	mov	r4, r1
 80033f6:	461a      	mov	r2, r3
 80033f8:	4ba5      	ldr	r3, [pc, #660]	; (8003690 <UART_SetConfig+0x384>)
 80033fa:	fba3 2302 	umull	r2, r3, r3, r2
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	461d      	mov	r5, r3
 8003408:	f04f 0600 	mov.w	r6, #0
 800340c:	46a9      	mov	r9, r5
 800340e:	46b2      	mov	sl, r6
 8003410:	eb19 0309 	adds.w	r3, r9, r9
 8003414:	eb4a 040a 	adc.w	r4, sl, sl
 8003418:	4699      	mov	r9, r3
 800341a:	46a2      	mov	sl, r4
 800341c:	eb19 0905 	adds.w	r9, r9, r5
 8003420:	eb4a 0a06 	adc.w	sl, sl, r6
 8003424:	f04f 0100 	mov.w	r1, #0
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003430:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003434:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003438:	4689      	mov	r9, r1
 800343a:	4692      	mov	sl, r2
 800343c:	eb19 0005 	adds.w	r0, r9, r5
 8003440:	eb4a 0106 	adc.w	r1, sl, r6
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	461d      	mov	r5, r3
 800344a:	f04f 0600 	mov.w	r6, #0
 800344e:	196b      	adds	r3, r5, r5
 8003450:	eb46 0406 	adc.w	r4, r6, r6
 8003454:	461a      	mov	r2, r3
 8003456:	4623      	mov	r3, r4
 8003458:	f7fc ff2a 	bl	80002b0 <__aeabi_uldivmod>
 800345c:	4603      	mov	r3, r0
 800345e:	460c      	mov	r4, r1
 8003460:	461a      	mov	r2, r3
 8003462:	4b8b      	ldr	r3, [pc, #556]	; (8003690 <UART_SetConfig+0x384>)
 8003464:	fba3 1302 	umull	r1, r3, r3, r2
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	2164      	movs	r1, #100	; 0x64
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	3332      	adds	r3, #50	; 0x32
 8003476:	4a86      	ldr	r2, [pc, #536]	; (8003690 <UART_SetConfig+0x384>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003484:	4498      	add	r8, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	461d      	mov	r5, r3
 800348a:	f04f 0600 	mov.w	r6, #0
 800348e:	46a9      	mov	r9, r5
 8003490:	46b2      	mov	sl, r6
 8003492:	eb19 0309 	adds.w	r3, r9, r9
 8003496:	eb4a 040a 	adc.w	r4, sl, sl
 800349a:	4699      	mov	r9, r3
 800349c:	46a2      	mov	sl, r4
 800349e:	eb19 0905 	adds.w	r9, r9, r5
 80034a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034ba:	4689      	mov	r9, r1
 80034bc:	4692      	mov	sl, r2
 80034be:	eb19 0005 	adds.w	r0, r9, r5
 80034c2:	eb4a 0106 	adc.w	r1, sl, r6
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	461d      	mov	r5, r3
 80034cc:	f04f 0600 	mov.w	r6, #0
 80034d0:	196b      	adds	r3, r5, r5
 80034d2:	eb46 0406 	adc.w	r4, r6, r6
 80034d6:	461a      	mov	r2, r3
 80034d8:	4623      	mov	r3, r4
 80034da:	f7fc fee9 	bl	80002b0 <__aeabi_uldivmod>
 80034de:	4603      	mov	r3, r0
 80034e0:	460c      	mov	r4, r1
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <UART_SetConfig+0x384>)
 80034e6:	fba3 1302 	umull	r1, r3, r3, r2
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	2164      	movs	r1, #100	; 0x64
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	3332      	adds	r3, #50	; 0x32
 80034f8:	4a65      	ldr	r2, [pc, #404]	; (8003690 <UART_SetConfig+0x384>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	f003 0207 	and.w	r2, r3, #7
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4442      	add	r2, r8
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	e26f      	b.n	80039ee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800350e:	f7ff f905 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8003512:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	461d      	mov	r5, r3
 8003518:	f04f 0600 	mov.w	r6, #0
 800351c:	46a8      	mov	r8, r5
 800351e:	46b1      	mov	r9, r6
 8003520:	eb18 0308 	adds.w	r3, r8, r8
 8003524:	eb49 0409 	adc.w	r4, r9, r9
 8003528:	4698      	mov	r8, r3
 800352a:	46a1      	mov	r9, r4
 800352c:	eb18 0805 	adds.w	r8, r8, r5
 8003530:	eb49 0906 	adc.w	r9, r9, r6
 8003534:	f04f 0100 	mov.w	r1, #0
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003540:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003544:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003548:	4688      	mov	r8, r1
 800354a:	4691      	mov	r9, r2
 800354c:	eb18 0005 	adds.w	r0, r8, r5
 8003550:	eb49 0106 	adc.w	r1, r9, r6
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	461d      	mov	r5, r3
 800355a:	f04f 0600 	mov.w	r6, #0
 800355e:	196b      	adds	r3, r5, r5
 8003560:	eb46 0406 	adc.w	r4, r6, r6
 8003564:	461a      	mov	r2, r3
 8003566:	4623      	mov	r3, r4
 8003568:	f7fc fea2 	bl	80002b0 <__aeabi_uldivmod>
 800356c:	4603      	mov	r3, r0
 800356e:	460c      	mov	r4, r1
 8003570:	461a      	mov	r2, r3
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <UART_SetConfig+0x384>)
 8003574:	fba3 2302 	umull	r2, r3, r3, r2
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	461d      	mov	r5, r3
 8003582:	f04f 0600 	mov.w	r6, #0
 8003586:	46a9      	mov	r9, r5
 8003588:	46b2      	mov	sl, r6
 800358a:	eb19 0309 	adds.w	r3, r9, r9
 800358e:	eb4a 040a 	adc.w	r4, sl, sl
 8003592:	4699      	mov	r9, r3
 8003594:	46a2      	mov	sl, r4
 8003596:	eb19 0905 	adds.w	r9, r9, r5
 800359a:	eb4a 0a06 	adc.w	sl, sl, r6
 800359e:	f04f 0100 	mov.w	r1, #0
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035b2:	4689      	mov	r9, r1
 80035b4:	4692      	mov	sl, r2
 80035b6:	eb19 0005 	adds.w	r0, r9, r5
 80035ba:	eb4a 0106 	adc.w	r1, sl, r6
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	461d      	mov	r5, r3
 80035c4:	f04f 0600 	mov.w	r6, #0
 80035c8:	196b      	adds	r3, r5, r5
 80035ca:	eb46 0406 	adc.w	r4, r6, r6
 80035ce:	461a      	mov	r2, r3
 80035d0:	4623      	mov	r3, r4
 80035d2:	f7fc fe6d 	bl	80002b0 <__aeabi_uldivmod>
 80035d6:	4603      	mov	r3, r0
 80035d8:	460c      	mov	r4, r1
 80035da:	461a      	mov	r2, r3
 80035dc:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <UART_SetConfig+0x384>)
 80035de:	fba3 1302 	umull	r1, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2164      	movs	r1, #100	; 0x64
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	3332      	adds	r3, #50	; 0x32
 80035f0:	4a27      	ldr	r2, [pc, #156]	; (8003690 <UART_SetConfig+0x384>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035fe:	4498      	add	r8, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	461d      	mov	r5, r3
 8003604:	f04f 0600 	mov.w	r6, #0
 8003608:	46a9      	mov	r9, r5
 800360a:	46b2      	mov	sl, r6
 800360c:	eb19 0309 	adds.w	r3, r9, r9
 8003610:	eb4a 040a 	adc.w	r4, sl, sl
 8003614:	4699      	mov	r9, r3
 8003616:	46a2      	mov	sl, r4
 8003618:	eb19 0905 	adds.w	r9, r9, r5
 800361c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003620:	f04f 0100 	mov.w	r1, #0
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800362c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003630:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003634:	4689      	mov	r9, r1
 8003636:	4692      	mov	sl, r2
 8003638:	eb19 0005 	adds.w	r0, r9, r5
 800363c:	eb4a 0106 	adc.w	r1, sl, r6
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	461d      	mov	r5, r3
 8003646:	f04f 0600 	mov.w	r6, #0
 800364a:	196b      	adds	r3, r5, r5
 800364c:	eb46 0406 	adc.w	r4, r6, r6
 8003650:	461a      	mov	r2, r3
 8003652:	4623      	mov	r3, r4
 8003654:	f7fc fe2c 	bl	80002b0 <__aeabi_uldivmod>
 8003658:	4603      	mov	r3, r0
 800365a:	460c      	mov	r4, r1
 800365c:	461a      	mov	r2, r3
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <UART_SetConfig+0x384>)
 8003660:	fba3 1302 	umull	r1, r3, r3, r2
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	2164      	movs	r1, #100	; 0x64
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	3332      	adds	r3, #50	; 0x32
 8003672:	4a07      	ldr	r2, [pc, #28]	; (8003690 <UART_SetConfig+0x384>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	f003 0207 	and.w	r2, r3, #7
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4442      	add	r2, r8
 8003684:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003686:	e1b2      	b.n	80039ee <UART_SetConfig+0x6e2>
 8003688:	40011000 	.word	0x40011000
 800368c:	40011400 	.word	0x40011400
 8003690:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4ad7      	ldr	r2, [pc, #860]	; (80039f8 <UART_SetConfig+0x6ec>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d005      	beq.n	80036aa <UART_SetConfig+0x39e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4ad6      	ldr	r2, [pc, #856]	; (80039fc <UART_SetConfig+0x6f0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	f040 80d1 	bne.w	800384c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80036aa:	f7ff f84b 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 80036ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	469a      	mov	sl, r3
 80036b4:	f04f 0b00 	mov.w	fp, #0
 80036b8:	46d0      	mov	r8, sl
 80036ba:	46d9      	mov	r9, fp
 80036bc:	eb18 0308 	adds.w	r3, r8, r8
 80036c0:	eb49 0409 	adc.w	r4, r9, r9
 80036c4:	4698      	mov	r8, r3
 80036c6:	46a1      	mov	r9, r4
 80036c8:	eb18 080a 	adds.w	r8, r8, sl
 80036cc:	eb49 090b 	adc.w	r9, r9, fp
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036e4:	4688      	mov	r8, r1
 80036e6:	4691      	mov	r9, r2
 80036e8:	eb1a 0508 	adds.w	r5, sl, r8
 80036ec:	eb4b 0609 	adc.w	r6, fp, r9
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4619      	mov	r1, r3
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	f04f 0400 	mov.w	r4, #0
 8003702:	0094      	lsls	r4, r2, #2
 8003704:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003708:	008b      	lsls	r3, r1, #2
 800370a:	461a      	mov	r2, r3
 800370c:	4623      	mov	r3, r4
 800370e:	4628      	mov	r0, r5
 8003710:	4631      	mov	r1, r6
 8003712:	f7fc fdcd 	bl	80002b0 <__aeabi_uldivmod>
 8003716:	4603      	mov	r3, r0
 8003718:	460c      	mov	r4, r1
 800371a:	461a      	mov	r2, r3
 800371c:	4bb8      	ldr	r3, [pc, #736]	; (8003a00 <UART_SetConfig+0x6f4>)
 800371e:	fba3 2302 	umull	r2, r3, r3, r2
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	469b      	mov	fp, r3
 800372c:	f04f 0c00 	mov.w	ip, #0
 8003730:	46d9      	mov	r9, fp
 8003732:	46e2      	mov	sl, ip
 8003734:	eb19 0309 	adds.w	r3, r9, r9
 8003738:	eb4a 040a 	adc.w	r4, sl, sl
 800373c:	4699      	mov	r9, r3
 800373e:	46a2      	mov	sl, r4
 8003740:	eb19 090b 	adds.w	r9, r9, fp
 8003744:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003748:	f04f 0100 	mov.w	r1, #0
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003754:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003758:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800375c:	4689      	mov	r9, r1
 800375e:	4692      	mov	sl, r2
 8003760:	eb1b 0509 	adds.w	r5, fp, r9
 8003764:	eb4c 060a 	adc.w	r6, ip, sl
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4619      	mov	r1, r3
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	f04f 0400 	mov.w	r4, #0
 800377a:	0094      	lsls	r4, r2, #2
 800377c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003780:	008b      	lsls	r3, r1, #2
 8003782:	461a      	mov	r2, r3
 8003784:	4623      	mov	r3, r4
 8003786:	4628      	mov	r0, r5
 8003788:	4631      	mov	r1, r6
 800378a:	f7fc fd91 	bl	80002b0 <__aeabi_uldivmod>
 800378e:	4603      	mov	r3, r0
 8003790:	460c      	mov	r4, r1
 8003792:	461a      	mov	r2, r3
 8003794:	4b9a      	ldr	r3, [pc, #616]	; (8003a00 <UART_SetConfig+0x6f4>)
 8003796:	fba3 1302 	umull	r1, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2164      	movs	r1, #100	; 0x64
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	3332      	adds	r3, #50	; 0x32
 80037a8:	4a95      	ldr	r2, [pc, #596]	; (8003a00 <UART_SetConfig+0x6f4>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b4:	4498      	add	r8, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	469b      	mov	fp, r3
 80037ba:	f04f 0c00 	mov.w	ip, #0
 80037be:	46d9      	mov	r9, fp
 80037c0:	46e2      	mov	sl, ip
 80037c2:	eb19 0309 	adds.w	r3, r9, r9
 80037c6:	eb4a 040a 	adc.w	r4, sl, sl
 80037ca:	4699      	mov	r9, r3
 80037cc:	46a2      	mov	sl, r4
 80037ce:	eb19 090b 	adds.w	r9, r9, fp
 80037d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037d6:	f04f 0100 	mov.w	r1, #0
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037ea:	4689      	mov	r9, r1
 80037ec:	4692      	mov	sl, r2
 80037ee:	eb1b 0509 	adds.w	r5, fp, r9
 80037f2:	eb4c 060a 	adc.w	r6, ip, sl
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4619      	mov	r1, r3
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	f04f 0400 	mov.w	r4, #0
 8003808:	0094      	lsls	r4, r2, #2
 800380a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800380e:	008b      	lsls	r3, r1, #2
 8003810:	461a      	mov	r2, r3
 8003812:	4623      	mov	r3, r4
 8003814:	4628      	mov	r0, r5
 8003816:	4631      	mov	r1, r6
 8003818:	f7fc fd4a 	bl	80002b0 <__aeabi_uldivmod>
 800381c:	4603      	mov	r3, r0
 800381e:	460c      	mov	r4, r1
 8003820:	461a      	mov	r2, r3
 8003822:	4b77      	ldr	r3, [pc, #476]	; (8003a00 <UART_SetConfig+0x6f4>)
 8003824:	fba3 1302 	umull	r1, r3, r3, r2
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	2164      	movs	r1, #100	; 0x64
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	3332      	adds	r3, #50	; 0x32
 8003836:	4a72      	ldr	r2, [pc, #456]	; (8003a00 <UART_SetConfig+0x6f4>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	f003 020f 	and.w	r2, r3, #15
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4442      	add	r2, r8
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	e0d0      	b.n	80039ee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800384c:	f7fe ff66 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8003850:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	469a      	mov	sl, r3
 8003856:	f04f 0b00 	mov.w	fp, #0
 800385a:	46d0      	mov	r8, sl
 800385c:	46d9      	mov	r9, fp
 800385e:	eb18 0308 	adds.w	r3, r8, r8
 8003862:	eb49 0409 	adc.w	r4, r9, r9
 8003866:	4698      	mov	r8, r3
 8003868:	46a1      	mov	r9, r4
 800386a:	eb18 080a 	adds.w	r8, r8, sl
 800386e:	eb49 090b 	adc.w	r9, r9, fp
 8003872:	f04f 0100 	mov.w	r1, #0
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800387e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003882:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003886:	4688      	mov	r8, r1
 8003888:	4691      	mov	r9, r2
 800388a:	eb1a 0508 	adds.w	r5, sl, r8
 800388e:	eb4b 0609 	adc.w	r6, fp, r9
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4619      	mov	r1, r3
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	f04f 0400 	mov.w	r4, #0
 80038a4:	0094      	lsls	r4, r2, #2
 80038a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038aa:	008b      	lsls	r3, r1, #2
 80038ac:	461a      	mov	r2, r3
 80038ae:	4623      	mov	r3, r4
 80038b0:	4628      	mov	r0, r5
 80038b2:	4631      	mov	r1, r6
 80038b4:	f7fc fcfc 	bl	80002b0 <__aeabi_uldivmod>
 80038b8:	4603      	mov	r3, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	461a      	mov	r2, r3
 80038be:	4b50      	ldr	r3, [pc, #320]	; (8003a00 <UART_SetConfig+0x6f4>)
 80038c0:	fba3 2302 	umull	r2, r3, r3, r2
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	469b      	mov	fp, r3
 80038ce:	f04f 0c00 	mov.w	ip, #0
 80038d2:	46d9      	mov	r9, fp
 80038d4:	46e2      	mov	sl, ip
 80038d6:	eb19 0309 	adds.w	r3, r9, r9
 80038da:	eb4a 040a 	adc.w	r4, sl, sl
 80038de:	4699      	mov	r9, r3
 80038e0:	46a2      	mov	sl, r4
 80038e2:	eb19 090b 	adds.w	r9, r9, fp
 80038e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038ea:	f04f 0100 	mov.w	r1, #0
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038fe:	4689      	mov	r9, r1
 8003900:	4692      	mov	sl, r2
 8003902:	eb1b 0509 	adds.w	r5, fp, r9
 8003906:	eb4c 060a 	adc.w	r6, ip, sl
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4619      	mov	r1, r3
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	f04f 0400 	mov.w	r4, #0
 800391c:	0094      	lsls	r4, r2, #2
 800391e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003922:	008b      	lsls	r3, r1, #2
 8003924:	461a      	mov	r2, r3
 8003926:	4623      	mov	r3, r4
 8003928:	4628      	mov	r0, r5
 800392a:	4631      	mov	r1, r6
 800392c:	f7fc fcc0 	bl	80002b0 <__aeabi_uldivmod>
 8003930:	4603      	mov	r3, r0
 8003932:	460c      	mov	r4, r1
 8003934:	461a      	mov	r2, r3
 8003936:	4b32      	ldr	r3, [pc, #200]	; (8003a00 <UART_SetConfig+0x6f4>)
 8003938:	fba3 1302 	umull	r1, r3, r3, r2
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	2164      	movs	r1, #100	; 0x64
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	3332      	adds	r3, #50	; 0x32
 800394a:	4a2d      	ldr	r2, [pc, #180]	; (8003a00 <UART_SetConfig+0x6f4>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003956:	4498      	add	r8, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	469b      	mov	fp, r3
 800395c:	f04f 0c00 	mov.w	ip, #0
 8003960:	46d9      	mov	r9, fp
 8003962:	46e2      	mov	sl, ip
 8003964:	eb19 0309 	adds.w	r3, r9, r9
 8003968:	eb4a 040a 	adc.w	r4, sl, sl
 800396c:	4699      	mov	r9, r3
 800396e:	46a2      	mov	sl, r4
 8003970:	eb19 090b 	adds.w	r9, r9, fp
 8003974:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003984:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003988:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800398c:	4689      	mov	r9, r1
 800398e:	4692      	mov	sl, r2
 8003990:	eb1b 0509 	adds.w	r5, fp, r9
 8003994:	eb4c 060a 	adc.w	r6, ip, sl
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4619      	mov	r1, r3
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	f04f 0400 	mov.w	r4, #0
 80039aa:	0094      	lsls	r4, r2, #2
 80039ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039b0:	008b      	lsls	r3, r1, #2
 80039b2:	461a      	mov	r2, r3
 80039b4:	4623      	mov	r3, r4
 80039b6:	4628      	mov	r0, r5
 80039b8:	4631      	mov	r1, r6
 80039ba:	f7fc fc79 	bl	80002b0 <__aeabi_uldivmod>
 80039be:	4603      	mov	r3, r0
 80039c0:	460c      	mov	r4, r1
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <UART_SetConfig+0x6f4>)
 80039c6:	fba3 1302 	umull	r1, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2164      	movs	r1, #100	; 0x64
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	3332      	adds	r3, #50	; 0x32
 80039d8:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <UART_SetConfig+0x6f4>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	f003 020f 	and.w	r2, r3, #15
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4442      	add	r2, r8
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	e7ff      	b.n	80039ee <UART_SetConfig+0x6e2>
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f8:	40011000 	.word	0x40011000
 80039fc:	40011400 	.word	0x40011400
 8003a00:	51eb851f 	.word	0x51eb851f

08003a04 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8003a12:	6839      	ldr	r1, [r7, #0]
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f001 fce6 	bl	80053e6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8003a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	218a      	movs	r1, #138	; 0x8a
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f004 fee9 	bl	800881c <VL53L0X_WrByte>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8003a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8003a5c:	b5b0      	push	{r4, r5, r7, lr}
 8003a5e:	b096      	sub	sp, #88	; 0x58
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8003a6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d107      	bne.n	8003a82 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8003a72:	2200      	movs	r2, #0
 8003a74:	2188      	movs	r1, #136	; 0x88
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f004 fed0 	bl	800881c <VL53L0X_WrByte>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a90:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003a9a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a9e      	ldr	r2, [pc, #632]	; (8003d1c <VL53L0X_DataInit+0x2c0>)
 8003aa2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a9d      	ldr	r2, [pc, #628]	; (8003d20 <VL53L0X_DataInit+0x2c4>)
 8003aaa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003ab4:	f107 0310 	add.w	r3, r7, #16
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fab4 	bl	8004028 <VL53L0X_GetDeviceParameters>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8003ac6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d112      	bne.n	8003af4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f103 0410 	add.w	r4, r3, #16
 8003adc:	f107 0510 	add.w	r5, r7, #16
 8003ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2264      	movs	r2, #100	; 0x64
 8003af8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003b02:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b0c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003b16:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003b22:	2201      	movs	r2, #1
 8003b24:	2180      	movs	r1, #128	; 0x80
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f004 fe78 	bl	800881c <VL53L0X_WrByte>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	21ff      	movs	r1, #255	; 0xff
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f004 fe6c 	bl	800881c <VL53L0X_WrByte>
 8003b44:	4603      	mov	r3, r0
 8003b46:	461a      	mov	r2, r3
 8003b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2100      	movs	r1, #0
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f004 fe60 	bl	800881c <VL53L0X_WrByte>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8003b6a:	f107 030f 	add.w	r3, r7, #15
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2191      	movs	r1, #145	; 0x91
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f004 fed4 	bl	8008920 <VL53L0X_RdByte>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8003b86:	7bfa      	ldrb	r2, [r7, #15]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003b8e:	2201      	movs	r2, #1
 8003b90:	2100      	movs	r1, #0
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f004 fe42 	bl	800881c <VL53L0X_WrByte>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	21ff      	movs	r1, #255	; 0xff
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f004 fe36 	bl	800881c <VL53L0X_WrByte>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2180      	movs	r1, #128	; 0x80
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f004 fe2a 	bl	800881c <VL53L0X_WrByte>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	653b      	str	r3, [r7, #80]	; 0x50
 8003bda:	e014      	b.n	8003c06 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8003bdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d114      	bne.n	8003c0e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2201      	movs	r2, #1
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fd43 	bl	8004678 <VL53L0X_SetLimitCheckEnable>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c02:	3301      	adds	r3, #1
 8003c04:	653b      	str	r3, [r7, #80]	; 0x50
 8003c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	dde7      	ble.n	8003bdc <VL53L0X_DataInit+0x180>
 8003c0c:	e000      	b.n	8003c10 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8003c0e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8003c10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fd2b 	bl	8004678 <VL53L0X_SetLimitCheckEnable>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003c28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003c30:	2200      	movs	r2, #0
 8003c32:	2103      	movs	r1, #3
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fd1f 	bl	8004678 <VL53L0X_SetLimitCheckEnable>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003c40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d107      	bne.n	8003c58 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2104      	movs	r1, #4
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fd13 	bl	8004678 <VL53L0X_SetLimitCheckEnable>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003c58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d107      	bne.n	8003c70 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003c60:	2200      	movs	r2, #0
 8003c62:	2105      	movs	r1, #5
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fd07 	bl	8004678 <VL53L0X_SetLimitCheckEnable>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d108      	bne.n	8003c8a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003c78:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fdaa 	bl	80047d8 <VL53L0X_SetLimitCheckValue>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003c8a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d108      	bne.n	8003ca4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c96:	2101      	movs	r1, #1
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fd9d 	bl	80047d8 <VL53L0X_SetLimitCheckValue>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003ca4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d108      	bne.n	8003cbe <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003cac:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fd90 	bl	80047d8 <VL53L0X_SetLimitCheckValue>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d107      	bne.n	8003cd6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2103      	movs	r1, #3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fd84 	bl	80047d8 <VL53L0X_SetLimitCheckValue>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cd6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	22ff      	movs	r2, #255	; 0xff
 8003ce2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003ce6:	22ff      	movs	r2, #255	; 0xff
 8003ce8:	2101      	movs	r1, #1
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f004 fd96 	bl	800881c <VL53L0X_WrByte>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8003cfe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8003d0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3758      	adds	r7, #88	; 0x58
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bdb0      	pop	{r4, r5, r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	00016b85 	.word	0x00016b85
 8003d20:	000970a4 	.word	0x000970a4

08003d24 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8003d24:	b5b0      	push	{r4, r5, r7, lr}
 8003d26:	b09e      	sub	sp, #120	; 0x78
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003d32:	f107 031c 	add.w	r3, r7, #28
 8003d36:	2240      	movs	r2, #64	; 0x40
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f004 fed3 	bl	8008ae6 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003d60:	2101      	movs	r1, #1
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f002 fa95 	bl	8006292 <VL53L0X_get_info_from_device>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8003d74:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003d80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d80d      	bhi.n	8003da4 <VL53L0X_StaticInit+0x80>
 8003d88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d102      	bne.n	8003d96 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d806      	bhi.n	8003da4 <VL53L0X_StaticInit+0x80>
 8003d96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10e      	bne.n	8003dbc <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	d90b      	bls.n	8003dbc <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003da4:	f107 0218 	add.w	r2, r7, #24
 8003da8:	f107 0314 	add.w	r3, r7, #20
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f001 fd14 	bl	80057dc <VL53L0X_perform_ref_spad_management>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003dba:	e009      	b.n	8003dd0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f001 ff15 	bl	8005bf4 <VL53L0X_set_reference_spads>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003dd0:	4b94      	ldr	r3, [pc, #592]	; (8004024 <VL53L0X_StaticInit+0x300>)
 8003dd2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003dd4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10f      	bne.n	8003dfc <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003de2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003de6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d104      	bne.n	8003df8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003df4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df6:	e001      	b.n	8003dfc <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8003df8:	4b8a      	ldr	r3, [pc, #552]	; (8004024 <VL53L0X_StaticInit+0x300>)
 8003dfa:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003dfc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003e04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f003 fde8 	bl	80079dc <VL53L0X_load_tuning_settings>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e12:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2304      	movs	r3, #4
 8003e20:	2200      	movs	r2, #0
 8003e22:	2100      	movs	r1, #0
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f001 f90d 	bl	8005044 <VL53L0X_SetGpioConfig>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e30:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d121      	bne.n	8003e7c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003e38:	2201      	movs	r2, #1
 8003e3a:	21ff      	movs	r1, #255	; 0xff
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f004 fced 	bl	800881c <VL53L0X_WrByte>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003e48:	f107 031a 	add.w	r3, r7, #26
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2184      	movs	r1, #132	; 0x84
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f004 fd8f 	bl	8008974 <VL53L0X_RdWord>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003e64:	2200      	movs	r2, #0
 8003e66:	21ff      	movs	r1, #255	; 0xff
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f004 fcd7 	bl	800881c <VL53L0X_WrByte>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	461a      	mov	r2, r3
 8003e72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e7c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d105      	bne.n	8003e90 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003e84:	8b7b      	ldrh	r3, [r7, #26]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	461a      	mov	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003e90:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d108      	bne.n	8003eaa <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003e98:	f107 031c 	add.w	r3, r7, #28
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f8c2 	bl	8004028 <VL53L0X_GetDeviceParameters>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8003eaa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d110      	bne.n	8003ed4 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003eb2:	f107 0319 	add.w	r3, r7, #25
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f9a0 	bl	80041fe <VL53L0X_GetFractionEnable>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003ec4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d103      	bne.n	8003ed4 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003ecc:	7e7a      	ldrb	r2, [r7, #25]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003ed4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10e      	bne.n	8003efa <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f103 0410 	add.w	r4, r3, #16
 8003ee2:	f107 051c 	add.w	r5, r7, #28
 8003ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ef2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003ef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8003efa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d111      	bne.n	8003f26 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003f02:	f107 0319 	add.w	r3, r7, #25
 8003f06:	461a      	mov	r2, r3
 8003f08:	2101      	movs	r1, #1
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f004 fd08 	bl	8008920 <VL53L0X_RdByte>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003f16:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003f1e:	7e7a      	ldrb	r2, [r7, #25]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003f26:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d107      	bne.n	8003f3e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2100      	movs	r1, #0
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f9d8 	bl	80042e8 <VL53L0X_SetSequenceStepEnable>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003f3e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d107      	bne.n	8003f56 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003f46:	2200      	movs	r2, #0
 8003f48:	2102      	movs	r1, #2
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f9cc 	bl	80042e8 <VL53L0X_SetSequenceStepEnable>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003f56:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2203      	movs	r2, #3
 8003f62:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003f66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003f6e:	f107 0313 	add.w	r3, r7, #19
 8003f72:	461a      	mov	r2, r3
 8003f74:	2100      	movs	r1, #0
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f99e 	bl	80042b8 <VL53L0X_GetVcselPulsePeriod>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003f82:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003f8a:	7cfa      	ldrb	r2, [r7, #19]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003f92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003f9a:	f107 0313 	add.w	r3, r7, #19
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f988 	bl	80042b8 <VL53L0X_GetVcselPulsePeriod>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003fae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003fb6:	7cfa      	ldrb	r2, [r7, #19]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003fbe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8003fc6:	f107 030c 	add.w	r3, r7, #12
 8003fca:	461a      	mov	r2, r3
 8003fcc:	2103      	movs	r1, #3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f002 fee0 	bl	8006d94 <get_sequence_step_timeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003fda:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003fea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8003ff2:	f107 030c 	add.w	r3, r7, #12
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2104      	movs	r1, #4
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f002 feca 	bl	8006d94 <get_sequence_step_timeout>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004006:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004016:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800401a:	4618      	mov	r0, r3
 800401c:	3770      	adds	r7, #112	; 0x70
 800401e:	46bd      	mov	sp, r7
 8004020:	bdb0      	pop	{r4, r5, r7, pc}
 8004022:	bf00      	nop
 8004024:	2000000c 	.word	0x2000000c

08004028 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	4619      	mov	r1, r3
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8cc 	bl	80041d8 <VL53L0X_GetDeviceMode>
 8004040:	4603      	mov	r3, r0
 8004042:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d107      	bne.n	800405c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	3308      	adds	r3, #8
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa94 	bl	8004580 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004058:	4603      	mov	r3, r0
 800405a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800405c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800406a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d107      	bne.n	8004082 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	3310      	adds	r3, #16
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 faca 	bl	8004612 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800407e:	4603      	mov	r3, r0
 8004080:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8004082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	3314      	adds	r3, #20
 800408e:	4619      	mov	r1, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff fcb7 	bl	8003a04 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8004096:	4603      	mov	r3, r0
 8004098:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800409a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d134      	bne.n	800410c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	e02a      	b.n	80040fe <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80040a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d12a      	bne.n	8004106 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	b299      	uxth	r1, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	3308      	adds	r3, #8
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	4413      	add	r3, r2
 80040be:	3304      	adds	r3, #4
 80040c0:	461a      	mov	r2, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fbea 	bl	800489c <VL53L0X_GetLimitCheckValue>
 80040c8:	4603      	mov	r3, r0
 80040ca:	461a      	mov	r2, r3
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80040d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d117      	bne.n	800410a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	b299      	uxth	r1, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3318      	adds	r3, #24
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	4413      	add	r3, r2
 80040e6:	461a      	mov	r2, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fb51 	bl	8004790 <VL53L0X_GetLimitCheckEnable>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	3301      	adds	r3, #1
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b05      	cmp	r3, #5
 8004102:	ddd1      	ble.n	80040a8 <VL53L0X_GetDeviceParameters+0x80>
 8004104:	e002      	b.n	800410c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8004106:	bf00      	nop
 8004108:	e000      	b.n	800410c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800410a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800410c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d107      	bne.n	8004124 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	333c      	adds	r3, #60	; 0x3c
 8004118:	4619      	mov	r1, r3
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fc4c 	bl	80049b8 <VL53L0X_GetWrapAroundCheckEnable>
 8004120:	4603      	mov	r3, r0
 8004122:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8004124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d107      	bne.n	800413c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f895 	bl	8004262 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8004138:	4603      	mov	r3, r0
 800413a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800413c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004154:	2300      	movs	r3, #0
 8004156:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	2b15      	cmp	r3, #21
 800415c:	d832      	bhi.n	80041c4 <VL53L0X_SetDeviceMode+0x7c>
 800415e:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <VL53L0X_SetDeviceMode+0x1c>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	080041bd 	.word	0x080041bd
 8004168:	080041bd 	.word	0x080041bd
 800416c:	080041c5 	.word	0x080041c5
 8004170:	080041bd 	.word	0x080041bd
 8004174:	080041c5 	.word	0x080041c5
 8004178:	080041c5 	.word	0x080041c5
 800417c:	080041c5 	.word	0x080041c5
 8004180:	080041c5 	.word	0x080041c5
 8004184:	080041c5 	.word	0x080041c5
 8004188:	080041c5 	.word	0x080041c5
 800418c:	080041c5 	.word	0x080041c5
 8004190:	080041c5 	.word	0x080041c5
 8004194:	080041c5 	.word	0x080041c5
 8004198:	080041c5 	.word	0x080041c5
 800419c:	080041c5 	.word	0x080041c5
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041c5 	.word	0x080041c5
 80041a8:	080041c5 	.word	0x080041c5
 80041ac:	080041c5 	.word	0x080041c5
 80041b0:	080041c5 	.word	0x080041c5
 80041b4:	080041bd 	.word	0x080041bd
 80041b8:	080041bd 	.word	0x080041bd
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	741a      	strb	r2, [r3, #16]
		break;
 80041c2:	e001      	b.n	80041c8 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80041c4:	23f8      	movs	r3, #248	; 0xf8
 80041c6:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80041c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	7c1a      	ldrb	r2, [r3, #16]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80041ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	2109      	movs	r1, #9
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f004 fb85 	bl	8008920 <VL53L0X_RdByte>
 8004216:	4603      	mov	r3, r0
 8004218:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800421a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	b2da      	uxtb	r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004230:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800424a:	6839      	ldr	r1, [r7, #0]
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f003 fa34 	bl	80076ba <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8004252:	4603      	mov	r3, r0
 8004254:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8004256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004270:	6839      	ldr	r1, [r7, #0]
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f003 fb01 	bl	800787a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8004278:	4603      	mov	r3, r0
 800427a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800427c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	70fb      	strb	r3, [r7, #3]
 8004294:	4613      	mov	r3, r2
 8004296:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004298:	2300      	movs	r3, #0
 800429a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800429c:	78ba      	ldrb	r2, [r7, #2]
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	4619      	mov	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f002 ff49 	bl	800713a <VL53L0X_set_vcsel_pulse_period>
 80042a8:	4603      	mov	r3, r0
 80042aa:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80042ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	460b      	mov	r3, r1
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80042ca:	7afb      	ldrb	r3, [r7, #11]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	4619      	mov	r1, r3
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f003 f9bb 	bl	800764c <VL53L0X_get_vcsel_pulse_period>
 80042d6:	4603      	mov	r3, r0
 80042d8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80042da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	70fb      	strb	r3, [r7, #3]
 80042f4:	4613      	mov	r3, r2
 80042f6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004304:	f107 030f 	add.w	r3, r7, #15
 8004308:	461a      	mov	r2, r3
 800430a:	2101      	movs	r1, #1
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f004 fb07 	bl	8008920 <VL53L0X_RdByte>
 8004312:	4603      	mov	r3, r0
 8004314:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800431a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d15a      	bne.n	80043d8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8004322:	78bb      	ldrb	r3, [r7, #2]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d12b      	bne.n	8004380 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	2b04      	cmp	r3, #4
 800432c:	d825      	bhi.n	800437a <VL53L0X_SetSequenceStepEnable+0x92>
 800432e:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8004330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004334:	08004349 	.word	0x08004349
 8004338:	08004353 	.word	0x08004353
 800433c:	0800435d 	.word	0x0800435d
 8004340:	08004367 	.word	0x08004367
 8004344:	08004371 	.word	0x08004371
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004348:	7dbb      	ldrb	r3, [r7, #22]
 800434a:	f043 0310 	orr.w	r3, r3, #16
 800434e:	75bb      	strb	r3, [r7, #22]
				break;
 8004350:	e043      	b.n	80043da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8004352:	7dbb      	ldrb	r3, [r7, #22]
 8004354:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004358:	75bb      	strb	r3, [r7, #22]
				break;
 800435a:	e03e      	b.n	80043da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800435c:	7dbb      	ldrb	r3, [r7, #22]
 800435e:	f043 0304 	orr.w	r3, r3, #4
 8004362:	75bb      	strb	r3, [r7, #22]
				break;
 8004364:	e039      	b.n	80043da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8004366:	7dbb      	ldrb	r3, [r7, #22]
 8004368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800436c:	75bb      	strb	r3, [r7, #22]
				break;
 800436e:	e034      	b.n	80043da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8004370:	7dbb      	ldrb	r3, [r7, #22]
 8004372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004376:	75bb      	strb	r3, [r7, #22]
				break;
 8004378:	e02f      	b.n	80043da <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800437a:	23fc      	movs	r3, #252	; 0xfc
 800437c:	75fb      	strb	r3, [r7, #23]
 800437e:	e02c      	b.n	80043da <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	2b04      	cmp	r3, #4
 8004384:	d825      	bhi.n	80043d2 <VL53L0X_SetSequenceStepEnable+0xea>
 8004386:	a201      	add	r2, pc, #4	; (adr r2, 800438c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	080043a1 	.word	0x080043a1
 8004390:	080043ab 	.word	0x080043ab
 8004394:	080043b5 	.word	0x080043b5
 8004398:	080043bf 	.word	0x080043bf
 800439c:	080043c9 	.word	0x080043c9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80043a0:	7dbb      	ldrb	r3, [r7, #22]
 80043a2:	f023 0310 	bic.w	r3, r3, #16
 80043a6:	75bb      	strb	r3, [r7, #22]
				break;
 80043a8:	e017      	b.n	80043da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80043aa:	7dbb      	ldrb	r3, [r7, #22]
 80043ac:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80043b0:	75bb      	strb	r3, [r7, #22]
				break;
 80043b2:	e012      	b.n	80043da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80043b4:	7dbb      	ldrb	r3, [r7, #22]
 80043b6:	f023 0304 	bic.w	r3, r3, #4
 80043ba:	75bb      	strb	r3, [r7, #22]
				break;
 80043bc:	e00d      	b.n	80043da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80043be:	7dbb      	ldrb	r3, [r7, #22]
 80043c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c4:	75bb      	strb	r3, [r7, #22]
				break;
 80043c6:	e008      	b.n	80043da <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80043c8:	7dbb      	ldrb	r3, [r7, #22]
 80043ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ce:	75bb      	strb	r3, [r7, #22]
				break;
 80043d0:	e003      	b.n	80043da <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80043d2:	23fc      	movs	r3, #252	; 0xfc
 80043d4:	75fb      	strb	r3, [r7, #23]
 80043d6:	e000      	b.n	80043da <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80043d8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	7dba      	ldrb	r2, [r7, #22]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d01e      	beq.n	8004420 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80043e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d107      	bne.n	80043fa <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80043ea:	7dbb      	ldrb	r3, [r7, #22]
 80043ec:	461a      	mov	r2, r3
 80043ee:	2101      	movs	r1, #1
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f004 fa13 	bl	800881c <VL53L0X_WrByte>
 80043f6:	4603      	mov	r3, r0
 80043f8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80043fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d103      	bne.n	800440a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	7dba      	ldrb	r2, [r7, #22]
 8004406:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800440a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004418:	6939      	ldr	r1, [r7, #16]
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ff0e 	bl	800423c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004420:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	72fb      	strb	r3, [r7, #11]
 800443a:	4613      	mov	r3, r2
 800443c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800443e:	2300      	movs	r3, #0
 8004440:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8004448:	7afb      	ldrb	r3, [r7, #11]
 800444a:	2b04      	cmp	r3, #4
 800444c:	d836      	bhi.n	80044bc <sequence_step_enabled+0x90>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <sequence_step_enabled+0x28>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004469 	.word	0x08004469
 8004458:	0800447b 	.word	0x0800447b
 800445c:	0800448d 	.word	0x0800448d
 8004460:	0800449f 	.word	0x0800449f
 8004464:	080044b1 	.word	0x080044b1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004468:	7abb      	ldrb	r3, [r7, #10]
 800446a:	111b      	asrs	r3, r3, #4
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	b2da      	uxtb	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	701a      	strb	r2, [r3, #0]
		break;
 8004478:	e022      	b.n	80044c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800447a:	7abb      	ldrb	r3, [r7, #10]
 800447c:	10db      	asrs	r3, r3, #3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	b2da      	uxtb	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	701a      	strb	r2, [r3, #0]
		break;
 800448a:	e019      	b.n	80044c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800448c:	7abb      	ldrb	r3, [r7, #10]
 800448e:	109b      	asrs	r3, r3, #2
 8004490:	b2db      	uxtb	r3, r3
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	b2da      	uxtb	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	701a      	strb	r2, [r3, #0]
		break;
 800449c:	e010      	b.n	80044c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800449e:	7abb      	ldrb	r3, [r7, #10]
 80044a0:	119b      	asrs	r3, r3, #6
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	701a      	strb	r2, [r3, #0]
		break;
 80044ae:	e007      	b.n	80044c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80044b0:	7abb      	ldrb	r3, [r7, #10]
 80044b2:	09db      	lsrs	r3, r3, #7
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	701a      	strb	r2, [r3, #0]
		break;
 80044ba:	e001      	b.n	80044c0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80044bc:	23fc      	movs	r3, #252	; 0xfc
 80044be:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80044c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80044e2:	f107 030e 	add.w	r3, r7, #14
 80044e6:	461a      	mov	r2, r3
 80044e8:	2101      	movs	r1, #1
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f004 fa18 	bl	8008920 <VL53L0X_RdByte>
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80044f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d107      	bne.n	800450c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80044fc:	7bba      	ldrb	r2, [r7, #14]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2100      	movs	r1, #0
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff ff92 	bl	800442c <sequence_step_enabled>
 8004508:	4603      	mov	r3, r0
 800450a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800450c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d108      	bne.n	8004526 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004514:	7bba      	ldrb	r2, [r7, #14]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	3302      	adds	r3, #2
 800451a:	2101      	movs	r1, #1
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff ff85 	bl	800442c <sequence_step_enabled>
 8004522:	4603      	mov	r3, r0
 8004524:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d108      	bne.n	8004540 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800452e:	7bba      	ldrb	r2, [r7, #14]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	3301      	adds	r3, #1
 8004534:	2102      	movs	r1, #2
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff ff78 	bl	800442c <sequence_step_enabled>
 800453c:	4603      	mov	r3, r0
 800453e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d108      	bne.n	800455a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004548:	7bba      	ldrb	r2, [r7, #14]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	3303      	adds	r3, #3
 800454e:	2103      	movs	r1, #3
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ff6b 	bl	800442c <sequence_step_enabled>
 8004556:	4603      	mov	r3, r0
 8004558:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800455a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d108      	bne.n	8004574 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8004562:	7bba      	ldrb	r2, [r7, #14]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	3304      	adds	r3, #4
 8004568:	2104      	movs	r1, #4
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff ff5e 	bl	800442c <sequence_step_enabled>
 8004570:	4603      	mov	r3, r0
 8004572:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800458a:	2300      	movs	r3, #0
 800458c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800458e:	f107 030c 	add.w	r3, r7, #12
 8004592:	461a      	mov	r2, r3
 8004594:	21f8      	movs	r1, #248	; 0xf8
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f004 f9ec 	bl	8008974 <VL53L0X_RdWord>
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80045a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d108      	bne.n	80045ba <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80045a8:	f107 0308 	add.w	r3, r7, #8
 80045ac:	461a      	mov	r2, r3
 80045ae:	2104      	movs	r1, #4
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f004 fa17 	bl	80089e4 <VL53L0X_RdDWord>
 80045b6:	4603      	mov	r3, r0
 80045b8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80045ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10c      	bne.n	80045dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80045c2:	89bb      	ldrh	r3, [r7, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	89ba      	ldrh	r2, [r7, #12]
 80045cc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80045dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	7f1b      	ldrb	r3, [r3, #28]
 80045fa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	7bba      	ldrb	r2, [r7, #14]
 8004600:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b086      	sub	sp, #24
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800461c:	2300      	movs	r3, #0
 800461e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004620:	f107 030e 	add.w	r3, r7, #14
 8004624:	461a      	mov	r2, r3
 8004626:	2120      	movs	r1, #32
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f004 f9a3 	bl	8008974 <VL53L0X_RdWord>
 800462e:	4603      	mov	r3, r0
 8004630:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d118      	bne.n	800466c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800463a:	89fb      	ldrh	r3, [r7, #14]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d109      	bne.n	8004654 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	771a      	strb	r2, [r3, #28]
 8004652:	e00b      	b.n	800466c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004654:	89fb      	ldrh	r3, [r7, #14]
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800466c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
 8004684:	4613      	mov	r3, r2
 8004686:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004688:	2300      	movs	r3, #0
 800468a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004698:	887b      	ldrh	r3, [r7, #2]
 800469a:	2b05      	cmp	r3, #5
 800469c:	d902      	bls.n	80046a4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800469e:	23fc      	movs	r3, #252	; 0xfc
 80046a0:	75fb      	strb	r3, [r7, #23]
 80046a2:	e05b      	b.n	800475c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80046a4:	787b      	ldrb	r3, [r7, #1]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73bb      	strb	r3, [r7, #14]
 80046b6:	e00a      	b.n	80046ce <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80046b8:	887b      	ldrh	r3, [r7, #2]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	330c      	adds	r3, #12
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	2b05      	cmp	r3, #5
 80046d2:	d841      	bhi.n	8004758 <VL53L0X_SetLimitCheckEnable+0xe0>
 80046d4:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <VL53L0X_SetLimitCheckEnable+0x64>)
 80046d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046da:	bf00      	nop
 80046dc:	080046f5 	.word	0x080046f5
 80046e0:	080046ff 	.word	0x080046ff
 80046e4:	08004715 	.word	0x08004715
 80046e8:	0800471f 	.word	0x0800471f
 80046ec:	08004729 	.word	0x08004729
 80046f0:	08004741 	.word	0x08004741

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	7bfa      	ldrb	r2, [r7, #15]
 80046f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80046fc:	e02e      	b.n	800475c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004702:	b29b      	uxth	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	2144      	movs	r1, #68	; 0x44
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f004 f8ab 	bl	8008864 <VL53L0X_WrWord>
 800470e:	4603      	mov	r3, r0
 8004710:	75fb      	strb	r3, [r7, #23]

			break;
 8004712:	e023      	b.n	800475c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	7bfa      	ldrb	r2, [r7, #15]
 8004718:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800471c:	e01e      	b.n	800475c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8004726:	e019      	b.n	800475c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004728:	7bbb      	ldrb	r3, [r7, #14]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800472e:	7b7b      	ldrb	r3, [r7, #13]
 8004730:	22fe      	movs	r2, #254	; 0xfe
 8004732:	2160      	movs	r1, #96	; 0x60
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f004 f8bf 	bl	80088b8 <VL53L0X_UpdateByte>
 800473a:	4603      	mov	r3, r0
 800473c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800473e:	e00d      	b.n	800475c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004740:	7bbb      	ldrb	r3, [r7, #14]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004746:	7b7b      	ldrb	r3, [r7, #13]
 8004748:	22ef      	movs	r2, #239	; 0xef
 800474a:	2160      	movs	r1, #96	; 0x60
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f004 f8b3 	bl	80088b8 <VL53L0X_UpdateByte>
 8004752:	4603      	mov	r3, r0
 8004754:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004756:	e001      	b.n	800475c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004758:	23fc      	movs	r3, #252	; 0xfc
 800475a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800475c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10f      	bne.n	8004784 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004764:	787b      	ldrb	r3, [r7, #1]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800476a:	887b      	ldrh	r3, [r7, #2]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	4413      	add	r3, r2
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004776:	e005      	b.n	8004784 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004778:	887b      	ldrh	r3, [r7, #2]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4413      	add	r3, r2
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004784:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	460b      	mov	r3, r1
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80047a2:	897b      	ldrh	r3, [r7, #10]
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d905      	bls.n	80047b4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80047a8:	23fc      	movs	r3, #252	; 0xfc
 80047aa:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	e008      	b.n	80047c6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80047b4:	897b      	ldrh	r3, [r7, #10]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4413      	add	r3, r2
 80047ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047be:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	7dba      	ldrb	r2, [r7, #22]
 80047c4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80047c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	460b      	mov	r3, r1
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80047ea:	897b      	ldrh	r3, [r7, #10]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047f4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80047f6:	7dbb      	ldrb	r3, [r7, #22]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d107      	bne.n	800480c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80047fc:	897b      	ldrh	r3, [r7, #10]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	330c      	adds	r3, #12
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	e040      	b.n	800488e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800480c:	897b      	ldrh	r3, [r7, #10]
 800480e:	2b05      	cmp	r3, #5
 8004810:	d830      	bhi.n	8004874 <VL53L0X_SetLimitCheckValue+0x9c>
 8004812:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <VL53L0X_SetLimitCheckValue+0x40>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	08004831 	.word	0x08004831
 800481c:	08004839 	.word	0x08004839
 8004820:	0800484f 	.word	0x0800484f
 8004824:	08004857 	.word	0x08004857
 8004828:	0800485f 	.word	0x0800485f
 800482c:	0800485f 	.word	0x0800485f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8004836:	e01f      	b.n	8004878 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800483c:	b29b      	uxth	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	2144      	movs	r1, #68	; 0x44
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f004 f80e 	bl	8008864 <VL53L0X_WrWord>
 8004848:	4603      	mov	r3, r0
 800484a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800484c:	e014      	b.n	8004878 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004854:	e010      	b.n	8004878 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800485c:	e00c      	b.n	8004878 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004862:	b29b      	uxth	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	2164      	movs	r1, #100	; 0x64
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f003 fffb 	bl	8008864 <VL53L0X_WrWord>
 800486e:	4603      	mov	r3, r0
 8004870:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004872:	e001      	b.n	8004878 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004874:	23fc      	movs	r3, #252	; 0xfc
 8004876:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004878:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004880:	897b      	ldrh	r3, [r7, #10]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	330c      	adds	r3, #12
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800488e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop

0800489c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	460b      	mov	r3, r1
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80048b2:	897b      	ldrh	r3, [r7, #10]
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d847      	bhi.n	8004948 <VL53L0X_GetLimitCheckValue+0xac>
 80048b8:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <VL53L0X_GetLimitCheckValue+0x24>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048d9 	.word	0x080048d9
 80048c4:	080048e5 	.word	0x080048e5
 80048c8:	0800490b 	.word	0x0800490b
 80048cc:	08004917 	.word	0x08004917
 80048d0:	08004923 	.word	0x08004923
 80048d4:	08004923 	.word	0x08004923

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	77bb      	strb	r3, [r7, #30]
		break;
 80048e2:	e033      	b.n	800494c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80048e4:	f107 0316 	add.w	r3, r7, #22
 80048e8:	461a      	mov	r2, r3
 80048ea:	2144      	movs	r1, #68	; 0x44
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f004 f841 	bl	8008974 <VL53L0X_RdWord>
 80048f2:	4603      	mov	r3, r0
 80048f4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80048f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d102      	bne.n	8004904 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80048fe:	8afb      	ldrh	r3, [r7, #22]
 8004900:	025b      	lsls	r3, r3, #9
 8004902:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8004904:	2301      	movs	r3, #1
 8004906:	77bb      	strb	r3, [r7, #30]
		break;
 8004908:	e020      	b.n	800494c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	77bb      	strb	r3, [r7, #30]
		break;
 8004914:	e01a      	b.n	800494c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	77bb      	strb	r3, [r7, #30]
		break;
 8004920:	e014      	b.n	800494c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004922:	f107 0316 	add.w	r3, r7, #22
 8004926:	461a      	mov	r2, r3
 8004928:	2164      	movs	r1, #100	; 0x64
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f004 f822 	bl	8008974 <VL53L0X_RdWord>
 8004930:	4603      	mov	r3, r0
 8004932:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004934:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800493c:	8afb      	ldrh	r3, [r7, #22]
 800493e:	025b      	lsls	r3, r3, #9
 8004940:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	77bb      	strb	r3, [r7, #30]
		break;
 8004946:	e001      	b.n	800494c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004948:	23fc      	movs	r3, #252	; 0xfc
 800494a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800494c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d12a      	bne.n	80049aa <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004954:	7fbb      	ldrb	r3, [r7, #30]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d124      	bne.n	80049a4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d110      	bne.n	8004982 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004960:	897b      	ldrh	r3, [r7, #10]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	330c      	adds	r3, #12
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004974:	897b      	ldrh	r3, [r7, #10]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004980:	e013      	b.n	80049aa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004988:	897b      	ldrh	r3, [r7, #10]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	330c      	adds	r3, #12
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004996:	897b      	ldrh	r3, [r7, #10]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80049a2:	e002      	b.n	80049aa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80049aa:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop

080049b8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80049c6:	f107 030e 	add.w	r3, r7, #14
 80049ca:	461a      	mov	r2, r3
 80049cc:	2101      	movs	r1, #1
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f003 ffa6 	bl	8008920 <VL53L0X_RdByte>
 80049d4:	4603      	mov	r3, r0
 80049d6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80049d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10e      	bne.n	80049fe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80049e0:	7bba      	ldrb	r2, [r7, #14]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80049e8:	7bbb      	ldrb	r3, [r7, #14]
 80049ea:	b25b      	sxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	da03      	bge.n	80049f8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2201      	movs	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	e002      	b.n	80049fe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80049fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d104      	bne.n	8004a10 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004a28:	f107 030e 	add.w	r3, r7, #14
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fbd2 	bl	80041d8 <VL53L0X_GetDeviceMode>
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d107      	bne.n	8004a50 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004a40:	7bbb      	ldrb	r3, [r7, #14]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d104      	bne.n	8004a50 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f898 	bl	8004b7c <VL53L0X_StartMeasurement>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d104      	bne.n	8004a62 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f001 fb4d 	bl	80060f8 <VL53L0X_measurement_poll_for_completion>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004a6a:	7bbb      	ldrb	r3, [r7, #14]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d103      	bne.n	8004a78 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2203      	movs	r2, #3
 8004a74:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8004a94:	2301      	movs	r3, #1
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f001 faef 	bl	800607e <VL53L0X_perform_ref_calibration>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8004aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004ac6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8004ac8:	7dbb      	ldrb	r3, [r7, #22]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d005      	beq.n	8004ada <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8004ace:	7dbb      	ldrb	r3, [r7, #22]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d002      	beq.n	8004ada <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8004ad4:	7dbb      	ldrb	r3, [r7, #22]
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d147      	bne.n	8004b6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8004ada:	f107 030c 	add.w	r3, r7, #12
 8004ade:	f107 0210 	add.w	r2, r7, #16
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fbd1 	bl	800528c <VL53L0X_GetInterruptThresholds>
 8004aea:	4603      	mov	r3, r0
 8004aec:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004af4:	d803      	bhi.n	8004afe <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8004af6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8004af8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004afc:	d935      	bls.n	8004b6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8004afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d131      	bne.n	8004b6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d006      	beq.n	8004b1a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8004b0c:	491a      	ldr	r1, [pc, #104]	; (8004b78 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f002 ff64 	bl	80079dc <VL53L0X_load_tuning_settings>
 8004b14:	4603      	mov	r3, r0
 8004b16:	75fb      	strb	r3, [r7, #23]
 8004b18:	e027      	b.n	8004b6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	21ff      	movs	r1, #255	; 0xff
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f003 fe7c 	bl	800881c <VL53L0X_WrByte>
 8004b24:	4603      	mov	r3, r0
 8004b26:	461a      	mov	r2, r3
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2170      	movs	r1, #112	; 0x70
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f003 fe72 	bl	800881c <VL53L0X_WrByte>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004b42:	2200      	movs	r2, #0
 8004b44:	21ff      	movs	r1, #255	; 0xff
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f003 fe68 	bl	800881c <VL53L0X_WrByte>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004b56:	2200      	movs	r2, #0
 8004b58:	2180      	movs	r1, #128	; 0x80
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f003 fe5e 	bl	800881c <VL53L0X_WrByte>
 8004b60:	4603      	mov	r3, r0
 8004b62:	461a      	mov	r2, r3
 8004b64:	7dfb      	ldrb	r3, [r7, #23]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004b6a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000100 	.word	0x20000100

08004b7c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004b8c:	f107 030e 	add.w	r3, r7, #14
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fb20 	bl	80041d8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004b98:	2201      	movs	r2, #1
 8004b9a:	2180      	movs	r1, #128	; 0x80
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f003 fe3d 	bl	800881c <VL53L0X_WrByte>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	21ff      	movs	r1, #255	; 0xff
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f003 fe36 	bl	800881c <VL53L0X_WrByte>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f003 fe2f 	bl	800881c <VL53L0X_WrByte>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2191      	movs	r1, #145	; 0x91
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f003 fe25 	bl	800881c <VL53L0X_WrByte>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	2100      	movs	r1, #0
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f003 fe1e 	bl	800881c <VL53L0X_WrByte>
 8004be0:	4603      	mov	r3, r0
 8004be2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004be4:	2200      	movs	r2, #0
 8004be6:	21ff      	movs	r1, #255	; 0xff
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f003 fe17 	bl	800881c <VL53L0X_WrByte>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2180      	movs	r1, #128	; 0x80
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f003 fe10 	bl	800881c <VL53L0X_WrByte>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8004c00:	7bbb      	ldrb	r3, [r7, #14]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d037      	beq.n	8004c76 <VL53L0X_StartMeasurement+0xfa>
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d04f      	beq.n	8004caa <VL53L0X_StartMeasurement+0x12e>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d167      	bne.n	8004cde <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8004c0e:	2201      	movs	r2, #1
 8004c10:	2100      	movs	r1, #0
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f003 fe02 	bl	800881c <VL53L0X_WrByte>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8004c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d15d      	bne.n	8004ce4 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d008      	beq.n	8004c44 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8004c32:	f107 030d 	add.w	r3, r7, #13
 8004c36:	461a      	mov	r2, r3
 8004c38:	2100      	movs	r1, #0
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f003 fe70 	bl	8008920 <VL53L0X_RdByte>
 8004c40:	4603      	mov	r3, r0
 8004c42:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	3301      	adds	r3, #1
 8004c48:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8004c4a:	7b7a      	ldrb	r2, [r7, #13]
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004c52:	7bfa      	ldrb	r2, [r7, #15]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d107      	bne.n	8004c68 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8004c58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d103      	bne.n	8004c68 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004c66:	d3e1      	bcc.n	8004c2c <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004c6e:	d339      	bcc.n	8004ce4 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8004c70:	23f9      	movs	r3, #249	; 0xf9
 8004c72:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8004c74:	e036      	b.n	8004ce4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004c7e:	2101      	movs	r1, #1
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff ff15 	bl	8004ab0 <VL53L0X_CheckAndLoadInterruptSettings>
 8004c86:	4603      	mov	r3, r0
 8004c88:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f003 fdc4 	bl	800881c <VL53L0X_WrByte>
 8004c94:	4603      	mov	r3, r0
 8004c96:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8004c98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d123      	bne.n	8004ce8 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004ca8:	e01e      	b.n	8004ce8 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d105      	bne.n	8004cbe <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff fefb 	bl	8004ab0 <VL53L0X_CheckAndLoadInterruptSettings>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f003 fdaa 	bl	800881c <VL53L0X_WrByte>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8004ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004cdc:	e006      	b.n	8004cec <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004cde:	23f8      	movs	r3, #248	; 0xf8
 8004ce0:	75fb      	strb	r3, [r7, #23]
 8004ce2:	e004      	b.n	8004cee <VL53L0X_StartMeasurement+0x172>
		break;
 8004ce4:	bf00      	nop
 8004ce6:	e002      	b.n	8004cee <VL53L0X_StartMeasurement+0x172>
		break;
 8004ce8:	bf00      	nop
 8004cea:	e000      	b.n	8004cee <VL53L0X_StartMeasurement+0x172>
		break;
 8004cec:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d04:	2300      	movs	r3, #0
 8004d06:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004d0e:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8004d10:	7bbb      	ldrb	r3, [r7, #14]
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d112      	bne.n	8004d3c <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8004d16:	f107 0308 	add.w	r3, r7, #8
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fb2b 	bl	8005378 <VL53L0X_GetInterruptMaskStatus>
 8004d22:	4603      	mov	r3, r0
 8004d24:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d103      	bne.n	8004d34 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	e01c      	b.n	8004d6e <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e018      	b.n	8004d6e <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8004d3c:	f107 030d 	add.w	r3, r7, #13
 8004d40:	461a      	mov	r2, r3
 8004d42:	2114      	movs	r1, #20
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f003 fdeb 	bl	8008920 <VL53L0X_RdByte>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8004d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10b      	bne.n	8004d6e <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8004d56:	7b7b      	ldrb	r3, [r7, #13]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2201      	movs	r2, #1
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	e002      	b.n	8004d6e <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <VL53L0X_WaitDeviceReadyForNewMeasurement>:

VL53L0X_Error VL53L0X_WaitDeviceReadyForNewMeasurement(VL53L0X_DEV Dev,
	uint32_t MaxLoop)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8004d84:	239d      	movs	r3, #157	; 0x9d
 8004d86:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented for VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8004d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <VL53L0X_GetRangingMeasurementData>:


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004d98:	b5b0      	push	{r4, r5, r7, lr}
 8004d9a:	b096      	sub	sp, #88	; 0x58
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004da8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004dac:	230c      	movs	r3, #12
 8004dae:	2114      	movs	r1, #20
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f003 fd07 	bl	80087c4 <VL53L0X_ReadMulti>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004dbc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f040 80d2 	bne.w	8004f6a <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8004dd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	4413      	add	r3, r2
 8004de4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2200      	movs	r2, #0
 8004dec:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8004dee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	4413      	add	r3, r2
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	025b      	lsls	r3, r3, #9
 8004e04:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e0a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004e0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004e22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004e26:	025b      	lsls	r3, r3, #9
 8004e28:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8004e2e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004e4a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004e4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8004e5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004e62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004e66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e6c:	d047      	beq.n	8004efe <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8004e6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e70:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004e74:	fb02 f303 	mul.w	r3, r2, r3
 8004e78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004e7c:	4a58      	ldr	r2, [pc, #352]	; (8004fe0 <VL53L0X_GetRangingMeasurementData+0x248>)
 8004e7e:	fb82 1203 	smull	r1, r2, r2, r3
 8004e82:	1192      	asrs	r2, r2, #6
 8004e84:	17db      	asrs	r3, r3, #31
 8004e86:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004e88:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	7f1b      	ldrb	r3, [r3, #28]
 8004e96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004e9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d02d      	beq.n	8004efe <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004ea2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ea4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004ea8:	fb02 f303 	mul.w	r3, r2, r3
 8004eac:	121b      	asrs	r3, r3, #8
 8004eae:	461a      	mov	r2, r3
				if ((SignalRate
 8004eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d10d      	bne.n	8004ed2 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8004eb6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8004ebe:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8004ec2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ec6:	e016      	b.n	8004ef6 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8004ec8:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004ecc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ed0:	e011      	b.n	8004ef6 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004ed2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed8:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004edc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ede:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004ee2:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004ee6:	121b      	asrs	r3, r3, #8
 8004ee8:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eec:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004eee:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004ef2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004ef6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004efa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004efe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00d      	beq.n	8004f22 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004f06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004f12:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	019b      	lsls	r3, r3, #6
 8004f1a:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	75da      	strb	r2, [r3, #23]
 8004f20:	e006      	b.n	8004f30 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004f28:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004f30:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004f34:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004f38:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	4613      	mov	r3, r2
 8004f44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f003 f9f0 	bl	800832c <VL53L0X_get_pal_range_status>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004f5a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d103      	bne.n	8004f6a <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004f62:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004f6a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d12f      	bne.n	8004fd2 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f107 040c 	add.w	r4, r7, #12
 8004f78:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004f8c:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004f9a:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004fa0:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004fa6:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004fac:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004fb2:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004fb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004fc2:	f107 050c 	add.w	r5, r7, #12
 8004fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004fd2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3750      	adds	r7, #80	; 0x50
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	10624dd3 	.word	0x10624dd3

08004fe4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff f8a7 	bl	8004148 <VL53L0X_SetDeviceMode>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fd08 	bl	8004a1c <VL53L0X_PerformSingleMeasurement>
 800500c:	4603      	mov	r3, r0
 800500e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d105      	bne.n	8005024 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff febc 	bl	8004d98 <VL53L0X_GetRangingMeasurementData>
 8005020:	4603      	mov	r3, r0
 8005022:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8005024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800502c:	2100      	movs	r1, #0
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f962 	bl	80052f8 <VL53L0X_ClearInterruptMask>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8005038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	4608      	mov	r0, r1
 800504e:	4611      	mov	r1, r2
 8005050:	461a      	mov	r2, r3
 8005052:	4603      	mov	r3, r0
 8005054:	70fb      	strb	r3, [r7, #3]
 8005056:	460b      	mov	r3, r1
 8005058:	70bb      	strb	r3, [r7, #2]
 800505a:	4613      	mov	r3, r2
 800505c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800505e:	2300      	movs	r3, #0
 8005060:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8005068:	23f6      	movs	r3, #246	; 0xf6
 800506a:	73fb      	strb	r3, [r7, #15]
 800506c:	e107      	b.n	800527e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800506e:	78bb      	ldrb	r3, [r7, #2]
 8005070:	2b14      	cmp	r3, #20
 8005072:	d110      	bne.n	8005096 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005074:	7e3b      	ldrb	r3, [r7, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d102      	bne.n	8005080 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800507a:	2310      	movs	r3, #16
 800507c:	73bb      	strb	r3, [r7, #14]
 800507e:	e001      	b.n	8005084 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8005080:	2301      	movs	r3, #1
 8005082:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8005084:	7bbb      	ldrb	r3, [r7, #14]
 8005086:	461a      	mov	r2, r3
 8005088:	2184      	movs	r1, #132	; 0x84
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f003 fbc6 	bl	800881c <VL53L0X_WrByte>
 8005090:	4603      	mov	r3, r0
 8005092:	73fb      	strb	r3, [r7, #15]
 8005094:	e0f3      	b.n	800527e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8005096:	78bb      	ldrb	r3, [r7, #2]
 8005098:	2b15      	cmp	r3, #21
 800509a:	f040 8097 	bne.w	80051cc <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800509e:	2201      	movs	r2, #1
 80050a0:	21ff      	movs	r1, #255	; 0xff
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f003 fbba 	bl	800881c <VL53L0X_WrByte>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80050b2:	2200      	movs	r2, #0
 80050b4:	2100      	movs	r1, #0
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f003 fbb0 	bl	800881c <VL53L0X_WrByte>
 80050bc:	4603      	mov	r3, r0
 80050be:	461a      	mov	r2, r3
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80050c6:	2200      	movs	r2, #0
 80050c8:	21ff      	movs	r1, #255	; 0xff
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f003 fba6 	bl	800881c <VL53L0X_WrByte>
 80050d0:	4603      	mov	r3, r0
 80050d2:	461a      	mov	r2, r3
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80050da:	2201      	movs	r2, #1
 80050dc:	2180      	movs	r1, #128	; 0x80
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f003 fb9c 	bl	800881c <VL53L0X_WrByte>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80050ee:	2202      	movs	r2, #2
 80050f0:	2185      	movs	r1, #133	; 0x85
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f003 fb92 	bl	800881c <VL53L0X_WrByte>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	4313      	orrs	r3, r2
 8005100:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005102:	2204      	movs	r2, #4
 8005104:	21ff      	movs	r1, #255	; 0xff
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f003 fb88 	bl	800881c <VL53L0X_WrByte>
 800510c:	4603      	mov	r3, r0
 800510e:	461a      	mov	r2, r3
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	4313      	orrs	r3, r2
 8005114:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005116:	2200      	movs	r2, #0
 8005118:	21cd      	movs	r1, #205	; 0xcd
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f003 fb7e 	bl	800881c <VL53L0X_WrByte>
 8005120:	4603      	mov	r3, r0
 8005122:	461a      	mov	r2, r3
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	4313      	orrs	r3, r2
 8005128:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800512a:	2211      	movs	r2, #17
 800512c:	21cc      	movs	r1, #204	; 0xcc
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f003 fb74 	bl	800881c <VL53L0X_WrByte>
 8005134:	4603      	mov	r3, r0
 8005136:	461a      	mov	r2, r3
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	4313      	orrs	r3, r2
 800513c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800513e:	2207      	movs	r2, #7
 8005140:	21ff      	movs	r1, #255	; 0xff
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f003 fb6a 	bl	800881c <VL53L0X_WrByte>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	4313      	orrs	r3, r2
 8005150:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005152:	2200      	movs	r2, #0
 8005154:	21be      	movs	r1, #190	; 0xbe
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f003 fb60 	bl	800881c <VL53L0X_WrByte>
 800515c:	4603      	mov	r3, r0
 800515e:	461a      	mov	r2, r3
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	4313      	orrs	r3, r2
 8005164:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005166:	2206      	movs	r2, #6
 8005168:	21ff      	movs	r1, #255	; 0xff
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f003 fb56 	bl	800881c <VL53L0X_WrByte>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	4313      	orrs	r3, r2
 8005178:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800517a:	2209      	movs	r2, #9
 800517c:	21cc      	movs	r1, #204	; 0xcc
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f003 fb4c 	bl	800881c <VL53L0X_WrByte>
 8005184:	4603      	mov	r3, r0
 8005186:	461a      	mov	r2, r3
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	4313      	orrs	r3, r2
 800518c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800518e:	2200      	movs	r2, #0
 8005190:	21ff      	movs	r1, #255	; 0xff
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f003 fb42 	bl	800881c <VL53L0X_WrByte>
 8005198:	4603      	mov	r3, r0
 800519a:	461a      	mov	r2, r3
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	4313      	orrs	r3, r2
 80051a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80051a2:	2201      	movs	r2, #1
 80051a4:	21ff      	movs	r1, #255	; 0xff
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f003 fb38 	bl	800881c <VL53L0X_WrByte>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80051b6:	2200      	movs	r2, #0
 80051b8:	2100      	movs	r1, #0
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f003 fb2e 	bl	800881c <VL53L0X_WrByte>
 80051c0:	4603      	mov	r3, r0
 80051c2:	461a      	mov	r2, r3
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	73fb      	strb	r3, [r7, #15]
 80051ca:	e058      	b.n	800527e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80051cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d121      	bne.n	8005218 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80051d4:	787b      	ldrb	r3, [r7, #1]
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d81b      	bhi.n	8005212 <VL53L0X_SetGpioConfig+0x1ce>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <VL53L0X_SetGpioConfig+0x19c>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	080051f5 	.word	0x080051f5
 80051e4:	080051fb 	.word	0x080051fb
 80051e8:	08005201 	.word	0x08005201
 80051ec:	08005207 	.word	0x08005207
 80051f0:	0800520d 	.word	0x0800520d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80051f4:	2300      	movs	r3, #0
 80051f6:	73bb      	strb	r3, [r7, #14]
				break;
 80051f8:	e00f      	b.n	800521a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80051fa:	2301      	movs	r3, #1
 80051fc:	73bb      	strb	r3, [r7, #14]
				break;
 80051fe:	e00c      	b.n	800521a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8005200:	2302      	movs	r3, #2
 8005202:	73bb      	strb	r3, [r7, #14]
				break;
 8005204:	e009      	b.n	800521a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8005206:	2303      	movs	r3, #3
 8005208:	73bb      	strb	r3, [r7, #14]
				break;
 800520a:	e006      	b.n	800521a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800520c:	2304      	movs	r3, #4
 800520e:	73bb      	strb	r3, [r7, #14]
				break;
 8005210:	e003      	b.n	800521a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8005212:	23f5      	movs	r3, #245	; 0xf5
 8005214:	73fb      	strb	r3, [r7, #15]
 8005216:	e000      	b.n	800521a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8005218:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800521a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d107      	bne.n	8005232 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8005222:	7bbb      	ldrb	r3, [r7, #14]
 8005224:	461a      	mov	r2, r3
 8005226:	210a      	movs	r1, #10
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f003 faf7 	bl	800881c <VL53L0X_WrByte>
 800522e:	4603      	mov	r3, r0
 8005230:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8005232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10f      	bne.n	800525a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800523a:	7e3b      	ldrb	r3, [r7, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	73bb      	strb	r3, [r7, #14]
 8005244:	e001      	b.n	800524a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8005246:	2310      	movs	r3, #16
 8005248:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800524a:	7bbb      	ldrb	r3, [r7, #14]
 800524c:	22ef      	movs	r2, #239	; 0xef
 800524e:	2184      	movs	r1, #132	; 0x84
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f003 fb31 	bl	80088b8 <VL53L0X_UpdateByte>
 8005256:	4603      	mov	r3, r0
 8005258:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800525a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	787a      	ldrb	r2, [r7, #1]
 8005266:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800526a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d105      	bne.n	800527e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005272:	2100      	movs	r1, #0
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f83f 	bl	80052f8 <VL53L0X_ClearInterruptMask>
 800527a:	4603      	mov	r3, r0
 800527c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800527e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop

0800528c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	460b      	mov	r3, r1
 800529a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800529c:	2300      	movs	r3, #0
 800529e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80052a0:	f107 0314 	add.w	r3, r7, #20
 80052a4:	461a      	mov	r2, r3
 80052a6:	210e      	movs	r1, #14
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f003 fb63 	bl	8008974 <VL53L0X_RdWord>
 80052ae:	4603      	mov	r3, r0
 80052b0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80052b2:	8abb      	ldrh	r3, [r7, #20]
 80052b4:	045b      	lsls	r3, r3, #17
 80052b6:	461a      	mov	r2, r3
 80052b8:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <VL53L0X_GetInterruptThresholds+0x68>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80052c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10f      	bne.n	80052e8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80052c8:	f107 0314 	add.w	r3, r7, #20
 80052cc:	461a      	mov	r2, r3
 80052ce:	210c      	movs	r1, #12
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f003 fb4f 	bl	8008974 <VL53L0X_RdWord>
 80052d6:	4603      	mov	r3, r0
 80052d8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80052da:	8abb      	ldrh	r3, [r7, #20]
 80052dc:	045b      	lsls	r3, r3, #17
 80052de:	461a      	mov	r2, r3
 80052e0:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <VL53L0X_GetInterruptThresholds+0x68>)
 80052e2:	4013      	ands	r3, r2
		*pThresholdHigh =
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80052e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	1ffe0000 	.word	0x1ffe0000

080052f8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800530a:	2201      	movs	r2, #1
 800530c:	210b      	movs	r1, #11
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f003 fa84 	bl	800881c <VL53L0X_WrByte>
 8005314:	4603      	mov	r3, r0
 8005316:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005318:	2200      	movs	r2, #0
 800531a:	210b      	movs	r1, #11
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f003 fa7d 	bl	800881c <VL53L0X_WrByte>
 8005322:	4603      	mov	r3, r0
 8005324:	461a      	mov	r2, r3
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	4313      	orrs	r3, r2
 800532a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800532c:	f107 030d 	add.w	r3, r7, #13
 8005330:	461a      	mov	r2, r3
 8005332:	2113      	movs	r1, #19
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f003 faf3 	bl	8008920 <VL53L0X_RdByte>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	4313      	orrs	r3, r2
 8005342:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8005344:	7bbb      	ldrb	r3, [r7, #14]
 8005346:	3301      	adds	r3, #1
 8005348:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800534a:	7b7b      	ldrb	r3, [r7, #13]
 800534c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005350:	2b00      	cmp	r3, #0
 8005352:	d006      	beq.n	8005362 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8005354:	7bbb      	ldrb	r3, [r7, #14]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d803      	bhi.n	8005362 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800535a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0d3      	beq.n	800530a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8005362:	7bbb      	ldrb	r3, [r7, #14]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005368:	23f4      	movs	r3, #244	; 0xf4
 800536a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800536c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005382:	2300      	movs	r3, #0
 8005384:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8005386:	f107 030e 	add.w	r3, r7, #14
 800538a:	461a      	mov	r2, r3
 800538c:	2113      	movs	r1, #19
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f003 fac6 	bl	8008920 <VL53L0X_RdByte>
 8005394:	4603      	mov	r3, r0
 8005396:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005398:	7bbb      	ldrb	r3, [r7, #14]
 800539a:	f003 0207 	and.w	r2, r3, #7
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80053a2:	7bbb      	ldrb	r3, [r7, #14]
 80053a4:	f003 0318 	and.w	r3, r3, #24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80053ac:	23fa      	movs	r3, #250	; 0xfa
 80053ae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80053b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fa03 	bl	80057dc <VL53L0X_perform_ref_spad_management>
 80053d6:	4603      	mov	r3, r0
 80053d8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80053da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80053f4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80053f8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80053fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053fe:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8005400:	f107 0308 	add.w	r3, r7, #8
 8005404:	461a      	mov	r2, r3
 8005406:	2128      	movs	r1, #40	; 0x28
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f003 fab3 	bl	8008974 <VL53L0X_RdWord>
 800540e:	4603      	mov	r3, r0
 8005410:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8005412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d11e      	bne.n	8005458 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800541a:	893b      	ldrh	r3, [r7, #8]
 800541c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005420:	b29b      	uxth	r3, r3
 8005422:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8005424:	893b      	ldrh	r3, [r7, #8]
 8005426:	461a      	mov	r2, r3
 8005428:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800542c:	429a      	cmp	r2, r3
 800542e:	dd0b      	ble.n	8005448 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8005430:	893a      	ldrh	r2, [r7, #8]
 8005432:	897b      	ldrh	r3, [r7, #10]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	b29b      	uxth	r3, r3
 8005438:	b21b      	sxth	r3, r3
 800543a:	461a      	mov	r2, r3
					* 250;
 800543c:	23fa      	movs	r3, #250	; 0xfa
 800543e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e007      	b.n	8005458 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005448:	893b      	ldrh	r3, [r7, #8]
 800544a:	b21b      	sxth	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	23fa      	movs	r3, #250	; 0xfa
 8005450:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8005458:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005464:	b480      	push	{r7}
 8005466:	b08b      	sub	sp, #44	; 0x2c
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8005472:	2308      	movs	r3, #8
 8005474:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	f04f 32ff 	mov.w	r2, #4294967295
 8005480:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	fbb2 f3f3 	udiv	r3, r2, r3
 800548a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	fbb3 f2f2 	udiv	r2, r3, r2
 8005494:	69b9      	ldr	r1, [r7, #24]
 8005496:	fb01 f202 	mul.w	r2, r1, r2
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
 80054a2:	e030      	b.n	8005506 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	4413      	add	r3, r2
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80054b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d11e      	bne.n	80054f8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80054ba:	7ffa      	ldrb	r2, [r7, #31]
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	fa42 f303 	asr.w	r3, r2, r3
 80054c2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80054c8:	e016      	b.n	80054f8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80054ca:	7ffb      	ldrb	r3, [r7, #31]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00b      	beq.n	80054ec <get_next_good_spad+0x88>
				success = 1;
 80054d4:	2301      	movs	r3, #1
 80054d6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	fb02 f203 	mul.w	r2, r2, r3
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	4413      	add	r3, r2
 80054e4:	461a      	mov	r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	601a      	str	r2, [r3, #0]
				break;
 80054ea:	e009      	b.n	8005500 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80054ec:	7ffb      	ldrb	r3, [r7, #31]
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	3301      	adds	r3, #1
 80054f6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80054f8:	6a3a      	ldr	r2, [r7, #32]
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d3e4      	bcc.n	80054ca <get_next_good_spad+0x66>
				coarseIndex++) {
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	3301      	adds	r3, #1
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	429a      	cmp	r2, r3
 800550c:	d202      	bcs.n	8005514 <get_next_good_spad+0xb0>
 800550e:	7fbb      	ldrb	r3, [r7, #30]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0c7      	beq.n	80054a4 <get_next_good_spad+0x40>
		}
	}
}
 8005514:	bf00      	nop
 8005516:	372c      	adds	r7, #44	; 0x2c
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	099b      	lsrs	r3, r3, #6
 8005530:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8005532:	4a07      	ldr	r2, [pc, #28]	; (8005550 <is_aperture+0x30>)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <is_aperture+0x22>
		isAperture = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8005542:	7bfb      	ldrb	r3, [r7, #15]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	200002b8 	.word	0x200002b8

08005554 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8005554:	b480      	push	{r7}
 8005556:	b089      	sub	sp, #36	; 0x24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005560:	2300      	movs	r3, #0
 8005562:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005564:	2308      	movs	r3, #8
 8005566:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005570:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	fbb3 f2f2 	udiv	r2, r3, r2
 800557a:	69b9      	ldr	r1, [r7, #24]
 800557c:	fb01 f202 	mul.w	r2, r1, r2
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	429a      	cmp	r2, r3
 800558a:	d302      	bcc.n	8005592 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800558c:	23ce      	movs	r3, #206	; 0xce
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	e010      	b.n	80055b4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4413      	add	r3, r2
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	b25a      	sxtb	r2, r3
 800559c:	2101      	movs	r1, #1
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	fa01 f303 	lsl.w	r3, r1, r3
 80055a4:	b25b      	sxtb	r3, r3
 80055a6:	4313      	orrs	r3, r2
 80055a8:	b259      	sxtb	r1, r3
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	4413      	add	r3, r2
 80055b0:	b2ca      	uxtb	r2, r1
 80055b2:	701a      	strb	r2, [r3, #0]

	return status;
 80055b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3724      	adds	r7, #36	; 0x24
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80055ce:	2306      	movs	r3, #6
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	21b0      	movs	r1, #176	; 0xb0
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f003 f8c5 	bl	8008764 <VL53L0X_WriteMulti>
 80055da:	4603      	mov	r3, r0
 80055dc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80055de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80055f4:	2306      	movs	r3, #6
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	21b0      	movs	r1, #176	; 0xb0
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f003 f8e2 	bl	80087c4 <VL53L0X_ReadMulti>
 8005600:	4603      	mov	r3, r0
 8005602:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08c      	sub	sp, #48	; 0x30
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	460b      	mov	r3, r1
 800561e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005620:	2300      	movs	r3, #0
 8005622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005628:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800562a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800562e:	2300      	movs	r3, #0
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
 8005632:	e02b      	b.n	800568c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005634:	f107 031c 	add.w	r3, r7, #28
 8005638:	6a3a      	ldr	r2, [r7, #32]
 800563a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff ff11 	bl	8005464 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d103      	bne.n	8005652 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800564a:	23ce      	movs	r3, #206	; 0xce
 800564c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005650:	e020      	b.n	8005694 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	461a      	mov	r2, r3
 8005656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005658:	4413      	add	r3, r2
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff ff60 	bl	8005520 <is_aperture>
 8005660:	4603      	mov	r3, r0
 8005662:	461a      	mov	r2, r3
 8005664:	7afb      	ldrb	r3, [r7, #11]
 8005666:	4293      	cmp	r3, r2
 8005668:	d003      	beq.n	8005672 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800566a:	23ce      	movs	r3, #206	; 0xce
 800566c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005670:	e010      	b.n	8005694 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8005676:	6a3a      	ldr	r2, [r7, #32]
 8005678:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800567a:	6838      	ldr	r0, [r7, #0]
 800567c:	f7ff ff6a 	bl	8005554 <enable_spad_bit>
		currentSpad++;
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	3301      	adds	r3, #1
 8005684:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	3301      	adds	r3, #1
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
 800568c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800568e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005690:	429a      	cmp	r2, r3
 8005692:	d3cf      	bcc.n	8005634 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8005694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005696:	6a3a      	ldr	r2, [r7, #32]
 8005698:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800569a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f7ff ff8d 	bl	80055c4 <set_ref_spad_map>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80056b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d121      	bne.n	80056fc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80056b8:	f107 0314 	add.w	r3, r7, #20
 80056bc:	4619      	mov	r1, r3
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7ff ff93 	bl	80055ea <get_ref_spad_map>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80056ce:	e011      	b.n	80056f4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	4413      	add	r3, r2
 80056d6:	781a      	ldrb	r2, [r3, #0]
 80056d8:	f107 0114 	add.w	r1, r7, #20
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	440b      	add	r3, r1
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d003      	beq.n	80056ee <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80056e6:	23ce      	movs	r3, #206	; 0xce
 80056e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80056ec:	e006      	b.n	80056fc <enable_ref_spads+0xec>
			}
			i++;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	3301      	adds	r3, #1
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d3e9      	bcc.n	80056d0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80056fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005700:	4618      	mov	r0, r3
 8005702:	3730      	adds	r7, #48	; 0x30
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005712:	2300      	movs	r3, #0
 8005714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005724:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005728:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800572c:	2b00      	cmp	r3, #0
 800572e:	d107      	bne.n	8005740 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8005730:	22c0      	movs	r2, #192	; 0xc0
 8005732:	2101      	movs	r1, #1
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f003 f871 	bl	800881c <VL53L0X_WrByte>
 800573a:	4603      	mov	r3, r0
 800573c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005744:	2b00      	cmp	r3, #0
 8005746:	d108      	bne.n	800575a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005748:	f107 0308 	add.w	r3, r7, #8
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff fc48 	bl	8004fe4 <VL53L0X_PerformSingleRangingMeasurement>
 8005754:	4603      	mov	r3, r0
 8005756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800575a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800575e:	2b00      	cmp	r3, #0
 8005760:	d107      	bne.n	8005772 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005762:	2201      	movs	r2, #1
 8005764:	21ff      	movs	r1, #255	; 0xff
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f003 f858 	bl	800881c <VL53L0X_WrByte>
 800576c:	4603      	mov	r3, r0
 800576e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8005772:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005776:	2b00      	cmp	r3, #0
 8005778:	d107      	bne.n	800578a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	21b6      	movs	r1, #182	; 0xb6
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f003 f8f8 	bl	8008974 <VL53L0X_RdWord>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800578a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800578e:	2b00      	cmp	r3, #0
 8005790:	d107      	bne.n	80057a2 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005792:	2200      	movs	r2, #0
 8005794:	21ff      	movs	r1, #255	; 0xff
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f003 f840 	bl	800881c <VL53L0X_WrByte>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80057a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d112      	bne.n	80057d0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80057aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057ae:	461a      	mov	r2, r3
 80057b0:	2101      	movs	r1, #1
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f003 f832 	bl	800881c <VL53L0X_WrByte>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80057be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80057cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80057d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3728      	adds	r7, #40	; 0x28
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80057dc:	b590      	push	{r4, r7, lr}
 80057de:	b09d      	sub	sp, #116	; 0x74
 80057e0:	af06      	add	r7, sp, #24
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80057ee:	23b4      	movs	r3, #180	; 0xb4
 80057f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80057f4:	2303      	movs	r3, #3
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80057f8:	232c      	movs	r3, #44	; 0x2c
 80057fa:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8005808:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800580c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8005816:	2306      	movs	r3, #6
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8005840:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8005842:	2300      	movs	r3, #0
 8005844:	64bb      	str	r3, [r7, #72]	; 0x48
 8005846:	e009      	b.n	800585c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800584c:	4413      	add	r3, r2
 800584e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005858:	3301      	adds	r3, #1
 800585a:	64bb      	str	r3, [r7, #72]	; 0x48
 800585c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	429a      	cmp	r2, r3
 8005862:	d3f1      	bcc.n	8005848 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005864:	2201      	movs	r2, #1
 8005866:	21ff      	movs	r1, #255	; 0xff
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f002 ffd7 	bl	800881c <VL53L0X_WrByte>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005874:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005878:	2b00      	cmp	r3, #0
 800587a:	d107      	bne.n	800588c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800587c:	2200      	movs	r2, #0
 800587e:	214f      	movs	r1, #79	; 0x4f
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f002 ffcb 	bl	800881c <VL53L0X_WrByte>
 8005886:	4603      	mov	r3, r0
 8005888:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800588c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005890:	2b00      	cmp	r3, #0
 8005892:	d107      	bne.n	80058a4 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8005894:	222c      	movs	r2, #44	; 0x2c
 8005896:	214e      	movs	r1, #78	; 0x4e
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f002 ffbf 	bl	800881c <VL53L0X_WrByte>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80058a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d107      	bne.n	80058bc <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80058ac:	2200      	movs	r2, #0
 80058ae:	21ff      	movs	r1, #255	; 0xff
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f002 ffb3 	bl	800881c <VL53L0X_WrByte>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80058bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d109      	bne.n	80058d8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80058c4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80058c8:	461a      	mov	r2, r3
 80058ca:	21b6      	movs	r1, #182	; 0xb6
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f002 ffa5 	bl	800881c <VL53L0X_WrByte>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80058d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d107      	bne.n	80058f0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80058e0:	2200      	movs	r2, #0
 80058e2:	2180      	movs	r1, #128	; 0x80
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f002 ff99 	bl	800881c <VL53L0X_WrByte>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80058f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80058f8:	f107 0210 	add.w	r2, r7, #16
 80058fc:	f107 0111 	add.w	r1, r7, #17
 8005900:	2300      	movs	r3, #0
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fbbb 	bl	800607e <VL53L0X_perform_ref_calibration>
 8005908:	4603      	mov	r3, r0
 800590a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800590e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005912:	2b00      	cmp	r3, #0
 8005914:	d121      	bne.n	800595a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800591a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800591c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8005922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005924:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8005932:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005936:	f107 0218 	add.w	r2, r7, #24
 800593a:	9204      	str	r2, [sp, #16]
 800593c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800593e:	9203      	str	r2, [sp, #12]
 8005940:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005942:	9202      	str	r2, [sp, #8]
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	4623      	mov	r3, r4
 800594c:	4602      	mov	r2, r0
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7ff fe5e 	bl	8005610 <enable_ref_spads>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800595a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800595e:	2b00      	cmp	r3, #0
 8005960:	d174      	bne.n	8005a4c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8005966:	f107 0312 	add.w	r3, r7, #18
 800596a:	4619      	mov	r1, r3
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f7ff fecb 	bl	8005708 <perform_ref_signal_measurement>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005978:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800597c:	2b00      	cmp	r3, #0
 800597e:	d161      	bne.n	8005a44 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8005980:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005982:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005984:	429a      	cmp	r2, r3
 8005986:	d25d      	bcs.n	8005a44 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8005988:	2300      	movs	r3, #0
 800598a:	64bb      	str	r3, [r7, #72]	; 0x48
 800598c:	e009      	b.n	80059a2 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005992:	4413      	add	r3, r2
 8005994:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800599c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800599e:	3301      	adds	r3, #1
 80059a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80059a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d3f1      	bcc.n	800598e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80059aa:	e002      	b.n	80059b2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80059ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ae:	3301      	adds	r3, #1
 80059b0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80059b2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80059b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b8:	4413      	add	r3, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff fdb0 	bl	8005520 <is_aperture>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80059c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d3ee      	bcc.n	80059ac <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80059ce:	2301      	movs	r3, #1
 80059d0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80059d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80059e2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80059e6:	f107 0218 	add.w	r2, r7, #24
 80059ea:	9204      	str	r2, [sp, #16]
 80059ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ee:	9203      	str	r2, [sp, #12]
 80059f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059f2:	9202      	str	r2, [sp, #8]
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	4623      	mov	r3, r4
 80059fc:	4602      	mov	r2, r0
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7ff fe06 	bl	8005610 <enable_ref_spads>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005a0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d11b      	bne.n	8005a4a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8005a16:	f107 0312 	add.w	r3, r7, #18
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7ff fe73 	bl	8005708 <perform_ref_signal_measurement>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8005a28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10c      	bne.n	8005a4a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8005a30:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8005a32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d208      	bcs.n	8005a4a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a40:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8005a42:	e002      	b.n	8005a4a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a48:	e000      	b.n	8005a4c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8005a4a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005a4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f040 80af 	bne.w	8005bb4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8005a56:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8005a58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	f240 80aa 	bls.w	8005bb4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8005a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8005a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8005a70:	f107 031c 	add.w	r3, r7, #28
 8005a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a76:	4618      	mov	r0, r3
 8005a78:	f003 f82a 	bl	8008ad0 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8005a7c:	8a7b      	ldrh	r3, [r7, #18]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bfb8      	it	lt
 8005a88:	425b      	neglt	r3, r3
 8005a8a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8005a92:	e086      	b.n	8005ba2 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8005a9a:	f107 0314 	add.w	r3, r7, #20
 8005a9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aa2:	f7ff fcdf 	bl	8005464 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aac:	d103      	bne.n	8005ab6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005aae:	23ce      	movs	r3, #206	; 0xce
 8005ab0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8005ab4:	e07e      	b.n	8005bb4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8005ab6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4413      	add	r3, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fd2e 	bl	8005520 <is_aperture>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8005ad4:	e06e      	b.n	8005bb4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8005ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad8:	3301      	adds	r3, #1
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8005ae6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fd32 	bl	8005554 <enable_spad_bit>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005af6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10c      	bne.n	8005b18 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8005afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b00:	3301      	adds	r3, #1
 8005b02:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7ff fd59 	bl	80055c4 <set_ref_spad_map>
 8005b12:	4603      	mov	r3, r0
 8005b14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8005b18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d146      	bne.n	8005bae <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8005b20:	f107 0312 	add.w	r3, r7, #18
 8005b24:	4619      	mov	r1, r3
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff fdee 	bl	8005708 <perform_ref_signal_measurement>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8005b32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d13b      	bne.n	8005bb2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8005b3a:	8a7b      	ldrh	r3, [r7, #18]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	bfb8      	it	lt
 8005b46:	425b      	neglt	r3, r3
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8005b4a:	8a7b      	ldrh	r3, [r7, #18]
 8005b4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d21c      	bcs.n	8005b8c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8005b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d914      	bls.n	8005b84 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8005b5a:	f107 031c 	add.w	r3, r7, #28
 8005b5e:	4619      	mov	r1, r3
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f7ff fd2f 	bl	80055c4 <set_ref_spad_map>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8005b72:	f107 011c 	add.w	r1, r7, #28
 8005b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f002 ffa9 	bl	8008ad0 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b80:	3b01      	subs	r3, #1
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8a:	e00a      	b.n	8005ba2 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8005b96:	f107 031c 	add.w	r3, r7, #28
 8005b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f002 ff97 	bl	8008ad0 <memcpy>
		while (!complete) {
 8005ba2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f43f af74 	beq.w	8005a94 <VL53L0X_perform_ref_spad_management+0x2b8>
 8005bac:	e002      	b.n	8005bb4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005bae:	bf00      	nop
 8005bb0:	e000      	b.n	8005bb4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005bb2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005bb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d115      	bne.n	8005be8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bc0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005bc8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	781a      	ldrb	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8005be8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	375c      	adds	r7, #92	; 0x5c
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd90      	pop	{r4, r7, pc}

08005bf4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8005bf4:	b590      	push	{r4, r7, lr}
 8005bf6:	b093      	sub	sp, #76	; 0x4c
 8005bf8:	af06      	add	r7, sp, #24
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8005c0c:	23b4      	movs	r3, #180	; 0xb4
 8005c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8005c12:	2306      	movs	r3, #6
 8005c14:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8005c16:	232c      	movs	r3, #44	; 0x2c
 8005c18:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	21ff      	movs	r1, #255	; 0xff
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f002 fdfc 	bl	800881c <VL53L0X_WrByte>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005c2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d107      	bne.n	8005c42 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8005c32:	2200      	movs	r2, #0
 8005c34:	214f      	movs	r1, #79	; 0x4f
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f002 fdf0 	bl	800881c <VL53L0X_WrByte>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005c42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d107      	bne.n	8005c5a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8005c4a:	222c      	movs	r2, #44	; 0x2c
 8005c4c:	214e      	movs	r1, #78	; 0x4e
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f002 fde4 	bl	800881c <VL53L0X_WrByte>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005c5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d107      	bne.n	8005c72 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c62:	2200      	movs	r2, #0
 8005c64:	21ff      	movs	r1, #255	; 0xff
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f002 fdd8 	bl	800881c <VL53L0X_WrByte>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005c72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8005c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c7e:	461a      	mov	r2, r3
 8005c80:	21b6      	movs	r1, #182	; 0xb6
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f002 fdca 	bl	800881c <VL53L0X_WrByte>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
 8005c92:	e009      	b.n	8005ca8 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d3f1      	bcc.n	8005c94 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d011      	beq.n	8005cda <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005cb6:	e002      	b.n	8005cbe <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	3301      	adds	r3, #1
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005cbe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	4413      	add	r3, r2
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fc2a 	bl	8005520 <is_aperture>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <VL53L0X_set_reference_spads+0xe6>
 8005cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d3ee      	bcc.n	8005cb8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8005ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cea:	79f9      	ldrb	r1, [r7, #7]
 8005cec:	f107 0214 	add.w	r2, r7, #20
 8005cf0:	9204      	str	r2, [sp, #16]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	9203      	str	r2, [sp, #12]
 8005cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf8:	9202      	str	r2, [sp, #8]
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	4623      	mov	r3, r4
 8005d02:	4602      	mov	r2, r0
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f7ff fc83 	bl	8005610 <enable_ref_spads>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8005d10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10c      	bne.n	8005d32 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	79fa      	ldrb	r2, [r7, #7]
 8005d2e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8005d32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3734      	adds	r7, #52	; 0x34
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd90      	pop	{r4, r7, pc}

08005d3e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10a      	bne.n	8005d6c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	2100      	movs	r1, #0
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f002 fd5a 	bl	800881c <VL53L0X_WrByte>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d104      	bne.n	8005d7e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f9bf 	bl	80060f8 <VL53L0X_measurement_poll_for_completion>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d105      	bne.n	8005d92 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005d86:	2100      	movs	r1, #0
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff fab5 	bl	80052f8 <VL53L0X_ClearInterruptMask>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f002 fd3c 	bl	800881c <VL53L0X_WrByte>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	70fb      	strb	r3, [r7, #3]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	70bb      	strb	r3, [r7, #2]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	21ff      	movs	r1, #255	; 0xff
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f002 fd1e 	bl	800881c <VL53L0X_WrByte>
 8005de0:	4603      	mov	r3, r0
 8005de2:	461a      	mov	r2, r3
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005dea:	2200      	movs	r2, #0
 8005dec:	2100      	movs	r1, #0
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f002 fd14 	bl	800881c <VL53L0X_WrByte>
 8005df4:	4603      	mov	r3, r0
 8005df6:	461a      	mov	r2, r3
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	21ff      	movs	r1, #255	; 0xff
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f002 fd0a 	bl	800881c <VL53L0X_WrByte>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8005e12:	78fb      	ldrb	r3, [r7, #3]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01e      	beq.n	8005e56 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005e18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d009      	beq.n	8005e34 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	21cb      	movs	r1, #203	; 0xcb
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f002 fd7b 	bl	8008920 <VL53L0X_RdByte>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005e34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d02a      	beq.n	8005e92 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005e3c:	f107 030e 	add.w	r3, r7, #14
 8005e40:	461a      	mov	r2, r3
 8005e42:	21ee      	movs	r1, #238	; 0xee
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f002 fd6b 	bl	8008920 <VL53L0X_RdByte>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	73fb      	strb	r3, [r7, #15]
 8005e54:	e01d      	b.n	8005e92 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005e56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005e5e:	78bb      	ldrb	r3, [r7, #2]
 8005e60:	461a      	mov	r2, r3
 8005e62:	21cb      	movs	r1, #203	; 0xcb
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f002 fcd9 	bl	800881c <VL53L0X_WrByte>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005e74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005e7c:	787b      	ldrb	r3, [r7, #1]
 8005e7e:	2280      	movs	r2, #128	; 0x80
 8005e80:	21ee      	movs	r1, #238	; 0xee
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f002 fd18 	bl	80088b8 <VL53L0X_UpdateByte>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005e92:	2201      	movs	r2, #1
 8005e94:	21ff      	movs	r1, #255	; 0xff
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f002 fcc0 	bl	800881c <VL53L0X_WrByte>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f002 fcb6 	bl	800881c <VL53L0X_WrByte>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005eba:	2200      	movs	r2, #0
 8005ebc:	21ff      	movs	r1, #255	; 0xff
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f002 fcac 	bl	800881c <VL53L0X_WrByte>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005ece:	7bbb      	ldrb	r3, [r7, #14]
 8005ed0:	f023 0310 	bic.w	r3, r3, #16
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	701a      	strb	r2, [r3, #0]

	return Status;
 8005eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b08a      	sub	sp, #40	; 0x28
 8005eea:	af04      	add	r7, sp, #16
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	71fb      	strb	r3, [r7, #7]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005efc:	2300      	movs	r3, #0
 8005efe:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005f10:	79bb      	ldrb	r3, [r7, #6]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005f1c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005f1e:	2201      	movs	r2, #1
 8005f20:	2101      	movs	r1, #1
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f002 fc7a 	bl	800881c <VL53L0X_WrByte>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d105      	bne.n	8005f40 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005f34:	2140      	movs	r1, #64	; 0x40
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff ff01 	bl	8005d3e <VL53L0X_perform_single_ref_calibration>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d115      	bne.n	8005f74 <VL53L0X_perform_vhv_calibration+0x8e>
 8005f48:	79fb      	ldrb	r3, [r7, #7]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d112      	bne.n	8005f74 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005f4e:	7d39      	ldrb	r1, [r7, #20]
 8005f50:	7d7a      	ldrb	r2, [r7, #21]
 8005f52:	2300      	movs	r3, #0
 8005f54:	9303      	str	r3, [sp, #12]
 8005f56:	2301      	movs	r3, #1
 8005f58:	9302      	str	r3, [sp, #8]
 8005f5a:	f107 0313 	add.w	r3, r7, #19
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	460b      	mov	r3, r1
 8005f66:	2101      	movs	r1, #1
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7ff ff23 	bl	8005db4 <VL53L0X_ref_calibration_io>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	75fb      	strb	r3, [r7, #23]
 8005f72:	e002      	b.n	8005f7a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d112      	bne.n	8005fa8 <VL53L0X_perform_vhv_calibration+0xc2>
 8005f82:	79bb      	ldrb	r3, [r7, #6]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00f      	beq.n	8005fa8 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005f88:	7dbb      	ldrb	r3, [r7, #22]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f002 fc44 	bl	800881c <VL53L0X_WrByte>
 8005f94:	4603      	mov	r3, r0
 8005f96:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005f98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d103      	bne.n	8005fa8 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	7dba      	ldrb	r2, [r7, #22]
 8005fa4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	; 0x28
 8005fb8:	af04      	add	r7, sp, #16
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	71fb      	strb	r3, [r7, #7]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005fda:	79bb      	ldrb	r3, [r7, #6]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005fe6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005fe8:	2202      	movs	r2, #2
 8005fea:	2101      	movs	r1, #1
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f002 fc15 	bl	800881c <VL53L0X_WrByte>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d105      	bne.n	800600a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005ffe:	2100      	movs	r1, #0
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff fe9c 	bl	8005d3e <VL53L0X_perform_single_ref_calibration>
 8006006:	4603      	mov	r3, r0
 8006008:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800600a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d115      	bne.n	800603e <VL53L0X_perform_phase_calibration+0x8a>
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d112      	bne.n	800603e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006018:	7d39      	ldrb	r1, [r7, #20]
 800601a:	7d7a      	ldrb	r2, [r7, #21]
 800601c:	2301      	movs	r3, #1
 800601e:	9303      	str	r3, [sp, #12]
 8006020:	2300      	movs	r3, #0
 8006022:	9302      	str	r3, [sp, #8]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	9301      	str	r3, [sp, #4]
 8006028:	f107 0313 	add.w	r3, r7, #19
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	460b      	mov	r3, r1
 8006030:	2101      	movs	r1, #1
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff febe 	bl	8005db4 <VL53L0X_ref_calibration_io>
 8006038:	4603      	mov	r3, r0
 800603a:	75fb      	strb	r3, [r7, #23]
 800603c:	e002      	b.n	8006044 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006044:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d112      	bne.n	8006072 <VL53L0X_perform_phase_calibration+0xbe>
 800604c:	79bb      	ldrb	r3, [r7, #6]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00f      	beq.n	8006072 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006052:	7dbb      	ldrb	r3, [r7, #22]
 8006054:	461a      	mov	r2, r3
 8006056:	2101      	movs	r1, #1
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f002 fbdf 	bl	800881c <VL53L0X_WrByte>
 800605e:	4603      	mov	r3, r0
 8006060:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006062:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d103      	bne.n	8006072 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	7dba      	ldrb	r2, [r7, #22]
 800606e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b086      	sub	sp, #24
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
 800608a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800608c:	2300      	movs	r3, #0
 800608e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800609a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800609c:	78fa      	ldrb	r2, [r7, #3]
 800609e:	2300      	movs	r3, #0
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7ff ff1f 	bl	8005ee6 <VL53L0X_perform_vhv_calibration>
 80060a8:	4603      	mov	r3, r0
 80060aa:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80060ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d107      	bne.n	80060c4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80060b4:	78fa      	ldrb	r2, [r7, #3]
 80060b6:	2300      	movs	r3, #0
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f7ff ff7a 	bl	8005fb4 <VL53L0X_perform_phase_calibration>
 80060c0:	4603      	mov	r3, r0
 80060c2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80060c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10f      	bne.n	80060ec <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80060cc:	7dbb      	ldrb	r3, [r7, #22]
 80060ce:	461a      	mov	r2, r3
 80060d0:	2101      	movs	r1, #1
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f002 fba2 	bl	800881c <VL53L0X_WrByte>
 80060d8:	4603      	mov	r3, r0
 80060da:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80060dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d103      	bne.n	80060ec <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	7dba      	ldrb	r2, [r7, #22]
 80060e8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80060ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3718      	adds	r7, #24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006100:	2300      	movs	r3, #0
 8006102:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800610c:	f107 030f 	add.w	r3, r7, #15
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fe fdf1 	bl	8004cfa <VL53L0X_GetMeasurementDataReady>
 8006118:	4603      	mov	r3, r0
 800611a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800611c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d110      	bne.n	8006146 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d00f      	beq.n	800614a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	3301      	adds	r3, #1
 800612e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006136:	d302      	bcc.n	800613e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006138:	23f9      	movs	r3, #249	; 0xf9
 800613a:	75fb      	strb	r3, [r7, #23]
			break;
 800613c:	e006      	b.n	800614c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f002 fc8c 	bl	8008a5c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006144:	e7e2      	b.n	800610c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8006146:	bf00      	nop
 8006148:	e000      	b.n	800614c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800614a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800614c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	3301      	adds	r3, #1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	4603      	mov	r3, r0
 8006186:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800618c:	79fb      	ldrb	r3, [r7, #7]
 800618e:	085b      	lsrs	r3, r3, #1
 8006190:	b2db      	uxtb	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80061b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061b4:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80061b6:	e002      	b.n	80061be <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	089b      	lsrs	r3, r3, #2
 80061bc:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d8f8      	bhi.n	80061b8 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80061c6:	e017      	b.n	80061f8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	4413      	add	r3, r2
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d30b      	bcc.n	80061ec <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4413      	add	r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	4413      	add	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e002      	b.n	80061f2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	089b      	lsrs	r3, r3, #2
 80061f6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e4      	bne.n	80061c8 <VL53L0X_isqrt+0x24>
	}

	return res;
 80061fe:	68fb      	ldr	r3, [r7, #12]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006214:	2300      	movs	r3, #0
 8006216:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006218:	2200      	movs	r2, #0
 800621a:	2183      	movs	r1, #131	; 0x83
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f002 fafd 	bl	800881c <VL53L0X_WrByte>
 8006222:	4603      	mov	r3, r0
 8006224:	461a      	mov	r2, r3
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	4313      	orrs	r3, r2
 800622a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800622c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d11e      	bne.n	8006272 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006238:	f107 030f 	add.w	r3, r7, #15
 800623c:	461a      	mov	r2, r3
 800623e:	2183      	movs	r1, #131	; 0x83
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f002 fb6d 	bl	8008920 <VL53L0X_RdByte>
 8006246:	4603      	mov	r3, r0
 8006248:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <VL53L0X_device_read_strobe+0x5a>
 8006250:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d106      	bne.n	8006266 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	3301      	adds	r3, #1
 800625c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006264:	d3e8      	bcc.n	8006238 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800626c:	d301      	bcc.n	8006272 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800626e:	23f9      	movs	r3, #249	; 0xf9
 8006270:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8006272:	2201      	movs	r2, #1
 8006274:	2183      	movs	r1, #131	; 0x83
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f002 fad0 	bl	800881c <VL53L0X_WrByte>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	4313      	orrs	r3, r2
 8006284:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8006286:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b098      	sub	sp, #96	; 0x60
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800629e:	2300      	movs	r3, #0
 80062a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80062c2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80062c6:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80062c8:	2300      	movs	r3, #0
 80062ca:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80062da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80062de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80062e2:	2b07      	cmp	r3, #7
 80062e4:	f000 8408 	beq.w	8006af8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80062e8:	2201      	movs	r2, #1
 80062ea:	2180      	movs	r1, #128	; 0x80
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f002 fa95 	bl	800881c <VL53L0X_WrByte>
 80062f2:	4603      	mov	r3, r0
 80062f4:	461a      	mov	r2, r3
 80062f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006300:	2201      	movs	r2, #1
 8006302:	21ff      	movs	r1, #255	; 0xff
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f002 fa89 	bl	800881c <VL53L0X_WrByte>
 800630a:	4603      	mov	r3, r0
 800630c:	461a      	mov	r2, r3
 800630e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006312:	4313      	orrs	r3, r2
 8006314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006318:	2200      	movs	r2, #0
 800631a:	2100      	movs	r1, #0
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f002 fa7d 	bl	800881c <VL53L0X_WrByte>
 8006322:	4603      	mov	r3, r0
 8006324:	461a      	mov	r2, r3
 8006326:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800632a:	4313      	orrs	r3, r2
 800632c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006330:	2206      	movs	r2, #6
 8006332:	21ff      	movs	r1, #255	; 0xff
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f002 fa71 	bl	800881c <VL53L0X_WrByte>
 800633a:	4603      	mov	r3, r0
 800633c:	461a      	mov	r2, r3
 800633e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006342:	4313      	orrs	r3, r2
 8006344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006348:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800634c:	461a      	mov	r2, r3
 800634e:	2183      	movs	r1, #131	; 0x83
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f002 fae5 	bl	8008920 <VL53L0X_RdByte>
 8006356:	4603      	mov	r3, r0
 8006358:	461a      	mov	r2, r3
 800635a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800635e:	4313      	orrs	r3, r2
 8006360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006364:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006368:	f043 0304 	orr.w	r3, r3, #4
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	2183      	movs	r1, #131	; 0x83
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f002 fa52 	bl	800881c <VL53L0X_WrByte>
 8006378:	4603      	mov	r3, r0
 800637a:	461a      	mov	r2, r3
 800637c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006380:	4313      	orrs	r3, r2
 8006382:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006386:	2207      	movs	r2, #7
 8006388:	21ff      	movs	r1, #255	; 0xff
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f002 fa46 	bl	800881c <VL53L0X_WrByte>
 8006390:	4603      	mov	r3, r0
 8006392:	461a      	mov	r2, r3
 8006394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006398:	4313      	orrs	r3, r2
 800639a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800639e:	2201      	movs	r2, #1
 80063a0:	2181      	movs	r1, #129	; 0x81
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f002 fa3a 	bl	800881c <VL53L0X_WrByte>
 80063a8:	4603      	mov	r3, r0
 80063aa:	461a      	mov	r2, r3
 80063ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f002 fb50 	bl	8008a5c <VL53L0X_PollingDelay>
 80063bc:	4603      	mov	r3, r0
 80063be:	461a      	mov	r2, r3
 80063c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80063ca:	2201      	movs	r2, #1
 80063cc:	2180      	movs	r1, #128	; 0x80
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f002 fa24 	bl	800881c <VL53L0X_WrByte>
 80063d4:	4603      	mov	r3, r0
 80063d6:	461a      	mov	r2, r3
 80063d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063dc:	4313      	orrs	r3, r2
 80063de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8098 	beq.w	800651e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80063ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063f2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f040 8091 	bne.w	800651e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80063fc:	226b      	movs	r2, #107	; 0x6b
 80063fe:	2194      	movs	r1, #148	; 0x94
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f002 fa0b 	bl	800881c <VL53L0X_WrByte>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800640e:	4313      	orrs	r3, r2
 8006410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff fef9 	bl	800620c <VL53L0X_device_read_strobe>
 800641a:	4603      	mov	r3, r0
 800641c:	461a      	mov	r2, r3
 800641e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006422:	4313      	orrs	r3, r2
 8006424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800642c:	461a      	mov	r2, r3
 800642e:	2190      	movs	r1, #144	; 0x90
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f002 fad7 	bl	80089e4 <VL53L0X_RdDWord>
 8006436:	4603      	mov	r3, r0
 8006438:	461a      	mov	r2, r3
 800643a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800643e:	4313      	orrs	r3, r2
 8006440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	0a1b      	lsrs	r3, r3, #8
 8006448:	b2db      	uxtb	r3, r3
 800644a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800644e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	0bdb      	lsrs	r3, r3, #15
 8006456:	b2db      	uxtb	r3, r3
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006460:	2224      	movs	r2, #36	; 0x24
 8006462:	2194      	movs	r1, #148	; 0x94
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f002 f9d9 	bl	800881c <VL53L0X_WrByte>
 800646a:	4603      	mov	r3, r0
 800646c:	461a      	mov	r2, r3
 800646e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006472:	4313      	orrs	r3, r2
 8006474:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff fec7 	bl	800620c <VL53L0X_device_read_strobe>
 800647e:	4603      	mov	r3, r0
 8006480:	461a      	mov	r2, r3
 8006482:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006486:	4313      	orrs	r3, r2
 8006488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800648c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006490:	461a      	mov	r2, r3
 8006492:	2190      	movs	r1, #144	; 0x90
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f002 faa5 	bl	80089e4 <VL53L0X_RdDWord>
 800649a:	4603      	mov	r3, r0
 800649c:	461a      	mov	r2, r3
 800649e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	0e1b      	lsrs	r3, r3, #24
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	0c1b      	lsrs	r3, r3, #16
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80064c6:	2225      	movs	r2, #37	; 0x25
 80064c8:	2194      	movs	r1, #148	; 0x94
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f002 f9a6 	bl	800881c <VL53L0X_WrByte>
 80064d0:	4603      	mov	r3, r0
 80064d2:	461a      	mov	r2, r3
 80064d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064d8:	4313      	orrs	r3, r2
 80064da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fe94 	bl	800620c <VL53L0X_device_read_strobe>
 80064e4:	4603      	mov	r3, r0
 80064e6:	461a      	mov	r2, r3
 80064e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80064f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064f6:	461a      	mov	r2, r3
 80064f8:	2190      	movs	r1, #144	; 0x90
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f002 fa72 	bl	80089e4 <VL53L0X_RdDWord>
 8006500:	4603      	mov	r3, r0
 8006502:	461a      	mov	r2, r3
 8006504:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006508:	4313      	orrs	r3, r2
 800650a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	0e1b      	lsrs	r3, r3, #24
 8006512:	b2db      	uxtb	r3, r3
 8006514:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	b2db      	uxtb	r3, r3
 800651c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8189 	beq.w	800683c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800652a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800652e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 8182 	bne.w	800683c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006538:	2202      	movs	r2, #2
 800653a:	2194      	movs	r1, #148	; 0x94
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f002 f96d 	bl	800881c <VL53L0X_WrByte>
 8006542:	4603      	mov	r3, r0
 8006544:	461a      	mov	r2, r3
 8006546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800654a:	4313      	orrs	r3, r2
 800654c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff fe5b 	bl	800620c <VL53L0X_device_read_strobe>
 8006556:	4603      	mov	r3, r0
 8006558:	461a      	mov	r2, r3
 800655a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800655e:	4313      	orrs	r3, r2
 8006560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006564:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8006568:	461a      	mov	r2, r3
 800656a:	2190      	movs	r1, #144	; 0x90
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f002 f9d7 	bl	8008920 <VL53L0X_RdByte>
 8006572:	4603      	mov	r3, r0
 8006574:	461a      	mov	r2, r3
 8006576:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800657a:	4313      	orrs	r3, r2
 800657c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006580:	227b      	movs	r2, #123	; 0x7b
 8006582:	2194      	movs	r1, #148	; 0x94
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f002 f949 	bl	800881c <VL53L0X_WrByte>
 800658a:	4603      	mov	r3, r0
 800658c:	461a      	mov	r2, r3
 800658e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006592:	4313      	orrs	r3, r2
 8006594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff fe37 	bl	800620c <VL53L0X_device_read_strobe>
 800659e:	4603      	mov	r3, r0
 80065a0:	461a      	mov	r2, r3
 80065a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80065ac:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80065b0:	461a      	mov	r2, r3
 80065b2:	2190      	movs	r1, #144	; 0x90
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f002 f9b3 	bl	8008920 <VL53L0X_RdByte>
 80065ba:	4603      	mov	r3, r0
 80065bc:	461a      	mov	r2, r3
 80065be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80065c8:	2277      	movs	r2, #119	; 0x77
 80065ca:	2194      	movs	r1, #148	; 0x94
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f002 f925 	bl	800881c <VL53L0X_WrByte>
 80065d2:	4603      	mov	r3, r0
 80065d4:	461a      	mov	r2, r3
 80065d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065da:	4313      	orrs	r3, r2
 80065dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fe13 	bl	800620c <VL53L0X_device_read_strobe>
 80065e6:	4603      	mov	r3, r0
 80065e8:	461a      	mov	r2, r3
 80065ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80065f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065f8:	461a      	mov	r2, r3
 80065fa:	2190      	movs	r1, #144	; 0x90
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f002 f9f1 	bl	80089e4 <VL53L0X_RdDWord>
 8006602:	4603      	mov	r3, r0
 8006604:	461a      	mov	r2, r3
 8006606:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800660a:	4313      	orrs	r3, r2
 800660c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	0e5b      	lsrs	r3, r3, #25
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800661a:	b2db      	uxtb	r3, r3
 800661c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	0c9b      	lsrs	r3, r3, #18
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006628:	b2db      	uxtb	r3, r3
 800662a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	0adb      	lsrs	r3, r3, #11
 8006630:	b2db      	uxtb	r3, r3
 8006632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006636:	b2db      	uxtb	r3, r3
 8006638:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	091b      	lsrs	r3, r3, #4
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006644:	b2db      	uxtb	r3, r3
 8006646:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	b2db      	uxtb	r3, r3
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800665a:	2278      	movs	r2, #120	; 0x78
 800665c:	2194      	movs	r1, #148	; 0x94
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f002 f8dc 	bl	800881c <VL53L0X_WrByte>
 8006664:	4603      	mov	r3, r0
 8006666:	461a      	mov	r2, r3
 8006668:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800666c:	4313      	orrs	r3, r2
 800666e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff fdca 	bl	800620c <VL53L0X_device_read_strobe>
 8006678:	4603      	mov	r3, r0
 800667a:	461a      	mov	r2, r3
 800667c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006680:	4313      	orrs	r3, r2
 8006682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006686:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800668a:	461a      	mov	r2, r3
 800668c:	2190      	movs	r1, #144	; 0x90
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f002 f9a8 	bl	80089e4 <VL53L0X_RdDWord>
 8006694:	4603      	mov	r3, r0
 8006696:	461a      	mov	r2, r3
 8006698:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800669c:	4313      	orrs	r3, r2
 800669e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	0f5b      	lsrs	r3, r3, #29
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ac:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80066ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066b2:	4413      	add	r3, r2
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	0d9b      	lsrs	r3, r3, #22
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	0bdb      	lsrs	r3, r3, #15
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	085b      	lsrs	r3, r3, #1
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	019b      	lsls	r3, r3, #6
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006702:	2279      	movs	r2, #121	; 0x79
 8006704:	2194      	movs	r1, #148	; 0x94
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f002 f888 	bl	800881c <VL53L0X_WrByte>
 800670c:	4603      	mov	r3, r0
 800670e:	461a      	mov	r2, r3
 8006710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006714:	4313      	orrs	r3, r2
 8006716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff fd76 	bl	800620c <VL53L0X_device_read_strobe>
 8006720:	4603      	mov	r3, r0
 8006722:	461a      	mov	r2, r3
 8006724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006728:	4313      	orrs	r3, r2
 800672a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800672e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006732:	461a      	mov	r2, r3
 8006734:	2190      	movs	r1, #144	; 0x90
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f002 f954 	bl	80089e4 <VL53L0X_RdDWord>
 800673c:	4603      	mov	r3, r0
 800673e:	461a      	mov	r2, r3
 8006740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006744:	4313      	orrs	r3, r2
 8006746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	0e9b      	lsrs	r3, r3, #26
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006754:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8006756:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800675a:	4413      	add	r3, r2
 800675c:	b2db      	uxtb	r3, r3
 800675e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	0cdb      	lsrs	r3, r3, #19
 8006764:	b2db      	uxtb	r3, r3
 8006766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800676a:	b2db      	uxtb	r3, r3
 800676c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	0b1b      	lsrs	r3, r3, #12
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006778:	b2db      	uxtb	r3, r3
 800677a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	b2db      	uxtb	r3, r3
 8006782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006786:	b2db      	uxtb	r3, r3
 8006788:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	b2db      	uxtb	r3, r3
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	b2db      	uxtb	r3, r3
 8006792:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8006796:	b2db      	uxtb	r3, r3
 8006798:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800679c:	227a      	movs	r2, #122	; 0x7a
 800679e:	2194      	movs	r1, #148	; 0x94
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f002 f83b 	bl	800881c <VL53L0X_WrByte>
 80067a6:	4603      	mov	r3, r0
 80067a8:	461a      	mov	r2, r3
 80067aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff fd29 	bl	800620c <VL53L0X_device_read_strobe>
 80067ba:	4603      	mov	r3, r0
 80067bc:	461a      	mov	r2, r3
 80067be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80067c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067cc:	461a      	mov	r2, r3
 80067ce:	2190      	movs	r1, #144	; 0x90
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f002 f907 	bl	80089e4 <VL53L0X_RdDWord>
 80067d6:	4603      	mov	r3, r0
 80067d8:	461a      	mov	r2, r3
 80067da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067de:	4313      	orrs	r3, r2
 80067e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	0f9b      	lsrs	r3, r3, #30
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ee:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80067f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067f4:	4413      	add	r3, r2
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	0ddb      	lsrs	r3, r3, #23
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006804:	b2db      	uxtb	r3, r3
 8006806:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	0c1b      	lsrs	r3, r3, #16
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006812:	b2db      	uxtb	r3, r3
 8006814:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	0a5b      	lsrs	r3, r3, #9
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006820:	b2db      	uxtb	r3, r3
 8006822:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	089b      	lsrs	r3, r3, #2
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8006836:	2300      	movs	r3, #0
 8006838:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 80f1 	beq.w	8006a2a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006848:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800684c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006850:	2b00      	cmp	r3, #0
 8006852:	f040 80ea 	bne.w	8006a2a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006856:	227b      	movs	r2, #123	; 0x7b
 8006858:	2194      	movs	r1, #148	; 0x94
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 ffde 	bl	800881c <VL53L0X_WrByte>
 8006860:	4603      	mov	r3, r0
 8006862:	461a      	mov	r2, r3
 8006864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006868:	4313      	orrs	r3, r2
 800686a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff fccc 	bl	800620c <VL53L0X_device_read_strobe>
 8006874:	4603      	mov	r3, r0
 8006876:	461a      	mov	r2, r3
 8006878:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800687c:	4313      	orrs	r3, r2
 800687e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006886:	461a      	mov	r2, r3
 8006888:	2190      	movs	r1, #144	; 0x90
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f002 f8aa 	bl	80089e4 <VL53L0X_RdDWord>
 8006890:	4603      	mov	r3, r0
 8006892:	461a      	mov	r2, r3
 8006894:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006898:	4313      	orrs	r3, r2
 800689a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800689e:	227c      	movs	r2, #124	; 0x7c
 80068a0:	2194      	movs	r1, #148	; 0x94
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 ffba 	bl	800881c <VL53L0X_WrByte>
 80068a8:	4603      	mov	r3, r0
 80068aa:	461a      	mov	r2, r3
 80068ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068b0:	4313      	orrs	r3, r2
 80068b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff fca8 	bl	800620c <VL53L0X_device_read_strobe>
 80068bc:	4603      	mov	r3, r0
 80068be:	461a      	mov	r2, r3
 80068c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068c4:	4313      	orrs	r3, r2
 80068c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80068ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ce:	461a      	mov	r2, r3
 80068d0:	2190      	movs	r1, #144	; 0x90
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f002 f886 	bl	80089e4 <VL53L0X_RdDWord>
 80068d8:	4603      	mov	r3, r0
 80068da:	461a      	mov	r2, r3
 80068dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068e0:	4313      	orrs	r3, r2
 80068e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80068e6:	2273      	movs	r2, #115	; 0x73
 80068e8:	2194      	movs	r1, #148	; 0x94
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 ff96 	bl	800881c <VL53L0X_WrByte>
 80068f0:	4603      	mov	r3, r0
 80068f2:	461a      	mov	r2, r3
 80068f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068f8:	4313      	orrs	r3, r2
 80068fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff fc84 	bl	800620c <VL53L0X_device_read_strobe>
 8006904:	4603      	mov	r3, r0
 8006906:	461a      	mov	r2, r3
 8006908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800690c:	4313      	orrs	r3, r2
 800690e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006916:	461a      	mov	r2, r3
 8006918:	2190      	movs	r1, #144	; 0x90
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f002 f862 	bl	80089e4 <VL53L0X_RdDWord>
 8006920:	4603      	mov	r3, r0
 8006922:	461a      	mov	r2, r3
 8006924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006928:	4313      	orrs	r3, r2
 800692a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006932:	b29b      	uxth	r3, r3
 8006934:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006936:	2274      	movs	r2, #116	; 0x74
 8006938:	2194      	movs	r1, #148	; 0x94
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 ff6e 	bl	800881c <VL53L0X_WrByte>
 8006940:	4603      	mov	r3, r0
 8006942:	461a      	mov	r2, r3
 8006944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006948:	4313      	orrs	r3, r2
 800694a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff fc5c 	bl	800620c <VL53L0X_device_read_strobe>
 8006954:	4603      	mov	r3, r0
 8006956:	461a      	mov	r2, r3
 8006958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800695c:	4313      	orrs	r3, r2
 800695e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006966:	461a      	mov	r2, r3
 8006968:	2190      	movs	r1, #144	; 0x90
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f002 f83a 	bl	80089e4 <VL53L0X_RdDWord>
 8006970:	4603      	mov	r3, r0
 8006972:	461a      	mov	r2, r3
 8006974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006978:	4313      	orrs	r3, r2
 800697a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006982:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006984:	4313      	orrs	r3, r2
 8006986:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006988:	2275      	movs	r2, #117	; 0x75
 800698a:	2194      	movs	r1, #148	; 0x94
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 ff45 	bl	800881c <VL53L0X_WrByte>
 8006992:	4603      	mov	r3, r0
 8006994:	461a      	mov	r2, r3
 8006996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800699a:	4313      	orrs	r3, r2
 800699c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff fc33 	bl	800620c <VL53L0X_device_read_strobe>
 80069a6:	4603      	mov	r3, r0
 80069a8:	461a      	mov	r2, r3
 80069aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80069b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069b8:	461a      	mov	r2, r3
 80069ba:	2190      	movs	r1, #144	; 0x90
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f002 f811 	bl	80089e4 <VL53L0X_RdDWord>
 80069c2:	4603      	mov	r3, r0
 80069c4:	461a      	mov	r2, r3
 80069c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069ca:	4313      	orrs	r3, r2
 80069cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80069d8:	2276      	movs	r2, #118	; 0x76
 80069da:	2194      	movs	r1, #148	; 0x94
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 ff1d 	bl	800881c <VL53L0X_WrByte>
 80069e2:	4603      	mov	r3, r0
 80069e4:	461a      	mov	r2, r3
 80069e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff fc0b 	bl	800620c <VL53L0X_device_read_strobe>
 80069f6:	4603      	mov	r3, r0
 80069f8:	461a      	mov	r2, r3
 80069fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a08:	461a      	mov	r2, r3
 8006a0a:	2190      	movs	r1, #144	; 0x90
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 ffe9 	bl	80089e4 <VL53L0X_RdDWord>
 8006a12:	4603      	mov	r3, r0
 8006a14:	461a      	mov	r2, r3
 8006a16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a26:	4313      	orrs	r3, r2
 8006a28:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2181      	movs	r1, #129	; 0x81
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fef4 	bl	800881c <VL53L0X_WrByte>
 8006a34:	4603      	mov	r3, r0
 8006a36:	461a      	mov	r2, r3
 8006a38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006a42:	2206      	movs	r2, #6
 8006a44:	21ff      	movs	r1, #255	; 0xff
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 fee8 	bl	800881c <VL53L0X_WrByte>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a54:	4313      	orrs	r3, r2
 8006a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006a5a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006a5e:	461a      	mov	r2, r3
 8006a60:	2183      	movs	r1, #131	; 0x83
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 ff5c 	bl	8008920 <VL53L0X_RdByte>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a70:	4313      	orrs	r3, r2
 8006a72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a7a:	f023 0304 	bic.w	r3, r3, #4
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	2183      	movs	r1, #131	; 0x83
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 fec9 	bl	800881c <VL53L0X_WrByte>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a92:	4313      	orrs	r3, r2
 8006a94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006a98:	2201      	movs	r2, #1
 8006a9a:	21ff      	movs	r1, #255	; 0xff
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 febd 	bl	800881c <VL53L0X_WrByte>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 feb1 	bl	800881c <VL53L0X_WrByte>
 8006aba:	4603      	mov	r3, r0
 8006abc:	461a      	mov	r2, r3
 8006abe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ac8:	2200      	movs	r2, #0
 8006aca:	21ff      	movs	r1, #255	; 0xff
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 fea5 	bl	800881c <VL53L0X_WrByte>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2180      	movs	r1, #128	; 0x80
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 fe99 	bl	800881c <VL53L0X_WrByte>
 8006aea:	4603      	mov	r3, r0
 8006aec:	461a      	mov	r2, r3
 8006aee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006af8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f040 808f 	bne.w	8006c20 <VL53L0X_get_info_from_device+0x98e>
 8006b02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b06:	2b07      	cmp	r3, #7
 8006b08:	f000 808a 	beq.w	8006c20 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d024      	beq.n	8006b60 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006b16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b1a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d11e      	bne.n	8006b60 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006b28:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8006b32:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006b36:	2300      	movs	r3, #0
 8006b38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b3a:	e00e      	b.n	8006b5a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8006b3c:	f107 0208 	add.w	r2, r7, #8
 8006b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b42:	4413      	add	r3, r2
 8006b44:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006b50:	460a      	mov	r2, r1
 8006b52:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b56:	3301      	adds	r3, #1
 8006b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5c:	2b05      	cmp	r3, #5
 8006b5e:	dded      	ble.n	8006b3c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d018      	beq.n	8006b9c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006b6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b6e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d112      	bne.n	8006b9c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b80:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	33f3      	adds	r3, #243	; 0xf3
 8006b8e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006b90:	f107 0310 	add.w	r3, r7, #16
 8006b94:	4619      	mov	r1, r3
 8006b96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b98:	f002 f8d8 	bl	8008d4c <strcpy>

		}

		if (((option & 4) == 4) &&
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d030      	beq.n	8006c08 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006ba6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006baa:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d12a      	bne.n	8006c08 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc4:	025b      	lsls	r3, r3, #9
 8006bc6:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bcc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8006bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d011      	beq.n	8006c00 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8006bdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bea:	fb02 f303 	mul.w	r3, r2, r3
 8006bee:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8006bf0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8006bf4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006bf8:	425b      	negs	r3, r3
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8006c00:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006c08:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8006c16:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c20:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3760      	adds	r7, #96	; 0x60
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006c2c:	b490      	push	{r4, r7}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006c38:	f240 6377 	movw	r3, #1655	; 0x677
 8006c3c:	f04f 0400 	mov.w	r4, #0
 8006c40:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8006c44:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006c48:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	fb02 f303 	mul.w	r3, r2, r3
 8006c58:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc90      	pop	{r4, r7}
 8006c64:	4770      	bx	lr

08006c66 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b087      	sub	sp, #28
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d017      	beq.n	8006cb0 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006c86:	e005      	b.n	8006c94 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	085b      	lsrs	r3, r3, #1
 8006c8c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006c8e:	89fb      	ldrh	r3, [r7, #14]
 8006c90:	3301      	adds	r3, #1
 8006c92:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1f4      	bne.n	8006c88 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006c9e:	89fb      	ldrh	r3, [r7, #14]
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8006cac:	4413      	add	r3, r2
 8006cae:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8006cb0:	8afb      	ldrh	r3, [r7, #22]

}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006cd0:	88fa      	ldrh	r2, [r7, #6]
 8006cd2:	0a12      	lsrs	r2, r2, #8
 8006cd4:	b292      	uxth	r2, r2
 8006cd6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006cd8:	3301      	adds	r3, #1
 8006cda:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
	...

08006cec <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	4619      	mov	r1, r3
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7ff ff92 	bl	8006c2c <VL53L0X_calc_macro_period_ps>
 8006d08:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006d10:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <VL53L0X_calc_timeout_mclks+0x50>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d20:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	085b      	lsrs	r3, r3, #1
 8006d28:	441a      	add	r2, r3
	timeout_period_mclks =
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d30:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8006d32:	69fb      	ldr	r3, [r7, #28]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3720      	adds	r7, #32
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	10624dd3 	.word	0x10624dd3

08006d40 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	807b      	strh	r3, [r7, #2]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006d54:	787b      	ldrb	r3, [r7, #1]
 8006d56:	4619      	mov	r1, r3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff ff67 	bl	8006c2c <VL53L0X_calc_macro_period_ps>
 8006d5e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006d66:	4a0a      	ldr	r2, [pc, #40]	; (8006d90 <VL53L0X_calc_timeout_us+0x50>)
 8006d68:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6c:	099b      	lsrs	r3, r3, #6
 8006d6e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006d70:	887b      	ldrh	r3, [r7, #2]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	fb02 f303 	mul.w	r3, r2, r3
 8006d78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8006d7c:	4a04      	ldr	r2, [pc, #16]	; (8006d90 <VL53L0X_calc_timeout_us+0x50>)
 8006d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d82:	099b      	lsrs	r3, r3, #6
 8006d84:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006d86:	697b      	ldr	r3, [r7, #20]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	10624dd3 	.word	0x10624dd3

08006d94 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08c      	sub	sp, #48	; 0x30
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006dba:	7afb      	ldrb	r3, [r7, #11]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <get_sequence_step_timeout+0x38>
 8006dc0:	7afb      	ldrb	r3, [r7, #11]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d002      	beq.n	8006dcc <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d128      	bne.n	8006e1e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006dcc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7fd fa6f 	bl	80042b8 <VL53L0X_GetVcselPulsePeriod>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006de0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d109      	bne.n	8006dfc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006de8:	f107 0320 	add.w	r3, r7, #32
 8006dec:	461a      	mov	r2, r3
 8006dee:	2146      	movs	r1, #70	; 0x46
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f001 fd95 	bl	8008920 <VL53L0X_RdByte>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006dfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff ff5b 	bl	8006cbe <VL53L0X_decode_timeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006e0c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006e10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e12:	4619      	mov	r1, r3
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7ff ff93 	bl	8006d40 <VL53L0X_calc_timeout_us>
 8006e1a:	62b8      	str	r0, [r7, #40]	; 0x28
 8006e1c:	e092      	b.n	8006f44 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d135      	bne.n	8006e90 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e24:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006e28:	461a      	mov	r2, r3
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f7fd fa43 	bl	80042b8 <VL53L0X_GetVcselPulsePeriod>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006e38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f040 8081 	bne.w	8006f44 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e42:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006e46:	461a      	mov	r2, r3
 8006e48:	2100      	movs	r1, #0
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7fd fa34 	bl	80042b8 <VL53L0X_GetVcselPulsePeriod>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006e56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006e5e:	f107 031e 	add.w	r3, r7, #30
 8006e62:	461a      	mov	r2, r3
 8006e64:	2151      	movs	r1, #81	; 0x51
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f001 fd84 	bl	8008974 <VL53L0X_RdWord>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006e72:	8bfb      	ldrh	r3, [r7, #30]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff ff22 	bl	8006cbe <VL53L0X_decode_timeout>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006e7e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006e82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e84:	4619      	mov	r1, r3
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f7ff ff5a 	bl	8006d40 <VL53L0X_calc_timeout_us>
 8006e8c:	62b8      	str	r0, [r7, #40]	; 0x28
 8006e8e:	e059      	b.n	8006f44 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d156      	bne.n	8006f44 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006e96:	f107 0314 	add.w	r3, r7, #20
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7fd fb17 	bl	80044d0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01d      	beq.n	8006ee8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006eac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7fd f9ff 	bl	80042b8 <VL53L0X_GetVcselPulsePeriod>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006ec0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10f      	bne.n	8006ee8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006ec8:	f107 031e 	add.w	r3, r7, #30
 8006ecc:	461a      	mov	r2, r3
 8006ece:	2151      	movs	r1, #81	; 0x51
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f001 fd4f 	bl	8008974 <VL53L0X_RdWord>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006edc:	8bfb      	ldrh	r3, [r7, #30]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff feed 	bl	8006cbe <VL53L0X_decode_timeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006ee8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d109      	bne.n	8006f04 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ef0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7fd f9dd 	bl	80042b8 <VL53L0X_GetVcselPulsePeriod>
 8006efe:	4603      	mov	r3, r0
 8006f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006f04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10f      	bne.n	8006f2c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006f0c:	f107 031c 	add.w	r3, r7, #28
 8006f10:	461a      	mov	r2, r3
 8006f12:	2171      	movs	r1, #113	; 0x71
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f001 fd2d 	bl	8008974 <VL53L0X_RdWord>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006f20:	8bbb      	ldrh	r3, [r7, #28]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff fecb 	bl	8006cbe <VL53L0X_decode_timeout>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006f2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006f34:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7ff feff 	bl	8006d40 <VL53L0X_calc_timeout_us>
 8006f42:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f48:	601a      	str	r2, [r3, #0]

	return Status;
 8006f4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3730      	adds	r7, #48	; 0x30
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b08a      	sub	sp, #40	; 0x28
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f64:	2300      	movs	r3, #0
 8006f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <set_sequence_step_timeout+0x26>
 8006f70:	7afb      	ldrb	r3, [r7, #11]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d002      	beq.n	8006f7c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006f76:	7afb      	ldrb	r3, [r7, #11]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d138      	bne.n	8006fee <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f7c:	f107 031b 	add.w	r3, r7, #27
 8006f80:	461a      	mov	r2, r3
 8006f82:	2100      	movs	r1, #0
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f7fd f997 	bl	80042b8 <VL53L0X_GetVcselPulsePeriod>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006f90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d11a      	bne.n	8006fce <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006f98:	7efb      	ldrb	r3, [r7, #27]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7ff fea4 	bl	8006cec <VL53L0X_calc_timeout_mclks>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006fa8:	8bbb      	ldrh	r3, [r7, #28]
 8006faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fae:	d903      	bls.n	8006fb8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006fb0:	23ff      	movs	r3, #255	; 0xff
 8006fb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006fb6:	e004      	b.n	8006fc2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006fb8:	8bbb      	ldrh	r3, [r7, #28]
 8006fba:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006fc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006fce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f040 80ab 	bne.w	800712e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006fd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fdc:	461a      	mov	r2, r3
 8006fde:	2146      	movs	r1, #70	; 0x46
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f001 fc1b 	bl	800881c <VL53L0X_WrByte>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006fec:	e09f      	b.n	800712e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006fee:	7afb      	ldrb	r3, [r7, #11]
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d135      	bne.n	8007060 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006ff4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d11b      	bne.n	8007034 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ffc:	f107 031b 	add.w	r3, r7, #27
 8007000:	461a      	mov	r2, r3
 8007002:	2100      	movs	r1, #0
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7fd f957 	bl	80042b8 <VL53L0X_GetVcselPulsePeriod>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007010:	7efb      	ldrb	r3, [r7, #27]
 8007012:	461a      	mov	r2, r3
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f7ff fe68 	bl	8006cec <VL53L0X_calc_timeout_mclks>
 800701c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800701e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007022:	4618      	mov	r0, r3
 8007024:	f7ff fe1f 	bl	8006c66 <VL53L0X_encode_timeout>
 8007028:	4603      	mov	r3, r0
 800702a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800702c:	8b3a      	ldrh	r2, [r7, #24]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007034:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007038:	2b00      	cmp	r3, #0
 800703a:	d108      	bne.n	800704e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800703c:	8b3b      	ldrh	r3, [r7, #24]
 800703e:	461a      	mov	r2, r3
 8007040:	2151      	movs	r1, #81	; 0x51
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f001 fc0e 	bl	8008864 <VL53L0X_WrWord>
 8007048:	4603      	mov	r3, r0
 800704a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800704e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007052:	2b00      	cmp	r3, #0
 8007054:	d16b      	bne.n	800712e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800705e:	e066      	b.n	800712e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	2b04      	cmp	r3, #4
 8007064:	d160      	bne.n	8007128 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8007066:	f107 0310 	add.w	r3, r7, #16
 800706a:	4619      	mov	r1, r3
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7fd fa2f 	bl	80044d0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8007072:	2300      	movs	r3, #0
 8007074:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8007076:	7cfb      	ldrb	r3, [r7, #19]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01d      	beq.n	80070b8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800707c:	f107 031b 	add.w	r3, r7, #27
 8007080:	461a      	mov	r2, r3
 8007082:	2100      	movs	r1, #0
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f7fd f917 	bl	80042b8 <VL53L0X_GetVcselPulsePeriod>
 800708a:	4603      	mov	r3, r0
 800708c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8007090:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10f      	bne.n	80070b8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8007098:	f107 0318 	add.w	r3, r7, #24
 800709c:	461a      	mov	r2, r3
 800709e:	2151      	movs	r1, #81	; 0x51
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f001 fc67 	bl	8008974 <VL53L0X_RdWord>
 80070a6:	4603      	mov	r3, r0
 80070a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80070ac:	8b3b      	ldrh	r3, [r7, #24]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff fe05 	bl	8006cbe <VL53L0X_decode_timeout>
 80070b4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80070b6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80070b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d109      	bne.n	80070d4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80070c0:	f107 031b 	add.w	r3, r7, #27
 80070c4:	461a      	mov	r2, r3
 80070c6:	2101      	movs	r1, #1
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7fd f8f5 	bl	80042b8 <VL53L0X_GetVcselPulsePeriod>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80070d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d128      	bne.n	800712e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80070dc:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 80070de:	461a      	mov	r2, r3
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff fe02 	bl	8006cec <VL53L0X_calc_timeout_mclks>
 80070e8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80070ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070ec:	6a3a      	ldr	r2, [r7, #32]
 80070ee:	4413      	add	r3, r2
 80070f0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 80070f2:	6a38      	ldr	r0, [r7, #32]
 80070f4:	f7ff fdb7 	bl	8006c66 <VL53L0X_encode_timeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 80070fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007100:	2b00      	cmp	r3, #0
 8007102:	d108      	bne.n	8007116 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007104:	8bfb      	ldrh	r3, [r7, #30]
 8007106:	461a      	mov	r2, r3
 8007108:	2171      	movs	r1, #113	; 0x71
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f001 fbaa 	bl	8008864 <VL53L0X_WrWord>
 8007110:	4603      	mov	r3, r0
 8007112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8007116:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800711a:	2b00      	cmp	r3, #0
 800711c:	d107      	bne.n	800712e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8007126:	e002      	b.n	800712e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007128:	23fc      	movs	r3, #252	; 0xfc
 800712a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800712e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007132:	4618      	mov	r0, r3
 8007134:	3728      	adds	r7, #40	; 0x28
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b08a      	sub	sp, #40	; 0x28
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	460b      	mov	r3, r1
 8007144:	70fb      	strb	r3, [r7, #3]
 8007146:	4613      	mov	r3, r2
 8007148:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800714a:	2300      	movs	r3, #0
 800714c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8007150:	230c      	movs	r3, #12
 8007152:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8007156:	2312      	movs	r3, #18
 8007158:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800715c:	2308      	movs	r3, #8
 800715e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8007162:	230e      	movs	r3, #14
 8007164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800716c:	78bb      	ldrb	r3, [r7, #2]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007178:	23fc      	movs	r3, #252	; 0xfc
 800717a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800717e:	e020      	b.n	80071c2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10d      	bne.n	80071a2 <VL53L0X_set_vcsel_pulse_period+0x68>
 8007186:	78ba      	ldrb	r2, [r7, #2]
 8007188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800718c:	429a      	cmp	r2, r3
 800718e:	d304      	bcc.n	800719a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8007190:	78ba      	ldrb	r2, [r7, #2]
 8007192:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007196:	429a      	cmp	r2, r3
 8007198:	d903      	bls.n	80071a2 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800719a:	23fc      	movs	r3, #252	; 0xfc
 800719c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071a0:	e00f      	b.n	80071c2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d10c      	bne.n	80071c2 <VL53L0X_set_vcsel_pulse_period+0x88>
 80071a8:	78ba      	ldrb	r2, [r7, #2]
 80071aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d304      	bcc.n	80071bc <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80071b2:	78ba      	ldrb	r2, [r7, #2]
 80071b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d902      	bls.n	80071c2 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071bc:	23fc      	movs	r3, #252	; 0xfc
 80071be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80071c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80071ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071ce:	e239      	b.n	8007644 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d150      	bne.n	8007278 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80071d6:	78bb      	ldrb	r3, [r7, #2]
 80071d8:	2b0c      	cmp	r3, #12
 80071da:	d110      	bne.n	80071fe <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80071dc:	2218      	movs	r2, #24
 80071de:	2157      	movs	r1, #87	; 0x57
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 fb1b 	bl	800881c <VL53L0X_WrByte>
 80071e6:	4603      	mov	r3, r0
 80071e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80071ec:	2208      	movs	r2, #8
 80071ee:	2156      	movs	r1, #86	; 0x56
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 fb13 	bl	800881c <VL53L0X_WrByte>
 80071f6:	4603      	mov	r3, r0
 80071f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071fc:	e17f      	b.n	80074fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80071fe:	78bb      	ldrb	r3, [r7, #2]
 8007200:	2b0e      	cmp	r3, #14
 8007202:	d110      	bne.n	8007226 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8007204:	2230      	movs	r2, #48	; 0x30
 8007206:	2157      	movs	r1, #87	; 0x57
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 fb07 	bl	800881c <VL53L0X_WrByte>
 800720e:	4603      	mov	r3, r0
 8007210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8007214:	2208      	movs	r2, #8
 8007216:	2156      	movs	r1, #86	; 0x56
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 faff 	bl	800881c <VL53L0X_WrByte>
 800721e:	4603      	mov	r3, r0
 8007220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007224:	e16b      	b.n	80074fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8007226:	78bb      	ldrb	r3, [r7, #2]
 8007228:	2b10      	cmp	r3, #16
 800722a:	d110      	bne.n	800724e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800722c:	2240      	movs	r2, #64	; 0x40
 800722e:	2157      	movs	r1, #87	; 0x57
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 faf3 	bl	800881c <VL53L0X_WrByte>
 8007236:	4603      	mov	r3, r0
 8007238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800723c:	2208      	movs	r2, #8
 800723e:	2156      	movs	r1, #86	; 0x56
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 faeb 	bl	800881c <VL53L0X_WrByte>
 8007246:	4603      	mov	r3, r0
 8007248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800724c:	e157      	b.n	80074fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800724e:	78bb      	ldrb	r3, [r7, #2]
 8007250:	2b12      	cmp	r3, #18
 8007252:	f040 8154 	bne.w	80074fe <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007256:	2250      	movs	r2, #80	; 0x50
 8007258:	2157      	movs	r1, #87	; 0x57
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 fade 	bl	800881c <VL53L0X_WrByte>
 8007260:	4603      	mov	r3, r0
 8007262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8007266:	2208      	movs	r2, #8
 8007268:	2156      	movs	r1, #86	; 0x56
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fad6 	bl	800881c <VL53L0X_WrByte>
 8007270:	4603      	mov	r3, r0
 8007272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007276:	e142      	b.n	80074fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	2b01      	cmp	r3, #1
 800727c:	f040 813f 	bne.w	80074fe <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8007280:	78bb      	ldrb	r3, [r7, #2]
 8007282:	2b08      	cmp	r3, #8
 8007284:	d14c      	bne.n	8007320 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8007286:	2210      	movs	r2, #16
 8007288:	2148      	movs	r1, #72	; 0x48
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fac6 	bl	800881c <VL53L0X_WrByte>
 8007290:	4603      	mov	r3, r0
 8007292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8007296:	2208      	movs	r2, #8
 8007298:	2147      	movs	r1, #71	; 0x47
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 fabe 	bl	800881c <VL53L0X_WrByte>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80072a6:	2202      	movs	r2, #2
 80072a8:	2132      	movs	r1, #50	; 0x32
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 fab6 	bl	800881c <VL53L0X_WrByte>
 80072b0:	4603      	mov	r3, r0
 80072b2:	461a      	mov	r2, r3
 80072b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072b8:	4313      	orrs	r3, r2
 80072ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80072be:	220c      	movs	r2, #12
 80072c0:	2130      	movs	r1, #48	; 0x30
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 faaa 	bl	800881c <VL53L0X_WrByte>
 80072c8:	4603      	mov	r3, r0
 80072ca:	461a      	mov	r2, r3
 80072cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072d0:	4313      	orrs	r3, r2
 80072d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80072d6:	2201      	movs	r2, #1
 80072d8:	21ff      	movs	r1, #255	; 0xff
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f001 fa9e 	bl	800881c <VL53L0X_WrByte>
 80072e0:	4603      	mov	r3, r0
 80072e2:	461a      	mov	r2, r3
 80072e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e8:	4313      	orrs	r3, r2
 80072ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80072ee:	2230      	movs	r2, #48	; 0x30
 80072f0:	2130      	movs	r1, #48	; 0x30
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 fa92 	bl	800881c <VL53L0X_WrByte>
 80072f8:	4603      	mov	r3, r0
 80072fa:	461a      	mov	r2, r3
 80072fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007300:	4313      	orrs	r3, r2
 8007302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007306:	2200      	movs	r2, #0
 8007308:	21ff      	movs	r1, #255	; 0xff
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 fa86 	bl	800881c <VL53L0X_WrByte>
 8007310:	4603      	mov	r3, r0
 8007312:	461a      	mov	r2, r3
 8007314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007318:	4313      	orrs	r3, r2
 800731a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800731e:	e0ee      	b.n	80074fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8007320:	78bb      	ldrb	r3, [r7, #2]
 8007322:	2b0a      	cmp	r3, #10
 8007324:	d14c      	bne.n	80073c0 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8007326:	2228      	movs	r2, #40	; 0x28
 8007328:	2148      	movs	r1, #72	; 0x48
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 fa76 	bl	800881c <VL53L0X_WrByte>
 8007330:	4603      	mov	r3, r0
 8007332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8007336:	2208      	movs	r2, #8
 8007338:	2147      	movs	r1, #71	; 0x47
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 fa6e 	bl	800881c <VL53L0X_WrByte>
 8007340:	4603      	mov	r3, r0
 8007342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007346:	2203      	movs	r2, #3
 8007348:	2132      	movs	r1, #50	; 0x32
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 fa66 	bl	800881c <VL53L0X_WrByte>
 8007350:	4603      	mov	r3, r0
 8007352:	461a      	mov	r2, r3
 8007354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007358:	4313      	orrs	r3, r2
 800735a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800735e:	2209      	movs	r2, #9
 8007360:	2130      	movs	r1, #48	; 0x30
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 fa5a 	bl	800881c <VL53L0X_WrByte>
 8007368:	4603      	mov	r3, r0
 800736a:	461a      	mov	r2, r3
 800736c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007370:	4313      	orrs	r3, r2
 8007372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007376:	2201      	movs	r2, #1
 8007378:	21ff      	movs	r1, #255	; 0xff
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 fa4e 	bl	800881c <VL53L0X_WrByte>
 8007380:	4603      	mov	r3, r0
 8007382:	461a      	mov	r2, r3
 8007384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007388:	4313      	orrs	r3, r2
 800738a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800738e:	2220      	movs	r2, #32
 8007390:	2130      	movs	r1, #48	; 0x30
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 fa42 	bl	800881c <VL53L0X_WrByte>
 8007398:	4603      	mov	r3, r0
 800739a:	461a      	mov	r2, r3
 800739c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073a0:	4313      	orrs	r3, r2
 80073a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80073a6:	2200      	movs	r2, #0
 80073a8:	21ff      	movs	r1, #255	; 0xff
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fa36 	bl	800881c <VL53L0X_WrByte>
 80073b0:	4603      	mov	r3, r0
 80073b2:	461a      	mov	r2, r3
 80073b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073be:	e09e      	b.n	80074fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80073c0:	78bb      	ldrb	r3, [r7, #2]
 80073c2:	2b0c      	cmp	r3, #12
 80073c4:	d14c      	bne.n	8007460 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80073c6:	2238      	movs	r2, #56	; 0x38
 80073c8:	2148      	movs	r1, #72	; 0x48
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 fa26 	bl	800881c <VL53L0X_WrByte>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80073d6:	2208      	movs	r2, #8
 80073d8:	2147      	movs	r1, #71	; 0x47
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 fa1e 	bl	800881c <VL53L0X_WrByte>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80073e6:	2203      	movs	r2, #3
 80073e8:	2132      	movs	r1, #50	; 0x32
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f001 fa16 	bl	800881c <VL53L0X_WrByte>
 80073f0:	4603      	mov	r3, r0
 80073f2:	461a      	mov	r2, r3
 80073f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80073fe:	2208      	movs	r2, #8
 8007400:	2130      	movs	r1, #48	; 0x30
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f001 fa0a 	bl	800881c <VL53L0X_WrByte>
 8007408:	4603      	mov	r3, r0
 800740a:	461a      	mov	r2, r3
 800740c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007410:	4313      	orrs	r3, r2
 8007412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007416:	2201      	movs	r2, #1
 8007418:	21ff      	movs	r1, #255	; 0xff
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 f9fe 	bl	800881c <VL53L0X_WrByte>
 8007420:	4603      	mov	r3, r0
 8007422:	461a      	mov	r2, r3
 8007424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007428:	4313      	orrs	r3, r2
 800742a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800742e:	2220      	movs	r2, #32
 8007430:	2130      	movs	r1, #48	; 0x30
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 f9f2 	bl	800881c <VL53L0X_WrByte>
 8007438:	4603      	mov	r3, r0
 800743a:	461a      	mov	r2, r3
 800743c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007440:	4313      	orrs	r3, r2
 8007442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007446:	2200      	movs	r2, #0
 8007448:	21ff      	movs	r1, #255	; 0xff
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 f9e6 	bl	800881c <VL53L0X_WrByte>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007458:	4313      	orrs	r3, r2
 800745a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800745e:	e04e      	b.n	80074fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007460:	78bb      	ldrb	r3, [r7, #2]
 8007462:	2b0e      	cmp	r3, #14
 8007464:	d14b      	bne.n	80074fe <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007466:	2248      	movs	r2, #72	; 0x48
 8007468:	2148      	movs	r1, #72	; 0x48
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 f9d6 	bl	800881c <VL53L0X_WrByte>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8007476:	2208      	movs	r2, #8
 8007478:	2147      	movs	r1, #71	; 0x47
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 f9ce 	bl	800881c <VL53L0X_WrByte>
 8007480:	4603      	mov	r3, r0
 8007482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007486:	2203      	movs	r2, #3
 8007488:	2132      	movs	r1, #50	; 0x32
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 f9c6 	bl	800881c <VL53L0X_WrByte>
 8007490:	4603      	mov	r3, r0
 8007492:	461a      	mov	r2, r3
 8007494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007498:	4313      	orrs	r3, r2
 800749a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800749e:	2207      	movs	r2, #7
 80074a0:	2130      	movs	r1, #48	; 0x30
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 f9ba 	bl	800881c <VL53L0X_WrByte>
 80074a8:	4603      	mov	r3, r0
 80074aa:	461a      	mov	r2, r3
 80074ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074b0:	4313      	orrs	r3, r2
 80074b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80074b6:	2201      	movs	r2, #1
 80074b8:	21ff      	movs	r1, #255	; 0xff
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 f9ae 	bl	800881c <VL53L0X_WrByte>
 80074c0:	4603      	mov	r3, r0
 80074c2:	461a      	mov	r2, r3
 80074c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80074ce:	2220      	movs	r2, #32
 80074d0:	2130      	movs	r1, #48	; 0x30
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 f9a2 	bl	800881c <VL53L0X_WrByte>
 80074d8:	4603      	mov	r3, r0
 80074da:	461a      	mov	r2, r3
 80074dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80074e6:	2200      	movs	r2, #0
 80074e8:	21ff      	movs	r1, #255	; 0xff
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 f996 	bl	800881c <VL53L0X_WrByte>
 80074f0:	4603      	mov	r3, r0
 80074f2:	461a      	mov	r2, r3
 80074f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80074fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007502:	2b00      	cmp	r3, #0
 8007504:	d17f      	bne.n	8007606 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8007506:	78bb      	ldrb	r3, [r7, #2]
 8007508:	4618      	mov	r0, r3
 800750a:	f7fe fe38 	bl	800617e <VL53L0X_encode_vcsel_period>
 800750e:	4603      	mov	r3, r0
 8007510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8007514:	78fb      	ldrb	r3, [r7, #3]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800751a:	2b01      	cmp	r3, #1
 800751c:	d045      	beq.n	80075aa <VL53L0X_set_vcsel_pulse_period+0x470>
 800751e:	e06e      	b.n	80075fe <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007520:	f107 0314 	add.w	r3, r7, #20
 8007524:	461a      	mov	r2, r3
 8007526:	2103      	movs	r1, #3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7ff fc33 	bl	8006d94 <get_sequence_step_timeout>
 800752e:	4603      	mov	r3, r0
 8007530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007534:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007538:	2b00      	cmp	r3, #0
 800753a:	d109      	bne.n	8007550 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800753c:	f107 0310 	add.w	r3, r7, #16
 8007540:	461a      	mov	r2, r3
 8007542:	2102      	movs	r1, #2
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff fc25 	bl	8006d94 <get_sequence_step_timeout>
 800754a:	4603      	mov	r3, r0
 800754c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007550:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007554:	2b00      	cmp	r3, #0
 8007556:	d109      	bne.n	800756c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8007558:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800755c:	461a      	mov	r2, r3
 800755e:	2150      	movs	r1, #80	; 0x50
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 f95b 	bl	800881c <VL53L0X_WrByte>
 8007566:	4603      	mov	r3, r0
 8007568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800756c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007570:	2b00      	cmp	r3, #0
 8007572:	d108      	bne.n	8007586 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	461a      	mov	r2, r3
 8007578:	2103      	movs	r1, #3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff fceb 	bl	8006f56 <set_sequence_step_timeout>
 8007580:	4603      	mov	r3, r0
 8007582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8007586:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800758a:	2b00      	cmp	r3, #0
 800758c:	d108      	bne.n	80075a0 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	461a      	mov	r2, r3
 8007592:	2102      	movs	r1, #2
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff fcde 	bl	8006f56 <set_sequence_step_timeout>
 800759a:	4603      	mov	r3, r0
 800759c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	78ba      	ldrb	r2, [r7, #2]
 80075a4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80075a8:	e02e      	b.n	8007608 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80075aa:	f107 0318 	add.w	r3, r7, #24
 80075ae:	461a      	mov	r2, r3
 80075b0:	2104      	movs	r1, #4
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff fbee 	bl	8006d94 <get_sequence_step_timeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80075be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80075c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80075ca:	461a      	mov	r2, r3
 80075cc:	2170      	movs	r1, #112	; 0x70
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 f924 	bl	800881c <VL53L0X_WrByte>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80075da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d108      	bne.n	80075f4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	461a      	mov	r2, r3
 80075e6:	2104      	movs	r1, #4
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff fcb4 	bl	8006f56 <set_sequence_step_timeout>
 80075ee:	4603      	mov	r3, r0
 80075f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	78ba      	ldrb	r2, [r7, #2]
 80075f8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80075fc:	e004      	b.n	8007608 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075fe:	23fc      	movs	r3, #252	; 0xfc
 8007600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007604:	e000      	b.n	8007608 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8007606:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8007608:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800760c:	2b00      	cmp	r3, #0
 800760e:	d109      	bne.n	8007624 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007616:	69f9      	ldr	r1, [r7, #28]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7fc fe0f 	bl	800423c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800761e:	4603      	mov	r3, r0
 8007620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8007624:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007628:	2b00      	cmp	r3, #0
 800762a:	d109      	bne.n	8007640 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800762c:	f107 010f 	add.w	r1, r7, #15
 8007630:	2301      	movs	r3, #1
 8007632:	2200      	movs	r2, #0
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7fe fcbd 	bl	8005fb4 <VL53L0X_perform_phase_calibration>
 800763a:	4603      	mov	r3, r0
 800763c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007640:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007644:	4618      	mov	r0, r3
 8007646:	3728      	adds	r7, #40	; 0x28
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	460b      	mov	r3, r1
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800765a:	2300      	movs	r3, #0
 800765c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800765e:	7afb      	ldrb	r3, [r7, #11]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007664:	2b01      	cmp	r3, #1
 8007666:	d00a      	beq.n	800767e <VL53L0X_get_vcsel_pulse_period+0x32>
 8007668:	e013      	b.n	8007692 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800766a:	f107 0316 	add.w	r3, r7, #22
 800766e:	461a      	mov	r2, r3
 8007670:	2150      	movs	r1, #80	; 0x50
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f001 f954 	bl	8008920 <VL53L0X_RdByte>
 8007678:	4603      	mov	r3, r0
 800767a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800767c:	e00b      	b.n	8007696 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800767e:	f107 0316 	add.w	r3, r7, #22
 8007682:	461a      	mov	r2, r3
 8007684:	2170      	movs	r1, #112	; 0x70
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f001 f94a 	bl	8008920 <VL53L0X_RdByte>
 800768c:	4603      	mov	r3, r0
 800768e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007690:	e001      	b.n	8007696 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007692:	23fc      	movs	r3, #252	; 0xfc
 8007694:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007696:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d107      	bne.n	80076ae <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800769e:	7dbb      	ldrb	r3, [r7, #22]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fe fd59 	bl	8006158 <VL53L0X_decode_vcsel_period>
 80076a6:	4603      	mov	r3, r0
 80076a8:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	701a      	strb	r2, [r3, #0]

	return Status;
 80076ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b092      	sub	sp, #72	; 0x48
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80076ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80076ce:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80076d0:	f240 7376 	movw	r3, #1910	; 0x776
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80076d6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80076da:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80076dc:	f44f 7325 	mov.w	r3, #660	; 0x294
 80076e0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80076e2:	f240 234e 	movw	r3, #590	; 0x24e
 80076e6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80076e8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80076ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80076ee:	f44f 7325 	mov.w	r3, #660	; 0x294
 80076f2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80076f4:	f240 2326 	movw	r3, #550	; 0x226
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80076fe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8007702:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	429a      	cmp	r2, r3
 800770e:	d205      	bcs.n	800771c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007710:	23fc      	movs	r3, #252	; 0xfc
 8007712:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8007716:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800771a:	e0aa      	b.n	8007872 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800771c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007728:	f107 0314 	add.w	r3, r7, #20
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fc fece 	bl	80044d0 <VL53L0X_GetSequenceStepEnables>
 8007734:	4603      	mov	r3, r0
 8007736:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800773a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800773e:	2b00      	cmp	r3, #0
 8007740:	d15b      	bne.n	80077fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8007742:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007744:	2b00      	cmp	r3, #0
 8007746:	d105      	bne.n	8007754 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8007748:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800774a:	2b00      	cmp	r3, #0
 800774c:	d102      	bne.n	8007754 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800774e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007750:	2b00      	cmp	r3, #0
 8007752:	d052      	beq.n	80077fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007754:	f107 0310 	add.w	r3, r7, #16
 8007758:	461a      	mov	r2, r3
 800775a:	2102      	movs	r1, #2
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff fb19 	bl	8006d94 <get_sequence_step_timeout>
 8007762:	4603      	mov	r3, r0
 8007764:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8007768:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8007770:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007774:	e07d      	b.n	8007872 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8007776:	7d3b      	ldrb	r3, [r7, #20]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00f      	beq.n	800779c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800777c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800777e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007780:	4413      	add	r3, r2
 8007782:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8007784:	69fa      	ldr	r2, [r7, #28]
 8007786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007788:	429a      	cmp	r2, r3
 800778a:	d204      	bcs.n	8007796 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800778c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	643b      	str	r3, [r7, #64]	; 0x40
 8007794:	e002      	b.n	800779c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007796:	23fc      	movs	r3, #252	; 0xfc
 8007798:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800779c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 80077a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80077a8:	e063      	b.n	8007872 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80077aa:	7dbb      	ldrb	r3, [r7, #22]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d011      	beq.n	80077d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	4413      	add	r3, r2
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077be:	429a      	cmp	r2, r3
 80077c0:	d204      	bcs.n	80077cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80077c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	643b      	str	r3, [r7, #64]	; 0x40
 80077ca:	e016      	b.n	80077fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077cc:	23fc      	movs	r3, #252	; 0xfc
 80077ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80077d2:	e012      	b.n	80077fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80077d4:	7d7b      	ldrb	r3, [r7, #21]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00f      	beq.n	80077fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077de:	4413      	add	r3, r2
 80077e0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80077e2:	69fa      	ldr	r2, [r7, #28]
 80077e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d204      	bcs.n	80077f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80077ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	643b      	str	r3, [r7, #64]	; 0x40
 80077f2:	e002      	b.n	80077fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077f4:	23fc      	movs	r3, #252	; 0xfc
 80077f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80077fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007802:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007806:	e034      	b.n	8007872 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8007808:	7dfb      	ldrb	r3, [r7, #23]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d019      	beq.n	8007842 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800780e:	f107 030c 	add.w	r3, r7, #12
 8007812:	461a      	mov	r2, r3
 8007814:	2103      	movs	r1, #3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff fabc 	bl	8006d94 <get_sequence_step_timeout>
 800781c:	4603      	mov	r3, r0
 800781e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007826:	4413      	add	r3, r2
 8007828:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800782a:	69fa      	ldr	r2, [r7, #28]
 800782c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782e:	429a      	cmp	r2, r3
 8007830:	d204      	bcs.n	800783c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	643b      	str	r3, [r7, #64]	; 0x40
 800783a:	e002      	b.n	8007842 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800783c:	23fc      	movs	r3, #252	; 0xfc
 800783e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007842:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007846:	2b00      	cmp	r3, #0
 8007848:	d111      	bne.n	800786e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800784a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00e      	beq.n	800786e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8007858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800785a:	2104      	movs	r1, #4
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff fb7a 	bl	8006f56 <set_sequence_step_timeout>
 8007862:	4603      	mov	r3, r0
 8007864:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800786e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8007872:	4618      	mov	r0, r3
 8007874:	3748      	adds	r7, #72	; 0x48
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b090      	sub	sp, #64	; 0x40
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007884:	2300      	movs	r3, #0
 8007886:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800788a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800788e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007890:	f240 7376 	movw	r3, #1910	; 0x776
 8007894:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8007896:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800789a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800789c:	f44f 7325 	mov.w	r3, #660	; 0x294
 80078a0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80078a2:	f240 234e 	movw	r3, #590	; 0x24e
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80078a8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80078ac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80078ae:	f44f 7325 	mov.w	r3, #660	; 0x294
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80078b4:	f240 2326 	movw	r3, #550	; 0x226
 80078b8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80078be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c2:	441a      	add	r2, r3
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80078c8:	f107 0318 	add.w	r3, r7, #24
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fc fdfe 	bl	80044d0 <VL53L0X_GetSequenceStepEnables>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80078da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80078e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80078e6:	e075      	b.n	80079d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80078e8:	7e3b      	ldrb	r3, [r7, #24]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d105      	bne.n	80078fa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80078ee:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80078f4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d030      	beq.n	800795c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80078fa:	f107 0310 	add.w	r3, r7, #16
 80078fe:	461a      	mov	r2, r3
 8007900:	2102      	movs	r1, #2
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff fa46 	bl	8006d94 <get_sequence_step_timeout>
 8007908:	4603      	mov	r3, r0
 800790a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800790e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007912:	2b00      	cmp	r3, #0
 8007914:	d122      	bne.n	800795c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8007916:	7e3b      	ldrb	r3, [r7, #24]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007920:	6939      	ldr	r1, [r7, #16]
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007926:	441a      	add	r2, r3
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800792c:	7ebb      	ldrb	r3, [r7, #26]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007936:	6939      	ldr	r1, [r7, #16]
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	440b      	add	r3, r1
 800793c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800793e:	441a      	add	r2, r3
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	e00a      	b.n	800795c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007946:	7e7b      	ldrb	r3, [r7, #25]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d007      	beq.n	800795c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007950:	6939      	ldr	r1, [r7, #16]
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007956:	441a      	add	r2, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800795c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007960:	2b00      	cmp	r3, #0
 8007962:	d114      	bne.n	800798e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007964:	7efb      	ldrb	r3, [r7, #27]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d011      	beq.n	800798e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800796a:	f107 030c 	add.w	r3, r7, #12
 800796e:	461a      	mov	r2, r3
 8007970:	2103      	movs	r1, #3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff fa0e 	bl	8006d94 <get_sequence_step_timeout>
 8007978:	4603      	mov	r3, r0
 800797a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007982:	68f9      	ldr	r1, [r7, #12]
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007988:	441a      	add	r2, r3
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800798e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007992:	2b00      	cmp	r3, #0
 8007994:	d114      	bne.n	80079c0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007996:	7f3b      	ldrb	r3, [r7, #28]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d011      	beq.n	80079c0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800799c:	f107 0314 	add.w	r3, r7, #20
 80079a0:	461a      	mov	r2, r3
 80079a2:	2104      	movs	r1, #4
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff f9f5 	bl	8006d94 <get_sequence_step_timeout>
 80079aa:	4603      	mov	r3, r0
 80079ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80079b4:	6979      	ldr	r1, [r7, #20]
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80079ba:	441a      	add	r2, r3
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80079c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d103      	bne.n	80079d0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3740      	adds	r7, #64	; 0x40
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079e6:	2300      	movs	r3, #0
 80079e8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80079ee:	e0c6      	b.n	8007b7e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	4413      	add	r3, r2
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	74fb      	strb	r3, [r7, #19]
		Index++;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	3301      	adds	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007a00:	7cfb      	ldrb	r3, [r7, #19]
 8007a02:	2bff      	cmp	r3, #255	; 0xff
 8007a04:	f040 808d 	bne.w	8007b22 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	747b      	strb	r3, [r7, #17]
			Index++;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	3301      	adds	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8007a18:	7c7b      	ldrb	r3, [r7, #17]
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d87e      	bhi.n	8007b1c <VL53L0X_load_tuning_settings+0x140>
 8007a1e:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <VL53L0X_load_tuning_settings+0x48>)
 8007a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a24:	08007a35 	.word	0x08007a35
 8007a28:	08007a6f 	.word	0x08007a6f
 8007a2c:	08007aa9 	.word	0x08007aa9
 8007a30:	08007ae3 	.word	0x08007ae3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	4413      	add	r3, r2
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	743b      	strb	r3, [r7, #16]
				Index++;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	3301      	adds	r3, #1
 8007a42:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	4413      	add	r3, r2
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	3301      	adds	r3, #1
 8007a52:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007a54:	7c3b      	ldrb	r3, [r7, #16]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	021b      	lsls	r3, r3, #8
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	4413      	add	r3, r2
 8007a62:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	89ba      	ldrh	r2, [r7, #12]
 8007a68:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8007a6c:	e087      	b.n	8007b7e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	4413      	add	r3, r2
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	743b      	strb	r3, [r7, #16]
				Index++;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	4413      	add	r3, r2
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007a8e:	7c3b      	ldrb	r3, [r7, #16]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	021b      	lsls	r3, r3, #8
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	4413      	add	r3, r2
 8007a9c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	89ba      	ldrh	r2, [r7, #12]
 8007aa2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8007aa6:	e06a      	b.n	8007b7e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	4413      	add	r3, r2
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	743b      	strb	r3, [r7, #16]
				Index++;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4413      	add	r3, r2
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007ac8:	7c3b      	ldrb	r3, [r7, #16]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	4413      	add	r3, r2
 8007ad6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	89ba      	ldrh	r2, [r7, #12]
 8007adc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8007ae0:	e04d      	b.n	8007b7e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	743b      	strb	r3, [r7, #16]
				Index++;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	3301      	adds	r3, #1
 8007af0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	4413      	add	r3, r2
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	3301      	adds	r3, #1
 8007b00:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007b02:	7c3b      	ldrb	r3, [r7, #16]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	4413      	add	r3, r2
 8007b10:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	89ba      	ldrh	r2, [r7, #12]
 8007b16:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8007b1a:	e030      	b.n	8007b7e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b1c:	23fc      	movs	r3, #252	; 0xfc
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	e02d      	b.n	8007b7e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8007b22:	7cfb      	ldrb	r3, [r7, #19]
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	d828      	bhi.n	8007b7a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	3301      	adds	r3, #1
 8007b36:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007b38:	2300      	movs	r3, #0
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	e00f      	b.n	8007b5e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	4413      	add	r3, r2
 8007b44:	7819      	ldrb	r1, [r3, #0]
 8007b46:	f107 0208 	add.w	r2, r7, #8
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	460a      	mov	r2, r1
 8007b50:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	3301      	adds	r3, #1
 8007b56:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	61bb      	str	r3, [r7, #24]
 8007b5e:	7cfb      	ldrb	r3, [r7, #19]
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	dbeb      	blt.n	8007b3e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007b66:	7cfb      	ldrb	r3, [r7, #19]
 8007b68:	f107 0208 	add.w	r2, r7, #8
 8007b6c:	7cb9      	ldrb	r1, [r7, #18]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fdf8 	bl	8008764 <VL53L0X_WriteMulti>
 8007b74:	4603      	mov	r3, r0
 8007b76:	77fb      	strb	r3, [r7, #31]
 8007b78:	e001      	b.n	8007b7e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b7a:	23fc      	movs	r3, #252	; 0xfc
 8007b7c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	4413      	add	r3, r2
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d004      	beq.n	8007b94 <VL53L0X_load_tuning_settings+0x1b8>
 8007b8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f43f af2e 	beq.w	80079f0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3720      	adds	r7, #32
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bac:	2300      	movs	r3, #0
 8007bae:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007bb6:	f107 0313 	add.w	r3, r7, #19
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7fc fd13 	bl	80045e8 <VL53L0X_GetXTalkCompensationEnable>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8007bc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d111      	bne.n	8007bf2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007bce:	7cfb      	ldrb	r3, [r7, #19]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00e      	beq.n	8007bf2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	8a9b      	ldrh	r3, [r3, #20]
 8007bde:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	fb02 f303 	mul.w	r3, r2, r3
 8007be6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	3380      	adds	r3, #128	; 0x80
 8007bec:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007bf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3720      	adds	r7, #32
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b086      	sub	sp, #24
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8007c16:	f107 0310 	add.w	r3, r7, #16
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff ffbe 	bl	8007ba0 <VL53L0X_get_total_xtalk_rate>
 8007c24:	4603      	mov	r3, r0
 8007c26:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d105      	bne.n	8007c3c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	441a      	add	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	601a      	str	r2, [r3, #0]

	return Status;
 8007c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b09a      	sub	sp, #104	; 0x68
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007c56:	2312      	movs	r3, #18
 8007c58:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8007c5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c5e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007c60:	2342      	movs	r3, #66	; 0x42
 8007c62:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007c64:	2306      	movs	r3, #6
 8007c66:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007c68:	2307      	movs	r3, #7
 8007c6a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8007c78:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007c80:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8007c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8e:	3380      	adds	r3, #128	; 0x80
 8007c90:	0a1b      	lsrs	r3, r3, #8
 8007c92:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8007c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c98:	fb02 f303 	mul.w	r3, r2, r3
 8007c9c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d01b      	beq.n	8007ce0 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	029b      	lsls	r3, r3, #10
 8007cac:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb4:	4413      	add	r3, r2
 8007cb6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007cb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007cc2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	005b      	lsls	r3, r3, #1
 8007cc8:	4413      	add	r3, r2
 8007cca:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cd0:	fb02 f303 	mul.w	r3, r2, r3
 8007cd4:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8007cd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cd8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007cdc:	0c1b      	lsrs	r3, r3, #16
 8007cde:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ce4:	fb02 f303 	mul.w	r3, r2, r3
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007cf0:	0c1b      	lsrs	r3, r3, #16
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf8:	fb02 f303 	mul.w	r3, r2, r3
 8007cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007d04:	0c1b      	lsrs	r3, r3, #16
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d0a:	085a      	lsrs	r2, r3, #1
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0e:	441a      	add	r2, r3
 8007d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d16:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d1c:	fb02 f303 	mul.w	r3, r2, r3
 8007d20:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d28:	d302      	bcc.n	8007d30 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8007d2a:	4b55      	ldr	r3, [pc, #340]	; (8007e80 <VL53L0X_calc_dmax+0x238>)
 8007d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8007d2e:	e016      	b.n	8007d5e <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d32:	085a      	lsrs	r2, r3, #1
 8007d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d36:	441a      	add	r2, r3
 8007d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d44:	fb02 f303 	mul.w	r3, r2, r3
 8007d48:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007d50:	0c1b      	lsrs	r3, r3, #16
 8007d52:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d58:	fb02 f303 	mul.w	r3, r2, r3
 8007d5c:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d60:	039b      	lsls	r3, r3, #14
 8007d62:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d66:	4a47      	ldr	r2, [pc, #284]	; (8007e84 <VL53L0X_calc_dmax+0x23c>)
 8007d68:	fba2 2303 	umull	r2, r3, r2, r3
 8007d6c:	099b      	lsrs	r3, r3, #6
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d74:	fb02 f303 	mul.w	r3, r2, r3
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d7e:	fb02 f303 	mul.w	r3, r2, r3
 8007d82:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	3308      	adds	r3, #8
 8007d88:	091b      	lsrs	r3, r3, #4
 8007d8a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8007d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8007d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d96:	4613      	mov	r3, r2
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	4413      	add	r3, r2
 8007d9c:	011b      	lsls	r3, r3, #4
 8007d9e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007da6:	0b9b      	lsrs	r3, r3, #14
 8007da8:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dae:	4413      	add	r3, r2
 8007db0:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	4413      	add	r3, r2
 8007dba:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc4:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	039b      	lsls	r3, r3, #14
 8007dca:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	085b      	lsrs	r3, r3, #1
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dde:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007de4:	fb02 f303 	mul.w	r3, r2, r3
 8007de8:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007df0:	4a24      	ldr	r2, [pc, #144]	; (8007e84 <VL53L0X_calc_dmax+0x23c>)
 8007df2:	fba2 2303 	umull	r2, r3, r2, r3
 8007df6:	099b      	lsrs	r3, r3, #6
 8007df8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	011b      	lsls	r3, r3, #4
 8007dfe:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007e06:	4a1f      	ldr	r2, [pc, #124]	; (8007e84 <VL53L0X_calc_dmax+0x23c>)
 8007e08:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0c:	099b      	lsrs	r3, r3, #6
 8007e0e:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e12:	3380      	adds	r3, #128	; 0x80
 8007e14:	0a1b      	lsrs	r3, r3, #8
 8007e16:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d008      	beq.n	8007e30 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	085a      	lsrs	r2, r3, #1
 8007e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e24:	441a      	add	r2, r3
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e2e:	e001      	b.n	8007e34 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007e34:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007e36:	f7fe f9b5 	bl	80061a4 <VL53L0X_isqrt>
 8007e3a:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	085a      	lsrs	r2, r3, #1
 8007e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e48:	441a      	add	r2, r3
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e52:	e001      	b.n	8007e58 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007e58:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007e5a:	f7fe f9a3 	bl	80061a4 <VL53L0X_isqrt>
 8007e5e:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8007e60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d902      	bls.n	8007e74 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8007e6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e72:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007e74:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3768      	adds	r7, #104	; 0x68
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	fff00000 	.word	0xfff00000
 8007e84:	10624dd3 	.word	0x10624dd3

08007e88 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b0b4      	sub	sp, #208	; 0xd0
 8007e8c:	af04      	add	r7, sp, #16
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007e96:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8007e9e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8007ea6:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8007eaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8007eae:	f241 235c 	movw	r3, #4700	; 0x125c
 8007eb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007eb6:	4b9e      	ldr	r3, [pc, #632]	; (8008130 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007ebc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007ec2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ece:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007ed0:	4b98      	ldr	r3, [pc, #608]	; (8008134 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8007ed2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ed8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007eda:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007ede:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8007ee0:	f240 6377 	movw	r3, #1655	; 0x677
 8007ee4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007efa:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007efe:	0c1b      	lsrs	r3, r3, #16
 8007f00:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007f08:	f107 0310 	add.w	r3, r7, #16
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	68b9      	ldr	r1, [r7, #8]
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f7ff fe74 	bl	8007bfe <VL53L0X_get_total_signal_rate>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007f1c:	f107 0314 	add.w	r3, r7, #20
 8007f20:	461a      	mov	r2, r3
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f7ff fe3b 	bl	8007ba0 <VL53L0X_get_total_xtalk_rate>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f36:	fb02 f303 	mul.w	r3, r2, r3
 8007f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007f42:	0c1b      	lsrs	r3, r3, #16
 8007f44:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f4c:	fb02 f303 	mul.w	r3, r2, r3
 8007f50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007f54:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d902      	bls.n	8007f64 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007f64:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d168      	bne.n	800803e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007f72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007f7c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007f80:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007f84:	461a      	mov	r2, r3
 8007f86:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7fe feae 	bl	8006cec <VL53L0X_calc_timeout_mclks>
 8007f90:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8007fa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007fa6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007faa:	461a      	mov	r2, r3
 8007fac:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f7fe fe9b 	bl	8006cec <VL53L0X_calc_timeout_mclks>
 8007fb6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8007fbe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007fc2:	2b08      	cmp	r3, #8
 8007fc4:	d102      	bne.n	8007fcc <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fd0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007fd2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007fd6:	fb02 f303 	mul.w	r3, r2, r3
 8007fda:	02db      	lsls	r3, r3, #11
 8007fdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007fe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fe4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007fe8:	4a53      	ldr	r2, [pc, #332]	; (8008138 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007fea:	fba2 2303 	umull	r2, r3, r2, r3
 8007fee:	099b      	lsrs	r3, r3, #6
 8007ff0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007ff4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ff8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ffa:	fb02 f303 	mul.w	r3, r2, r3
 8007ffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008002:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008006:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800800a:	4a4b      	ldr	r2, [pc, #300]	; (8008138 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800800c:	fba2 2303 	umull	r2, r3, r2, r3
 8008010:	099b      	lsrs	r3, r3, #6
 8008012:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	3380      	adds	r3, #128	; 0x80
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008024:	fb02 f303 	mul.w	r3, r2, r3
 8008028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800802c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008030:	3380      	adds	r3, #128	; 0x80
 8008032:	0a1b      	lsrs	r3, r3, #8
 8008034:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	021b      	lsls	r3, r3, #8
 800803c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800803e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8008046:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800804a:	e165      	b.n	8008318 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800804c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10c      	bne.n	800806c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008058:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008060:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	e153      	b.n	8008314 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800806c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008070:	2b00      	cmp	r3, #0
 8008072:	d102      	bne.n	800807a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8008074:	2301      	movs	r3, #1
 8008076:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800807a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800807e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008082:	041a      	lsls	r2, r3, #16
 8008084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008086:	fbb2 f3f3 	udiv	r3, r2, r3
 800808a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800808e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008094:	429a      	cmp	r2, r3
 8008096:	d902      	bls.n	800809e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800809a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800809e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80080a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80080a6:	fb02 f303 	mul.w	r3, r2, r3
 80080aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80080ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80080b2:	4613      	mov	r3, r2
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe f872 	bl	80061a4 <VL53L0X_isqrt>
 80080c0:	4603      	mov	r3, r0
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	891b      	ldrh	r3, [r3, #8]
 80080ca:	461a      	mov	r2, r3
 80080cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080ce:	fb02 f303 	mul.w	r3, r2, r3
 80080d2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80080d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080d6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80080d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080dc:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80080de:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80080e0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80080e4:	4a14      	ldr	r2, [pc, #80]	; (8008138 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80080e6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ea:	099b      	lsrs	r3, r3, #6
 80080ec:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80080ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080f0:	041b      	lsls	r3, r3, #16
 80080f2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80080f6:	4a10      	ldr	r2, [pc, #64]	; (8008138 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80080f8:	fba2 2303 	umull	r2, r3, r2, r3
 80080fc:	099b      	lsrs	r3, r3, #6
 80080fe:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8008100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8008106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	fbb2 f3f3 	udiv	r3, r2, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	bfb8      	it	lt
 8008112:	425b      	neglt	r3, r3
 8008114:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008118:	021b      	lsls	r3, r3, #8
 800811a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	7e1b      	ldrb	r3, [r3, #24]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00b      	beq.n	800813c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8008124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800812c:	e035      	b.n	800819a <VL53L0X_calc_sigma_estimate+0x312>
 800812e:	bf00      	nop
 8008130:	028f87ae 	.word	0x028f87ae
 8008134:	0006999a 	.word	0x0006999a
 8008138:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800813c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800813e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008142:	fbb2 f3f3 	udiv	r3, r2, r3
 8008146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800814a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800814c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008154:	fb02 f303 	mul.w	r3, r2, r3
 8008158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800815c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008160:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008162:	4413      	add	r3, r2
 8008164:	0c1b      	lsrs	r3, r3, #16
 8008166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800816a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800816e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8008176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008184:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008188:	fb02 f303 	mul.w	r3, r2, r3
 800818c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8008190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008194:	0b9b      	lsrs	r3, r3, #14
 8008196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800819a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800819e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081a0:	fb02 f303 	mul.w	r3, r2, r3
 80081a4:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80081ac:	0c1b      	lsrs	r3, r3, #16
 80081ae:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b4:	fb02 f303 	mul.w	r3, r2, r3
 80081b8:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80081ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081be:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80081c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80081c6:	0c1b      	lsrs	r3, r3, #16
 80081c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80081ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ce:	fb02 f303 	mul.w	r3, r2, r3
 80081d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80081d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d8:	4413      	add	r3, r2
 80081da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80081dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081de:	f7fd ffe1 	bl	80061a4 <VL53L0X_isqrt>
 80081e2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	041b      	lsls	r3, r3, #16
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	3332      	adds	r3, #50	; 0x32
 80081ee:	4a4c      	ldr	r2, [pc, #304]	; (8008320 <VL53L0X_calc_sigma_estimate+0x498>)
 80081f0:	fba2 2303 	umull	r2, r3, r2, r3
 80081f4:	095a      	lsrs	r2, r3, #5
 80081f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008204:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8008208:	fb02 f303 	mul.w	r3, r2, r3
 800820c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008214:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008218:	3308      	adds	r3, #8
 800821a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800821e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008222:	4a40      	ldr	r2, [pc, #256]	; (8008324 <VL53L0X_calc_sigma_estimate+0x49c>)
 8008224:	fba2 2303 	umull	r2, r3, r2, r3
 8008228:	0b5b      	lsrs	r3, r3, #13
 800822a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800822e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008234:	429a      	cmp	r2, r3
 8008236:	d902      	bls.n	800823e <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800823a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800823e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008246:	4413      	add	r3, r2
 8008248:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800824c:	4a36      	ldr	r2, [pc, #216]	; (8008328 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800824e:	fba2 2303 	umull	r2, r3, r2, r3
 8008252:	099b      	lsrs	r3, r3, #6
 8008254:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800825a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800825e:	441a      	add	r2, r3
 8008260:	6a3b      	ldr	r3, [r7, #32]
 8008262:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 8008266:	4618      	mov	r0, r3
 8008268:	f7fd ff9c 	bl	80061a4 <VL53L0X_isqrt>
 800826c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	021b      	lsls	r3, r3, #8
 8008272:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800827a:	4a2b      	ldr	r2, [pc, #172]	; (8008328 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800827c:	fba2 2303 	umull	r2, r3, r2, r3
 8008280:	099b      	lsrs	r3, r3, #6
 8008282:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008288:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800828c:	fb02 f303 	mul.w	r3, r2, r3
 8008290:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	fb02 f303 	mul.w	r3, r2, r3
 800829a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800829c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800829e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a0:	4413      	add	r3, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fd ff7e 	bl	80061a4 <VL53L0X_isqrt>
 80082a8:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082b0:	fb02 f303 	mul.w	r3, r2, r3
 80082b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80082b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d009      	beq.n	80082d2 <VL53L0X_calc_sigma_estimate+0x44a>
 80082be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <VL53L0X_calc_sigma_estimate+0x44a>
 80082c6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80082ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d903      	bls.n	80082da <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80082d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80082e0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80082ec:	6939      	ldr	r1, [r7, #16]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	9303      	str	r3, [sp, #12]
 80082f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80082f6:	9302      	str	r3, [sp, #8]
 80082f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008306:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f7ff fc9d 	bl	8007c48 <VL53L0X_calc_dmax>
 800830e:	4603      	mov	r3, r0
 8008310:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008314:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8008318:	4618      	mov	r0, r3
 800831a:	37c0      	adds	r7, #192	; 0xc0
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	51eb851f 	.word	0x51eb851f
 8008324:	d1b71759 	.word	0xd1b71759
 8008328:	10624dd3 	.word	0x10624dd3

0800832c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b090      	sub	sp, #64	; 0x40
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	607a      	str	r2, [r7, #4]
 8008336:	461a      	mov	r2, r3
 8008338:	460b      	mov	r3, r1
 800833a:	72fb      	strb	r3, [r7, #11]
 800833c:	4613      	mov	r3, r2
 800833e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008340:	2300      	movs	r3, #0
 8008342:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8008346:	2300      	movs	r3, #0
 8008348:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800837a:	2300      	movs	r3, #0
 800837c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800837e:	7afb      	ldrb	r3, [r7, #11]
 8008380:	10db      	asrs	r3, r3, #3
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800838c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008390:	2b00      	cmp	r3, #0
 8008392:	d017      	beq.n	80083c4 <VL53L0X_get_pal_range_status+0x98>
 8008394:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008398:	2b05      	cmp	r3, #5
 800839a:	d013      	beq.n	80083c4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800839c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80083a0:	2b07      	cmp	r3, #7
 80083a2:	d00f      	beq.n	80083c4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 80083a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80083a8:	2b0c      	cmp	r3, #12
 80083aa:	d00b      	beq.n	80083c4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 80083ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80083b0:	2b0d      	cmp	r3, #13
 80083b2:	d007      	beq.n	80083c4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80083b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80083b8:	2b0e      	cmp	r3, #14
 80083ba:	d003      	beq.n	80083c4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80083bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80083c0:	2b0f      	cmp	r3, #15
 80083c2:	d103      	bne.n	80083cc <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80083c4:	2301      	movs	r3, #1
 80083c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80083ca:	e002      	b.n	80083d2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80083d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d109      	bne.n	80083ee <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80083da:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80083de:	461a      	mov	r2, r3
 80083e0:	2100      	movs	r1, #0
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7fc f9d4 	bl	8004790 <VL53L0X_GetLimitCheckEnable>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80083ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d02e      	beq.n	8008454 <VL53L0X_get_pal_range_status+0x128>
 80083f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d12a      	bne.n	8008454 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80083fe:	f107 0310 	add.w	r3, r7, #16
 8008402:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008406:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f7ff fd3d 	bl	8007e88 <VL53L0X_calc_sigma_estimate>
 800840e:	4603      	mov	r3, r0
 8008410:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008414:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008418:	2b00      	cmp	r3, #0
 800841a:	d103      	bne.n	8008424 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	b29a      	uxth	r2, r3
 8008420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008422:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008424:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008428:	2b00      	cmp	r3, #0
 800842a:	d113      	bne.n	8008454 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800842c:	f107 0320 	add.w	r3, r7, #32
 8008430:	461a      	mov	r2, r3
 8008432:	2100      	movs	r1, #0
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f7fc fa31 	bl	800489c <VL53L0X_GetLimitCheckValue>
 800843a:	4603      	mov	r3, r0
 800843c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d006      	beq.n	8008454 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8008446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008448:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800844a:	429a      	cmp	r2, r3
 800844c:	d902      	bls.n	8008454 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800844e:	2301      	movs	r3, #1
 8008450:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008454:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008458:	2b00      	cmp	r3, #0
 800845a:	d109      	bne.n	8008470 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800845c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008460:	461a      	mov	r2, r3
 8008462:	2102      	movs	r1, #2
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f7fc f993 	bl	8004790 <VL53L0X_GetLimitCheckEnable>
 800846a:	4603      	mov	r3, r0
 800846c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008470:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008474:	2b00      	cmp	r3, #0
 8008476:	d044      	beq.n	8008502 <VL53L0X_get_pal_range_status+0x1d6>
 8008478:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800847c:	2b00      	cmp	r3, #0
 800847e:	d140      	bne.n	8008502 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008480:	f107 031c 	add.w	r3, r7, #28
 8008484:	461a      	mov	r2, r3
 8008486:	2102      	movs	r1, #2
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f7fc fa07 	bl	800489c <VL53L0X_GetLimitCheckValue>
 800848e:	4603      	mov	r3, r0
 8008490:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008494:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008498:	2b00      	cmp	r3, #0
 800849a:	d107      	bne.n	80084ac <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800849c:	2201      	movs	r2, #1
 800849e:	21ff      	movs	r1, #255	; 0xff
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 f9bb 	bl	800881c <VL53L0X_WrByte>
 80084a6:	4603      	mov	r3, r0
 80084a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 80084ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d109      	bne.n	80084c8 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 80084b4:	f107 0316 	add.w	r3, r7, #22
 80084b8:	461a      	mov	r2, r3
 80084ba:	21b6      	movs	r1, #182	; 0xb6
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 fa59 	bl	8008974 <VL53L0X_RdWord>
 80084c2:	4603      	mov	r3, r0
 80084c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80084c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d107      	bne.n	80084e0 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80084d0:	2200      	movs	r2, #0
 80084d2:	21ff      	movs	r1, #255	; 0xff
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 f9a1 	bl	800881c <VL53L0X_WrByte>
 80084da:	4603      	mov	r3, r0
 80084dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80084e0:	8afb      	ldrh	r3, [r7, #22]
 80084e2:	025b      	lsls	r3, r3, #9
 80084e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ea:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d006      	beq.n	8008502 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80084f4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80084f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d902      	bls.n	8008502 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008502:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800850a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800850e:	461a      	mov	r2, r3
 8008510:	2103      	movs	r1, #3
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7fc f93c 	bl	8004790 <VL53L0X_GetLimitCheckEnable>
 8008518:	4603      	mov	r3, r0
 800851a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800851e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008522:	2b00      	cmp	r3, #0
 8008524:	d023      	beq.n	800856e <VL53L0X_get_pal_range_status+0x242>
 8008526:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800852a:	2b00      	cmp	r3, #0
 800852c:	d11f      	bne.n	800856e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800852e:	893b      	ldrh	r3, [r7, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	637b      	str	r3, [r7, #52]	; 0x34
 8008538:	e005      	b.n	8008546 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	021a      	lsls	r2, r3, #8
 800853e:	893b      	ldrh	r3, [r7, #8]
 8008540:	fbb2 f3f3 	udiv	r3, r2, r3
 8008544:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008546:	f107 0318 	add.w	r3, r7, #24
 800854a:	461a      	mov	r2, r3
 800854c:	2103      	movs	r1, #3
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7fc f9a4 	bl	800489c <VL53L0X_GetLimitCheckValue>
 8008554:	4603      	mov	r3, r0
 8008556:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d006      	beq.n	800856e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008560:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008564:	429a      	cmp	r2, r3
 8008566:	d202      	bcs.n	800856e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008568:	2301      	movs	r3, #1
 800856a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800856e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008572:	2b00      	cmp	r3, #0
 8008574:	d14a      	bne.n	800860c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008576:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800857a:	2b01      	cmp	r3, #1
 800857c:	d103      	bne.n	8008586 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800857e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008580:	22ff      	movs	r2, #255	; 0xff
 8008582:	701a      	strb	r2, [r3, #0]
 8008584:	e042      	b.n	800860c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008586:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800858a:	2b01      	cmp	r3, #1
 800858c:	d007      	beq.n	800859e <VL53L0X_get_pal_range_status+0x272>
 800858e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008592:	2b02      	cmp	r3, #2
 8008594:	d003      	beq.n	800859e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8008596:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800859a:	2b03      	cmp	r3, #3
 800859c:	d103      	bne.n	80085a6 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800859e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a0:	2205      	movs	r2, #5
 80085a2:	701a      	strb	r2, [r3, #0]
 80085a4:	e032      	b.n	800860c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 80085a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80085aa:	2b06      	cmp	r3, #6
 80085ac:	d003      	beq.n	80085b6 <VL53L0X_get_pal_range_status+0x28a>
 80085ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80085b2:	2b09      	cmp	r3, #9
 80085b4:	d103      	bne.n	80085be <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80085b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b8:	2204      	movs	r2, #4
 80085ba:	701a      	strb	r2, [r3, #0]
 80085bc:	e026      	b.n	800860c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80085be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80085c2:	2b08      	cmp	r3, #8
 80085c4:	d007      	beq.n	80085d6 <VL53L0X_get_pal_range_status+0x2aa>
 80085c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80085ca:	2b0a      	cmp	r3, #10
 80085cc:	d003      	beq.n	80085d6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80085ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d103      	bne.n	80085de <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80085d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d8:	2203      	movs	r2, #3
 80085da:	701a      	strb	r2, [r3, #0]
 80085dc:	e016      	b.n	800860c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80085de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	d003      	beq.n	80085ee <VL53L0X_get_pal_range_status+0x2c2>
 80085e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d103      	bne.n	80085f6 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80085ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f0:	2202      	movs	r2, #2
 80085f2:	701a      	strb	r2, [r3, #0]
 80085f4:	e00a      	b.n	800860c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80085f6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d103      	bne.n	8008606 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80085fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008600:	2201      	movs	r2, #1
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	e002      	b.n	800860c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008608:	2200      	movs	r2, #0
 800860a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800860c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d102      	bne.n	800861a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8008614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008616:	2200      	movs	r2, #0
 8008618:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800861a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800861e:	461a      	mov	r2, r3
 8008620:	2101      	movs	r1, #1
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f7fc f8b4 	bl	8004790 <VL53L0X_GetLimitCheckEnable>
 8008628:	4603      	mov	r3, r0
 800862a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800862e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008632:	2b00      	cmp	r3, #0
 8008634:	d14f      	bne.n	80086d6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008636:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <VL53L0X_get_pal_range_status+0x31a>
 800863e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008642:	2b01      	cmp	r3, #1
 8008644:	d103      	bne.n	800864e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8008646:	2301      	movs	r3, #1
 8008648:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800864c:	e002      	b.n	8008654 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800865a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800865e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008662:	2b04      	cmp	r3, #4
 8008664:	d003      	beq.n	800866e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008666:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800866e:	2301      	movs	r3, #1
 8008670:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008674:	e002      	b.n	800867c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008682:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008686:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <VL53L0X_get_pal_range_status+0x36a>
 800868e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008692:	2b01      	cmp	r3, #1
 8008694:	d103      	bne.n	800869e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008696:	2301      	movs	r3, #1
 8008698:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800869c:	e002      	b.n	80086a4 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80086aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80086ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <VL53L0X_get_pal_range_status+0x392>
 80086b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d103      	bne.n	80086c6 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80086be:	2301      	movs	r3, #1
 80086c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086c4:	e002      	b.n	80086cc <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80086d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80086d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80086da:	4618      	mov	r0, r3
 80086dc:	3740      	adds	r7, #64	; 0x40
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b088      	sub	sp, #32
 80086e6:	af02      	add	r7, sp, #8
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	330a      	adds	r3, #10
 80086f2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8008700:	b299      	uxth	r1, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	b29a      	uxth	r2, r3
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	4613      	mov	r3, r2
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	f7f9 f8c1 	bl	8001894 <HAL_I2C_Master_Transmit>
 8008712:	4603      	mov	r3, r0
 8008714:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008716:	693b      	ldr	r3, [r7, #16]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3718      	adds	r7, #24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af02      	add	r7, sp, #8
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	330a      	adds	r3, #10
 8008730:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800873e:	f043 0301 	orr.w	r3, r3, #1
 8008742:	b2db      	uxtb	r3, r3
 8008744:	b299      	uxth	r1, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	b29a      	uxth	r2, r3
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	4613      	mov	r3, r2
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	f7f9 f99d 	bl	8001a90 <HAL_I2C_Master_Receive>
 8008756:	4603      	mov	r3, r0
 8008758:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800875a:	693b      	ldr	r3, [r7, #16]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	603b      	str	r3, [r7, #0]
 8008770:	460b      	mov	r3, r1
 8008772:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008774:	2300      	movs	r3, #0
 8008776:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b3f      	cmp	r3, #63	; 0x3f
 800877c:	d902      	bls.n	8008784 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800877e:	f06f 0303 	mvn.w	r3, #3
 8008782:	e016      	b.n	80087b2 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008784:	4a0d      	ldr	r2, [pc, #52]	; (80087bc <VL53L0X_WriteMulti+0x58>)
 8008786:	7afb      	ldrb	r3, [r7, #11]
 8008788:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	480c      	ldr	r0, [pc, #48]	; (80087c0 <VL53L0X_WriteMulti+0x5c>)
 8008790:	f000 f99e 	bl	8008ad0 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	461a      	mov	r2, r3
 800879a:	4908      	ldr	r1, [pc, #32]	; (80087bc <VL53L0X_WriteMulti+0x58>)
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f7ff ffa0 	bl	80086e2 <_I2CWrite>
 80087a2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80087aa:	23ec      	movs	r3, #236	; 0xec
 80087ac:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80087ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	200003f0 	.word	0x200003f0
 80087c0:	200003f1 	.word	0x200003f1

080087c4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	607a      	str	r2, [r7, #4]
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	460b      	mov	r3, r1
 80087d2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087d4:	2300      	movs	r3, #0
 80087d6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80087d8:	f107 030b 	add.w	r3, r7, #11
 80087dc:	2201      	movs	r2, #1
 80087de:	4619      	mov	r1, r3
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f7ff ff7e 	bl	80086e2 <_I2CWrite>
 80087e6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80087ee:	23ec      	movs	r3, #236	; 0xec
 80087f0:	75fb      	strb	r3, [r7, #23]
        goto done;
 80087f2:	e00c      	b.n	800880e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f7ff ff91 	bl	8008720 <_I2CRead>
 80087fe:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008806:	23ec      	movs	r3, #236	; 0xec
 8008808:	75fb      	strb	r3, [r7, #23]
 800880a:	e000      	b.n	800880e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800880c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800880e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	70fb      	strb	r3, [r7, #3]
 8008828:	4613      	mov	r3, r2
 800882a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008830:	4a0b      	ldr	r2, [pc, #44]	; (8008860 <VL53L0X_WrByte+0x44>)
 8008832:	78fb      	ldrb	r3, [r7, #3]
 8008834:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8008836:	4a0a      	ldr	r2, [pc, #40]	; (8008860 <VL53L0X_WrByte+0x44>)
 8008838:	78bb      	ldrb	r3, [r7, #2]
 800883a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800883c:	2202      	movs	r2, #2
 800883e:	4908      	ldr	r1, [pc, #32]	; (8008860 <VL53L0X_WrByte+0x44>)
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff ff4e 	bl	80086e2 <_I2CWrite>
 8008846:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800884e:	23ec      	movs	r3, #236	; 0xec
 8008850:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008852:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	200003f0 	.word	0x200003f0

08008864 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	70fb      	strb	r3, [r7, #3]
 8008870:	4613      	mov	r3, r2
 8008872:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008878:	4a0e      	ldr	r2, [pc, #56]	; (80088b4 <VL53L0X_WrWord+0x50>)
 800887a:	78fb      	ldrb	r3, [r7, #3]
 800887c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800887e:	883b      	ldrh	r3, [r7, #0]
 8008880:	0a1b      	lsrs	r3, r3, #8
 8008882:	b29b      	uxth	r3, r3
 8008884:	b2da      	uxtb	r2, r3
 8008886:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <VL53L0X_WrWord+0x50>)
 8008888:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800888a:	883b      	ldrh	r3, [r7, #0]
 800888c:	b2da      	uxtb	r2, r3
 800888e:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <VL53L0X_WrWord+0x50>)
 8008890:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008892:	2203      	movs	r2, #3
 8008894:	4907      	ldr	r1, [pc, #28]	; (80088b4 <VL53L0X_WrWord+0x50>)
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff ff23 	bl	80086e2 <_I2CWrite>
 800889c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80088a4:	23ec      	movs	r3, #236	; 0xec
 80088a6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80088a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	200003f0 	.word	0x200003f0

080088b8 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	4608      	mov	r0, r1
 80088c2:	4611      	mov	r1, r2
 80088c4:	461a      	mov	r2, r3
 80088c6:	4603      	mov	r3, r0
 80088c8:	70fb      	strb	r3, [r7, #3]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70bb      	strb	r3, [r7, #2]
 80088ce:	4613      	mov	r3, r2
 80088d0:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088d2:	2300      	movs	r3, #0
 80088d4:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80088d6:	f107 020e 	add.w	r2, r7, #14
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f81e 	bl	8008920 <VL53L0X_RdByte>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80088e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d110      	bne.n	8008912 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80088f0:	7bba      	ldrb	r2, [r7, #14]
 80088f2:	78bb      	ldrb	r3, [r7, #2]
 80088f4:	4013      	ands	r3, r2
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	787b      	ldrb	r3, [r7, #1]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008900:	7bba      	ldrb	r2, [r7, #14]
 8008902:	78fb      	ldrb	r3, [r7, #3]
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff ff88 	bl	800881c <VL53L0X_WrByte>
 800890c:	4603      	mov	r3, r0
 800890e:	73fb      	strb	r3, [r7, #15]
 8008910:	e000      	b.n	8008914 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8008912:	bf00      	nop
done:
    return Status;
 8008914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	460b      	mov	r3, r1
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800892e:	2300      	movs	r3, #0
 8008930:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008932:	f107 030b 	add.w	r3, r7, #11
 8008936:	2201      	movs	r2, #1
 8008938:	4619      	mov	r1, r3
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f7ff fed1 	bl	80086e2 <_I2CWrite>
 8008940:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008948:	23ec      	movs	r3, #236	; 0xec
 800894a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800894c:	e00c      	b.n	8008968 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800894e:	2201      	movs	r2, #1
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff fee4 	bl	8008720 <_I2CRead>
 8008958:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008960:	23ec      	movs	r3, #236	; 0xec
 8008962:	75fb      	strb	r3, [r7, #23]
 8008964:	e000      	b.n	8008968 <VL53L0X_RdByte+0x48>
    }
done:
 8008966:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008968:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	460b      	mov	r3, r1
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008982:	2300      	movs	r3, #0
 8008984:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008986:	f107 030b 	add.w	r3, r7, #11
 800898a:	2201      	movs	r2, #1
 800898c:	4619      	mov	r1, r3
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f7ff fea7 	bl	80086e2 <_I2CWrite>
 8008994:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800899c:	23ec      	movs	r3, #236	; 0xec
 800899e:	75fb      	strb	r3, [r7, #23]
        goto done;
 80089a0:	e017      	b.n	80089d2 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80089a2:	2202      	movs	r2, #2
 80089a4:	490e      	ldr	r1, [pc, #56]	; (80089e0 <VL53L0X_RdWord+0x6c>)
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7ff feba 	bl	8008720 <_I2CRead>
 80089ac:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80089b4:	23ec      	movs	r3, #236	; 0xec
 80089b6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80089b8:	e00b      	b.n	80089d2 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80089ba:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <VL53L0X_RdWord+0x6c>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	021b      	lsls	r3, r3, #8
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	4b06      	ldr	r3, [pc, #24]	; (80089e0 <VL53L0X_RdWord+0x6c>)
 80089c6:	785b      	ldrb	r3, [r3, #1]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	4413      	add	r3, r2
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80089d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	200003f0 	.word	0x200003f0

080089e4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	460b      	mov	r3, r1
 80089ee:	607a      	str	r2, [r7, #4]
 80089f0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089f2:	2300      	movs	r3, #0
 80089f4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80089f6:	f107 030b 	add.w	r3, r7, #11
 80089fa:	2201      	movs	r2, #1
 80089fc:	4619      	mov	r1, r3
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7ff fe6f 	bl	80086e2 <_I2CWrite>
 8008a04:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008a0c:	23ec      	movs	r3, #236	; 0xec
 8008a0e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008a10:	e01b      	b.n	8008a4a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8008a12:	2204      	movs	r2, #4
 8008a14:	4910      	ldr	r1, [pc, #64]	; (8008a58 <VL53L0X_RdDWord+0x74>)
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f7ff fe82 	bl	8008720 <_I2CRead>
 8008a1c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008a24:	23ec      	movs	r3, #236	; 0xec
 8008a26:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008a28:	e00f      	b.n	8008a4a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8008a2a:	4b0b      	ldr	r3, [pc, #44]	; (8008a58 <VL53L0X_RdDWord+0x74>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	061a      	lsls	r2, r3, #24
 8008a30:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <VL53L0X_RdDWord+0x74>)
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	041b      	lsls	r3, r3, #16
 8008a36:	441a      	add	r2, r3
 8008a38:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <VL53L0X_RdDWord+0x74>)
 8008a3a:	789b      	ldrb	r3, [r3, #2]
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	4413      	add	r3, r2
 8008a40:	4a05      	ldr	r2, [pc, #20]	; (8008a58 <VL53L0X_RdDWord+0x74>)
 8008a42:	78d2      	ldrb	r2, [r2, #3]
 8008a44:	441a      	add	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8008a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	200003f0 	.word	0x200003f0

08008a5c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8008a68:	2002      	movs	r0, #2
 8008a6a:	f7f8 fb27 	bl	80010bc <HAL_Delay>
    return status;
 8008a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <__errno>:
 8008a7c:	4b01      	ldr	r3, [pc, #4]	; (8008a84 <__errno+0x8>)
 8008a7e:	6818      	ldr	r0, [r3, #0]
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	200002c8 	.word	0x200002c8

08008a88 <__libc_init_array>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	4e0d      	ldr	r6, [pc, #52]	; (8008ac0 <__libc_init_array+0x38>)
 8008a8c:	4c0d      	ldr	r4, [pc, #52]	; (8008ac4 <__libc_init_array+0x3c>)
 8008a8e:	1ba4      	subs	r4, r4, r6
 8008a90:	10a4      	asrs	r4, r4, #2
 8008a92:	2500      	movs	r5, #0
 8008a94:	42a5      	cmp	r5, r4
 8008a96:	d109      	bne.n	8008aac <__libc_init_array+0x24>
 8008a98:	4e0b      	ldr	r6, [pc, #44]	; (8008ac8 <__libc_init_array+0x40>)
 8008a9a:	4c0c      	ldr	r4, [pc, #48]	; (8008acc <__libc_init_array+0x44>)
 8008a9c:	f001 f832 	bl	8009b04 <_init>
 8008aa0:	1ba4      	subs	r4, r4, r6
 8008aa2:	10a4      	asrs	r4, r4, #2
 8008aa4:	2500      	movs	r5, #0
 8008aa6:	42a5      	cmp	r5, r4
 8008aa8:	d105      	bne.n	8008ab6 <__libc_init_array+0x2e>
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}
 8008aac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ab0:	4798      	blx	r3
 8008ab2:	3501      	adds	r5, #1
 8008ab4:	e7ee      	b.n	8008a94 <__libc_init_array+0xc>
 8008ab6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008aba:	4798      	blx	r3
 8008abc:	3501      	adds	r5, #1
 8008abe:	e7f2      	b.n	8008aa6 <__libc_init_array+0x1e>
 8008ac0:	08009c58 	.word	0x08009c58
 8008ac4:	08009c58 	.word	0x08009c58
 8008ac8:	08009c58 	.word	0x08009c58
 8008acc:	08009c5c 	.word	0x08009c5c

08008ad0 <memcpy>:
 8008ad0:	b510      	push	{r4, lr}
 8008ad2:	1e43      	subs	r3, r0, #1
 8008ad4:	440a      	add	r2, r1
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	d100      	bne.n	8008adc <memcpy+0xc>
 8008ada:	bd10      	pop	{r4, pc}
 8008adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ae4:	e7f7      	b.n	8008ad6 <memcpy+0x6>

08008ae6 <memset>:
 8008ae6:	4402      	add	r2, r0
 8008ae8:	4603      	mov	r3, r0
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d100      	bne.n	8008af0 <memset+0xa>
 8008aee:	4770      	bx	lr
 8008af0:	f803 1b01 	strb.w	r1, [r3], #1
 8008af4:	e7f9      	b.n	8008aea <memset+0x4>
	...

08008af8 <iprintf>:
 8008af8:	b40f      	push	{r0, r1, r2, r3}
 8008afa:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <iprintf+0x2c>)
 8008afc:	b513      	push	{r0, r1, r4, lr}
 8008afe:	681c      	ldr	r4, [r3, #0]
 8008b00:	b124      	cbz	r4, 8008b0c <iprintf+0x14>
 8008b02:	69a3      	ldr	r3, [r4, #24]
 8008b04:	b913      	cbnz	r3, 8008b0c <iprintf+0x14>
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 fad8 	bl	80090bc <__sinit>
 8008b0c:	ab05      	add	r3, sp, #20
 8008b0e:	9a04      	ldr	r2, [sp, #16]
 8008b10:	68a1      	ldr	r1, [r4, #8]
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	4620      	mov	r0, r4
 8008b16:	f000 fc99 	bl	800944c <_vfiprintf_r>
 8008b1a:	b002      	add	sp, #8
 8008b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b20:	b004      	add	sp, #16
 8008b22:	4770      	bx	lr
 8008b24:	200002c8 	.word	0x200002c8

08008b28 <_puts_r>:
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	460e      	mov	r6, r1
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	b118      	cbz	r0, 8008b38 <_puts_r+0x10>
 8008b30:	6983      	ldr	r3, [r0, #24]
 8008b32:	b90b      	cbnz	r3, 8008b38 <_puts_r+0x10>
 8008b34:	f000 fac2 	bl	80090bc <__sinit>
 8008b38:	69ab      	ldr	r3, [r5, #24]
 8008b3a:	68ac      	ldr	r4, [r5, #8]
 8008b3c:	b913      	cbnz	r3, 8008b44 <_puts_r+0x1c>
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f000 fabc 	bl	80090bc <__sinit>
 8008b44:	4b23      	ldr	r3, [pc, #140]	; (8008bd4 <_puts_r+0xac>)
 8008b46:	429c      	cmp	r4, r3
 8008b48:	d117      	bne.n	8008b7a <_puts_r+0x52>
 8008b4a:	686c      	ldr	r4, [r5, #4]
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	071b      	lsls	r3, r3, #28
 8008b50:	d51d      	bpl.n	8008b8e <_puts_r+0x66>
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	b1db      	cbz	r3, 8008b8e <_puts_r+0x66>
 8008b56:	3e01      	subs	r6, #1
 8008b58:	68a3      	ldr	r3, [r4, #8]
 8008b5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	60a3      	str	r3, [r4, #8]
 8008b62:	b9e9      	cbnz	r1, 8008ba0 <_puts_r+0x78>
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	da2e      	bge.n	8008bc6 <_puts_r+0x9e>
 8008b68:	4622      	mov	r2, r4
 8008b6a:	210a      	movs	r1, #10
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f000 f8f5 	bl	8008d5c <__swbuf_r>
 8008b72:	3001      	adds	r0, #1
 8008b74:	d011      	beq.n	8008b9a <_puts_r+0x72>
 8008b76:	200a      	movs	r0, #10
 8008b78:	e011      	b.n	8008b9e <_puts_r+0x76>
 8008b7a:	4b17      	ldr	r3, [pc, #92]	; (8008bd8 <_puts_r+0xb0>)
 8008b7c:	429c      	cmp	r4, r3
 8008b7e:	d101      	bne.n	8008b84 <_puts_r+0x5c>
 8008b80:	68ac      	ldr	r4, [r5, #8]
 8008b82:	e7e3      	b.n	8008b4c <_puts_r+0x24>
 8008b84:	4b15      	ldr	r3, [pc, #84]	; (8008bdc <_puts_r+0xb4>)
 8008b86:	429c      	cmp	r4, r3
 8008b88:	bf08      	it	eq
 8008b8a:	68ec      	ldreq	r4, [r5, #12]
 8008b8c:	e7de      	b.n	8008b4c <_puts_r+0x24>
 8008b8e:	4621      	mov	r1, r4
 8008b90:	4628      	mov	r0, r5
 8008b92:	f000 f935 	bl	8008e00 <__swsetup_r>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d0dd      	beq.n	8008b56 <_puts_r+0x2e>
 8008b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	da04      	bge.n	8008bae <_puts_r+0x86>
 8008ba4:	69a2      	ldr	r2, [r4, #24]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	dc06      	bgt.n	8008bb8 <_puts_r+0x90>
 8008baa:	290a      	cmp	r1, #10
 8008bac:	d004      	beq.n	8008bb8 <_puts_r+0x90>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	6022      	str	r2, [r4, #0]
 8008bb4:	7019      	strb	r1, [r3, #0]
 8008bb6:	e7cf      	b.n	8008b58 <_puts_r+0x30>
 8008bb8:	4622      	mov	r2, r4
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f000 f8ce 	bl	8008d5c <__swbuf_r>
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d1c9      	bne.n	8008b58 <_puts_r+0x30>
 8008bc4:	e7e9      	b.n	8008b9a <_puts_r+0x72>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	200a      	movs	r0, #10
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	6022      	str	r2, [r4, #0]
 8008bce:	7018      	strb	r0, [r3, #0]
 8008bd0:	e7e5      	b.n	8008b9e <_puts_r+0x76>
 8008bd2:	bf00      	nop
 8008bd4:	08009bdc 	.word	0x08009bdc
 8008bd8:	08009bfc 	.word	0x08009bfc
 8008bdc:	08009bbc 	.word	0x08009bbc

08008be0 <puts>:
 8008be0:	4b02      	ldr	r3, [pc, #8]	; (8008bec <puts+0xc>)
 8008be2:	4601      	mov	r1, r0
 8008be4:	6818      	ldr	r0, [r3, #0]
 8008be6:	f7ff bf9f 	b.w	8008b28 <_puts_r>
 8008bea:	bf00      	nop
 8008bec:	200002c8 	.word	0x200002c8

08008bf0 <setvbuf>:
 8008bf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bf4:	461d      	mov	r5, r3
 8008bf6:	4b51      	ldr	r3, [pc, #324]	; (8008d3c <setvbuf+0x14c>)
 8008bf8:	681e      	ldr	r6, [r3, #0]
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	460f      	mov	r7, r1
 8008bfe:	4690      	mov	r8, r2
 8008c00:	b126      	cbz	r6, 8008c0c <setvbuf+0x1c>
 8008c02:	69b3      	ldr	r3, [r6, #24]
 8008c04:	b913      	cbnz	r3, 8008c0c <setvbuf+0x1c>
 8008c06:	4630      	mov	r0, r6
 8008c08:	f000 fa58 	bl	80090bc <__sinit>
 8008c0c:	4b4c      	ldr	r3, [pc, #304]	; (8008d40 <setvbuf+0x150>)
 8008c0e:	429c      	cmp	r4, r3
 8008c10:	d152      	bne.n	8008cb8 <setvbuf+0xc8>
 8008c12:	6874      	ldr	r4, [r6, #4]
 8008c14:	f1b8 0f02 	cmp.w	r8, #2
 8008c18:	d006      	beq.n	8008c28 <setvbuf+0x38>
 8008c1a:	f1b8 0f01 	cmp.w	r8, #1
 8008c1e:	f200 8089 	bhi.w	8008d34 <setvbuf+0x144>
 8008c22:	2d00      	cmp	r5, #0
 8008c24:	f2c0 8086 	blt.w	8008d34 <setvbuf+0x144>
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f000 f9dc 	bl	8008fe8 <_fflush_r>
 8008c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c32:	b141      	cbz	r1, 8008c46 <setvbuf+0x56>
 8008c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d002      	beq.n	8008c42 <setvbuf+0x52>
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f000 fb33 	bl	80092a8 <_free_r>
 8008c42:	2300      	movs	r3, #0
 8008c44:	6363      	str	r3, [r4, #52]	; 0x34
 8008c46:	2300      	movs	r3, #0
 8008c48:	61a3      	str	r3, [r4, #24]
 8008c4a:	6063      	str	r3, [r4, #4]
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	061b      	lsls	r3, r3, #24
 8008c50:	d503      	bpl.n	8008c5a <setvbuf+0x6a>
 8008c52:	6921      	ldr	r1, [r4, #16]
 8008c54:	4630      	mov	r0, r6
 8008c56:	f000 fb27 	bl	80092a8 <_free_r>
 8008c5a:	89a3      	ldrh	r3, [r4, #12]
 8008c5c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008c60:	f023 0303 	bic.w	r3, r3, #3
 8008c64:	f1b8 0f02 	cmp.w	r8, #2
 8008c68:	81a3      	strh	r3, [r4, #12]
 8008c6a:	d05d      	beq.n	8008d28 <setvbuf+0x138>
 8008c6c:	ab01      	add	r3, sp, #4
 8008c6e:	466a      	mov	r2, sp
 8008c70:	4621      	mov	r1, r4
 8008c72:	4630      	mov	r0, r6
 8008c74:	f000 faac 	bl	80091d0 <__swhatbuf_r>
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	4318      	orrs	r0, r3
 8008c7c:	81a0      	strh	r0, [r4, #12]
 8008c7e:	bb2d      	cbnz	r5, 8008ccc <setvbuf+0xdc>
 8008c80:	9d00      	ldr	r5, [sp, #0]
 8008c82:	4628      	mov	r0, r5
 8008c84:	f000 fb08 	bl	8009298 <malloc>
 8008c88:	4607      	mov	r7, r0
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d14e      	bne.n	8008d2c <setvbuf+0x13c>
 8008c8e:	f8dd 9000 	ldr.w	r9, [sp]
 8008c92:	45a9      	cmp	r9, r5
 8008c94:	d13c      	bne.n	8008d10 <setvbuf+0x120>
 8008c96:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	f043 0302 	orr.w	r3, r3, #2
 8008ca0:	81a3      	strh	r3, [r4, #12]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60a3      	str	r3, [r4, #8]
 8008ca6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008caa:	6023      	str	r3, [r4, #0]
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	2301      	movs	r3, #1
 8008cb0:	6163      	str	r3, [r4, #20]
 8008cb2:	b003      	add	sp, #12
 8008cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cb8:	4b22      	ldr	r3, [pc, #136]	; (8008d44 <setvbuf+0x154>)
 8008cba:	429c      	cmp	r4, r3
 8008cbc:	d101      	bne.n	8008cc2 <setvbuf+0xd2>
 8008cbe:	68b4      	ldr	r4, [r6, #8]
 8008cc0:	e7a8      	b.n	8008c14 <setvbuf+0x24>
 8008cc2:	4b21      	ldr	r3, [pc, #132]	; (8008d48 <setvbuf+0x158>)
 8008cc4:	429c      	cmp	r4, r3
 8008cc6:	bf08      	it	eq
 8008cc8:	68f4      	ldreq	r4, [r6, #12]
 8008cca:	e7a3      	b.n	8008c14 <setvbuf+0x24>
 8008ccc:	2f00      	cmp	r7, #0
 8008cce:	d0d8      	beq.n	8008c82 <setvbuf+0x92>
 8008cd0:	69b3      	ldr	r3, [r6, #24]
 8008cd2:	b913      	cbnz	r3, 8008cda <setvbuf+0xea>
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f000 f9f1 	bl	80090bc <__sinit>
 8008cda:	f1b8 0f01 	cmp.w	r8, #1
 8008cde:	bf08      	it	eq
 8008ce0:	89a3      	ldrheq	r3, [r4, #12]
 8008ce2:	6027      	str	r7, [r4, #0]
 8008ce4:	bf04      	itt	eq
 8008ce6:	f043 0301 	orreq.w	r3, r3, #1
 8008cea:	81a3      	strheq	r3, [r4, #12]
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	f013 0008 	ands.w	r0, r3, #8
 8008cf2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8008cf6:	d01b      	beq.n	8008d30 <setvbuf+0x140>
 8008cf8:	f013 0001 	ands.w	r0, r3, #1
 8008cfc:	bf18      	it	ne
 8008cfe:	426d      	negne	r5, r5
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	bf1d      	ittte	ne
 8008d06:	60a3      	strne	r3, [r4, #8]
 8008d08:	61a5      	strne	r5, [r4, #24]
 8008d0a:	4618      	movne	r0, r3
 8008d0c:	60a5      	streq	r5, [r4, #8]
 8008d0e:	e7d0      	b.n	8008cb2 <setvbuf+0xc2>
 8008d10:	4648      	mov	r0, r9
 8008d12:	f000 fac1 	bl	8009298 <malloc>
 8008d16:	4607      	mov	r7, r0
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d0bc      	beq.n	8008c96 <setvbuf+0xa6>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	464d      	mov	r5, r9
 8008d26:	e7d3      	b.n	8008cd0 <setvbuf+0xe0>
 8008d28:	2000      	movs	r0, #0
 8008d2a:	e7b6      	b.n	8008c9a <setvbuf+0xaa>
 8008d2c:	46a9      	mov	r9, r5
 8008d2e:	e7f5      	b.n	8008d1c <setvbuf+0x12c>
 8008d30:	60a0      	str	r0, [r4, #8]
 8008d32:	e7be      	b.n	8008cb2 <setvbuf+0xc2>
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295
 8008d38:	e7bb      	b.n	8008cb2 <setvbuf+0xc2>
 8008d3a:	bf00      	nop
 8008d3c:	200002c8 	.word	0x200002c8
 8008d40:	08009bdc 	.word	0x08009bdc
 8008d44:	08009bfc 	.word	0x08009bfc
 8008d48:	08009bbc 	.word	0x08009bbc

08008d4c <strcpy>:
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d52:	f803 2b01 	strb.w	r2, [r3], #1
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	d1f9      	bne.n	8008d4e <strcpy+0x2>
 8008d5a:	4770      	bx	lr

08008d5c <__swbuf_r>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	460e      	mov	r6, r1
 8008d60:	4614      	mov	r4, r2
 8008d62:	4605      	mov	r5, r0
 8008d64:	b118      	cbz	r0, 8008d6e <__swbuf_r+0x12>
 8008d66:	6983      	ldr	r3, [r0, #24]
 8008d68:	b90b      	cbnz	r3, 8008d6e <__swbuf_r+0x12>
 8008d6a:	f000 f9a7 	bl	80090bc <__sinit>
 8008d6e:	4b21      	ldr	r3, [pc, #132]	; (8008df4 <__swbuf_r+0x98>)
 8008d70:	429c      	cmp	r4, r3
 8008d72:	d12a      	bne.n	8008dca <__swbuf_r+0x6e>
 8008d74:	686c      	ldr	r4, [r5, #4]
 8008d76:	69a3      	ldr	r3, [r4, #24]
 8008d78:	60a3      	str	r3, [r4, #8]
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	071a      	lsls	r2, r3, #28
 8008d7e:	d52e      	bpl.n	8008dde <__swbuf_r+0x82>
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	b363      	cbz	r3, 8008dde <__swbuf_r+0x82>
 8008d84:	6923      	ldr	r3, [r4, #16]
 8008d86:	6820      	ldr	r0, [r4, #0]
 8008d88:	1ac0      	subs	r0, r0, r3
 8008d8a:	6963      	ldr	r3, [r4, #20]
 8008d8c:	b2f6      	uxtb	r6, r6
 8008d8e:	4283      	cmp	r3, r0
 8008d90:	4637      	mov	r7, r6
 8008d92:	dc04      	bgt.n	8008d9e <__swbuf_r+0x42>
 8008d94:	4621      	mov	r1, r4
 8008d96:	4628      	mov	r0, r5
 8008d98:	f000 f926 	bl	8008fe8 <_fflush_r>
 8008d9c:	bb28      	cbnz	r0, 8008dea <__swbuf_r+0x8e>
 8008d9e:	68a3      	ldr	r3, [r4, #8]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	60a3      	str	r3, [r4, #8]
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	6022      	str	r2, [r4, #0]
 8008daa:	701e      	strb	r6, [r3, #0]
 8008dac:	6963      	ldr	r3, [r4, #20]
 8008dae:	3001      	adds	r0, #1
 8008db0:	4283      	cmp	r3, r0
 8008db2:	d004      	beq.n	8008dbe <__swbuf_r+0x62>
 8008db4:	89a3      	ldrh	r3, [r4, #12]
 8008db6:	07db      	lsls	r3, r3, #31
 8008db8:	d519      	bpl.n	8008dee <__swbuf_r+0x92>
 8008dba:	2e0a      	cmp	r6, #10
 8008dbc:	d117      	bne.n	8008dee <__swbuf_r+0x92>
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	f000 f911 	bl	8008fe8 <_fflush_r>
 8008dc6:	b190      	cbz	r0, 8008dee <__swbuf_r+0x92>
 8008dc8:	e00f      	b.n	8008dea <__swbuf_r+0x8e>
 8008dca:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <__swbuf_r+0x9c>)
 8008dcc:	429c      	cmp	r4, r3
 8008dce:	d101      	bne.n	8008dd4 <__swbuf_r+0x78>
 8008dd0:	68ac      	ldr	r4, [r5, #8]
 8008dd2:	e7d0      	b.n	8008d76 <__swbuf_r+0x1a>
 8008dd4:	4b09      	ldr	r3, [pc, #36]	; (8008dfc <__swbuf_r+0xa0>)
 8008dd6:	429c      	cmp	r4, r3
 8008dd8:	bf08      	it	eq
 8008dda:	68ec      	ldreq	r4, [r5, #12]
 8008ddc:	e7cb      	b.n	8008d76 <__swbuf_r+0x1a>
 8008dde:	4621      	mov	r1, r4
 8008de0:	4628      	mov	r0, r5
 8008de2:	f000 f80d 	bl	8008e00 <__swsetup_r>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d0cc      	beq.n	8008d84 <__swbuf_r+0x28>
 8008dea:	f04f 37ff 	mov.w	r7, #4294967295
 8008dee:	4638      	mov	r0, r7
 8008df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df2:	bf00      	nop
 8008df4:	08009bdc 	.word	0x08009bdc
 8008df8:	08009bfc 	.word	0x08009bfc
 8008dfc:	08009bbc 	.word	0x08009bbc

08008e00 <__swsetup_r>:
 8008e00:	4b32      	ldr	r3, [pc, #200]	; (8008ecc <__swsetup_r+0xcc>)
 8008e02:	b570      	push	{r4, r5, r6, lr}
 8008e04:	681d      	ldr	r5, [r3, #0]
 8008e06:	4606      	mov	r6, r0
 8008e08:	460c      	mov	r4, r1
 8008e0a:	b125      	cbz	r5, 8008e16 <__swsetup_r+0x16>
 8008e0c:	69ab      	ldr	r3, [r5, #24]
 8008e0e:	b913      	cbnz	r3, 8008e16 <__swsetup_r+0x16>
 8008e10:	4628      	mov	r0, r5
 8008e12:	f000 f953 	bl	80090bc <__sinit>
 8008e16:	4b2e      	ldr	r3, [pc, #184]	; (8008ed0 <__swsetup_r+0xd0>)
 8008e18:	429c      	cmp	r4, r3
 8008e1a:	d10f      	bne.n	8008e3c <__swsetup_r+0x3c>
 8008e1c:	686c      	ldr	r4, [r5, #4]
 8008e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	0715      	lsls	r5, r2, #28
 8008e26:	d42c      	bmi.n	8008e82 <__swsetup_r+0x82>
 8008e28:	06d0      	lsls	r0, r2, #27
 8008e2a:	d411      	bmi.n	8008e50 <__swsetup_r+0x50>
 8008e2c:	2209      	movs	r2, #9
 8008e2e:	6032      	str	r2, [r6, #0]
 8008e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e34:	81a3      	strh	r3, [r4, #12]
 8008e36:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3a:	e03e      	b.n	8008eba <__swsetup_r+0xba>
 8008e3c:	4b25      	ldr	r3, [pc, #148]	; (8008ed4 <__swsetup_r+0xd4>)
 8008e3e:	429c      	cmp	r4, r3
 8008e40:	d101      	bne.n	8008e46 <__swsetup_r+0x46>
 8008e42:	68ac      	ldr	r4, [r5, #8]
 8008e44:	e7eb      	b.n	8008e1e <__swsetup_r+0x1e>
 8008e46:	4b24      	ldr	r3, [pc, #144]	; (8008ed8 <__swsetup_r+0xd8>)
 8008e48:	429c      	cmp	r4, r3
 8008e4a:	bf08      	it	eq
 8008e4c:	68ec      	ldreq	r4, [r5, #12]
 8008e4e:	e7e6      	b.n	8008e1e <__swsetup_r+0x1e>
 8008e50:	0751      	lsls	r1, r2, #29
 8008e52:	d512      	bpl.n	8008e7a <__swsetup_r+0x7a>
 8008e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e56:	b141      	cbz	r1, 8008e6a <__swsetup_r+0x6a>
 8008e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e5c:	4299      	cmp	r1, r3
 8008e5e:	d002      	beq.n	8008e66 <__swsetup_r+0x66>
 8008e60:	4630      	mov	r0, r6
 8008e62:	f000 fa21 	bl	80092a8 <_free_r>
 8008e66:	2300      	movs	r3, #0
 8008e68:	6363      	str	r3, [r4, #52]	; 0x34
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	2300      	movs	r3, #0
 8008e74:	6063      	str	r3, [r4, #4]
 8008e76:	6923      	ldr	r3, [r4, #16]
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	f043 0308 	orr.w	r3, r3, #8
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	6923      	ldr	r3, [r4, #16]
 8008e84:	b94b      	cbnz	r3, 8008e9a <__swsetup_r+0x9a>
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e90:	d003      	beq.n	8008e9a <__swsetup_r+0x9a>
 8008e92:	4621      	mov	r1, r4
 8008e94:	4630      	mov	r0, r6
 8008e96:	f000 f9bf 	bl	8009218 <__smakebuf_r>
 8008e9a:	89a2      	ldrh	r2, [r4, #12]
 8008e9c:	f012 0301 	ands.w	r3, r2, #1
 8008ea0:	d00c      	beq.n	8008ebc <__swsetup_r+0xbc>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60a3      	str	r3, [r4, #8]
 8008ea6:	6963      	ldr	r3, [r4, #20]
 8008ea8:	425b      	negs	r3, r3
 8008eaa:	61a3      	str	r3, [r4, #24]
 8008eac:	6923      	ldr	r3, [r4, #16]
 8008eae:	b953      	cbnz	r3, 8008ec6 <__swsetup_r+0xc6>
 8008eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008eb8:	d1ba      	bne.n	8008e30 <__swsetup_r+0x30>
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	0792      	lsls	r2, r2, #30
 8008ebe:	bf58      	it	pl
 8008ec0:	6963      	ldrpl	r3, [r4, #20]
 8008ec2:	60a3      	str	r3, [r4, #8]
 8008ec4:	e7f2      	b.n	8008eac <__swsetup_r+0xac>
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	e7f7      	b.n	8008eba <__swsetup_r+0xba>
 8008eca:	bf00      	nop
 8008ecc:	200002c8 	.word	0x200002c8
 8008ed0:	08009bdc 	.word	0x08009bdc
 8008ed4:	08009bfc 	.word	0x08009bfc
 8008ed8:	08009bbc 	.word	0x08009bbc

08008edc <__sflush_r>:
 8008edc:	898a      	ldrh	r2, [r1, #12]
 8008ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	0710      	lsls	r0, r2, #28
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	d458      	bmi.n	8008f9c <__sflush_r+0xc0>
 8008eea:	684b      	ldr	r3, [r1, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	dc05      	bgt.n	8008efc <__sflush_r+0x20>
 8008ef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	dc02      	bgt.n	8008efc <__sflush_r+0x20>
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008efe:	2e00      	cmp	r6, #0
 8008f00:	d0f9      	beq.n	8008ef6 <__sflush_r+0x1a>
 8008f02:	2300      	movs	r3, #0
 8008f04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f08:	682f      	ldr	r7, [r5, #0]
 8008f0a:	6a21      	ldr	r1, [r4, #32]
 8008f0c:	602b      	str	r3, [r5, #0]
 8008f0e:	d032      	beq.n	8008f76 <__sflush_r+0x9a>
 8008f10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	075a      	lsls	r2, r3, #29
 8008f16:	d505      	bpl.n	8008f24 <__sflush_r+0x48>
 8008f18:	6863      	ldr	r3, [r4, #4]
 8008f1a:	1ac0      	subs	r0, r0, r3
 8008f1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f1e:	b10b      	cbz	r3, 8008f24 <__sflush_r+0x48>
 8008f20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f22:	1ac0      	subs	r0, r0, r3
 8008f24:	2300      	movs	r3, #0
 8008f26:	4602      	mov	r2, r0
 8008f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f2a:	6a21      	ldr	r1, [r4, #32]
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	47b0      	blx	r6
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	d106      	bne.n	8008f44 <__sflush_r+0x68>
 8008f36:	6829      	ldr	r1, [r5, #0]
 8008f38:	291d      	cmp	r1, #29
 8008f3a:	d848      	bhi.n	8008fce <__sflush_r+0xf2>
 8008f3c:	4a29      	ldr	r2, [pc, #164]	; (8008fe4 <__sflush_r+0x108>)
 8008f3e:	40ca      	lsrs	r2, r1
 8008f40:	07d6      	lsls	r6, r2, #31
 8008f42:	d544      	bpl.n	8008fce <__sflush_r+0xf2>
 8008f44:	2200      	movs	r2, #0
 8008f46:	6062      	str	r2, [r4, #4]
 8008f48:	04d9      	lsls	r1, r3, #19
 8008f4a:	6922      	ldr	r2, [r4, #16]
 8008f4c:	6022      	str	r2, [r4, #0]
 8008f4e:	d504      	bpl.n	8008f5a <__sflush_r+0x7e>
 8008f50:	1c42      	adds	r2, r0, #1
 8008f52:	d101      	bne.n	8008f58 <__sflush_r+0x7c>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	b903      	cbnz	r3, 8008f5a <__sflush_r+0x7e>
 8008f58:	6560      	str	r0, [r4, #84]	; 0x54
 8008f5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f5c:	602f      	str	r7, [r5, #0]
 8008f5e:	2900      	cmp	r1, #0
 8008f60:	d0c9      	beq.n	8008ef6 <__sflush_r+0x1a>
 8008f62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f66:	4299      	cmp	r1, r3
 8008f68:	d002      	beq.n	8008f70 <__sflush_r+0x94>
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 f99c 	bl	80092a8 <_free_r>
 8008f70:	2000      	movs	r0, #0
 8008f72:	6360      	str	r0, [r4, #52]	; 0x34
 8008f74:	e7c0      	b.n	8008ef8 <__sflush_r+0x1c>
 8008f76:	2301      	movs	r3, #1
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b0      	blx	r6
 8008f7c:	1c41      	adds	r1, r0, #1
 8008f7e:	d1c8      	bne.n	8008f12 <__sflush_r+0x36>
 8008f80:	682b      	ldr	r3, [r5, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0c5      	beq.n	8008f12 <__sflush_r+0x36>
 8008f86:	2b1d      	cmp	r3, #29
 8008f88:	d001      	beq.n	8008f8e <__sflush_r+0xb2>
 8008f8a:	2b16      	cmp	r3, #22
 8008f8c:	d101      	bne.n	8008f92 <__sflush_r+0xb6>
 8008f8e:	602f      	str	r7, [r5, #0]
 8008f90:	e7b1      	b.n	8008ef6 <__sflush_r+0x1a>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f98:	81a3      	strh	r3, [r4, #12]
 8008f9a:	e7ad      	b.n	8008ef8 <__sflush_r+0x1c>
 8008f9c:	690f      	ldr	r7, [r1, #16]
 8008f9e:	2f00      	cmp	r7, #0
 8008fa0:	d0a9      	beq.n	8008ef6 <__sflush_r+0x1a>
 8008fa2:	0793      	lsls	r3, r2, #30
 8008fa4:	680e      	ldr	r6, [r1, #0]
 8008fa6:	bf08      	it	eq
 8008fa8:	694b      	ldreq	r3, [r1, #20]
 8008faa:	600f      	str	r7, [r1, #0]
 8008fac:	bf18      	it	ne
 8008fae:	2300      	movne	r3, #0
 8008fb0:	eba6 0807 	sub.w	r8, r6, r7
 8008fb4:	608b      	str	r3, [r1, #8]
 8008fb6:	f1b8 0f00 	cmp.w	r8, #0
 8008fba:	dd9c      	ble.n	8008ef6 <__sflush_r+0x1a>
 8008fbc:	4643      	mov	r3, r8
 8008fbe:	463a      	mov	r2, r7
 8008fc0:	6a21      	ldr	r1, [r4, #32]
 8008fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b0      	blx	r6
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	dc06      	bgt.n	8008fda <__sflush_r+0xfe>
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	e78e      	b.n	8008ef8 <__sflush_r+0x1c>
 8008fda:	4407      	add	r7, r0
 8008fdc:	eba8 0800 	sub.w	r8, r8, r0
 8008fe0:	e7e9      	b.n	8008fb6 <__sflush_r+0xda>
 8008fe2:	bf00      	nop
 8008fe4:	20400001 	.word	0x20400001

08008fe8 <_fflush_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	690b      	ldr	r3, [r1, #16]
 8008fec:	4605      	mov	r5, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	b1db      	cbz	r3, 800902a <_fflush_r+0x42>
 8008ff2:	b118      	cbz	r0, 8008ffc <_fflush_r+0x14>
 8008ff4:	6983      	ldr	r3, [r0, #24]
 8008ff6:	b90b      	cbnz	r3, 8008ffc <_fflush_r+0x14>
 8008ff8:	f000 f860 	bl	80090bc <__sinit>
 8008ffc:	4b0c      	ldr	r3, [pc, #48]	; (8009030 <_fflush_r+0x48>)
 8008ffe:	429c      	cmp	r4, r3
 8009000:	d109      	bne.n	8009016 <_fflush_r+0x2e>
 8009002:	686c      	ldr	r4, [r5, #4]
 8009004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009008:	b17b      	cbz	r3, 800902a <_fflush_r+0x42>
 800900a:	4621      	mov	r1, r4
 800900c:	4628      	mov	r0, r5
 800900e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009012:	f7ff bf63 	b.w	8008edc <__sflush_r>
 8009016:	4b07      	ldr	r3, [pc, #28]	; (8009034 <_fflush_r+0x4c>)
 8009018:	429c      	cmp	r4, r3
 800901a:	d101      	bne.n	8009020 <_fflush_r+0x38>
 800901c:	68ac      	ldr	r4, [r5, #8]
 800901e:	e7f1      	b.n	8009004 <_fflush_r+0x1c>
 8009020:	4b05      	ldr	r3, [pc, #20]	; (8009038 <_fflush_r+0x50>)
 8009022:	429c      	cmp	r4, r3
 8009024:	bf08      	it	eq
 8009026:	68ec      	ldreq	r4, [r5, #12]
 8009028:	e7ec      	b.n	8009004 <_fflush_r+0x1c>
 800902a:	2000      	movs	r0, #0
 800902c:	bd38      	pop	{r3, r4, r5, pc}
 800902e:	bf00      	nop
 8009030:	08009bdc 	.word	0x08009bdc
 8009034:	08009bfc 	.word	0x08009bfc
 8009038:	08009bbc 	.word	0x08009bbc

0800903c <std>:
 800903c:	2300      	movs	r3, #0
 800903e:	b510      	push	{r4, lr}
 8009040:	4604      	mov	r4, r0
 8009042:	e9c0 3300 	strd	r3, r3, [r0]
 8009046:	6083      	str	r3, [r0, #8]
 8009048:	8181      	strh	r1, [r0, #12]
 800904a:	6643      	str	r3, [r0, #100]	; 0x64
 800904c:	81c2      	strh	r2, [r0, #14]
 800904e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009052:	6183      	str	r3, [r0, #24]
 8009054:	4619      	mov	r1, r3
 8009056:	2208      	movs	r2, #8
 8009058:	305c      	adds	r0, #92	; 0x5c
 800905a:	f7ff fd44 	bl	8008ae6 <memset>
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <std+0x38>)
 8009060:	6263      	str	r3, [r4, #36]	; 0x24
 8009062:	4b05      	ldr	r3, [pc, #20]	; (8009078 <std+0x3c>)
 8009064:	62a3      	str	r3, [r4, #40]	; 0x28
 8009066:	4b05      	ldr	r3, [pc, #20]	; (800907c <std+0x40>)
 8009068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800906a:	4b05      	ldr	r3, [pc, #20]	; (8009080 <std+0x44>)
 800906c:	6224      	str	r4, [r4, #32]
 800906e:	6323      	str	r3, [r4, #48]	; 0x30
 8009070:	bd10      	pop	{r4, pc}
 8009072:	bf00      	nop
 8009074:	080099a9 	.word	0x080099a9
 8009078:	080099cb 	.word	0x080099cb
 800907c:	08009a03 	.word	0x08009a03
 8009080:	08009a27 	.word	0x08009a27

08009084 <_cleanup_r>:
 8009084:	4901      	ldr	r1, [pc, #4]	; (800908c <_cleanup_r+0x8>)
 8009086:	f000 b885 	b.w	8009194 <_fwalk_reent>
 800908a:	bf00      	nop
 800908c:	08008fe9 	.word	0x08008fe9

08009090 <__sfmoreglue>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	1e4a      	subs	r2, r1, #1
 8009094:	2568      	movs	r5, #104	; 0x68
 8009096:	4355      	muls	r5, r2
 8009098:	460e      	mov	r6, r1
 800909a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800909e:	f000 f951 	bl	8009344 <_malloc_r>
 80090a2:	4604      	mov	r4, r0
 80090a4:	b140      	cbz	r0, 80090b8 <__sfmoreglue+0x28>
 80090a6:	2100      	movs	r1, #0
 80090a8:	e9c0 1600 	strd	r1, r6, [r0]
 80090ac:	300c      	adds	r0, #12
 80090ae:	60a0      	str	r0, [r4, #8]
 80090b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090b4:	f7ff fd17 	bl	8008ae6 <memset>
 80090b8:	4620      	mov	r0, r4
 80090ba:	bd70      	pop	{r4, r5, r6, pc}

080090bc <__sinit>:
 80090bc:	6983      	ldr	r3, [r0, #24]
 80090be:	b510      	push	{r4, lr}
 80090c0:	4604      	mov	r4, r0
 80090c2:	bb33      	cbnz	r3, 8009112 <__sinit+0x56>
 80090c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80090c8:	6503      	str	r3, [r0, #80]	; 0x50
 80090ca:	4b12      	ldr	r3, [pc, #72]	; (8009114 <__sinit+0x58>)
 80090cc:	4a12      	ldr	r2, [pc, #72]	; (8009118 <__sinit+0x5c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6282      	str	r2, [r0, #40]	; 0x28
 80090d2:	4298      	cmp	r0, r3
 80090d4:	bf04      	itt	eq
 80090d6:	2301      	moveq	r3, #1
 80090d8:	6183      	streq	r3, [r0, #24]
 80090da:	f000 f81f 	bl	800911c <__sfp>
 80090de:	6060      	str	r0, [r4, #4]
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 f81b 	bl	800911c <__sfp>
 80090e6:	60a0      	str	r0, [r4, #8]
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 f817 	bl	800911c <__sfp>
 80090ee:	2200      	movs	r2, #0
 80090f0:	60e0      	str	r0, [r4, #12]
 80090f2:	2104      	movs	r1, #4
 80090f4:	6860      	ldr	r0, [r4, #4]
 80090f6:	f7ff ffa1 	bl	800903c <std>
 80090fa:	2201      	movs	r2, #1
 80090fc:	2109      	movs	r1, #9
 80090fe:	68a0      	ldr	r0, [r4, #8]
 8009100:	f7ff ff9c 	bl	800903c <std>
 8009104:	2202      	movs	r2, #2
 8009106:	2112      	movs	r1, #18
 8009108:	68e0      	ldr	r0, [r4, #12]
 800910a:	f7ff ff97 	bl	800903c <std>
 800910e:	2301      	movs	r3, #1
 8009110:	61a3      	str	r3, [r4, #24]
 8009112:	bd10      	pop	{r4, pc}
 8009114:	08009bb8 	.word	0x08009bb8
 8009118:	08009085 	.word	0x08009085

0800911c <__sfp>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	4b1b      	ldr	r3, [pc, #108]	; (800918c <__sfp+0x70>)
 8009120:	681e      	ldr	r6, [r3, #0]
 8009122:	69b3      	ldr	r3, [r6, #24]
 8009124:	4607      	mov	r7, r0
 8009126:	b913      	cbnz	r3, 800912e <__sfp+0x12>
 8009128:	4630      	mov	r0, r6
 800912a:	f7ff ffc7 	bl	80090bc <__sinit>
 800912e:	3648      	adds	r6, #72	; 0x48
 8009130:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009134:	3b01      	subs	r3, #1
 8009136:	d503      	bpl.n	8009140 <__sfp+0x24>
 8009138:	6833      	ldr	r3, [r6, #0]
 800913a:	b133      	cbz	r3, 800914a <__sfp+0x2e>
 800913c:	6836      	ldr	r6, [r6, #0]
 800913e:	e7f7      	b.n	8009130 <__sfp+0x14>
 8009140:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009144:	b16d      	cbz	r5, 8009162 <__sfp+0x46>
 8009146:	3468      	adds	r4, #104	; 0x68
 8009148:	e7f4      	b.n	8009134 <__sfp+0x18>
 800914a:	2104      	movs	r1, #4
 800914c:	4638      	mov	r0, r7
 800914e:	f7ff ff9f 	bl	8009090 <__sfmoreglue>
 8009152:	6030      	str	r0, [r6, #0]
 8009154:	2800      	cmp	r0, #0
 8009156:	d1f1      	bne.n	800913c <__sfp+0x20>
 8009158:	230c      	movs	r3, #12
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	4604      	mov	r4, r0
 800915e:	4620      	mov	r0, r4
 8009160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009162:	4b0b      	ldr	r3, [pc, #44]	; (8009190 <__sfp+0x74>)
 8009164:	6665      	str	r5, [r4, #100]	; 0x64
 8009166:	e9c4 5500 	strd	r5, r5, [r4]
 800916a:	60a5      	str	r5, [r4, #8]
 800916c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009170:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009174:	2208      	movs	r2, #8
 8009176:	4629      	mov	r1, r5
 8009178:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800917c:	f7ff fcb3 	bl	8008ae6 <memset>
 8009180:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009184:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009188:	e7e9      	b.n	800915e <__sfp+0x42>
 800918a:	bf00      	nop
 800918c:	08009bb8 	.word	0x08009bb8
 8009190:	ffff0001 	.word	0xffff0001

08009194 <_fwalk_reent>:
 8009194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009198:	4680      	mov	r8, r0
 800919a:	4689      	mov	r9, r1
 800919c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091a0:	2600      	movs	r6, #0
 80091a2:	b914      	cbnz	r4, 80091aa <_fwalk_reent+0x16>
 80091a4:	4630      	mov	r0, r6
 80091a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80091ae:	3f01      	subs	r7, #1
 80091b0:	d501      	bpl.n	80091b6 <_fwalk_reent+0x22>
 80091b2:	6824      	ldr	r4, [r4, #0]
 80091b4:	e7f5      	b.n	80091a2 <_fwalk_reent+0xe>
 80091b6:	89ab      	ldrh	r3, [r5, #12]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d907      	bls.n	80091cc <_fwalk_reent+0x38>
 80091bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091c0:	3301      	adds	r3, #1
 80091c2:	d003      	beq.n	80091cc <_fwalk_reent+0x38>
 80091c4:	4629      	mov	r1, r5
 80091c6:	4640      	mov	r0, r8
 80091c8:	47c8      	blx	r9
 80091ca:	4306      	orrs	r6, r0
 80091cc:	3568      	adds	r5, #104	; 0x68
 80091ce:	e7ee      	b.n	80091ae <_fwalk_reent+0x1a>

080091d0 <__swhatbuf_r>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	460e      	mov	r6, r1
 80091d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d8:	2900      	cmp	r1, #0
 80091da:	b096      	sub	sp, #88	; 0x58
 80091dc:	4614      	mov	r4, r2
 80091de:	461d      	mov	r5, r3
 80091e0:	da07      	bge.n	80091f2 <__swhatbuf_r+0x22>
 80091e2:	2300      	movs	r3, #0
 80091e4:	602b      	str	r3, [r5, #0]
 80091e6:	89b3      	ldrh	r3, [r6, #12]
 80091e8:	061a      	lsls	r2, r3, #24
 80091ea:	d410      	bmi.n	800920e <__swhatbuf_r+0x3e>
 80091ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091f0:	e00e      	b.n	8009210 <__swhatbuf_r+0x40>
 80091f2:	466a      	mov	r2, sp
 80091f4:	f000 fc3e 	bl	8009a74 <_fstat_r>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	dbf2      	blt.n	80091e2 <__swhatbuf_r+0x12>
 80091fc:	9a01      	ldr	r2, [sp, #4]
 80091fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009202:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009206:	425a      	negs	r2, r3
 8009208:	415a      	adcs	r2, r3
 800920a:	602a      	str	r2, [r5, #0]
 800920c:	e7ee      	b.n	80091ec <__swhatbuf_r+0x1c>
 800920e:	2340      	movs	r3, #64	; 0x40
 8009210:	2000      	movs	r0, #0
 8009212:	6023      	str	r3, [r4, #0]
 8009214:	b016      	add	sp, #88	; 0x58
 8009216:	bd70      	pop	{r4, r5, r6, pc}

08009218 <__smakebuf_r>:
 8009218:	898b      	ldrh	r3, [r1, #12]
 800921a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800921c:	079d      	lsls	r5, r3, #30
 800921e:	4606      	mov	r6, r0
 8009220:	460c      	mov	r4, r1
 8009222:	d507      	bpl.n	8009234 <__smakebuf_r+0x1c>
 8009224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	6123      	str	r3, [r4, #16]
 800922c:	2301      	movs	r3, #1
 800922e:	6163      	str	r3, [r4, #20]
 8009230:	b002      	add	sp, #8
 8009232:	bd70      	pop	{r4, r5, r6, pc}
 8009234:	ab01      	add	r3, sp, #4
 8009236:	466a      	mov	r2, sp
 8009238:	f7ff ffca 	bl	80091d0 <__swhatbuf_r>
 800923c:	9900      	ldr	r1, [sp, #0]
 800923e:	4605      	mov	r5, r0
 8009240:	4630      	mov	r0, r6
 8009242:	f000 f87f 	bl	8009344 <_malloc_r>
 8009246:	b948      	cbnz	r0, 800925c <__smakebuf_r+0x44>
 8009248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800924c:	059a      	lsls	r2, r3, #22
 800924e:	d4ef      	bmi.n	8009230 <__smakebuf_r+0x18>
 8009250:	f023 0303 	bic.w	r3, r3, #3
 8009254:	f043 0302 	orr.w	r3, r3, #2
 8009258:	81a3      	strh	r3, [r4, #12]
 800925a:	e7e3      	b.n	8009224 <__smakebuf_r+0xc>
 800925c:	4b0d      	ldr	r3, [pc, #52]	; (8009294 <__smakebuf_r+0x7c>)
 800925e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	6020      	str	r0, [r4, #0]
 8009264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009268:	81a3      	strh	r3, [r4, #12]
 800926a:	9b00      	ldr	r3, [sp, #0]
 800926c:	6163      	str	r3, [r4, #20]
 800926e:	9b01      	ldr	r3, [sp, #4]
 8009270:	6120      	str	r0, [r4, #16]
 8009272:	b15b      	cbz	r3, 800928c <__smakebuf_r+0x74>
 8009274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009278:	4630      	mov	r0, r6
 800927a:	f000 fc0d 	bl	8009a98 <_isatty_r>
 800927e:	b128      	cbz	r0, 800928c <__smakebuf_r+0x74>
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	f023 0303 	bic.w	r3, r3, #3
 8009286:	f043 0301 	orr.w	r3, r3, #1
 800928a:	81a3      	strh	r3, [r4, #12]
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	431d      	orrs	r5, r3
 8009290:	81a5      	strh	r5, [r4, #12]
 8009292:	e7cd      	b.n	8009230 <__smakebuf_r+0x18>
 8009294:	08009085 	.word	0x08009085

08009298 <malloc>:
 8009298:	4b02      	ldr	r3, [pc, #8]	; (80092a4 <malloc+0xc>)
 800929a:	4601      	mov	r1, r0
 800929c:	6818      	ldr	r0, [r3, #0]
 800929e:	f000 b851 	b.w	8009344 <_malloc_r>
 80092a2:	bf00      	nop
 80092a4:	200002c8 	.word	0x200002c8

080092a8 <_free_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	4605      	mov	r5, r0
 80092ac:	2900      	cmp	r1, #0
 80092ae:	d045      	beq.n	800933c <_free_r+0x94>
 80092b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092b4:	1f0c      	subs	r4, r1, #4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bfb8      	it	lt
 80092ba:	18e4      	addlt	r4, r4, r3
 80092bc:	f000 fc0e 	bl	8009adc <__malloc_lock>
 80092c0:	4a1f      	ldr	r2, [pc, #124]	; (8009340 <_free_r+0x98>)
 80092c2:	6813      	ldr	r3, [r2, #0]
 80092c4:	4610      	mov	r0, r2
 80092c6:	b933      	cbnz	r3, 80092d6 <_free_r+0x2e>
 80092c8:	6063      	str	r3, [r4, #4]
 80092ca:	6014      	str	r4, [r2, #0]
 80092cc:	4628      	mov	r0, r5
 80092ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092d2:	f000 bc04 	b.w	8009ade <__malloc_unlock>
 80092d6:	42a3      	cmp	r3, r4
 80092d8:	d90c      	bls.n	80092f4 <_free_r+0x4c>
 80092da:	6821      	ldr	r1, [r4, #0]
 80092dc:	1862      	adds	r2, r4, r1
 80092de:	4293      	cmp	r3, r2
 80092e0:	bf04      	itt	eq
 80092e2:	681a      	ldreq	r2, [r3, #0]
 80092e4:	685b      	ldreq	r3, [r3, #4]
 80092e6:	6063      	str	r3, [r4, #4]
 80092e8:	bf04      	itt	eq
 80092ea:	1852      	addeq	r2, r2, r1
 80092ec:	6022      	streq	r2, [r4, #0]
 80092ee:	6004      	str	r4, [r0, #0]
 80092f0:	e7ec      	b.n	80092cc <_free_r+0x24>
 80092f2:	4613      	mov	r3, r2
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	b10a      	cbz	r2, 80092fc <_free_r+0x54>
 80092f8:	42a2      	cmp	r2, r4
 80092fa:	d9fa      	bls.n	80092f2 <_free_r+0x4a>
 80092fc:	6819      	ldr	r1, [r3, #0]
 80092fe:	1858      	adds	r0, r3, r1
 8009300:	42a0      	cmp	r0, r4
 8009302:	d10b      	bne.n	800931c <_free_r+0x74>
 8009304:	6820      	ldr	r0, [r4, #0]
 8009306:	4401      	add	r1, r0
 8009308:	1858      	adds	r0, r3, r1
 800930a:	4282      	cmp	r2, r0
 800930c:	6019      	str	r1, [r3, #0]
 800930e:	d1dd      	bne.n	80092cc <_free_r+0x24>
 8009310:	6810      	ldr	r0, [r2, #0]
 8009312:	6852      	ldr	r2, [r2, #4]
 8009314:	605a      	str	r2, [r3, #4]
 8009316:	4401      	add	r1, r0
 8009318:	6019      	str	r1, [r3, #0]
 800931a:	e7d7      	b.n	80092cc <_free_r+0x24>
 800931c:	d902      	bls.n	8009324 <_free_r+0x7c>
 800931e:	230c      	movs	r3, #12
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	e7d3      	b.n	80092cc <_free_r+0x24>
 8009324:	6820      	ldr	r0, [r4, #0]
 8009326:	1821      	adds	r1, r4, r0
 8009328:	428a      	cmp	r2, r1
 800932a:	bf04      	itt	eq
 800932c:	6811      	ldreq	r1, [r2, #0]
 800932e:	6852      	ldreq	r2, [r2, #4]
 8009330:	6062      	str	r2, [r4, #4]
 8009332:	bf04      	itt	eq
 8009334:	1809      	addeq	r1, r1, r0
 8009336:	6021      	streq	r1, [r4, #0]
 8009338:	605c      	str	r4, [r3, #4]
 800933a:	e7c7      	b.n	80092cc <_free_r+0x24>
 800933c:	bd38      	pop	{r3, r4, r5, pc}
 800933e:	bf00      	nop
 8009340:	2000034c 	.word	0x2000034c

08009344 <_malloc_r>:
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	1ccd      	adds	r5, r1, #3
 8009348:	f025 0503 	bic.w	r5, r5, #3
 800934c:	3508      	adds	r5, #8
 800934e:	2d0c      	cmp	r5, #12
 8009350:	bf38      	it	cc
 8009352:	250c      	movcc	r5, #12
 8009354:	2d00      	cmp	r5, #0
 8009356:	4606      	mov	r6, r0
 8009358:	db01      	blt.n	800935e <_malloc_r+0x1a>
 800935a:	42a9      	cmp	r1, r5
 800935c:	d903      	bls.n	8009366 <_malloc_r+0x22>
 800935e:	230c      	movs	r3, #12
 8009360:	6033      	str	r3, [r6, #0]
 8009362:	2000      	movs	r0, #0
 8009364:	bd70      	pop	{r4, r5, r6, pc}
 8009366:	f000 fbb9 	bl	8009adc <__malloc_lock>
 800936a:	4a21      	ldr	r2, [pc, #132]	; (80093f0 <_malloc_r+0xac>)
 800936c:	6814      	ldr	r4, [r2, #0]
 800936e:	4621      	mov	r1, r4
 8009370:	b991      	cbnz	r1, 8009398 <_malloc_r+0x54>
 8009372:	4c20      	ldr	r4, [pc, #128]	; (80093f4 <_malloc_r+0xb0>)
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	b91b      	cbnz	r3, 8009380 <_malloc_r+0x3c>
 8009378:	4630      	mov	r0, r6
 800937a:	f000 fb05 	bl	8009988 <_sbrk_r>
 800937e:	6020      	str	r0, [r4, #0]
 8009380:	4629      	mov	r1, r5
 8009382:	4630      	mov	r0, r6
 8009384:	f000 fb00 	bl	8009988 <_sbrk_r>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	d124      	bne.n	80093d6 <_malloc_r+0x92>
 800938c:	230c      	movs	r3, #12
 800938e:	6033      	str	r3, [r6, #0]
 8009390:	4630      	mov	r0, r6
 8009392:	f000 fba4 	bl	8009ade <__malloc_unlock>
 8009396:	e7e4      	b.n	8009362 <_malloc_r+0x1e>
 8009398:	680b      	ldr	r3, [r1, #0]
 800939a:	1b5b      	subs	r3, r3, r5
 800939c:	d418      	bmi.n	80093d0 <_malloc_r+0x8c>
 800939e:	2b0b      	cmp	r3, #11
 80093a0:	d90f      	bls.n	80093c2 <_malloc_r+0x7e>
 80093a2:	600b      	str	r3, [r1, #0]
 80093a4:	50cd      	str	r5, [r1, r3]
 80093a6:	18cc      	adds	r4, r1, r3
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 fb98 	bl	8009ade <__malloc_unlock>
 80093ae:	f104 000b 	add.w	r0, r4, #11
 80093b2:	1d23      	adds	r3, r4, #4
 80093b4:	f020 0007 	bic.w	r0, r0, #7
 80093b8:	1ac3      	subs	r3, r0, r3
 80093ba:	d0d3      	beq.n	8009364 <_malloc_r+0x20>
 80093bc:	425a      	negs	r2, r3
 80093be:	50e2      	str	r2, [r4, r3]
 80093c0:	e7d0      	b.n	8009364 <_malloc_r+0x20>
 80093c2:	428c      	cmp	r4, r1
 80093c4:	684b      	ldr	r3, [r1, #4]
 80093c6:	bf16      	itet	ne
 80093c8:	6063      	strne	r3, [r4, #4]
 80093ca:	6013      	streq	r3, [r2, #0]
 80093cc:	460c      	movne	r4, r1
 80093ce:	e7eb      	b.n	80093a8 <_malloc_r+0x64>
 80093d0:	460c      	mov	r4, r1
 80093d2:	6849      	ldr	r1, [r1, #4]
 80093d4:	e7cc      	b.n	8009370 <_malloc_r+0x2c>
 80093d6:	1cc4      	adds	r4, r0, #3
 80093d8:	f024 0403 	bic.w	r4, r4, #3
 80093dc:	42a0      	cmp	r0, r4
 80093de:	d005      	beq.n	80093ec <_malloc_r+0xa8>
 80093e0:	1a21      	subs	r1, r4, r0
 80093e2:	4630      	mov	r0, r6
 80093e4:	f000 fad0 	bl	8009988 <_sbrk_r>
 80093e8:	3001      	adds	r0, #1
 80093ea:	d0cf      	beq.n	800938c <_malloc_r+0x48>
 80093ec:	6025      	str	r5, [r4, #0]
 80093ee:	e7db      	b.n	80093a8 <_malloc_r+0x64>
 80093f0:	2000034c 	.word	0x2000034c
 80093f4:	20000350 	.word	0x20000350

080093f8 <__sfputc_r>:
 80093f8:	6893      	ldr	r3, [r2, #8]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	b410      	push	{r4}
 8009400:	6093      	str	r3, [r2, #8]
 8009402:	da08      	bge.n	8009416 <__sfputc_r+0x1e>
 8009404:	6994      	ldr	r4, [r2, #24]
 8009406:	42a3      	cmp	r3, r4
 8009408:	db01      	blt.n	800940e <__sfputc_r+0x16>
 800940a:	290a      	cmp	r1, #10
 800940c:	d103      	bne.n	8009416 <__sfputc_r+0x1e>
 800940e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009412:	f7ff bca3 	b.w	8008d5c <__swbuf_r>
 8009416:	6813      	ldr	r3, [r2, #0]
 8009418:	1c58      	adds	r0, r3, #1
 800941a:	6010      	str	r0, [r2, #0]
 800941c:	7019      	strb	r1, [r3, #0]
 800941e:	4608      	mov	r0, r1
 8009420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009424:	4770      	bx	lr

08009426 <__sfputs_r>:
 8009426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009428:	4606      	mov	r6, r0
 800942a:	460f      	mov	r7, r1
 800942c:	4614      	mov	r4, r2
 800942e:	18d5      	adds	r5, r2, r3
 8009430:	42ac      	cmp	r4, r5
 8009432:	d101      	bne.n	8009438 <__sfputs_r+0x12>
 8009434:	2000      	movs	r0, #0
 8009436:	e007      	b.n	8009448 <__sfputs_r+0x22>
 8009438:	463a      	mov	r2, r7
 800943a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943e:	4630      	mov	r0, r6
 8009440:	f7ff ffda 	bl	80093f8 <__sfputc_r>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d1f3      	bne.n	8009430 <__sfputs_r+0xa>
 8009448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800944c <_vfiprintf_r>:
 800944c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009450:	460c      	mov	r4, r1
 8009452:	b09d      	sub	sp, #116	; 0x74
 8009454:	4617      	mov	r7, r2
 8009456:	461d      	mov	r5, r3
 8009458:	4606      	mov	r6, r0
 800945a:	b118      	cbz	r0, 8009464 <_vfiprintf_r+0x18>
 800945c:	6983      	ldr	r3, [r0, #24]
 800945e:	b90b      	cbnz	r3, 8009464 <_vfiprintf_r+0x18>
 8009460:	f7ff fe2c 	bl	80090bc <__sinit>
 8009464:	4b7c      	ldr	r3, [pc, #496]	; (8009658 <_vfiprintf_r+0x20c>)
 8009466:	429c      	cmp	r4, r3
 8009468:	d158      	bne.n	800951c <_vfiprintf_r+0xd0>
 800946a:	6874      	ldr	r4, [r6, #4]
 800946c:	89a3      	ldrh	r3, [r4, #12]
 800946e:	0718      	lsls	r0, r3, #28
 8009470:	d55e      	bpl.n	8009530 <_vfiprintf_r+0xe4>
 8009472:	6923      	ldr	r3, [r4, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d05b      	beq.n	8009530 <_vfiprintf_r+0xe4>
 8009478:	2300      	movs	r3, #0
 800947a:	9309      	str	r3, [sp, #36]	; 0x24
 800947c:	2320      	movs	r3, #32
 800947e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009482:	2330      	movs	r3, #48	; 0x30
 8009484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009488:	9503      	str	r5, [sp, #12]
 800948a:	f04f 0b01 	mov.w	fp, #1
 800948e:	46b8      	mov	r8, r7
 8009490:	4645      	mov	r5, r8
 8009492:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009496:	b10b      	cbz	r3, 800949c <_vfiprintf_r+0x50>
 8009498:	2b25      	cmp	r3, #37	; 0x25
 800949a:	d154      	bne.n	8009546 <_vfiprintf_r+0xfa>
 800949c:	ebb8 0a07 	subs.w	sl, r8, r7
 80094a0:	d00b      	beq.n	80094ba <_vfiprintf_r+0x6e>
 80094a2:	4653      	mov	r3, sl
 80094a4:	463a      	mov	r2, r7
 80094a6:	4621      	mov	r1, r4
 80094a8:	4630      	mov	r0, r6
 80094aa:	f7ff ffbc 	bl	8009426 <__sfputs_r>
 80094ae:	3001      	adds	r0, #1
 80094b0:	f000 80c2 	beq.w	8009638 <_vfiprintf_r+0x1ec>
 80094b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b6:	4453      	add	r3, sl
 80094b8:	9309      	str	r3, [sp, #36]	; 0x24
 80094ba:	f898 3000 	ldrb.w	r3, [r8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f000 80ba 	beq.w	8009638 <_vfiprintf_r+0x1ec>
 80094c4:	2300      	movs	r3, #0
 80094c6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ce:	9304      	str	r3, [sp, #16]
 80094d0:	9307      	str	r3, [sp, #28]
 80094d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094d6:	931a      	str	r3, [sp, #104]	; 0x68
 80094d8:	46a8      	mov	r8, r5
 80094da:	2205      	movs	r2, #5
 80094dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80094e0:	485e      	ldr	r0, [pc, #376]	; (800965c <_vfiprintf_r+0x210>)
 80094e2:	f7f6 fe95 	bl	8000210 <memchr>
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	bb78      	cbnz	r0, 800954a <_vfiprintf_r+0xfe>
 80094ea:	06d9      	lsls	r1, r3, #27
 80094ec:	bf44      	itt	mi
 80094ee:	2220      	movmi	r2, #32
 80094f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094f4:	071a      	lsls	r2, r3, #28
 80094f6:	bf44      	itt	mi
 80094f8:	222b      	movmi	r2, #43	; 0x2b
 80094fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094fe:	782a      	ldrb	r2, [r5, #0]
 8009500:	2a2a      	cmp	r2, #42	; 0x2a
 8009502:	d02a      	beq.n	800955a <_vfiprintf_r+0x10e>
 8009504:	9a07      	ldr	r2, [sp, #28]
 8009506:	46a8      	mov	r8, r5
 8009508:	2000      	movs	r0, #0
 800950a:	250a      	movs	r5, #10
 800950c:	4641      	mov	r1, r8
 800950e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009512:	3b30      	subs	r3, #48	; 0x30
 8009514:	2b09      	cmp	r3, #9
 8009516:	d969      	bls.n	80095ec <_vfiprintf_r+0x1a0>
 8009518:	b360      	cbz	r0, 8009574 <_vfiprintf_r+0x128>
 800951a:	e024      	b.n	8009566 <_vfiprintf_r+0x11a>
 800951c:	4b50      	ldr	r3, [pc, #320]	; (8009660 <_vfiprintf_r+0x214>)
 800951e:	429c      	cmp	r4, r3
 8009520:	d101      	bne.n	8009526 <_vfiprintf_r+0xda>
 8009522:	68b4      	ldr	r4, [r6, #8]
 8009524:	e7a2      	b.n	800946c <_vfiprintf_r+0x20>
 8009526:	4b4f      	ldr	r3, [pc, #316]	; (8009664 <_vfiprintf_r+0x218>)
 8009528:	429c      	cmp	r4, r3
 800952a:	bf08      	it	eq
 800952c:	68f4      	ldreq	r4, [r6, #12]
 800952e:	e79d      	b.n	800946c <_vfiprintf_r+0x20>
 8009530:	4621      	mov	r1, r4
 8009532:	4630      	mov	r0, r6
 8009534:	f7ff fc64 	bl	8008e00 <__swsetup_r>
 8009538:	2800      	cmp	r0, #0
 800953a:	d09d      	beq.n	8009478 <_vfiprintf_r+0x2c>
 800953c:	f04f 30ff 	mov.w	r0, #4294967295
 8009540:	b01d      	add	sp, #116	; 0x74
 8009542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009546:	46a8      	mov	r8, r5
 8009548:	e7a2      	b.n	8009490 <_vfiprintf_r+0x44>
 800954a:	4a44      	ldr	r2, [pc, #272]	; (800965c <_vfiprintf_r+0x210>)
 800954c:	1a80      	subs	r0, r0, r2
 800954e:	fa0b f000 	lsl.w	r0, fp, r0
 8009552:	4318      	orrs	r0, r3
 8009554:	9004      	str	r0, [sp, #16]
 8009556:	4645      	mov	r5, r8
 8009558:	e7be      	b.n	80094d8 <_vfiprintf_r+0x8c>
 800955a:	9a03      	ldr	r2, [sp, #12]
 800955c:	1d11      	adds	r1, r2, #4
 800955e:	6812      	ldr	r2, [r2, #0]
 8009560:	9103      	str	r1, [sp, #12]
 8009562:	2a00      	cmp	r2, #0
 8009564:	db01      	blt.n	800956a <_vfiprintf_r+0x11e>
 8009566:	9207      	str	r2, [sp, #28]
 8009568:	e004      	b.n	8009574 <_vfiprintf_r+0x128>
 800956a:	4252      	negs	r2, r2
 800956c:	f043 0302 	orr.w	r3, r3, #2
 8009570:	9207      	str	r2, [sp, #28]
 8009572:	9304      	str	r3, [sp, #16]
 8009574:	f898 3000 	ldrb.w	r3, [r8]
 8009578:	2b2e      	cmp	r3, #46	; 0x2e
 800957a:	d10e      	bne.n	800959a <_vfiprintf_r+0x14e>
 800957c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009580:	2b2a      	cmp	r3, #42	; 0x2a
 8009582:	d138      	bne.n	80095f6 <_vfiprintf_r+0x1aa>
 8009584:	9b03      	ldr	r3, [sp, #12]
 8009586:	1d1a      	adds	r2, r3, #4
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	9203      	str	r2, [sp, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	bfb8      	it	lt
 8009590:	f04f 33ff 	movlt.w	r3, #4294967295
 8009594:	f108 0802 	add.w	r8, r8, #2
 8009598:	9305      	str	r3, [sp, #20]
 800959a:	4d33      	ldr	r5, [pc, #204]	; (8009668 <_vfiprintf_r+0x21c>)
 800959c:	f898 1000 	ldrb.w	r1, [r8]
 80095a0:	2203      	movs	r2, #3
 80095a2:	4628      	mov	r0, r5
 80095a4:	f7f6 fe34 	bl	8000210 <memchr>
 80095a8:	b140      	cbz	r0, 80095bc <_vfiprintf_r+0x170>
 80095aa:	2340      	movs	r3, #64	; 0x40
 80095ac:	1b40      	subs	r0, r0, r5
 80095ae:	fa03 f000 	lsl.w	r0, r3, r0
 80095b2:	9b04      	ldr	r3, [sp, #16]
 80095b4:	4303      	orrs	r3, r0
 80095b6:	f108 0801 	add.w	r8, r8, #1
 80095ba:	9304      	str	r3, [sp, #16]
 80095bc:	f898 1000 	ldrb.w	r1, [r8]
 80095c0:	482a      	ldr	r0, [pc, #168]	; (800966c <_vfiprintf_r+0x220>)
 80095c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095c6:	2206      	movs	r2, #6
 80095c8:	f108 0701 	add.w	r7, r8, #1
 80095cc:	f7f6 fe20 	bl	8000210 <memchr>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d037      	beq.n	8009644 <_vfiprintf_r+0x1f8>
 80095d4:	4b26      	ldr	r3, [pc, #152]	; (8009670 <_vfiprintf_r+0x224>)
 80095d6:	bb1b      	cbnz	r3, 8009620 <_vfiprintf_r+0x1d4>
 80095d8:	9b03      	ldr	r3, [sp, #12]
 80095da:	3307      	adds	r3, #7
 80095dc:	f023 0307 	bic.w	r3, r3, #7
 80095e0:	3308      	adds	r3, #8
 80095e2:	9303      	str	r3, [sp, #12]
 80095e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e6:	444b      	add	r3, r9
 80095e8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ea:	e750      	b.n	800948e <_vfiprintf_r+0x42>
 80095ec:	fb05 3202 	mla	r2, r5, r2, r3
 80095f0:	2001      	movs	r0, #1
 80095f2:	4688      	mov	r8, r1
 80095f4:	e78a      	b.n	800950c <_vfiprintf_r+0xc0>
 80095f6:	2300      	movs	r3, #0
 80095f8:	f108 0801 	add.w	r8, r8, #1
 80095fc:	9305      	str	r3, [sp, #20]
 80095fe:	4619      	mov	r1, r3
 8009600:	250a      	movs	r5, #10
 8009602:	4640      	mov	r0, r8
 8009604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009608:	3a30      	subs	r2, #48	; 0x30
 800960a:	2a09      	cmp	r2, #9
 800960c:	d903      	bls.n	8009616 <_vfiprintf_r+0x1ca>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0c3      	beq.n	800959a <_vfiprintf_r+0x14e>
 8009612:	9105      	str	r1, [sp, #20]
 8009614:	e7c1      	b.n	800959a <_vfiprintf_r+0x14e>
 8009616:	fb05 2101 	mla	r1, r5, r1, r2
 800961a:	2301      	movs	r3, #1
 800961c:	4680      	mov	r8, r0
 800961e:	e7f0      	b.n	8009602 <_vfiprintf_r+0x1b6>
 8009620:	ab03      	add	r3, sp, #12
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	4622      	mov	r2, r4
 8009626:	4b13      	ldr	r3, [pc, #76]	; (8009674 <_vfiprintf_r+0x228>)
 8009628:	a904      	add	r1, sp, #16
 800962a:	4630      	mov	r0, r6
 800962c:	f3af 8000 	nop.w
 8009630:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009634:	4681      	mov	r9, r0
 8009636:	d1d5      	bne.n	80095e4 <_vfiprintf_r+0x198>
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	065b      	lsls	r3, r3, #25
 800963c:	f53f af7e 	bmi.w	800953c <_vfiprintf_r+0xf0>
 8009640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009642:	e77d      	b.n	8009540 <_vfiprintf_r+0xf4>
 8009644:	ab03      	add	r3, sp, #12
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4622      	mov	r2, r4
 800964a:	4b0a      	ldr	r3, [pc, #40]	; (8009674 <_vfiprintf_r+0x228>)
 800964c:	a904      	add	r1, sp, #16
 800964e:	4630      	mov	r0, r6
 8009650:	f000 f888 	bl	8009764 <_printf_i>
 8009654:	e7ec      	b.n	8009630 <_vfiprintf_r+0x1e4>
 8009656:	bf00      	nop
 8009658:	08009bdc 	.word	0x08009bdc
 800965c:	08009c1c 	.word	0x08009c1c
 8009660:	08009bfc 	.word	0x08009bfc
 8009664:	08009bbc 	.word	0x08009bbc
 8009668:	08009c22 	.word	0x08009c22
 800966c:	08009c26 	.word	0x08009c26
 8009670:	00000000 	.word	0x00000000
 8009674:	08009427 	.word	0x08009427

08009678 <_printf_common>:
 8009678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800967c:	4691      	mov	r9, r2
 800967e:	461f      	mov	r7, r3
 8009680:	688a      	ldr	r2, [r1, #8]
 8009682:	690b      	ldr	r3, [r1, #16]
 8009684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009688:	4293      	cmp	r3, r2
 800968a:	bfb8      	it	lt
 800968c:	4613      	movlt	r3, r2
 800968e:	f8c9 3000 	str.w	r3, [r9]
 8009692:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009696:	4606      	mov	r6, r0
 8009698:	460c      	mov	r4, r1
 800969a:	b112      	cbz	r2, 80096a2 <_printf_common+0x2a>
 800969c:	3301      	adds	r3, #1
 800969e:	f8c9 3000 	str.w	r3, [r9]
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	0699      	lsls	r1, r3, #26
 80096a6:	bf42      	ittt	mi
 80096a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80096ac:	3302      	addmi	r3, #2
 80096ae:	f8c9 3000 	strmi.w	r3, [r9]
 80096b2:	6825      	ldr	r5, [r4, #0]
 80096b4:	f015 0506 	ands.w	r5, r5, #6
 80096b8:	d107      	bne.n	80096ca <_printf_common+0x52>
 80096ba:	f104 0a19 	add.w	sl, r4, #25
 80096be:	68e3      	ldr	r3, [r4, #12]
 80096c0:	f8d9 2000 	ldr.w	r2, [r9]
 80096c4:	1a9b      	subs	r3, r3, r2
 80096c6:	42ab      	cmp	r3, r5
 80096c8:	dc28      	bgt.n	800971c <_printf_common+0xa4>
 80096ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80096ce:	6822      	ldr	r2, [r4, #0]
 80096d0:	3300      	adds	r3, #0
 80096d2:	bf18      	it	ne
 80096d4:	2301      	movne	r3, #1
 80096d6:	0692      	lsls	r2, r2, #26
 80096d8:	d42d      	bmi.n	8009736 <_printf_common+0xbe>
 80096da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096de:	4639      	mov	r1, r7
 80096e0:	4630      	mov	r0, r6
 80096e2:	47c0      	blx	r8
 80096e4:	3001      	adds	r0, #1
 80096e6:	d020      	beq.n	800972a <_printf_common+0xb2>
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	68e5      	ldr	r5, [r4, #12]
 80096ec:	f8d9 2000 	ldr.w	r2, [r9]
 80096f0:	f003 0306 	and.w	r3, r3, #6
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	bf08      	it	eq
 80096f8:	1aad      	subeq	r5, r5, r2
 80096fa:	68a3      	ldr	r3, [r4, #8]
 80096fc:	6922      	ldr	r2, [r4, #16]
 80096fe:	bf0c      	ite	eq
 8009700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009704:	2500      	movne	r5, #0
 8009706:	4293      	cmp	r3, r2
 8009708:	bfc4      	itt	gt
 800970a:	1a9b      	subgt	r3, r3, r2
 800970c:	18ed      	addgt	r5, r5, r3
 800970e:	f04f 0900 	mov.w	r9, #0
 8009712:	341a      	adds	r4, #26
 8009714:	454d      	cmp	r5, r9
 8009716:	d11a      	bne.n	800974e <_printf_common+0xd6>
 8009718:	2000      	movs	r0, #0
 800971a:	e008      	b.n	800972e <_printf_common+0xb6>
 800971c:	2301      	movs	r3, #1
 800971e:	4652      	mov	r2, sl
 8009720:	4639      	mov	r1, r7
 8009722:	4630      	mov	r0, r6
 8009724:	47c0      	blx	r8
 8009726:	3001      	adds	r0, #1
 8009728:	d103      	bne.n	8009732 <_printf_common+0xba>
 800972a:	f04f 30ff 	mov.w	r0, #4294967295
 800972e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009732:	3501      	adds	r5, #1
 8009734:	e7c3      	b.n	80096be <_printf_common+0x46>
 8009736:	18e1      	adds	r1, r4, r3
 8009738:	1c5a      	adds	r2, r3, #1
 800973a:	2030      	movs	r0, #48	; 0x30
 800973c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009740:	4422      	add	r2, r4
 8009742:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009746:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800974a:	3302      	adds	r3, #2
 800974c:	e7c5      	b.n	80096da <_printf_common+0x62>
 800974e:	2301      	movs	r3, #1
 8009750:	4622      	mov	r2, r4
 8009752:	4639      	mov	r1, r7
 8009754:	4630      	mov	r0, r6
 8009756:	47c0      	blx	r8
 8009758:	3001      	adds	r0, #1
 800975a:	d0e6      	beq.n	800972a <_printf_common+0xb2>
 800975c:	f109 0901 	add.w	r9, r9, #1
 8009760:	e7d8      	b.n	8009714 <_printf_common+0x9c>
	...

08009764 <_printf_i>:
 8009764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009768:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800976c:	460c      	mov	r4, r1
 800976e:	7e09      	ldrb	r1, [r1, #24]
 8009770:	b085      	sub	sp, #20
 8009772:	296e      	cmp	r1, #110	; 0x6e
 8009774:	4617      	mov	r7, r2
 8009776:	4606      	mov	r6, r0
 8009778:	4698      	mov	r8, r3
 800977a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800977c:	f000 80b3 	beq.w	80098e6 <_printf_i+0x182>
 8009780:	d822      	bhi.n	80097c8 <_printf_i+0x64>
 8009782:	2963      	cmp	r1, #99	; 0x63
 8009784:	d036      	beq.n	80097f4 <_printf_i+0x90>
 8009786:	d80a      	bhi.n	800979e <_printf_i+0x3a>
 8009788:	2900      	cmp	r1, #0
 800978a:	f000 80b9 	beq.w	8009900 <_printf_i+0x19c>
 800978e:	2958      	cmp	r1, #88	; 0x58
 8009790:	f000 8083 	beq.w	800989a <_printf_i+0x136>
 8009794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009798:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800979c:	e032      	b.n	8009804 <_printf_i+0xa0>
 800979e:	2964      	cmp	r1, #100	; 0x64
 80097a0:	d001      	beq.n	80097a6 <_printf_i+0x42>
 80097a2:	2969      	cmp	r1, #105	; 0x69
 80097a4:	d1f6      	bne.n	8009794 <_printf_i+0x30>
 80097a6:	6820      	ldr	r0, [r4, #0]
 80097a8:	6813      	ldr	r3, [r2, #0]
 80097aa:	0605      	lsls	r5, r0, #24
 80097ac:	f103 0104 	add.w	r1, r3, #4
 80097b0:	d52a      	bpl.n	8009808 <_printf_i+0xa4>
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6011      	str	r1, [r2, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	da03      	bge.n	80097c2 <_printf_i+0x5e>
 80097ba:	222d      	movs	r2, #45	; 0x2d
 80097bc:	425b      	negs	r3, r3
 80097be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80097c2:	486f      	ldr	r0, [pc, #444]	; (8009980 <_printf_i+0x21c>)
 80097c4:	220a      	movs	r2, #10
 80097c6:	e039      	b.n	800983c <_printf_i+0xd8>
 80097c8:	2973      	cmp	r1, #115	; 0x73
 80097ca:	f000 809d 	beq.w	8009908 <_printf_i+0x1a4>
 80097ce:	d808      	bhi.n	80097e2 <_printf_i+0x7e>
 80097d0:	296f      	cmp	r1, #111	; 0x6f
 80097d2:	d020      	beq.n	8009816 <_printf_i+0xb2>
 80097d4:	2970      	cmp	r1, #112	; 0x70
 80097d6:	d1dd      	bne.n	8009794 <_printf_i+0x30>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	f043 0320 	orr.w	r3, r3, #32
 80097de:	6023      	str	r3, [r4, #0]
 80097e0:	e003      	b.n	80097ea <_printf_i+0x86>
 80097e2:	2975      	cmp	r1, #117	; 0x75
 80097e4:	d017      	beq.n	8009816 <_printf_i+0xb2>
 80097e6:	2978      	cmp	r1, #120	; 0x78
 80097e8:	d1d4      	bne.n	8009794 <_printf_i+0x30>
 80097ea:	2378      	movs	r3, #120	; 0x78
 80097ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097f0:	4864      	ldr	r0, [pc, #400]	; (8009984 <_printf_i+0x220>)
 80097f2:	e055      	b.n	80098a0 <_printf_i+0x13c>
 80097f4:	6813      	ldr	r3, [r2, #0]
 80097f6:	1d19      	adds	r1, r3, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6011      	str	r1, [r2, #0]
 80097fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009804:	2301      	movs	r3, #1
 8009806:	e08c      	b.n	8009922 <_printf_i+0x1be>
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6011      	str	r1, [r2, #0]
 800980c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009810:	bf18      	it	ne
 8009812:	b21b      	sxthne	r3, r3
 8009814:	e7cf      	b.n	80097b6 <_printf_i+0x52>
 8009816:	6813      	ldr	r3, [r2, #0]
 8009818:	6825      	ldr	r5, [r4, #0]
 800981a:	1d18      	adds	r0, r3, #4
 800981c:	6010      	str	r0, [r2, #0]
 800981e:	0628      	lsls	r0, r5, #24
 8009820:	d501      	bpl.n	8009826 <_printf_i+0xc2>
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	e002      	b.n	800982c <_printf_i+0xc8>
 8009826:	0668      	lsls	r0, r5, #25
 8009828:	d5fb      	bpl.n	8009822 <_printf_i+0xbe>
 800982a:	881b      	ldrh	r3, [r3, #0]
 800982c:	4854      	ldr	r0, [pc, #336]	; (8009980 <_printf_i+0x21c>)
 800982e:	296f      	cmp	r1, #111	; 0x6f
 8009830:	bf14      	ite	ne
 8009832:	220a      	movne	r2, #10
 8009834:	2208      	moveq	r2, #8
 8009836:	2100      	movs	r1, #0
 8009838:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800983c:	6865      	ldr	r5, [r4, #4]
 800983e:	60a5      	str	r5, [r4, #8]
 8009840:	2d00      	cmp	r5, #0
 8009842:	f2c0 8095 	blt.w	8009970 <_printf_i+0x20c>
 8009846:	6821      	ldr	r1, [r4, #0]
 8009848:	f021 0104 	bic.w	r1, r1, #4
 800984c:	6021      	str	r1, [r4, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d13d      	bne.n	80098ce <_printf_i+0x16a>
 8009852:	2d00      	cmp	r5, #0
 8009854:	f040 808e 	bne.w	8009974 <_printf_i+0x210>
 8009858:	4665      	mov	r5, ip
 800985a:	2a08      	cmp	r2, #8
 800985c:	d10b      	bne.n	8009876 <_printf_i+0x112>
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	07db      	lsls	r3, r3, #31
 8009862:	d508      	bpl.n	8009876 <_printf_i+0x112>
 8009864:	6923      	ldr	r3, [r4, #16]
 8009866:	6862      	ldr	r2, [r4, #4]
 8009868:	429a      	cmp	r2, r3
 800986a:	bfde      	ittt	le
 800986c:	2330      	movle	r3, #48	; 0x30
 800986e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009872:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009876:	ebac 0305 	sub.w	r3, ip, r5
 800987a:	6123      	str	r3, [r4, #16]
 800987c:	f8cd 8000 	str.w	r8, [sp]
 8009880:	463b      	mov	r3, r7
 8009882:	aa03      	add	r2, sp, #12
 8009884:	4621      	mov	r1, r4
 8009886:	4630      	mov	r0, r6
 8009888:	f7ff fef6 	bl	8009678 <_printf_common>
 800988c:	3001      	adds	r0, #1
 800988e:	d14d      	bne.n	800992c <_printf_i+0x1c8>
 8009890:	f04f 30ff 	mov.w	r0, #4294967295
 8009894:	b005      	add	sp, #20
 8009896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800989a:	4839      	ldr	r0, [pc, #228]	; (8009980 <_printf_i+0x21c>)
 800989c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80098a0:	6813      	ldr	r3, [r2, #0]
 80098a2:	6821      	ldr	r1, [r4, #0]
 80098a4:	1d1d      	adds	r5, r3, #4
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6015      	str	r5, [r2, #0]
 80098aa:	060a      	lsls	r2, r1, #24
 80098ac:	d50b      	bpl.n	80098c6 <_printf_i+0x162>
 80098ae:	07ca      	lsls	r2, r1, #31
 80098b0:	bf44      	itt	mi
 80098b2:	f041 0120 	orrmi.w	r1, r1, #32
 80098b6:	6021      	strmi	r1, [r4, #0]
 80098b8:	b91b      	cbnz	r3, 80098c2 <_printf_i+0x15e>
 80098ba:	6822      	ldr	r2, [r4, #0]
 80098bc:	f022 0220 	bic.w	r2, r2, #32
 80098c0:	6022      	str	r2, [r4, #0]
 80098c2:	2210      	movs	r2, #16
 80098c4:	e7b7      	b.n	8009836 <_printf_i+0xd2>
 80098c6:	064d      	lsls	r5, r1, #25
 80098c8:	bf48      	it	mi
 80098ca:	b29b      	uxthmi	r3, r3
 80098cc:	e7ef      	b.n	80098ae <_printf_i+0x14a>
 80098ce:	4665      	mov	r5, ip
 80098d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80098d4:	fb02 3311 	mls	r3, r2, r1, r3
 80098d8:	5cc3      	ldrb	r3, [r0, r3]
 80098da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80098de:	460b      	mov	r3, r1
 80098e0:	2900      	cmp	r1, #0
 80098e2:	d1f5      	bne.n	80098d0 <_printf_i+0x16c>
 80098e4:	e7b9      	b.n	800985a <_printf_i+0xf6>
 80098e6:	6813      	ldr	r3, [r2, #0]
 80098e8:	6825      	ldr	r5, [r4, #0]
 80098ea:	6961      	ldr	r1, [r4, #20]
 80098ec:	1d18      	adds	r0, r3, #4
 80098ee:	6010      	str	r0, [r2, #0]
 80098f0:	0628      	lsls	r0, r5, #24
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	d501      	bpl.n	80098fa <_printf_i+0x196>
 80098f6:	6019      	str	r1, [r3, #0]
 80098f8:	e002      	b.n	8009900 <_printf_i+0x19c>
 80098fa:	066a      	lsls	r2, r5, #25
 80098fc:	d5fb      	bpl.n	80098f6 <_printf_i+0x192>
 80098fe:	8019      	strh	r1, [r3, #0]
 8009900:	2300      	movs	r3, #0
 8009902:	6123      	str	r3, [r4, #16]
 8009904:	4665      	mov	r5, ip
 8009906:	e7b9      	b.n	800987c <_printf_i+0x118>
 8009908:	6813      	ldr	r3, [r2, #0]
 800990a:	1d19      	adds	r1, r3, #4
 800990c:	6011      	str	r1, [r2, #0]
 800990e:	681d      	ldr	r5, [r3, #0]
 8009910:	6862      	ldr	r2, [r4, #4]
 8009912:	2100      	movs	r1, #0
 8009914:	4628      	mov	r0, r5
 8009916:	f7f6 fc7b 	bl	8000210 <memchr>
 800991a:	b108      	cbz	r0, 8009920 <_printf_i+0x1bc>
 800991c:	1b40      	subs	r0, r0, r5
 800991e:	6060      	str	r0, [r4, #4]
 8009920:	6863      	ldr	r3, [r4, #4]
 8009922:	6123      	str	r3, [r4, #16]
 8009924:	2300      	movs	r3, #0
 8009926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800992a:	e7a7      	b.n	800987c <_printf_i+0x118>
 800992c:	6923      	ldr	r3, [r4, #16]
 800992e:	462a      	mov	r2, r5
 8009930:	4639      	mov	r1, r7
 8009932:	4630      	mov	r0, r6
 8009934:	47c0      	blx	r8
 8009936:	3001      	adds	r0, #1
 8009938:	d0aa      	beq.n	8009890 <_printf_i+0x12c>
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	079b      	lsls	r3, r3, #30
 800993e:	d413      	bmi.n	8009968 <_printf_i+0x204>
 8009940:	68e0      	ldr	r0, [r4, #12]
 8009942:	9b03      	ldr	r3, [sp, #12]
 8009944:	4298      	cmp	r0, r3
 8009946:	bfb8      	it	lt
 8009948:	4618      	movlt	r0, r3
 800994a:	e7a3      	b.n	8009894 <_printf_i+0x130>
 800994c:	2301      	movs	r3, #1
 800994e:	464a      	mov	r2, r9
 8009950:	4639      	mov	r1, r7
 8009952:	4630      	mov	r0, r6
 8009954:	47c0      	blx	r8
 8009956:	3001      	adds	r0, #1
 8009958:	d09a      	beq.n	8009890 <_printf_i+0x12c>
 800995a:	3501      	adds	r5, #1
 800995c:	68e3      	ldr	r3, [r4, #12]
 800995e:	9a03      	ldr	r2, [sp, #12]
 8009960:	1a9b      	subs	r3, r3, r2
 8009962:	42ab      	cmp	r3, r5
 8009964:	dcf2      	bgt.n	800994c <_printf_i+0x1e8>
 8009966:	e7eb      	b.n	8009940 <_printf_i+0x1dc>
 8009968:	2500      	movs	r5, #0
 800996a:	f104 0919 	add.w	r9, r4, #25
 800996e:	e7f5      	b.n	800995c <_printf_i+0x1f8>
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1ac      	bne.n	80098ce <_printf_i+0x16a>
 8009974:	7803      	ldrb	r3, [r0, #0]
 8009976:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800997a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800997e:	e76c      	b.n	800985a <_printf_i+0xf6>
 8009980:	08009c2d 	.word	0x08009c2d
 8009984:	08009c3e 	.word	0x08009c3e

08009988 <_sbrk_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4c06      	ldr	r4, [pc, #24]	; (80099a4 <_sbrk_r+0x1c>)
 800998c:	2300      	movs	r3, #0
 800998e:	4605      	mov	r5, r0
 8009990:	4608      	mov	r0, r1
 8009992:	6023      	str	r3, [r4, #0]
 8009994:	f7f7 fa38 	bl	8000e08 <_sbrk>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d102      	bne.n	80099a2 <_sbrk_r+0x1a>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	b103      	cbz	r3, 80099a2 <_sbrk_r+0x1a>
 80099a0:	602b      	str	r3, [r5, #0]
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	20000430 	.word	0x20000430

080099a8 <__sread>:
 80099a8:	b510      	push	{r4, lr}
 80099aa:	460c      	mov	r4, r1
 80099ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b0:	f000 f896 	bl	8009ae0 <_read_r>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	bfab      	itete	ge
 80099b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099ba:	89a3      	ldrhlt	r3, [r4, #12]
 80099bc:	181b      	addge	r3, r3, r0
 80099be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099c2:	bfac      	ite	ge
 80099c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80099c6:	81a3      	strhlt	r3, [r4, #12]
 80099c8:	bd10      	pop	{r4, pc}

080099ca <__swrite>:
 80099ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ce:	461f      	mov	r7, r3
 80099d0:	898b      	ldrh	r3, [r1, #12]
 80099d2:	05db      	lsls	r3, r3, #23
 80099d4:	4605      	mov	r5, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	4616      	mov	r6, r2
 80099da:	d505      	bpl.n	80099e8 <__swrite+0x1e>
 80099dc:	2302      	movs	r3, #2
 80099de:	2200      	movs	r2, #0
 80099e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e4:	f000 f868 	bl	8009ab8 <_lseek_r>
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099f2:	81a3      	strh	r3, [r4, #12]
 80099f4:	4632      	mov	r2, r6
 80099f6:	463b      	mov	r3, r7
 80099f8:	4628      	mov	r0, r5
 80099fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099fe:	f000 b817 	b.w	8009a30 <_write_r>

08009a02 <__sseek>:
 8009a02:	b510      	push	{r4, lr}
 8009a04:	460c      	mov	r4, r1
 8009a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0a:	f000 f855 	bl	8009ab8 <_lseek_r>
 8009a0e:	1c43      	adds	r3, r0, #1
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	bf15      	itete	ne
 8009a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a1e:	81a3      	strheq	r3, [r4, #12]
 8009a20:	bf18      	it	ne
 8009a22:	81a3      	strhne	r3, [r4, #12]
 8009a24:	bd10      	pop	{r4, pc}

08009a26 <__sclose>:
 8009a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2a:	f000 b813 	b.w	8009a54 <_close_r>
	...

08009a30 <_write_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4c07      	ldr	r4, [pc, #28]	; (8009a50 <_write_r+0x20>)
 8009a34:	4605      	mov	r5, r0
 8009a36:	4608      	mov	r0, r1
 8009a38:	4611      	mov	r1, r2
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	6022      	str	r2, [r4, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f7f7 f8f8 	bl	8000c34 <_write>
 8009a44:	1c43      	adds	r3, r0, #1
 8009a46:	d102      	bne.n	8009a4e <_write_r+0x1e>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	b103      	cbz	r3, 8009a4e <_write_r+0x1e>
 8009a4c:	602b      	str	r3, [r5, #0]
 8009a4e:	bd38      	pop	{r3, r4, r5, pc}
 8009a50:	20000430 	.word	0x20000430

08009a54 <_close_r>:
 8009a54:	b538      	push	{r3, r4, r5, lr}
 8009a56:	4c06      	ldr	r4, [pc, #24]	; (8009a70 <_close_r+0x1c>)
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	f7f7 f914 	bl	8000c8c <_close>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	d102      	bne.n	8009a6e <_close_r+0x1a>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	b103      	cbz	r3, 8009a6e <_close_r+0x1a>
 8009a6c:	602b      	str	r3, [r5, #0]
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	20000430 	.word	0x20000430

08009a74 <_fstat_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	4c07      	ldr	r4, [pc, #28]	; (8009a94 <_fstat_r+0x20>)
 8009a78:	2300      	movs	r3, #0
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	4611      	mov	r1, r2
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	f7f7 f953 	bl	8000d2c <_fstat>
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	d102      	bne.n	8009a90 <_fstat_r+0x1c>
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	b103      	cbz	r3, 8009a90 <_fstat_r+0x1c>
 8009a8e:	602b      	str	r3, [r5, #0]
 8009a90:	bd38      	pop	{r3, r4, r5, pc}
 8009a92:	bf00      	nop
 8009a94:	20000430 	.word	0x20000430

08009a98 <_isatty_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4c06      	ldr	r4, [pc, #24]	; (8009ab4 <_isatty_r+0x1c>)
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	6023      	str	r3, [r4, #0]
 8009aa4:	f7f7 f8b0 	bl	8000c08 <_isatty>
 8009aa8:	1c43      	adds	r3, r0, #1
 8009aaa:	d102      	bne.n	8009ab2 <_isatty_r+0x1a>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	b103      	cbz	r3, 8009ab2 <_isatty_r+0x1a>
 8009ab0:	602b      	str	r3, [r5, #0]
 8009ab2:	bd38      	pop	{r3, r4, r5, pc}
 8009ab4:	20000430 	.word	0x20000430

08009ab8 <_lseek_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4c07      	ldr	r4, [pc, #28]	; (8009ad8 <_lseek_r+0x20>)
 8009abc:	4605      	mov	r5, r0
 8009abe:	4608      	mov	r0, r1
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	6022      	str	r2, [r4, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f7f7 f8f7 	bl	8000cba <_lseek>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_lseek_r+0x1e>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_lseek_r+0x1e>
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	20000430 	.word	0x20000430

08009adc <__malloc_lock>:
 8009adc:	4770      	bx	lr

08009ade <__malloc_unlock>:
 8009ade:	4770      	bx	lr

08009ae0 <_read_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4c07      	ldr	r4, [pc, #28]	; (8009b00 <_read_r+0x20>)
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	4608      	mov	r0, r1
 8009ae8:	4611      	mov	r1, r2
 8009aea:	2200      	movs	r2, #0
 8009aec:	6022      	str	r2, [r4, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	f7f7 f8f4 	bl	8000cdc <_read>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	d102      	bne.n	8009afe <_read_r+0x1e>
 8009af8:	6823      	ldr	r3, [r4, #0]
 8009afa:	b103      	cbz	r3, 8009afe <_read_r+0x1e>
 8009afc:	602b      	str	r3, [r5, #0]
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	20000430 	.word	0x20000430

08009b04 <_init>:
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	bf00      	nop
 8009b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0a:	bc08      	pop	{r3}
 8009b0c:	469e      	mov	lr, r3
 8009b0e:	4770      	bx	lr

08009b10 <_fini>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	bf00      	nop
 8009b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b16:	bc08      	pop	{r3}
 8009b18:	469e      	mov	lr, r3
 8009b1a:	4770      	bx	lr
