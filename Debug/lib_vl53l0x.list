
lib_vl53l0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800c570  0800c570  0001c570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8d8  0800c8d8  00020498  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8d8  0800c8d8  0001c8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8e0  0800c8e0  00020498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8e0  0800c8e0  0001c8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8e4  0800c8e4  0001c8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000498  20000000  0800c8e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000498  0800cd80  00020498  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  0800cd80  00020770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a941  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d3b  00000000  00000000  0003ae09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001060  00000000  00000000  0003db48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  0003eba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002507f  00000000  00000000  0003fac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f8d4  00000000  00000000  00064b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d298f  00000000  00000000  0007441b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146daa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005220  00000000  00000000  00146e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000498 	.word	0x20000498
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c558 	.word	0x0800c558

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000049c 	.word	0x2000049c
 800020c:	0800c558 	.word	0x0800c558

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b40      	ldr	r3, [pc, #256]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a3f      	ldr	r2, [pc, #252]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b3d      	ldr	r3, [pc, #244]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b39      	ldr	r3, [pc, #228]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a38      	ldr	r2, [pc, #224]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b36      	ldr	r3, [pc, #216]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a31      	ldr	r2, [pc, #196]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a2a      	ldr	r2, [pc, #168]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b28      	ldr	r3, [pc, #160]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	4825      	ldr	r0, [pc, #148]	; (8001048 <MX_GPIO_Init+0x120>)
 8000fb4:	f001 fb40 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2120      	movs	r1, #32
 8000fbc:	4823      	ldr	r0, [pc, #140]	; (800104c <MX_GPIO_Init+0x124>)
 8000fbe:	f001 fb3b 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_GPIO_Init+0x128>)
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481c      	ldr	r0, [pc, #112]	; (8001048 <MX_GPIO_Init+0x120>)
 8000fd8:	f001 f99c 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4815      	ldr	r0, [pc, #84]	; (8001048 <MX_GPIO_Init+0x120>)
 8000ff4:	f001 f98e 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ff8:	2320      	movs	r3, #32
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	480f      	ldr	r0, [pc, #60]	; (800104c <MX_GPIO_Init+0x124>)
 8001010:	f001 f980 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001014:	2301      	movs	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_GPIO_Init+0x12c>)
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	480c      	ldr	r0, [pc, #48]	; (8001058 <MX_GPIO_Init+0x130>)
 8001028:	f001 f974 	bl	8002314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	2006      	movs	r0, #6
 8001032:	f001 f938 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001036:	2006      	movs	r0, #6
 8001038:	f001 f951 	bl	80022de <HAL_NVIC_EnableIRQ>

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40020800 	.word	0x40020800
 800104c:	40020000 	.word	0x40020000
 8001050:	10210000 	.word	0x10210000
 8001054:	10110000 	.word	0x10110000
 8001058:	40020400 	.word	0x40020400

0800105c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_I2C1_Init+0x50>)
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <MX_I2C1_Init+0x54>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_I2C1_Init+0x50>)
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <MX_I2C1_Init+0x58>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_I2C1_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_I2C1_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_I2C1_Init+0x50>)
 800107a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800107e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_I2C1_Init+0x50>)
 800109a:	f001 fb0b 	bl	80026b4 <HAL_I2C_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f000 fa9a 	bl	80015dc <Error_Handler>
  }

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200004c0 	.word	0x200004c0
 80010b0:	40005400 	.word	0x40005400
 80010b4:	00061a80 	.word	0x00061a80

080010b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_I2C_MspInit+0x84>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d12b      	bne.n	8001132 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_I2C_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <HAL_I2C_MspInit+0x88>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_I2C_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f6:	23c0      	movs	r3, #192	; 0xc0
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fa:	2312      	movs	r3, #18
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fe:	2301      	movs	r3, #1
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001106:	2304      	movs	r3, #4
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <HAL_I2C_MspInit+0x8c>)
 8001112:	f001 f8ff 	bl	8002314 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_I2C_MspInit+0x88>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_I2C_MspInit+0x88>)
 8001120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_I2C_MspInit+0x88>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40005400 	.word	0x40005400
 8001140:	40023800 	.word	0x40023800
 8001144:	40020400 	.word	0x40020400

08001148 <vl53l0x_Initialization_Flow>:
 *      Author: Arnaud CHOBERT
 */

#include "lib_vl53l0x.h"

uint8_t vl53l0x_Initialization_Flow(VL53L0X_Dev_t* dev){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
	// Device initialization
	vl53l0x_Device_Initialization(dev);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f817 	bl	8001184 <vl53l0x_Device_Initialization>

	// Calibration data loading
	vl53l0x_Calibration_Data_Load(dev);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f842 	bl	80011e0 <vl53l0x_Calibration_Data_Load>

	// System settings
	vl53l0x_System_Settings(dev);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f858 	bl	8001212 <vl53l0x_System_Settings>

	// GPIOT IT
	VL53L0X_SetGpioConfig(dev, 0, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
 8001162:	2301      	movs	r3, #1
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2304      	movs	r3, #4
 8001168:	2201      	movs	r2, #1
 800116a:	2100      	movs	r1, #0
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f005 f861 	bl	8006234 <VL53L0X_SetGpioConfig>
			VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, VL53L0X_INTERRUPTPOLARITY_HIGH);

	// Start Measurement
	VL53L0X_StartMeasurement(dev);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f004 fe08 	bl	8005d88 <VL53L0X_StartMeasurement>

	return 0;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <vl53l0x_Device_Initialization>:

uint8_t vl53l0x_Device_Initialization(VL53L0X_Dev_t* dev){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]

	// DataInit
	if(VL53L0X_ERROR_NONE != (status = VL53L0X_DataInit(dev))){
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f003 fd69 	bl	8004c68 <VL53L0X_DataInit>
 8001196:	4603      	mov	r3, r0
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <vl53l0x_Device_Initialization+0x2a>
		printf("Error DataInit() : %d\r\n",status);
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <vl53l0x_Device_Initialization+0x54>)
 80011a6:	f009 f9fb 	bl	800a5a0 <iprintf>
		return 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00f      	b.n	80011ce <vl53l0x_Device_Initialization+0x4a>
	}

	// StaticInit
	if(VL53L0X_ERROR_NONE != (status = VL53L0X_StaticInit(dev))){
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f003 febe 	bl	8004f30 <VL53L0X_StaticInit>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d006      	beq.n	80011cc <vl53l0x_Device_Initialization+0x48>
		printf("Error StaticInit() : %d\r\n",status);
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <vl53l0x_Device_Initialization+0x58>)
 80011c4:	f009 f9ec 	bl	800a5a0 <iprintf>
		return 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <vl53l0x_Device_Initialization+0x4a>
	}

	return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	0800c570 	.word	0x0800c570
 80011dc:	0800c588 	.word	0x0800c588

080011e0 <vl53l0x_Calibration_Data_Load>:

uint8_t vl53l0x_Calibration_Data_Load(VL53L0X_Dev_t* dev){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	// Reference SPADs
	uint32_t count; uint8_t isApertureSpads;
	VL53L0X_PerformRefSpadManagement(dev, &count, &isApertureSpads);
 80011e8:	f107 020b 	add.w	r2, r7, #11
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4619      	mov	r1, r3
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f005 f9da 	bl	80065ac <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_GetReferenceSpads(dev, &count, &isApertureSpads);


	// Ref calibration
    uint8_t VhvSettings, PhaseCal;
	VL53L0X_PerformRefCalibration(dev, &VhvSettings, &PhaseCal);
 80011f8:	f107 0209 	add.w	r2, r7, #9
 80011fc:	f107 030a 	add.w	r3, r7, #10
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f004 fd44 	bl	8005c90 <VL53L0X_PerformRefCalibration>

	// Offset calibration

	// Cross-talk correction

	return 0;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <vl53l0x_System_Settings>:

uint8_t vl53l0x_System_Settings(VL53L0X_Dev_t* dev){
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
	// Device Mode
	VL53L0X_SetDeviceMode(dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800121a:	2101      	movs	r1, #1
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f004 f899 	bl	8005354 <VL53L0X_SetDeviceMode>

	// Polling and interrupt mode
	//VL53L0X_SetGpioConfig(dev, Pin, DeviceMode, Functionality, Polarity)

	// API range profiles
	vl53l0x_Range_Profiles(dev);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f806 	bl	8001234 <vl53l0x_Range_Profiles>

	return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <vl53l0x_Range_Profiles>:

uint8_t vl53l0x_Range_Profiles(VL53L0X_Dev_t* dev){
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800123c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001240:	617b      	str	r3, [r7, #20]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8001242:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001246:	613b      	str	r3, [r7, #16]
	uint32_t timingBudget = 33000;
 8001248:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800124c:	60fb      	str	r3, [r7, #12]
	uint8_t preRangeVcselPeriod = 14;
 800124e:	230e      	movs	r3, #14
 8001250:	72fb      	strb	r3, [r7, #11]
	uint8_t finalRangeVcselPeriod = 10;
 8001252:	230a      	movs	r3, #10
 8001254:	72bb      	strb	r3, [r7, #10]
		timingBudget = 33000;
		preRangeVcselPeriod = 18;
		finalRangeVcselPeriod = 14;
		break;
	case HIGH_ACCURACY:
		signalLimit = (FixPoint1616_t)(0.25*65536);
 8001256:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800125a:	617b      	str	r3, [r7, #20]
		sigmaLimit = (FixPoint1616_t)(18*65536);
 800125c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001260:	613b      	str	r3, [r7, #16]
		timingBudget = 200000;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <vl53l0x_Range_Profiles+0x7c>)
 8001264:	60fb      	str	r3, [r7, #12]
		preRangeVcselPeriod = 14;
 8001266:	230e      	movs	r3, #14
 8001268:	72fb      	strb	r3, [r7, #11]
		finalRangeVcselPeriod = 10;
 800126a:	230a      	movs	r3, #10
 800126c:	72bb      	strb	r3, [r7, #10]
		break;
 800126e:	bf00      	nop
		break;
	default:
		printf("Not Supported");
	}

	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	2101      	movs	r1, #1
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f004 fbb5 	bl	80059e4 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	2100      	movs	r1, #0
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f004 fbb0 	bl	80059e4 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(dev, timingBudget);
 8001284:	68f9      	ldr	r1, [r7, #12]
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f004 f8de 	bl	8005448 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	461a      	mov	r2, r3
 8001290:	2100      	movs	r1, #0
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f004 f8fe 	bl	8005494 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8001298:	7abb      	ldrb	r3, [r7, #10]
 800129a:	461a      	mov	r2, r3
 800129c:	2101      	movs	r1, #1
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f004 f8f8 	bl	8005494 <VL53L0X_SetVcselPulsePeriod>
}
 80012a4:	bf00      	nop
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	00030d40 	.word	0x00030d40

080012b4 <vl53l0x_PerformRangingMeasurement_IT>:
	vl53l0x_PerformMeasurement(dev, &VL53L0X_RangingMeasurementData);

	return VL53L0X_RangingMeasurementData.RangeMilliMeter;
}

uint16_t vl53l0x_PerformRangingMeasurement_IT(VL53L0X_Dev_t* dev){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 80012bc:	2300      	movs	r3, #0
 80012be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;

	if(VL53L0X_ERROR_NONE != (status = VL53L0X_GetRangingMeasurementData(dev, &VL53L0X_RangingMeasurementData))){
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	4619      	mov	r1, r3
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f004 fe5d 	bl	8005f88 <VL53L0X_GetRangingMeasurementData>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <vl53l0x_PerformRangingMeasurement_IT+0x38>
		printf("Error GetRangingMeasurementData() : %d\r\n",status);
 80012dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <vl53l0x_PerformRangingMeasurement_IT+0x44>)
 80012e4:	f009 f95c 	bl	800a5a0 <iprintf>
		return 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <vl53l0x_PerformRangingMeasurement_IT+0x3a>
	}

	return VL53L0X_RangingMeasurementData.RangeMilliMeter;
 80012ec:	8a3b      	ldrh	r3, [r7, #16]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	0800c5a4 	.word	0x0800c5a4

080012fc <vl53l0x_SetDeviceAddress>:

uint8_t vl53l0x_SetDeviceAddress(VL53L0X_Dev_t* dev, uint8_t deviceAddress){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
	VL53L0X_SetDeviceAddress(dev, deviceAddress);
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f003 fc92 	bl	8004c36 <VL53L0X_SetDeviceAddress>
	dev->I2cDevAddr = deviceAddress;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	78fa      	ldrb	r2, [r7, #3]
 8001316:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	return 0;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132a:	f000 fe4d 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132e:	f000 f8e7 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001332:	f7ff fdf9 	bl	8000f28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001336:	f000 fd4b 	bl	8001dd0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800133a:	f7ff fe8f 	bl	800105c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800133e:	f000 fd71 	bl	8001e24 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8001342:	4862      	ldr	r0, [pc, #392]	; (80014cc <main+0x1a8>)
 8001344:	f000 f94e 	bl	80015e4 <RetargetInit>
  printf("lib_vl53l0x\r\n");
 8001348:	4861      	ldr	r0, [pc, #388]	; (80014d0 <main+0x1ac>)
 800134a:	f009 f99d 	bl	800a688 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2101      	movs	r1, #1
 8001352:	4860      	ldr	r0, [pc, #384]	; (80014d4 <main+0x1b0>)
 8001354:	f001 f970 	bl	8002638 <HAL_GPIO_WritePin>
  // PC_0 => XSHUT of sensor 1
  // PC_1 => XSHUT of sensor 2

 // VL53L0X_Dev_t dev;

  dev.I2cHandle = &hi2c1;
 8001358:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <main+0x1b4>)
 800135a:	4a60      	ldr	r2, [pc, #384]	; (80014dc <main+0x1b8>)
 800135c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  dev.I2cDevAddr = 0x52;
 8001360:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <main+0x1b4>)
 8001362:	2252      	movs	r2, #82	; 0x52
 8001364:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  dev.comms_speed_khz = 400;
 8001368:	4b5b      	ldr	r3, [pc, #364]	; (80014d8 <main+0x1b4>)
 800136a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800136e:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
  dev.comms_type = 1;
 8001372:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <main+0x1b4>)
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	2101      	movs	r1, #1
 800137e:	4855      	ldr	r0, [pc, #340]	; (80014d4 <main+0x1b0>)
 8001380:	f001 f95a 	bl	8002638 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001384:	20c8      	movs	r0, #200	; 0xc8
 8001386:	f000 fe91 	bl	80020ac <HAL_Delay>
  vl53l0x_Initialization_Flow(&dev);
 800138a:	4853      	ldr	r0, [pc, #332]	; (80014d8 <main+0x1b4>)
 800138c:	f7ff fedc 	bl	8001148 <vl53l0x_Initialization_Flow>
  vl53l0x_SetDeviceAddress(&dev, 0x55);
 8001390:	2155      	movs	r1, #85	; 0x55
 8001392:	4851      	ldr	r0, [pc, #324]	; (80014d8 <main+0x1b4>)
 8001394:	f7ff ffb2 	bl	80012fc <vl53l0x_SetDeviceAddress>
  HAL_Delay(200);
 8001398:	20c8      	movs	r0, #200	; 0xc8
 800139a:	f000 fe87 	bl	80020ac <HAL_Delay>
  HAL_Delay(200);
  */

  AX12 ax12;

  AX12_Init(&ax12, &huart3, 1, BR_250K);
 800139e:	4638      	mov	r0, r7
 80013a0:	2307      	movs	r3, #7
 80013a2:	2201      	movs	r2, #1
 80013a4:	494e      	ldr	r1, [pc, #312]	; (80014e0 <main+0x1bc>)
 80013a6:	f000 f9e2 	bl	800176e <AX12_Init>
  AX12_TorqueE_D(&ax12, TRUE);
 80013aa:	463b      	mov	r3, r7
 80013ac:	2101      	movs	r1, #1
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fa6f 	bl	8001892 <AX12_TorqueE_D>
  AX12_setMaxTorque(&ax12,50);
 80013b4:	463b      	mov	r3, r7
 80013b6:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80014e4 <main+0x1c0>
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fa30 	bl	8001820 <AX12_setMaxTorque>

  AX12_setRangeAngle(&ax12,0,300);
 80013c0:	463b      	mov	r3, r7
 80013c2:	eddf 0a49 	vldr	s1, [pc, #292]	; 80014e8 <main+0x1c4>
 80013c6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80014ec <main+0x1c8>
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f9ec 	bl	80017a8 <AX12_setRangeAngle>
  AX12_setMovingSpeed(&ax12, 114);
 80013d0:	463b      	mov	r3, r7
 80013d2:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80014f0 <main+0x1cc>
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 faaa 	bl	8001930 <AX12_setMovingSpeed>

  AX12_LED_O_N(&ax12, TRUE);
 80013dc:	463b      	mov	r3, r7
 80013de:	2101      	movs	r1, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fa66 	bl	80018b2 <AX12_LED_O_N>

  while (1)
  {
	  //printf

	  AX12_setPosition(&ax12, 150);
 80013e6:	463b      	mov	r3, r7
 80013e8:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80014f4 <main+0x1d0>
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fa73 	bl	80018d8 <AX12_setPosition>
	  printf("AX12 : %f\r\n",((float)AX12_getPosition(&ax12)*300)/1024);
 80013f2:	463b      	mov	r3, r7
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fa3f 	bl	8001878 <AX12_getPosition>
 80013fa:	4603      	mov	r3, r0
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001404:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80014e8 <main+0x1c4>
 8001408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80014f8 <main+0x1d4>
 8001410:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001414:	ee16 0a90 	vmov	r0, s13
 8001418:	f7ff f8b6 	bl	8000588 <__aeabi_f2d>
 800141c:	4603      	mov	r3, r0
 800141e:	460c      	mov	r4, r1
 8001420:	461a      	mov	r2, r3
 8001422:	4623      	mov	r3, r4
 8001424:	4835      	ldr	r0, [pc, #212]	; (80014fc <main+0x1d8>)
 8001426:	f009 f8bb 	bl	800a5a0 <iprintf>
	  HAL_Delay(2000);
 800142a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800142e:	f000 fe3d 	bl	80020ac <HAL_Delay>
	  AX12_setPosition(&ax12, 300);
 8001432:	463b      	mov	r3, r7
 8001434:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80014e8 <main+0x1c4>
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fa4d 	bl	80018d8 <AX12_setPosition>
	  printf("AX12 : %f\r\n",((float)AX12_getPosition(&ax12)*300)/1024);
 800143e:	463b      	mov	r3, r7
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fa19 	bl	8001878 <AX12_getPosition>
 8001446:	4603      	mov	r3, r0
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001450:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80014e8 <main+0x1c4>
 8001454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001458:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80014f8 <main+0x1d4>
 800145c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001460:	ee16 0a90 	vmov	r0, s13
 8001464:	f7ff f890 	bl	8000588 <__aeabi_f2d>
 8001468:	4603      	mov	r3, r0
 800146a:	460c      	mov	r4, r1
 800146c:	461a      	mov	r2, r3
 800146e:	4623      	mov	r3, r4
 8001470:	4822      	ldr	r0, [pc, #136]	; (80014fc <main+0x1d8>)
 8001472:	f009 f895 	bl	800a5a0 <iprintf>
	  HAL_Delay(2000);
 8001476:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800147a:	f000 fe17 	bl	80020ac <HAL_Delay>
	  AX12_setPosition(&ax12, 0);
 800147e:	463b      	mov	r3, r7
 8001480:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80014ec <main+0x1c8>
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fa27 	bl	80018d8 <AX12_setPosition>
	  printf("AX12 : %f\r\n",((float)AX12_getPosition(&ax12)*300)/1024);
 800148a:	463b      	mov	r3, r7
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f9f3 	bl	8001878 <AX12_getPosition>
 8001492:	4603      	mov	r3, r0
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80014e8 <main+0x1c4>
 80014a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80014f8 <main+0x1d4>
 80014a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014ac:	ee16 0a90 	vmov	r0, s13
 80014b0:	f7ff f86a 	bl	8000588 <__aeabi_f2d>
 80014b4:	4603      	mov	r3, r0
 80014b6:	460c      	mov	r4, r1
 80014b8:	461a      	mov	r2, r3
 80014ba:	4623      	mov	r3, r4
 80014bc:	480f      	ldr	r0, [pc, #60]	; (80014fc <main+0x1d8>)
 80014be:	f009 f86f 	bl	800a5a0 <iprintf>
	  HAL_Delay(4000);
 80014c2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80014c6:	f000 fdf1 	bl	80020ac <HAL_Delay>
	  AX12_setPosition(&ax12, 150);
 80014ca:	e78c      	b.n	80013e6 <main+0xc2>
 80014cc:	200006e8 	.word	0x200006e8
 80014d0:	0800c5d0 	.word	0x0800c5d0
 80014d4:	40020800 	.word	0x40020800
 80014d8:	20000514 	.word	0x20000514
 80014dc:	200004c0 	.word	0x200004c0
 80014e0:	200006a8 	.word	0x200006a8
 80014e4:	42480000 	.word	0x42480000
 80014e8:	43960000 	.word	0x43960000
 80014ec:	00000000 	.word	0x00000000
 80014f0:	42e40000 	.word	0x42e40000
 80014f4:	43160000 	.word	0x43160000
 80014f8:	44800000 	.word	0x44800000
 80014fc:	0800c5e0 	.word	0x0800c5e0

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b094      	sub	sp, #80	; 0x50
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	2234      	movs	r2, #52	; 0x34
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f008 fbe1 	bl	8009cd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <SystemClock_Config+0xd4>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a29      	ldr	r2, [pc, #164]	; (80015d4 <SystemClock_Config+0xd4>)
 800152e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <SystemClock_Config+0xd4>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001540:	2300      	movs	r3, #0
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <SystemClock_Config+0xd8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800154c:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <SystemClock_Config+0xd8>)
 800154e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <SystemClock_Config+0xd8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001560:	2302      	movs	r3, #2
 8001562:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001564:	2301      	movs	r3, #1
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001568:	2310      	movs	r3, #16
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156c:	2302      	movs	r3, #2
 800156e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001570:	2300      	movs	r3, #0
 8001572:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001574:	2310      	movs	r3, #16
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001578:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800157c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800157e:	2304      	movs	r3, #4
 8001580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001582:	2302      	movs	r3, #2
 8001584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001586:	2302      	movs	r3, #2
 8001588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fad4 	bl	8003b3c <HAL_RCC_OscConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800159a:	f000 f81f 	bl	80015dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159e:	230f      	movs	r3, #15
 80015a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a2:	2302      	movs	r3, #2
 80015a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	2102      	movs	r1, #2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 f804 	bl	80035c8 <HAL_RCC_ClockConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80015c6:	f000 f809 	bl	80015dc <Error_Handler>
  }
}
 80015ca:	bf00      	nop
 80015cc:	3750      	adds	r7, #80	; 0x50
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <Error_Handler+0x6>

080015e4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <RetargetInit+0x28>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <RetargetInit+0x2c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6898      	ldr	r0, [r3, #8]
 80015f8:	2300      	movs	r3, #0
 80015fa:	2202      	movs	r2, #2
 80015fc:	2100      	movs	r1, #0
 80015fe:	f009 f84b 	bl	800a698 <setvbuf>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200006a4 	.word	0x200006a4
 8001610:	200002c8 	.word	0x200002c8

08001614 <_isatty>:

int _isatty(int fd) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	db04      	blt.n	800162c <_isatty+0x18>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b02      	cmp	r3, #2
 8001626:	dc01      	bgt.n	800162c <_isatty+0x18>
    return 1;
 8001628:	2301      	movs	r3, #1
 800162a:	e005      	b.n	8001638 <_isatty+0x24>

  errno = EBADF;
 800162c:	f008 fb1e 	bl	8009c6c <__errno>
 8001630:	4602      	mov	r2, r0
 8001632:	2309      	movs	r3, #9
 8001634:	6013      	str	r3, [r2, #0]
  return 0;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_write>:

int _write(int fd, char* ptr, int len) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d002      	beq.n	8001658 <_write+0x18>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d111      	bne.n	800167c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <_write+0x54>)
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	b29a      	uxth	r2, r3
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	f002 fd65 	bl	8004134 <HAL_UART_Transmit>
 800166a:	4603      	mov	r3, r0
 800166c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <_write+0x38>
      return len;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	e008      	b.n	800168a <_write+0x4a>
    else
      return EIO;
 8001678:	2305      	movs	r3, #5
 800167a:	e006      	b.n	800168a <_write+0x4a>
  }
  errno = EBADF;
 800167c:	f008 faf6 	bl	8009c6c <__errno>
 8001680:	4602      	mov	r2, r0
 8001682:	2309      	movs	r3, #9
 8001684:	6013      	str	r3, [r2, #0]
  return -1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200006a4 	.word	0x200006a4

08001698 <_close>:

int _close(int fd) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db04      	blt.n	80016b0 <_close+0x18>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	dc01      	bgt.n	80016b0 <_close+0x18>
    return 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	e006      	b.n	80016be <_close+0x26>

  errno = EBADF;
 80016b0:	f008 fadc 	bl	8009c6c <__errno>
 80016b4:	4602      	mov	r2, r0
 80016b6:	2309      	movs	r3, #9
 80016b8:	6013      	str	r3, [r2, #0]
  return -1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80016d2:	f008 facb 	bl	8009c6c <__errno>
 80016d6:	4602      	mov	r2, r0
 80016d8:	2309      	movs	r3, #9
 80016da:	6013      	str	r3, [r2, #0]
  return -1;
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_read>:

int _read(int fd, char* ptr, int len) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d110      	bne.n	800171c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <_read+0x4c>)
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	2201      	movs	r2, #1
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	f002 fdae 	bl	8004266 <HAL_UART_Receive>
 800170a:	4603      	mov	r3, r0
 800170c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <_read+0x30>
      return 1;
 8001714:	2301      	movs	r3, #1
 8001716:	e008      	b.n	800172a <_read+0x42>
    else
      return EIO;
 8001718:	2305      	movs	r3, #5
 800171a:	e006      	b.n	800172a <_read+0x42>
  }
  errno = EBADF;
 800171c:	f008 faa6 	bl	8009c6c <__errno>
 8001720:	4602      	mov	r2, r0
 8001722:	2309      	movs	r3, #9
 8001724:	6013      	str	r3, [r2, #0]
  return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200006a4 	.word	0x200006a4

08001738 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db08      	blt.n	800175a <_fstat+0x22>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	dc05      	bgt.n	800175a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001754:	605a      	str	r2, [r3, #4]
    return 0;
 8001756:	2300      	movs	r3, #0
 8001758:	e005      	b.n	8001766 <_fstat+0x2e>
  }

  errno = EBADF;
 800175a:	f008 fa87 	bl	8009c6c <__errno>
 800175e:	4602      	mov	r2, r0
 8001760:	2309      	movs	r3, #9
 8001762:	6013      	str	r3, [r2, #0]
  return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <AX12_Init>:
#include "servoAX12.h"


void AX12_Init(AX12* ax12, UART_HandleTypeDef* uart, uint8_t ID, uint8_t BR){
 800176e:	b480      	push	{r7}
 8001770:	b085      	sub	sp, #20
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	4611      	mov	r1, r2
 800177a:	461a      	mov	r2, r3
 800177c:	460b      	mov	r3, r1
 800177e:	71fb      	strb	r3, [r7, #7]
 8001780:	4613      	mov	r3, r2
 8001782:	71bb      	strb	r3, [r7, #6]

	/******************************************
	 * Initialisation des paramètre du module *
	 ******************************************/

	ax12->AX_Uart = uart;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	601a      	str	r2, [r3, #0]
	ax12->m_ID = ID;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	79fa      	ldrb	r2, [r7, #7]
 800178e:	711a      	strb	r2, [r3, #4]
	ax12->m_BR = BR;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	79ba      	ldrb	r2, [r7, #6]
 8001794:	715a      	strb	r2, [r3, #5]

}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	0000      	movs	r0, r0
 80017a4:	0000      	movs	r0, r0
	...

080017a8 <AX12_setRangeAngle>:
		ax12->m_BR=BR;
	}
}


void AX12_setRangeAngle(AX12* ax12,float min, float max){
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80017b4:	edc7 0a01 	vstr	s1, [r7, #4]
	uint16_t dataMin = min/STEP_ANGLE;
 80017b8:	68b8      	ldr	r0, [r7, #8]
 80017ba:	f7fe fee5 	bl	8000588 <__aeabi_f2d>
 80017be:	a316      	add	r3, pc, #88	; (adr r3, 8001818 <AX12_setRangeAngle+0x70>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7ff f862 	bl	800088c <__aeabi_ddiv>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	4618      	mov	r0, r3
 80017ce:	4621      	mov	r1, r4
 80017d0:	f7ff fa0a 	bl	8000be8 <__aeabi_d2uiz>
 80017d4:	4603      	mov	r3, r0
 80017d6:	82fb      	strh	r3, [r7, #22]
	uint16_t dataMax = max/STEP_ANGLE;
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7fe fed5 	bl	8000588 <__aeabi_f2d>
 80017de:	a30e      	add	r3, pc, #56	; (adr r3, 8001818 <AX12_setRangeAngle+0x70>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	f7ff f852 	bl	800088c <__aeabi_ddiv>
 80017e8:	4603      	mov	r3, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	4618      	mov	r0, r3
 80017ee:	4621      	mov	r1, r4
 80017f0:	f7ff f9fa 	bl	8000be8 <__aeabi_d2uiz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	82bb      	strh	r3, [r7, #20]
	AX12_sendTram2Byte(ax12,REG_CWAngle,dataMin);
 80017f8:	8afb      	ldrh	r3, [r7, #22]
 80017fa:	461a      	mov	r2, r3
 80017fc:	2106      	movs	r1, #6
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f9e2 	bl	8001bc8 <AX12_sendTram2Byte>
	AX12_sendTram2Byte(ax12,REG_CCWAngle,dataMax);
 8001804:	8abb      	ldrh	r3, [r7, #20]
 8001806:	461a      	mov	r2, r3
 8001808:	2108      	movs	r1, #8
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f9dc 	bl	8001bc8 <AX12_sendTram2Byte>

}
 8001810:	bf00      	nop
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	2c54bf16 	.word	0x2c54bf16
 800181c:	3fd2c4b1 	.word	0x3fd2c4b1

08001820 <AX12_setMaxTorque>:
	AX12_sendTram1Byte(ax12,REG_minVolt,min);
	AX12_sendTram1Byte(ax12,REG_maxVolt,max);
}


void AX12_setMaxTorque(AX12* ax12,float max){
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)max/TORQUE_PERCENT;
 800182c:	edd7 7a00 	vldr	s15, [r7]
 8001830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001834:	ee17 3a90 	vmov	r3, s15
 8001838:	b29b      	uxth	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe92 	bl	8000564 <__aeabi_i2d>
 8001840:	a30b      	add	r3, pc, #44	; (adr r3, 8001870 <AX12_setMaxTorque+0x50>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7ff f821 	bl	800088c <__aeabi_ddiv>
 800184a:	4603      	mov	r3, r0
 800184c:	460c      	mov	r4, r1
 800184e:	4618      	mov	r0, r3
 8001850:	4621      	mov	r1, r4
 8001852:	f7ff f9c9 	bl	8000be8 <__aeabi_d2uiz>
 8001856:	4603      	mov	r3, r0
 8001858:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_torque,data);
 800185a:	89fb      	ldrh	r3, [r7, #14]
 800185c:	461a      	mov	r2, r3
 800185e:	210e      	movs	r1, #14
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f9b1 	bl	8001bc8 <AX12_sendTram2Byte>
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bd90      	pop	{r4, r7, pc}
 800186e:	bf00      	nop
 8001870:	905eab89 	.word	0x905eab89
 8001874:	3fb90641 	.word	0x3fb90641

08001878 <AX12_getPosition>:

uint8_t AX12_getFirmwareVersion(AX12* ax12){
	return AX12_readTram1byte(ax12,REG_firmware);
}

uint16_t AX12_getPosition(AX12* ax12){
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	return AX12_readTram2byte(ax12,REG_presentPosition);
 8001880:	2124      	movs	r1, #36	; 0x24
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f9be 	bl	8001c04 <AX12_readTram2byte>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <AX12_TorqueE_D>:

void AX12_TorqueE_D(AX12* ax12, uint8_t state){
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	70fb      	strb	r3, [r7, #3]
	AX12_sendTram1Byte(ax12,REG_torque_E_D,state);
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	461a      	mov	r2, r3
 80018a2:	2118      	movs	r1, #24
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f979 	bl	8001b9c <AX12_sendTram1Byte>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <AX12_LED_O_N>:


void AX12_LED_O_N(AX12* ax12,uint8_t state){
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	70fb      	strb	r3, [r7, #3]
	AX12_sendTram1Byte(ax12,REG_LED_E_D,state);
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	461a      	mov	r2, r3
 80018c2:	2119      	movs	r1, #25
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f969 	bl	8001b9c <AX12_sendTram1Byte>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	0000      	movs	r0, r0
 80018d4:	0000      	movs	r0, r0
	...

080018d8 <AX12_setPosition>:


void AX12_setPosition(AX12* ax12, float angle){
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)angle/STEP_ANGLE;
 80018e4:	edd7 7a00 	vldr	s15, [r7]
 80018e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ec:	ee17 3a90 	vmov	r3, s15
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe36 	bl	8000564 <__aeabi_i2d>
 80018f8:	a30b      	add	r3, pc, #44	; (adr r3, 8001928 <AX12_setPosition+0x50>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe ffc5 	bl	800088c <__aeabi_ddiv>
 8001902:	4603      	mov	r3, r0
 8001904:	460c      	mov	r4, r1
 8001906:	4618      	mov	r0, r3
 8001908:	4621      	mov	r1, r4
 800190a:	f7ff f96d 	bl	8000be8 <__aeabi_d2uiz>
 800190e:	4603      	mov	r3, r0
 8001910:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_goalPosition,data);
 8001912:	89fb      	ldrh	r3, [r7, #14]
 8001914:	461a      	mov	r2, r3
 8001916:	211e      	movs	r1, #30
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f955 	bl	8001bc8 <AX12_sendTram2Byte>
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	bf00      	nop
 8001928:	2c54bf16 	.word	0x2c54bf16
 800192c:	3fd2c4b1 	.word	0x3fd2c4b1

08001930 <AX12_setMovingSpeed>:


void AX12_setMovingSpeed(AX12* ax12, float rpm){
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)rpm/STEP_SPEED;
 800193c:	edd7 7a00 	vldr	s15, [r7]
 8001940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001944:	ee17 3a90 	vmov	r3, s15
 8001948:	b29b      	uxth	r3, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fe0a 	bl	8000564 <__aeabi_i2d>
 8001950:	a30b      	add	r3, pc, #44	; (adr r3, 8001980 <AX12_setMovingSpeed+0x50>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7fe ff99 	bl	800088c <__aeabi_ddiv>
 800195a:	4603      	mov	r3, r0
 800195c:	460c      	mov	r4, r1
 800195e:	4618      	mov	r0, r3
 8001960:	4621      	mov	r1, r4
 8001962:	f7ff f941 	bl	8000be8 <__aeabi_d2uiz>
 8001966:	4603      	mov	r3, r0
 8001968:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_limitSpeed,data);
 800196a:	89fb      	ldrh	r3, [r7, #14]
 800196c:	461a      	mov	r2, r3
 800196e:	2120      	movs	r1, #32
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f929 	bl	8001bc8 <AX12_sendTram2Byte>
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	bf00      	nop
 8001980:	c83ed809 	.word	0xc83ed809
 8001984:	3fbc8721 	.word	0x3fbc8721

08001988 <AX12_sendData>:
	AX12_sendTram1Byte(ax12,REG_lockEEPROM,state);
}



void AX12_sendData(AX12* ax12 ,uint8_t size ,uint8_t instruction ,uint8_t nbParametre ,... ){
 8001988:	b408      	push	{r3}
 800198a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af02      	add	r7, sp, #8
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]
 8001998:	4613      	mov	r3, r2
 800199a:	70bb      	strb	r3, [r7, #2]
 800199c:	466b      	mov	r3, sp
 800199e:	4698      	mov	r8, r3
	/****************************************
	 * Création d'une liste qui contien 	*
	 * tous les paramètre après nbParametre *
	 ****************************************/
	va_list ap;
	va_start(ap,nbParametre);
 80019a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019a4:	60bb      	str	r3, [r7, #8]

	/**************************
	 * Création de la requête *
	 **************************/
	uint8_t data[size];
 80019a6:	78f8      	ldrb	r0, [r7, #3]
 80019a8:	4603      	mov	r3, r0
 80019aa:	3b01      	subs	r3, #1
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	b2c1      	uxtb	r1, r0
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	f04f 0400 	mov.w	r4, #0
 80019bc:	00d4      	lsls	r4, r2, #3
 80019be:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80019c2:	00cb      	lsls	r3, r1, #3
 80019c4:	b2c1      	uxtb	r1, r0
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	f04f 0400 	mov.w	r4, #0
 80019d2:	00d4      	lsls	r4, r2, #3
 80019d4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80019d8:	00cb      	lsls	r3, r1, #3
 80019da:	4603      	mov	r3, r0
 80019dc:	3307      	adds	r3, #7
 80019de:	08db      	lsrs	r3, r3, #3
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	ebad 0d03 	sub.w	sp, sp, r3
 80019e6:	ab02      	add	r3, sp, #8
 80019e8:	3300      	adds	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
	data[0] = 0xFF;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	22ff      	movs	r2, #255	; 0xff
 80019f0:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	22ff      	movs	r2, #255	; 0xff
 80019f6:	705a      	strb	r2, [r3, #1]
	data[2] = ax12->m_ID;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	791a      	ldrb	r2, [r3, #4]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	709a      	strb	r2, [r3, #2]
	data[3] = 2+nbParametre;
 8001a00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a04:	3302      	adds	r3, #2
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	70da      	strb	r2, [r3, #3]
	data[4] = instruction;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	78ba      	ldrb	r2, [r7, #2]
 8001a10:	711a      	strb	r2, [r3, #4]

	/************************************
	 * nous implémentons les paramètres *
	 * (registre, paramètre, ...)	    *
	 ************************************/
	for(uint8_t i = 0; i < nbParametre;i++){
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
 8001a16:	e00b      	b.n	8001a30 <AX12_sendData+0xa8>
		data[5+i] = (uint8_t)va_arg(ap,int);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	1d1a      	adds	r2, r3, #4
 8001a1c:	60ba      	str	r2, [r7, #8]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	3305      	adds	r3, #5
 8001a24:	b2d1      	uxtb	r1, r2
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < nbParametre;i++){
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	75fb      	strb	r3, [r7, #23]
 8001a30:	7dfa      	ldrb	r2, [r7, #23]
 8001a32:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d3ee      	bcc.n	8001a18 <AX12_sendData+0x90>

	/********************************
	 * nous vérifions quel checksum *
	 * nous allons calculer 		*
	 ********************************/
	switch(nbParametre){
 8001a3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d867      	bhi.n	8001b12 <AX12_sendData+0x18a>
 8001a42:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <AX12_sendData+0xc0>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001a59 	.word	0x08001a59
 8001a4c:	08001a81 	.word	0x08001a81
 8001a50:	08001aad 	.word	0x08001aad
 8001a54:	08001add 	.word	0x08001add
	case(0):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],0,0,0);break;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	7898      	ldrb	r0, [r3, #2]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	78d9      	ldrb	r1, [r3, #3]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	791a      	ldrb	r2, [r3, #4]
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	1e5c      	subs	r4, r3, #1
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2300      	movs	r3, #0
 8001a72:	f000 f861 	bl	8001b38 <AX12_calculChecksum>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	551a      	strb	r2, [r3, r4]
 8001a7e:	e049      	b.n	8001b14 <AX12_sendData+0x18c>
	case(1):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],0,0);break;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	7898      	ldrb	r0, [r3, #2]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	78d9      	ldrb	r1, [r3, #3]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	791a      	ldrb	r2, [r3, #4]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	795d      	ldrb	r5, [r3, #5]
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	1e5c      	subs	r4, r3, #1
 8001a94:	2300      	movs	r3, #0
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	462b      	mov	r3, r5
 8001a9e:	f000 f84b 	bl	8001b38 <AX12_calculChecksum>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	551a      	strb	r2, [r3, r4]
 8001aaa:	e033      	b.n	8001b14 <AX12_sendData+0x18c>
	case(2):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],0);break;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	7898      	ldrb	r0, [r3, #2]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	78d9      	ldrb	r1, [r3, #3]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	791d      	ldrb	r5, [r3, #4]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	795e      	ldrb	r6, [r3, #5]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	799b      	ldrb	r3, [r3, #6]
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	1e54      	subs	r4, r2, #1
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	9201      	str	r2, [sp, #4]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	4633      	mov	r3, r6
 8001acc:	462a      	mov	r2, r5
 8001ace:	f000 f833 	bl	8001b38 <AX12_calculChecksum>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	551a      	strb	r2, [r3, r4]
 8001ada:	e01b      	b.n	8001b14 <AX12_sendData+0x18c>
	case(3):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],data[7]);break;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	7898      	ldrb	r0, [r3, #2]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	78dd      	ldrb	r5, [r3, #3]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	791e      	ldrb	r6, [r3, #4]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 c005 	ldrb.w	ip, [r3, #5]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	799b      	ldrb	r3, [r3, #6]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	79d2      	ldrb	r2, [r2, #7]
 8001af6:	78f9      	ldrb	r1, [r7, #3]
 8001af8:	1e4c      	subs	r4, r1, #1
 8001afa:	9201      	str	r2, [sp, #4]
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	4663      	mov	r3, ip
 8001b00:	4632      	mov	r2, r6
 8001b02:	4629      	mov	r1, r5
 8001b04:	f000 f818 	bl	8001b38 <AX12_calculChecksum>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	551a      	strb	r2, [r3, r4]
 8001b10:	e000      	b.n	8001b14 <AX12_sendData+0x18c>
	default : break;
 8001b12:	bf00      	nop
	}

	/************************
	 * envoie de la requête *
	 ************************/
	HAL_UART_Transmit(ax12->AX_Uart, (uint8_t*)&data, size, 500);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	68f9      	ldr	r1, [r7, #12]
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b22:	f002 fb07 	bl	8004134 <HAL_UART_Transmit>
 8001b26:	46c5      	mov	sp, r8
}
 8001b28:	bf00      	nop
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b32:	b001      	add	sp, #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <AX12_calculChecksum>:


uint8_t AX12_calculChecksum(uint8_t id, uint8_t length,uint8_t instruction,uint8_t reg,uint8_t param1, uint8_t param2){
 8001b38:	b490      	push	{r4, r7}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4604      	mov	r4, r0
 8001b40:	4608      	mov	r0, r1
 8001b42:	4611      	mov	r1, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	4623      	mov	r3, r4
 8001b48:	71fb      	strb	r3, [r7, #7]
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71bb      	strb	r3, [r7, #6]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	717b      	strb	r3, [r7, #5]
 8001b52:	4613      	mov	r3, r2
 8001b54:	713b      	strb	r3, [r7, #4]
	uint16_t checksum = id + length + instruction + reg + param1 + param2;
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	79bb      	ldrb	r3, [r7, #6]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	797b      	ldrb	r3, [r7, #5]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	793b      	ldrb	r3, [r7, #4]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	7e3b      	ldrb	r3, [r7, #24]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	7f3b      	ldrb	r3, [r7, #28]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	81fb      	strh	r3, [r7, #14]
	checksum=~checksum;
 8001b82:	89fb      	ldrh	r3, [r7, #14]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	81fb      	strh	r3, [r7, #14]
	checksum&=0xFF;
 8001b88:	89fb      	ldrh	r3, [r7, #14]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	81fb      	strh	r3, [r7, #14]
	return (uint8_t)checksum;
 8001b8e:	89fb      	ldrh	r3, [r7, #14]
 8001b90:	b2db      	uxtb	r3, r3
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc90      	pop	{r4, r7}
 8001b9a:	4770      	bx	lr

08001b9c <AX12_sendTram1Byte>:

void AX12_sendTram1Byte(AX12* ax12, uint8_t reg,uint8_t data){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	70fb      	strb	r3, [r7, #3]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	70bb      	strb	r3, [r7, #2]
	AX12_sendData(ax12 ,SIZE_WRITE_8, write ,2,reg,data);
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	78ba      	ldrb	r2, [r7, #2]
 8001bb0:	9201      	str	r2, [sp, #4]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	2108      	movs	r1, #8
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fee4 	bl	8001988 <AX12_sendData>
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <AX12_sendTram2Byte>:

void AX12_sendTram2Byte(AX12* ax12,uint8_t reg ,uint16_t data){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af04      	add	r7, sp, #16
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	70fb      	strb	r3, [r7, #3]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	803b      	strh	r3, [r7, #0]
	uint8_t data1 = (uint8_t)(data>>8);
 8001bd8:	883b      	ldrh	r3, [r7, #0]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	73fb      	strb	r3, [r7, #15]
	uint8_t data2 = (uint8_t)data&0xFF;
 8001be0:	883b      	ldrh	r3, [r7, #0]
 8001be2:	73bb      	strb	r3, [r7, #14]
	AX12_sendData(ax12 ,SIZE_WRITE_16, write ,3,reg,data2,data1);
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	7bba      	ldrb	r2, [r7, #14]
 8001be8:	7bf9      	ldrb	r1, [r7, #15]
 8001bea:	9102      	str	r1, [sp, #8]
 8001bec:	9201      	str	r2, [sp, #4]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	2109      	movs	r1, #9
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fec6 	bl	8001988 <AX12_sendData>
}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <AX12_readTram2byte>:
	HAL_HalfDuplex_EnableTransmitter(ax12->AX_Uart);

	return data[5];
}

uint16_t AX12_readTram2byte(AX12* ax12, uint8_t reg){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
	uint8_t data[SIZE_GET_READ_16];

	/***********************************
	 * envoie de la requête de lecture *
	 ***********************************/
	AX12_sendData(ax12 ,SIZE_REQUEST_READ_16, read ,2,reg,2);
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	2202      	movs	r2, #2
 8001c14:	9201      	str	r2, [sp, #4]
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2302      	movs	r3, #2
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	2108      	movs	r1, #8
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff feb2 	bl	8001988 <AX12_sendData>

	/*************************
	 * réception des données *
	 *************************/
	HAL_HalfDuplex_EnableReceiver(ax12->AX_Uart);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f002 fbf6 	bl	800441a <HAL_HalfDuplex_EnableReceiver>
	HAL_UART_Receive(ax12->AX_Uart,data,SIZE_GET_READ_16,500);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	f107 010c 	add.w	r1, r7, #12
 8001c36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c3a:	2208      	movs	r2, #8
 8001c3c:	f002 fb13 	bl	8004266 <HAL_UART_Receive>
	HAL_HalfDuplex_EnableTransmitter(ax12->AX_Uart);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fbb4 	bl	80043b2 <HAL_HalfDuplex_EnableTransmitter>

	uint16_t dataReturn = (data[6]<<8) + data[5];
 8001c4a:	7cbb      	ldrb	r3, [r7, #18]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	7c7b      	ldrb	r3, [r7, #17]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	82fb      	strh	r3, [r7, #22]
	return (dataReturn);
 8001c5a:	8afb      	ldrh	r3, [r7, #22]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ca2:	2007      	movs	r0, #7
 8001ca4:	f000 faf4 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 f9b4 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	VL53L0X_ClearInterruptMask(&dev, 0);
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4808      	ldr	r0, [pc, #32]	; (8001d30 <EXTI0_IRQHandler+0x28>)
 8001d10:	f004 fbea 	bl	80064e8 <VL53L0X_ClearInterruptMask>
	printf("Sensor : %d\r\n", vl53l0x_PerformRangingMeasurement_IT(&dev));
 8001d14:	4806      	ldr	r0, [pc, #24]	; (8001d30 <EXTI0_IRQHandler+0x28>)
 8001d16:	f7ff facd 	bl	80012b4 <vl53l0x_PerformRangingMeasurement_IT>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <EXTI0_IRQHandler+0x2c>)
 8001d20:	f008 fc3e 	bl	800a5a0 <iprintf>
	//VL53L0X_ClearInterruptMask(&dev, 0);
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f000 fca1 	bl	800266c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000514 	.word	0x20000514
 8001d34:	0800c5ec 	.word	0x0800c5ec

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f007 ff80 	bl	8009c6c <__errno>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	230c      	movs	r3, #12
 8001d70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20020000 	.word	0x20020000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	200004b4 	.word	0x200004b4
 8001da0:	20000770 	.word	0x20000770

08001da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <SystemInit+0x28>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dae:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <SystemInit+0x28>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SystemInit+0x28>)
 8001dba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dbe:	609a      	str	r2, [r3, #8]
#endif
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <MX_USART2_UART_Init+0x50>)
 8001dd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001ddc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001de0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001df6:	220c      	movs	r2, #12
 8001df8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001e08:	f002 f8f2 	bl	8003ff0 <HAL_UART_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e12:	f7ff fbe3 	bl	80015dc <Error_Handler>
  }

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200006e8 	.word	0x200006e8
 8001e20:	40004400 	.word	0x40004400

08001e24 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001e28:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <MX_USART3_UART_Init+0x48>)
 8001e2a:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <MX_USART3_UART_Init+0x4c>)
 8001e2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 250000;
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <MX_USART3_UART_Init+0x48>)
 8001e30:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <MX_USART3_UART_Init+0x50>)
 8001e32:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e34:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <MX_USART3_UART_Init+0x48>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_USART3_UART_Init+0x48>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <MX_USART3_UART_Init+0x48>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_USART3_UART_Init+0x48>)
 8001e48:	220c      	movs	r2, #12
 8001e4a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <MX_USART3_UART_Init+0x48>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <MX_USART3_UART_Init+0x48>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <MX_USART3_UART_Init+0x48>)
 8001e5a:	f002 f916 	bl	800408a <HAL_HalfDuplex_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001e64:	f7ff fbba 	bl	80015dc <Error_Handler>
  }

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	200006a8 	.word	0x200006a8
 8001e70:	40004800 	.word	0x40004800
 8001e74:	0003d090 	.word	0x0003d090

08001e78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a32      	ldr	r2, [pc, #200]	; (8001f60 <HAL_UART_MspInit+0xe8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d12c      	bne.n	8001ef4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_UART_MspInit+0xec>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a30      	ldr	r2, [pc, #192]	; (8001f64 <HAL_UART_MspInit+0xec>)
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_UART_MspInit+0xec>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_UART_MspInit+0xec>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a29      	ldr	r2, [pc, #164]	; (8001f64 <HAL_UART_MspInit+0xec>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_UART_MspInit+0xec>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ee2:	2307      	movs	r3, #7
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	481e      	ldr	r0, [pc, #120]	; (8001f68 <HAL_UART_MspInit+0xf0>)
 8001eee:	f000 fa11 	bl	8002314 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ef2:	e031      	b.n	8001f58 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <HAL_UART_MspInit+0xf4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d12c      	bne.n	8001f58 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_UART_MspInit+0xec>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_UART_MspInit+0xec>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_UART_MspInit+0xec>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_UART_MspInit+0xec>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <HAL_UART_MspInit+0xec>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_UART_MspInit+0xec>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3c:	2312      	movs	r3, #18
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f48:	2307      	movs	r3, #7
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	4619      	mov	r1, r3
 8001f52:	4807      	ldr	r0, [pc, #28]	; (8001f70 <HAL_UART_MspInit+0xf8>)
 8001f54:	f000 f9de 	bl	8002314 <HAL_GPIO_Init>
}
 8001f58:	bf00      	nop
 8001f5a:	3730      	adds	r7, #48	; 0x30
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40004400 	.word	0x40004400
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40004800 	.word	0x40004800
 8001f70:	40020400 	.word	0x40020400

08001f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f7a:	e003      	b.n	8001f84 <LoopCopyDataInit>

08001f7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f82:	3104      	adds	r1, #4

08001f84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f8c:	d3f6      	bcc.n	8001f7c <CopyDataInit>
  ldr  r2, =_sbss
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f90:	e002      	b.n	8001f98 <LoopFillZerobss>

08001f92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f94:	f842 3b04 	str.w	r3, [r2], #4

08001f98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f9c:	d3f9      	bcc.n	8001f92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f9e:	f7ff ff01 	bl	8001da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f007 fe69 	bl	8009c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa6:	f7ff f9bd 	bl	8001324 <main>
  bx  lr    
 8001faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fb0:	0800c8e8 	.word	0x0800c8e8
  ldr  r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fb8:	20000498 	.word	0x20000498
  ldr  r2, =_sbss
 8001fbc:	20000498 	.word	0x20000498
  ldr  r3, = _ebss
 8001fc0:	20000770 	.word	0x20000770

08001fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <HAL_Init+0x40>)
 8001fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_Init+0x40>)
 8001fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_Init+0x40>)
 8001fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 f94d 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f000 f808 	bl	800200c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffc:	f7ff fe32 	bl	8001c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_InitTick+0x54>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x58>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002022:	fbb3 f3f1 	udiv	r3, r3, r1
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f965 	bl	80022fa <HAL_SYSTICK_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00e      	b.n	8002058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d80a      	bhi.n	8002056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f000 f92d 	bl	80022a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800204c:	4a06      	ldr	r2, [pc, #24]	; (8002068 <HAL_InitTick+0x5c>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000000 	.word	0x20000000
 8002064:	20000008 	.word	0x20000008
 8002068:	20000004 	.word	0x20000004

0800206c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000008 	.word	0x20000008
 8002090:	20000728 	.word	0x20000728

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000728 	.word	0x20000728

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff ffee 	bl	8002094 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d005      	beq.n	80020d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_Delay+0x40>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020d2:	bf00      	nop
 80020d4:	f7ff ffde 	bl	8002094 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d8f7      	bhi.n	80020d4 <HAL_Delay+0x28>
  {
  }
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000008 	.word	0x20000008

080020f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800211c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002122:	4a04      	ldr	r2, [pc, #16]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	60d3      	str	r3, [r2, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <__NVIC_GetPriorityGrouping+0x18>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	f003 0307 	and.w	r3, r3, #7
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	2b00      	cmp	r3, #0
 8002164:	db0b      	blt.n	800217e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	4907      	ldr	r1, [pc, #28]	; (800218c <__NVIC_EnableIRQ+0x38>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	2001      	movs	r0, #1
 8002176:	fa00 f202 	lsl.w	r2, r0, r2
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000e100 	.word	0xe000e100

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	; (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f7ff ff8e 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff29 	bl	80020f0 <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b8:	f7ff ff3e 	bl	8002138 <__NVIC_GetPriorityGrouping>
 80022bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7ff ff8e 	bl	80021e4 <NVIC_EncodePriority>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff5d 	bl	8002190 <__NVIC_SetPriority>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff31 	bl	8002154 <__NVIC_EnableIRQ>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ffa2 	bl	800224c <SysTick_Config>
 8002308:	4603      	mov	r3, r0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e165      	b.n	80025fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002330:	2201      	movs	r2, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	f040 8154 	bne.w	80025f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d00b      	beq.n	800236e <HAL_GPIO_Init+0x5a>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d007      	beq.n	800236e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002362:	2b11      	cmp	r3, #17
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b12      	cmp	r3, #18
 800236c:	d130      	bne.n	80023d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	2203      	movs	r2, #3
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a4:	2201      	movs	r2, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 0201 	and.w	r2, r3, #1
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0xfc>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b12      	cmp	r3, #18
 800240e:	d123      	bne.n	8002458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80ae 	beq.w	80025f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b5c      	ldr	r3, [pc, #368]	; (8002610 <HAL_GPIO_Init+0x2fc>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a5b      	ldr	r2, [pc, #364]	; (8002610 <HAL_GPIO_Init+0x2fc>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b59      	ldr	r3, [pc, #356]	; (8002610 <HAL_GPIO_Init+0x2fc>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b6:	4a57      	ldr	r2, [pc, #348]	; (8002614 <HAL_GPIO_Init+0x300>)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4e      	ldr	r2, [pc, #312]	; (8002618 <HAL_GPIO_Init+0x304>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d025      	beq.n	800252e <HAL_GPIO_Init+0x21a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4d      	ldr	r2, [pc, #308]	; (800261c <HAL_GPIO_Init+0x308>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01f      	beq.n	800252a <HAL_GPIO_Init+0x216>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <HAL_GPIO_Init+0x30c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x212>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4b      	ldr	r2, [pc, #300]	; (8002624 <HAL_GPIO_Init+0x310>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x20e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_GPIO_Init+0x314>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x20a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a49      	ldr	r2, [pc, #292]	; (800262c <HAL_GPIO_Init+0x318>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x206>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a48      	ldr	r2, [pc, #288]	; (8002630 <HAL_GPIO_Init+0x31c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x202>
 8002512:	2306      	movs	r3, #6
 8002514:	e00c      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 8002516:	2307      	movs	r3, #7
 8002518:	e00a      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 800251a:	2305      	movs	r3, #5
 800251c:	e008      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 800251e:	2304      	movs	r3, #4
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 8002522:	2303      	movs	r3, #3
 8002524:	e004      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 8002526:	2302      	movs	r3, #2
 8002528:	e002      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 800252e:	2300      	movs	r3, #0
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	f002 0203 	and.w	r2, r2, #3
 8002536:	0092      	lsls	r2, r2, #2
 8002538:	4093      	lsls	r3, r2
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002540:	4934      	ldr	r1, [pc, #208]	; (8002614 <HAL_GPIO_Init+0x300>)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	3302      	adds	r3, #2
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800254e:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_GPIO_Init+0x320>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002572:	4a30      	ldr	r2, [pc, #192]	; (8002634 <HAL_GPIO_Init+0x320>)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002578:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <HAL_GPIO_Init+0x320>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259c:	4a25      	ldr	r2, [pc, #148]	; (8002634 <HAL_GPIO_Init+0x320>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_GPIO_Init+0x320>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025c6:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_GPIO_Init+0x320>)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_GPIO_Init+0x320>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f0:	4a10      	ldr	r2, [pc, #64]	; (8002634 <HAL_GPIO_Init+0x320>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3301      	adds	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b0f      	cmp	r3, #15
 8002600:	f67f ae96 	bls.w	8002330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002604:	bf00      	nop
 8002606:	3724      	adds	r7, #36	; 0x24
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40023800 	.word	0x40023800
 8002614:	40013800 	.word	0x40013800
 8002618:	40020000 	.word	0x40020000
 800261c:	40020400 	.word	0x40020400
 8002620:	40020800 	.word	0x40020800
 8002624:	40020c00 	.word	0x40020c00
 8002628:	40021000 	.word	0x40021000
 800262c:	40021400 	.word	0x40021400
 8002630:	40021800 	.word	0x40021800
 8002634:	40013c00 	.word	0x40013c00

08002638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
 8002644:	4613      	mov	r3, r2
 8002646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002648:	787b      	ldrb	r3, [r7, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002654:	e003      	b.n	800265e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	041a      	lsls	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	619a      	str	r2, [r3, #24]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f806 	bl	800269c <HAL_GPIO_EXTI_Callback>
  }
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40013c00 	.word	0x40013c00

0800269c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e11f      	b.n	8002906 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fcec 	bl	80010b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002718:	f001 f848 	bl	80037ac <HAL_RCC_GetPCLK1Freq>
 800271c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4a7b      	ldr	r2, [pc, #492]	; (8002910 <HAL_I2C_Init+0x25c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d807      	bhi.n	8002738 <HAL_I2C_Init+0x84>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a7a      	ldr	r2, [pc, #488]	; (8002914 <HAL_I2C_Init+0x260>)
 800272c:	4293      	cmp	r3, r2
 800272e:	bf94      	ite	ls
 8002730:	2301      	movls	r3, #1
 8002732:	2300      	movhi	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e006      	b.n	8002746 <HAL_I2C_Init+0x92>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a77      	ldr	r2, [pc, #476]	; (8002918 <HAL_I2C_Init+0x264>)
 800273c:	4293      	cmp	r3, r2
 800273e:	bf94      	ite	ls
 8002740:	2301      	movls	r3, #1
 8002742:	2300      	movhi	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0db      	b.n	8002906 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4a72      	ldr	r2, [pc, #456]	; (800291c <HAL_I2C_Init+0x268>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0c9b      	lsrs	r3, r3, #18
 8002758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a64      	ldr	r2, [pc, #400]	; (8002910 <HAL_I2C_Init+0x25c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d802      	bhi.n	8002788 <HAL_I2C_Init+0xd4>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3301      	adds	r3, #1
 8002786:	e009      	b.n	800279c <HAL_I2C_Init+0xe8>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	4a63      	ldr	r2, [pc, #396]	; (8002920 <HAL_I2C_Init+0x26c>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	3301      	adds	r3, #1
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4956      	ldr	r1, [pc, #344]	; (8002910 <HAL_I2C_Init+0x25c>)
 80027b8:	428b      	cmp	r3, r1
 80027ba:	d80d      	bhi.n	80027d8 <HAL_I2C_Init+0x124>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e59      	subs	r1, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	bf38      	it	cc
 80027d4:	2304      	movcc	r3, #4
 80027d6:	e04f      	b.n	8002878 <HAL_I2C_Init+0x1c4>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d111      	bne.n	8002804 <HAL_I2C_Init+0x150>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1e58      	subs	r0, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	440b      	add	r3, r1
 80027ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf0c      	ite	eq
 80027fc:	2301      	moveq	r3, #1
 80027fe:	2300      	movne	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	e012      	b.n	800282a <HAL_I2C_Init+0x176>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1e58      	subs	r0, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	0099      	lsls	r1, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	fbb0 f3f3 	udiv	r3, r0, r3
 800281a:	3301      	adds	r3, #1
 800281c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_Init+0x17e>
 800282e:	2301      	movs	r3, #1
 8002830:	e022      	b.n	8002878 <HAL_I2C_Init+0x1c4>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10e      	bne.n	8002858 <HAL_I2C_Init+0x1a4>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1e58      	subs	r0, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	460b      	mov	r3, r1
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	440b      	add	r3, r1
 8002848:	fbb0 f3f3 	udiv	r3, r0, r3
 800284c:	3301      	adds	r3, #1
 800284e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002856:	e00f      	b.n	8002878 <HAL_I2C_Init+0x1c4>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1e58      	subs	r0, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6859      	ldr	r1, [r3, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	0099      	lsls	r1, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	fbb0 f3f3 	udiv	r3, r0, r3
 800286e:	3301      	adds	r3, #1
 8002870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	6809      	ldr	r1, [r1, #0]
 800287c:	4313      	orrs	r3, r2
 800287e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6911      	ldr	r1, [r2, #16]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68d2      	ldr	r2, [r2, #12]
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	000186a0 	.word	0x000186a0
 8002914:	001e847f 	.word	0x001e847f
 8002918:	003d08ff 	.word	0x003d08ff
 800291c:	431bde83 	.word	0x431bde83
 8002920:	10624dd3 	.word	0x10624dd3

08002924 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	461a      	mov	r2, r3
 8002930:	460b      	mov	r3, r1
 8002932:	817b      	strh	r3, [r7, #10]
 8002934:	4613      	mov	r3, r2
 8002936:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff fbac 	bl	8002094 <HAL_GetTick>
 800293c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b20      	cmp	r3, #32
 8002948:	f040 80e0 	bne.w	8002b0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2319      	movs	r3, #25
 8002952:	2201      	movs	r2, #1
 8002954:	4970      	ldr	r1, [pc, #448]	; (8002b18 <HAL_I2C_Master_Transmit+0x1f4>)
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fc58 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002962:	2302      	movs	r3, #2
 8002964:	e0d3      	b.n	8002b0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_I2C_Master_Transmit+0x50>
 8002970:	2302      	movs	r3, #2
 8002972:	e0cc      	b.n	8002b0e <HAL_I2C_Master_Transmit+0x1ea>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b01      	cmp	r3, #1
 8002988:	d007      	beq.n	800299a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0201 	orr.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2221      	movs	r2, #33	; 0x21
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2210      	movs	r2, #16
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	893a      	ldrh	r2, [r7, #8]
 80029ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a50      	ldr	r2, [pc, #320]	; (8002b1c <HAL_I2C_Master_Transmit+0x1f8>)
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029dc:	8979      	ldrh	r1, [r7, #10]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	6a3a      	ldr	r2, [r7, #32]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 fac2 	bl	8002f6c <I2C_MasterRequestWrite>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e08d      	b.n	8002b0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a08:	e066      	b.n	8002ad8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	6a39      	ldr	r1, [r7, #32]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fcd2 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d107      	bne.n	8002a32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e06b      	b.n	8002b0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d11b      	bne.n	8002aac <HAL_I2C_Master_Transmit+0x188>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d017      	beq.n	8002aac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	6a39      	ldr	r1, [r7, #32]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fcc2 	bl	800343a <I2C_WaitOnBTFFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d107      	bne.n	8002ad4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e01a      	b.n	8002b0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d194      	bne.n	8002a0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	00100002 	.word	0x00100002
 8002b1c:	ffff0000 	.word	0xffff0000

08002b20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	; 0x30
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	817b      	strh	r3, [r7, #10]
 8002b30:	4613      	mov	r3, r2
 8002b32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff faae 	bl	8002094 <HAL_GetTick>
 8002b38:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	f040 820b 	bne.w	8002f5e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	2319      	movs	r3, #25
 8002b4e:	2201      	movs	r2, #1
 8002b50:	497c      	ldr	r1, [pc, #496]	; (8002d44 <HAL_I2C_Master_Receive+0x224>)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fb5a 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e1fe      	b.n	8002f60 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_I2C_Master_Receive+0x50>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e1f7      	b.n	8002f60 <HAL_I2C_Master_Receive+0x440>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d007      	beq.n	8002b96 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0201 	orr.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2222      	movs	r2, #34	; 0x22
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	893a      	ldrh	r2, [r7, #8]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a5c      	ldr	r2, [pc, #368]	; (8002d48 <HAL_I2C_Master_Receive+0x228>)
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bd8:	8979      	ldrh	r1, [r7, #10]
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fa46 	bl	8003070 <I2C_MasterRequestRead>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e1b8      	b.n	8002f60 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d113      	bne.n	8002c1e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	623b      	str	r3, [r7, #32]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	623b      	str	r3, [r7, #32]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	623b      	str	r3, [r7, #32]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e18c      	b.n	8002f38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d11b      	bne.n	8002c5e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	e16c      	b.n	8002f38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d11b      	bne.n	8002c9e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	e14c      	b.n	8002f38 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002cc4:	e138      	b.n	8002f38 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	f200 80f1 	bhi.w	8002eb2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d123      	bne.n	8002d20 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fbed 	bl	80034bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e139      	b.n	8002f60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d1e:	e10b      	b.n	8002f38 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d14e      	bne.n	8002dc6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4906      	ldr	r1, [pc, #24]	; (8002d4c <HAL_I2C_Master_Receive+0x22c>)
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fa6a 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e10e      	b.n	8002f60 <HAL_I2C_Master_Receive+0x440>
 8002d42:	bf00      	nop
 8002d44:	00100002 	.word	0x00100002
 8002d48:	ffff0000 	.word	0xffff0000
 8002d4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dc4:	e0b8      	b.n	8002f38 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	2200      	movs	r2, #0
 8002dce:	4966      	ldr	r1, [pc, #408]	; (8002f68 <HAL_I2C_Master_Receive+0x448>)
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fa1b 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0bf      	b.n	8002f60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	2200      	movs	r2, #0
 8002e2a:	494f      	ldr	r1, [pc, #316]	; (8002f68 <HAL_I2C_Master_Receive+0x448>)
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f9ed 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e091      	b.n	8002f60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eb0:	e042      	b.n	8002f38 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fb00 	bl	80034bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e04c      	b.n	8002f60 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d118      	bne.n	8002f38 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f47f aec2 	bne.w	8002cc6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3728      	adds	r7, #40	; 0x28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	00010004 	.word	0x00010004

08002f6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d006      	beq.n	8002f96 <I2C_MasterRequestWrite+0x2a>
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d003      	beq.n	8002f96 <I2C_MasterRequestWrite+0x2a>
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f94:	d108      	bne.n	8002fa8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	e00b      	b.n	8002fc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	2b12      	cmp	r3, #18
 8002fae:	d107      	bne.n	8002fc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f91d 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe6:	d103      	bne.n	8002ff0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e035      	b.n	8003060 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ffc:	d108      	bne.n	8003010 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ffe:	897b      	ldrh	r3, [r7, #10]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800300c:	611a      	str	r2, [r3, #16]
 800300e:	e01b      	b.n	8003048 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003010:	897b      	ldrh	r3, [r7, #10]
 8003012:	11db      	asrs	r3, r3, #7
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f003 0306 	and.w	r3, r3, #6
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f063 030f 	orn	r3, r3, #15
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	490e      	ldr	r1, [pc, #56]	; (8003068 <I2C_MasterRequestWrite+0xfc>)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f943 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e010      	b.n	8003060 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800303e:	897b      	ldrh	r3, [r7, #10]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4907      	ldr	r1, [pc, #28]	; (800306c <I2C_MasterRequestWrite+0x100>)
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f933 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	00010008 	.word	0x00010008
 800306c:	00010002 	.word	0x00010002

08003070 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	460b      	mov	r3, r1
 800307e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003094:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d006      	beq.n	80030aa <I2C_MasterRequestRead+0x3a>
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d003      	beq.n	80030aa <I2C_MasterRequestRead+0x3a>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030a8:	d108      	bne.n	80030bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e00b      	b.n	80030d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	2b11      	cmp	r3, #17
 80030c2:	d107      	bne.n	80030d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f893 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fa:	d103      	bne.n	8003104 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003102:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e079      	b.n	80031fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003110:	d108      	bne.n	8003124 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003112:	897b      	ldrh	r3, [r7, #10]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	b2da      	uxtb	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	611a      	str	r2, [r3, #16]
 8003122:	e05f      	b.n	80031e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003124:	897b      	ldrh	r3, [r7, #10]
 8003126:	11db      	asrs	r3, r3, #7
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 0306 	and.w	r3, r3, #6
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f063 030f 	orn	r3, r3, #15
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4930      	ldr	r1, [pc, #192]	; (8003204 <I2C_MasterRequestRead+0x194>)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f8b9 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e054      	b.n	80031fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003152:	897b      	ldrh	r3, [r7, #10]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4929      	ldr	r1, [pc, #164]	; (8003208 <I2C_MasterRequestRead+0x198>)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f8a9 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e044      	b.n	80031fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003196:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f831 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00d      	beq.n	80031cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031be:	d103      	bne.n	80031c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e017      	b.n	80031fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80031cc:	897b      	ldrh	r3, [r7, #10]
 80031ce:	11db      	asrs	r3, r3, #7
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 0306 	and.w	r3, r3, #6
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f063 030e 	orn	r3, r3, #14
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4907      	ldr	r1, [pc, #28]	; (8003208 <I2C_MasterRequestRead+0x198>)
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f865 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00010008 	.word	0x00010008
 8003208:	00010002 	.word	0x00010002

0800320c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321c:	e025      	b.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d021      	beq.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003226:	f7fe ff35 	bl	8002094 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d302      	bcc.n	800323c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d116      	bne.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e023      	b.n	80032b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10d      	bne.n	8003290 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	43da      	mvns	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	e00c      	b.n	80032aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d0b6      	beq.n	800321e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032c8:	e051      	b.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d8:	d123      	bne.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f043 0204 	orr.w	r2, r3, #4
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e046      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d021      	beq.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fe feb3 	bl	8002094 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d116      	bne.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e020      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10c      	bne.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf14      	ite	ne
 800338a:	2301      	movne	r3, #1
 800338c:	2300      	moveq	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	e00b      	b.n	80033aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	43da      	mvns	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d18d      	bne.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c4:	e02d      	b.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f8ce 	bl	8003568 <I2C_IsAcknowledgeFailed>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e02d      	b.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d021      	beq.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fe fe59 	bl	8002094 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e007      	b.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d1ca      	bne.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003446:	e02d      	b.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f88d 	bl	8003568 <I2C_IsAcknowledgeFailed>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e02d      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d021      	beq.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003460:	f7fe fe18 	bl	8002094 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	429a      	cmp	r2, r3
 800346e:	d302      	bcc.n	8003476 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e007      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d1ca      	bne.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034c8:	e042      	b.n	8003550 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d119      	bne.n	800350c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0210 	mvn.w	r2, #16
 80034e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e029      	b.n	8003560 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350c:	f7fe fdc2 	bl	8002094 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	429a      	cmp	r2, r3
 800351a:	d302      	bcc.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d116      	bne.n	8003550 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e007      	b.n	8003560 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d1b5      	bne.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357e:	d11b      	bne.n	80035b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003588:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f043 0204 	orr.w	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0cc      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	4b68      	ldr	r3, [pc, #416]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d90c      	bls.n	8003604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b65      	ldr	r3, [pc, #404]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b63      	ldr	r3, [pc, #396]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0b8      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d020      	beq.n	8003652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800361c:	4b59      	ldr	r3, [pc, #356]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4a58      	ldr	r2, [pc, #352]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003634:	4b53      	ldr	r3, [pc, #332]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a52      	ldr	r2, [pc, #328]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800363e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003640:	4b50      	ldr	r3, [pc, #320]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	494d      	ldr	r1, [pc, #308]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d044      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	4b47      	ldr	r3, [pc, #284]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d119      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e07f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d003      	beq.n	8003686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003682:	2b03      	cmp	r3, #3
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003686:	4b3f      	ldr	r3, [pc, #252]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e06f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003696:	4b3b      	ldr	r3, [pc, #236]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e067      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	4b37      	ldr	r3, [pc, #220]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4934      	ldr	r1, [pc, #208]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b8:	f7fe fcec 	bl	8002094 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7fe fce8 	bl	8002094 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e04f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1eb      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d20c      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f6:	4b22      	ldr	r3, [pc, #136]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e032      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4916      	ldr	r1, [pc, #88]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	490e      	ldr	r1, [pc, #56]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800374e:	f000 f855 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 8003752:	4601      	mov	r1, r0
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	5cd3      	ldrb	r3, [r2, r3]
 8003762:	fa21 f303 	lsr.w	r3, r1, r3
 8003766:	4a09      	ldr	r2, [pc, #36]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fc4c 	bl	800200c <HAL_InitTick>

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023c00 	.word	0x40023c00
 8003784:	40023800 	.word	0x40023800
 8003788:	0800c5fc 	.word	0x0800c5fc
 800378c:	20000000 	.word	0x20000000
 8003790:	20000004 	.word	0x20000004

08003794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000000 	.word	0x20000000

080037ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037b0:	f7ff fff0 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037b4:	4601      	mov	r1, r0
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	0a9b      	lsrs	r3, r3, #10
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	4a03      	ldr	r2, [pc, #12]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c2:	5cd3      	ldrb	r3, [r2, r3]
 80037c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40023800 	.word	0x40023800
 80037d0:	0800c60c 	.word	0x0800c60c

080037d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037d8:	f7ff ffdc 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037dc:	4601      	mov	r1, r0
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	0b5b      	lsrs	r3, r3, #13
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4a03      	ldr	r2, [pc, #12]	; (80037f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800
 80037f8:	0800c60c 	.word	0x0800c60c

080037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003816:	4bc6      	ldr	r3, [pc, #792]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x334>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b0c      	cmp	r3, #12
 8003820:	f200 817e 	bhi.w	8003b20 <HAL_RCC_GetSysClockFreq+0x324>
 8003824:	a201      	add	r2, pc, #4	; (adr r2, 800382c <HAL_RCC_GetSysClockFreq+0x30>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	08003861 	.word	0x08003861
 8003830:	08003b21 	.word	0x08003b21
 8003834:	08003b21 	.word	0x08003b21
 8003838:	08003b21 	.word	0x08003b21
 800383c:	08003867 	.word	0x08003867
 8003840:	08003b21 	.word	0x08003b21
 8003844:	08003b21 	.word	0x08003b21
 8003848:	08003b21 	.word	0x08003b21
 800384c:	0800386d 	.word	0x0800386d
 8003850:	08003b21 	.word	0x08003b21
 8003854:	08003b21 	.word	0x08003b21
 8003858:	08003b21 	.word	0x08003b21
 800385c:	080039c9 	.word	0x080039c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4bb4      	ldr	r3, [pc, #720]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x338>)
 8003862:	613b      	str	r3, [r7, #16]
       break;
 8003864:	e15f      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003866:	4bb4      	ldr	r3, [pc, #720]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003868:	613b      	str	r3, [r7, #16]
      break;
 800386a:	e15c      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800386c:	4bb0      	ldr	r3, [pc, #704]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x334>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003874:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003876:	4bae      	ldr	r3, [pc, #696]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x334>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d04a      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003882:	4bab      	ldr	r3, [pc, #684]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x334>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	099b      	lsrs	r3, r3, #6
 8003888:	f04f 0400 	mov.w	r4, #0
 800388c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	ea03 0501 	and.w	r5, r3, r1
 8003898:	ea04 0602 	and.w	r6, r4, r2
 800389c:	4629      	mov	r1, r5
 800389e:	4632      	mov	r2, r6
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	f04f 0400 	mov.w	r4, #0
 80038a8:	0154      	lsls	r4, r2, #5
 80038aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038ae:	014b      	lsls	r3, r1, #5
 80038b0:	4619      	mov	r1, r3
 80038b2:	4622      	mov	r2, r4
 80038b4:	1b49      	subs	r1, r1, r5
 80038b6:	eb62 0206 	sbc.w	r2, r2, r6
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	f04f 0400 	mov.w	r4, #0
 80038c2:	0194      	lsls	r4, r2, #6
 80038c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038c8:	018b      	lsls	r3, r1, #6
 80038ca:	1a5b      	subs	r3, r3, r1
 80038cc:	eb64 0402 	sbc.w	r4, r4, r2
 80038d0:	f04f 0100 	mov.w	r1, #0
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	00e2      	lsls	r2, r4, #3
 80038da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038de:	00d9      	lsls	r1, r3, #3
 80038e0:	460b      	mov	r3, r1
 80038e2:	4614      	mov	r4, r2
 80038e4:	195b      	adds	r3, r3, r5
 80038e6:	eb44 0406 	adc.w	r4, r4, r6
 80038ea:	f04f 0100 	mov.w	r1, #0
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	0262      	lsls	r2, r4, #9
 80038f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80038f8:	0259      	lsls	r1, r3, #9
 80038fa:	460b      	mov	r3, r1
 80038fc:	4614      	mov	r4, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	4621      	mov	r1, r4
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f04f 0400 	mov.w	r4, #0
 8003908:	461a      	mov	r2, r3
 800390a:	4623      	mov	r3, r4
 800390c:	f7fd f98c 	bl	8000c28 <__aeabi_uldivmod>
 8003910:	4603      	mov	r3, r0
 8003912:	460c      	mov	r4, r1
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e049      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003918:	4b85      	ldr	r3, [pc, #532]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x334>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	f04f 0400 	mov.w	r4, #0
 8003922:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	ea03 0501 	and.w	r5, r3, r1
 800392e:	ea04 0602 	and.w	r6, r4, r2
 8003932:	4629      	mov	r1, r5
 8003934:	4632      	mov	r2, r6
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	f04f 0400 	mov.w	r4, #0
 800393e:	0154      	lsls	r4, r2, #5
 8003940:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003944:	014b      	lsls	r3, r1, #5
 8003946:	4619      	mov	r1, r3
 8003948:	4622      	mov	r2, r4
 800394a:	1b49      	subs	r1, r1, r5
 800394c:	eb62 0206 	sbc.w	r2, r2, r6
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	f04f 0400 	mov.w	r4, #0
 8003958:	0194      	lsls	r4, r2, #6
 800395a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800395e:	018b      	lsls	r3, r1, #6
 8003960:	1a5b      	subs	r3, r3, r1
 8003962:	eb64 0402 	sbc.w	r4, r4, r2
 8003966:	f04f 0100 	mov.w	r1, #0
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	00e2      	lsls	r2, r4, #3
 8003970:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003974:	00d9      	lsls	r1, r3, #3
 8003976:	460b      	mov	r3, r1
 8003978:	4614      	mov	r4, r2
 800397a:	195b      	adds	r3, r3, r5
 800397c:	eb44 0406 	adc.w	r4, r4, r6
 8003980:	f04f 0100 	mov.w	r1, #0
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	02a2      	lsls	r2, r4, #10
 800398a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800398e:	0299      	lsls	r1, r3, #10
 8003990:	460b      	mov	r3, r1
 8003992:	4614      	mov	r4, r2
 8003994:	4618      	mov	r0, r3
 8003996:	4621      	mov	r1, r4
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f04f 0400 	mov.w	r4, #0
 800399e:	461a      	mov	r2, r3
 80039a0:	4623      	mov	r3, r4
 80039a2:	f7fd f941 	bl	8000c28 <__aeabi_uldivmod>
 80039a6:	4603      	mov	r3, r0
 80039a8:	460c      	mov	r4, r1
 80039aa:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039ac:	4b60      	ldr	r3, [pc, #384]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x334>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	3301      	adds	r3, #1
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	613b      	str	r3, [r7, #16]
      break;
 80039c6:	e0ae      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039c8:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x334>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d2:	4b57      	ldr	r3, [pc, #348]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x334>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d04a      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039de:	4b54      	ldr	r3, [pc, #336]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x334>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	099b      	lsrs	r3, r3, #6
 80039e4:	f04f 0400 	mov.w	r4, #0
 80039e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	ea03 0501 	and.w	r5, r3, r1
 80039f4:	ea04 0602 	and.w	r6, r4, r2
 80039f8:	4629      	mov	r1, r5
 80039fa:	4632      	mov	r2, r6
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	f04f 0400 	mov.w	r4, #0
 8003a04:	0154      	lsls	r4, r2, #5
 8003a06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a0a:	014b      	lsls	r3, r1, #5
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4622      	mov	r2, r4
 8003a10:	1b49      	subs	r1, r1, r5
 8003a12:	eb62 0206 	sbc.w	r2, r2, r6
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	f04f 0400 	mov.w	r4, #0
 8003a1e:	0194      	lsls	r4, r2, #6
 8003a20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a24:	018b      	lsls	r3, r1, #6
 8003a26:	1a5b      	subs	r3, r3, r1
 8003a28:	eb64 0402 	sbc.w	r4, r4, r2
 8003a2c:	f04f 0100 	mov.w	r1, #0
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	00e2      	lsls	r2, r4, #3
 8003a36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a3a:	00d9      	lsls	r1, r3, #3
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4614      	mov	r4, r2
 8003a40:	195b      	adds	r3, r3, r5
 8003a42:	eb44 0406 	adc.w	r4, r4, r6
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	0262      	lsls	r2, r4, #9
 8003a50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a54:	0259      	lsls	r1, r3, #9
 8003a56:	460b      	mov	r3, r1
 8003a58:	4614      	mov	r4, r2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f04f 0400 	mov.w	r4, #0
 8003a64:	461a      	mov	r2, r3
 8003a66:	4623      	mov	r3, r4
 8003a68:	f7fd f8de 	bl	8000c28 <__aeabi_uldivmod>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	460c      	mov	r4, r1
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	e049      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a74:	4b2e      	ldr	r3, [pc, #184]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	f04f 0400 	mov.w	r4, #0
 8003a7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	ea03 0501 	and.w	r5, r3, r1
 8003a8a:	ea04 0602 	and.w	r6, r4, r2
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4632      	mov	r2, r6
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	f04f 0400 	mov.w	r4, #0
 8003a9a:	0154      	lsls	r4, r2, #5
 8003a9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003aa0:	014b      	lsls	r3, r1, #5
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	1b49      	subs	r1, r1, r5
 8003aa8:	eb62 0206 	sbc.w	r2, r2, r6
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	f04f 0400 	mov.w	r4, #0
 8003ab4:	0194      	lsls	r4, r2, #6
 8003ab6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003aba:	018b      	lsls	r3, r1, #6
 8003abc:	1a5b      	subs	r3, r3, r1
 8003abe:	eb64 0402 	sbc.w	r4, r4, r2
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	00e2      	lsls	r2, r4, #3
 8003acc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ad0:	00d9      	lsls	r1, r3, #3
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4614      	mov	r4, r2
 8003ad6:	195b      	adds	r3, r3, r5
 8003ad8:	eb44 0406 	adc.w	r4, r4, r6
 8003adc:	f04f 0100 	mov.w	r1, #0
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	02a2      	lsls	r2, r4, #10
 8003ae6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003aea:	0299      	lsls	r1, r3, #10
 8003aec:	460b      	mov	r3, r1
 8003aee:	4614      	mov	r4, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	4621      	mov	r1, r4
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f04f 0400 	mov.w	r4, #0
 8003afa:	461a      	mov	r2, r3
 8003afc:	4623      	mov	r3, r4
 8003afe:	f7fd f893 	bl	8000c28 <__aeabi_uldivmod>
 8003b02:	4603      	mov	r3, r0
 8003b04:	460c      	mov	r4, r1
 8003b06:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	0f1b      	lsrs	r3, r3, #28
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	613b      	str	r3, [r7, #16]
      break;
 8003b1e:	e002      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x338>)
 8003b22:	613b      	str	r3, [r7, #16]
      break;
 8003b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b26:	693b      	ldr	r3, [r7, #16]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b30:	40023800 	.word	0x40023800
 8003b34:	00f42400 	.word	0x00f42400
 8003b38:	007a1200 	.word	0x007a1200

08003b3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8083 	beq.w	8003c5c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b56:	4b95      	ldr	r3, [pc, #596]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d019      	beq.n	8003b96 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b62:	4b92      	ldr	r3, [pc, #584]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d106      	bne.n	8003b7c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b6e:	4b8f      	ldr	r3, [pc, #572]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7a:	d00c      	beq.n	8003b96 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b7c:	4b8b      	ldr	r3, [pc, #556]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b84:	2b0c      	cmp	r3, #12
 8003b86:	d112      	bne.n	8003bae <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b88:	4b88      	ldr	r3, [pc, #544]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b94:	d10b      	bne.n	8003bae <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b96:	4b85      	ldr	r3, [pc, #532]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d05b      	beq.n	8003c5a <HAL_RCC_OscConfig+0x11e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d157      	bne.n	8003c5a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e216      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x8a>
 8003bb8:	4b7c      	ldr	r3, [pc, #496]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a7b      	ldr	r2, [pc, #492]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	e01d      	b.n	8003c02 <HAL_RCC_OscConfig+0xc6>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bce:	d10c      	bne.n	8003bea <HAL_RCC_OscConfig+0xae>
 8003bd0:	4b76      	ldr	r3, [pc, #472]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a75      	ldr	r2, [pc, #468]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	4b73      	ldr	r3, [pc, #460]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a72      	ldr	r2, [pc, #456]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e00b      	b.n	8003c02 <HAL_RCC_OscConfig+0xc6>
 8003bea:	4b70      	ldr	r3, [pc, #448]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a6f      	ldr	r2, [pc, #444]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a6c      	ldr	r2, [pc, #432]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d013      	beq.n	8003c32 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fe fa43 	bl	8002094 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c12:	f7fe fa3f 	bl	8002094 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b64      	cmp	r3, #100	; 0x64
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e1db      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c24:	4b61      	ldr	r3, [pc, #388]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0xd6>
 8003c30:	e014      	b.n	8003c5c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fe fa2f 	bl	8002094 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3a:	f7fe fa2b 	bl	8002094 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b64      	cmp	r3, #100	; 0x64
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e1c7      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c4c:	4b57      	ldr	r3, [pc, #348]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0xfe>
 8003c58:	e000      	b.n	8003c5c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d06f      	beq.n	8003d48 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c68:	4b50      	ldr	r3, [pc, #320]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d017      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c74:	4b4d      	ldr	r3, [pc, #308]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d105      	bne.n	8003c8c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c80:	4b4a      	ldr	r3, [pc, #296]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8c:	4b47      	ldr	r3, [pc, #284]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c94:	2b0c      	cmp	r3, #12
 8003c96:	d11c      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c98:	4b44      	ldr	r3, [pc, #272]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d116      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca4:	4b41      	ldr	r3, [pc, #260]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_OscConfig+0x180>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e18f      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbc:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4938      	ldr	r1, [pc, #224]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd0:	e03a      	b.n	8003d48 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d020      	beq.n	8003d1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cda:	4b35      	ldr	r3, [pc, #212]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7fe f9d8 	bl	8002094 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce8:	f7fe f9d4 	bl	8002094 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e170      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfa:	4b2c      	ldr	r3, [pc, #176]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	4b29      	ldr	r3, [pc, #164]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4925      	ldr	r1, [pc, #148]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]
 8003d1a:	e015      	b.n	8003d48 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1c:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fe f9b7 	bl	8002094 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2a:	f7fe f9b3 	bl	8002094 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e14f      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f0      	bne.n	8003d2a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d037      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d016      	beq.n	8003d8a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d5c:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <HAL_RCC_OscConfig+0x278>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7fe f997 	bl	8002094 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6a:	f7fe f993 	bl	8002094 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e12f      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_OscConfig+0x270>)
 8003d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x22e>
 8003d88:	e01c      	b.n	8003dc4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_RCC_OscConfig+0x278>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fe f980 	bl	8002094 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d96:	e00f      	b.n	8003db8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fe f97c 	bl	8002094 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d908      	bls.n	8003db8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e118      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800
 8003db0:	42470000 	.word	0x42470000
 8003db4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db8:	4b8a      	ldr	r3, [pc, #552]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e9      	bne.n	8003d98 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8097 	beq.w	8003f00 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd6:	4b83      	ldr	r3, [pc, #524]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	4b7f      	ldr	r3, [pc, #508]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4a7e      	ldr	r2, [pc, #504]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df0:	6413      	str	r3, [r2, #64]	; 0x40
 8003df2:	4b7c      	ldr	r3, [pc, #496]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	4b79      	ldr	r3, [pc, #484]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d118      	bne.n	8003e40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0e:	4b76      	ldr	r3, [pc, #472]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a75      	ldr	r2, [pc, #468]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1a:	f7fe f93b 	bl	8002094 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e22:	f7fe f937 	bl	8002094 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e0d3      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	4b6c      	ldr	r3, [pc, #432]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d106      	bne.n	8003e56 <HAL_RCC_OscConfig+0x31a>
 8003e48:	4b66      	ldr	r3, [pc, #408]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	4a65      	ldr	r2, [pc, #404]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70
 8003e54:	e01c      	b.n	8003e90 <HAL_RCC_OscConfig+0x354>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b05      	cmp	r3, #5
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x33c>
 8003e5e:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a60      	ldr	r2, [pc, #384]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6a:	4b5e      	ldr	r3, [pc, #376]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a5d      	ldr	r2, [pc, #372]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	e00b      	b.n	8003e90 <HAL_RCC_OscConfig+0x354>
 8003e78:	4b5a      	ldr	r3, [pc, #360]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	4a59      	ldr	r2, [pc, #356]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	6713      	str	r3, [r2, #112]	; 0x70
 8003e84:	4b57      	ldr	r3, [pc, #348]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a56      	ldr	r2, [pc, #344]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003e8a:	f023 0304 	bic.w	r3, r3, #4
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e98:	f7fe f8fc 	bl	8002094 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea0:	f7fe f8f8 	bl	8002094 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e092      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb6:	4b4b      	ldr	r3, [pc, #300]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0ee      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x364>
 8003ec2:	e014      	b.n	8003eee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fe f8e6 	bl	8002094 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ecc:	f7fe f8e2 	bl	8002094 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e07c      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee2:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1ee      	bne.n	8003ecc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d105      	bne.n	8003f00 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef4:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	4a3a      	ldr	r2, [pc, #232]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d068      	beq.n	8003fda <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f08:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d060      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d145      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1c:	4b33      	ldr	r3, [pc, #204]	; (8003fec <HAL_RCC_OscConfig+0x4b0>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f22:	f7fe f8b7 	bl	8002094 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2a:	f7fe f8b3 	bl	8002094 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e04f      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3c:	4b29      	ldr	r3, [pc, #164]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1f0      	bne.n	8003f2a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	019b      	lsls	r3, r3, #6
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	3b01      	subs	r3, #1
 8003f62:	041b      	lsls	r3, r3, #16
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	061b      	lsls	r3, r3, #24
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	071b      	lsls	r3, r3, #28
 8003f74:	491b      	ldr	r1, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7a:	4b1c      	ldr	r3, [pc, #112]	; (8003fec <HAL_RCC_OscConfig+0x4b0>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fe f888 	bl	8002094 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fe f884 	bl	8002094 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e020      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x44c>
 8003fa6:	e018      	b.n	8003fda <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_RCC_OscConfig+0x4b0>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fae:	f7fe f871 	bl	8002094 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb6:	f7fe f86d 	bl	8002094 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e009      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_RCC_OscConfig+0x4a8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f0      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x47a>
 8003fd4:	e001      	b.n	8003fda <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	42470060 	.word	0x42470060

08003ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e03f      	b.n	8004082 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fd ff2e 	bl	8001e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	; 0x24
 8004020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fa6f 	bl	8004518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e047      	b.n	800412c <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7fd fee1 	bl	8001e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2224      	movs	r2, #36	; 0x24
 80040ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fa22 	bl	8004518 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80040f2:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0208 	orr.w	r2, r2, #8
 8004102:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004112:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b20      	cmp	r3, #32
 8004152:	f040 8083 	bne.w	800425c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_UART_Transmit+0x2e>
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e07b      	b.n	800425e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_UART_Transmit+0x40>
 8004170:	2302      	movs	r3, #2
 8004172:	e074      	b.n	800425e <HAL_UART_Transmit+0x12a>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2221      	movs	r2, #33	; 0x21
 8004186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800418a:	f7fd ff83 	bl	8002094 <HAL_GetTick>
 800418e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	88fa      	ldrh	r2, [r7, #6]
 8004194:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	88fa      	ldrh	r2, [r7, #6]
 800419a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80041a4:	e042      	b.n	800422c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041bc:	d122      	bne.n	8004204 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2200      	movs	r2, #0
 80041c6:	2180      	movs	r1, #128	; 0x80
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f95a 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e042      	b.n	800425e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ea:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	3302      	adds	r3, #2
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	e017      	b.n	800422c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	3301      	adds	r3, #1
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	e013      	b.n	800422c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	2180      	movs	r1, #128	; 0x80
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f937 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e01f      	b.n	800425e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	60ba      	str	r2, [r7, #8]
 8004224:	781a      	ldrb	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1b7      	bne.n	80041a6 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	2140      	movs	r1, #64	; 0x40
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f91e 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e006      	b.n	800425e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b088      	sub	sp, #32
 800426a:	af02      	add	r7, sp, #8
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	4613      	mov	r3, r2
 8004274:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b20      	cmp	r3, #32
 8004284:	f040 8090 	bne.w	80043a8 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_UART_Receive+0x2e>
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e088      	b.n	80043aa <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_UART_Receive+0x40>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e081      	b.n	80043aa <HAL_UART_Receive+0x144>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2222      	movs	r2, #34	; 0x22
 80042b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042bc:	f7fd feea 	bl	8002094 <HAL_GetTick>
 80042c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	88fa      	ldrh	r2, [r7, #6]
 80042c6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80042d6:	e05c      	b.n	8004392 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ee:	d12b      	bne.n	8004348 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2200      	movs	r2, #0
 80042f8:	2120      	movs	r1, #32
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f8c1 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e04f      	b.n	80043aa <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10c      	bne.n	8004330 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	b29b      	uxth	r3, r3
 800431e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004322:	b29a      	uxth	r2, r3
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	3302      	adds	r3, #2
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	e030      	b.n	8004392 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	b29b      	uxth	r3, r3
 8004338:	b2db      	uxtb	r3, r3
 800433a:	b29a      	uxth	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	3301      	adds	r3, #1
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	e024      	b.n	8004392 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2200      	movs	r2, #0
 8004350:	2120      	movs	r1, #32
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f895 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e023      	b.n	80043aa <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d108      	bne.n	800437c <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	60ba      	str	r2, [r7, #8]
 8004376:	b2ca      	uxtb	r2, r1
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	e00a      	b.n	8004392 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	1c59      	adds	r1, r3, #1
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d19d      	bne.n	80042d8 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	e000      	b.n	80043aa <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80043a8:	2302      	movs	r3, #2
  }
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e020      	b.n	800440e <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2224      	movs	r2, #36	; 0x24
 80043d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 030c 	bic.w	r3, r3, #12
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f043 0308 	orr.w	r3, r3, #8
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8004430:	2302      	movs	r3, #2
 8004432:	e020      	b.n	8004476 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	; 0x24
 8004440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 030c 	bic.w	r3, r3, #12
 8004452:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f043 0304 	orr.w	r3, r3, #4
 800445a:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004492:	e02c      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449a:	d028      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80044a2:	f7fd fdf7 	bl	8002094 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d21d      	bcs.n	80044ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e00f      	b.n	800450e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	429a      	cmp	r2, r3
 800450a:	d0c3      	beq.n	8004494 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800455a:	f023 030c 	bic.w	r3, r3, #12
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	430b      	orrs	r3, r1
 8004566:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004586:	f040 818b 	bne.w	80048a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4ac1      	ldr	r2, [pc, #772]	; (8004894 <UART_SetConfig+0x37c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d005      	beq.n	80045a0 <UART_SetConfig+0x88>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4abf      	ldr	r2, [pc, #764]	; (8004898 <UART_SetConfig+0x380>)
 800459a:	4293      	cmp	r3, r2
 800459c:	f040 80bd 	bne.w	800471a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045a0:	f7ff f918 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 80045a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	461d      	mov	r5, r3
 80045aa:	f04f 0600 	mov.w	r6, #0
 80045ae:	46a8      	mov	r8, r5
 80045b0:	46b1      	mov	r9, r6
 80045b2:	eb18 0308 	adds.w	r3, r8, r8
 80045b6:	eb49 0409 	adc.w	r4, r9, r9
 80045ba:	4698      	mov	r8, r3
 80045bc:	46a1      	mov	r9, r4
 80045be:	eb18 0805 	adds.w	r8, r8, r5
 80045c2:	eb49 0906 	adc.w	r9, r9, r6
 80045c6:	f04f 0100 	mov.w	r1, #0
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045da:	4688      	mov	r8, r1
 80045dc:	4691      	mov	r9, r2
 80045de:	eb18 0005 	adds.w	r0, r8, r5
 80045e2:	eb49 0106 	adc.w	r1, r9, r6
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	461d      	mov	r5, r3
 80045ec:	f04f 0600 	mov.w	r6, #0
 80045f0:	196b      	adds	r3, r5, r5
 80045f2:	eb46 0406 	adc.w	r4, r6, r6
 80045f6:	461a      	mov	r2, r3
 80045f8:	4623      	mov	r3, r4
 80045fa:	f7fc fb15 	bl	8000c28 <__aeabi_uldivmod>
 80045fe:	4603      	mov	r3, r0
 8004600:	460c      	mov	r4, r1
 8004602:	461a      	mov	r2, r3
 8004604:	4ba5      	ldr	r3, [pc, #660]	; (800489c <UART_SetConfig+0x384>)
 8004606:	fba3 2302 	umull	r2, r3, r3, r2
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	461d      	mov	r5, r3
 8004614:	f04f 0600 	mov.w	r6, #0
 8004618:	46a9      	mov	r9, r5
 800461a:	46b2      	mov	sl, r6
 800461c:	eb19 0309 	adds.w	r3, r9, r9
 8004620:	eb4a 040a 	adc.w	r4, sl, sl
 8004624:	4699      	mov	r9, r3
 8004626:	46a2      	mov	sl, r4
 8004628:	eb19 0905 	adds.w	r9, r9, r5
 800462c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004630:	f04f 0100 	mov.w	r1, #0
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800463c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004640:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004644:	4689      	mov	r9, r1
 8004646:	4692      	mov	sl, r2
 8004648:	eb19 0005 	adds.w	r0, r9, r5
 800464c:	eb4a 0106 	adc.w	r1, sl, r6
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	461d      	mov	r5, r3
 8004656:	f04f 0600 	mov.w	r6, #0
 800465a:	196b      	adds	r3, r5, r5
 800465c:	eb46 0406 	adc.w	r4, r6, r6
 8004660:	461a      	mov	r2, r3
 8004662:	4623      	mov	r3, r4
 8004664:	f7fc fae0 	bl	8000c28 <__aeabi_uldivmod>
 8004668:	4603      	mov	r3, r0
 800466a:	460c      	mov	r4, r1
 800466c:	461a      	mov	r2, r3
 800466e:	4b8b      	ldr	r3, [pc, #556]	; (800489c <UART_SetConfig+0x384>)
 8004670:	fba3 1302 	umull	r1, r3, r3, r2
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	2164      	movs	r1, #100	; 0x64
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	3332      	adds	r3, #50	; 0x32
 8004682:	4a86      	ldr	r2, [pc, #536]	; (800489c <UART_SetConfig+0x384>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004690:	4498      	add	r8, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	461d      	mov	r5, r3
 8004696:	f04f 0600 	mov.w	r6, #0
 800469a:	46a9      	mov	r9, r5
 800469c:	46b2      	mov	sl, r6
 800469e:	eb19 0309 	adds.w	r3, r9, r9
 80046a2:	eb4a 040a 	adc.w	r4, sl, sl
 80046a6:	4699      	mov	r9, r3
 80046a8:	46a2      	mov	sl, r4
 80046aa:	eb19 0905 	adds.w	r9, r9, r5
 80046ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80046b2:	f04f 0100 	mov.w	r1, #0
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046c6:	4689      	mov	r9, r1
 80046c8:	4692      	mov	sl, r2
 80046ca:	eb19 0005 	adds.w	r0, r9, r5
 80046ce:	eb4a 0106 	adc.w	r1, sl, r6
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	461d      	mov	r5, r3
 80046d8:	f04f 0600 	mov.w	r6, #0
 80046dc:	196b      	adds	r3, r5, r5
 80046de:	eb46 0406 	adc.w	r4, r6, r6
 80046e2:	461a      	mov	r2, r3
 80046e4:	4623      	mov	r3, r4
 80046e6:	f7fc fa9f 	bl	8000c28 <__aeabi_uldivmod>
 80046ea:	4603      	mov	r3, r0
 80046ec:	460c      	mov	r4, r1
 80046ee:	461a      	mov	r2, r3
 80046f0:	4b6a      	ldr	r3, [pc, #424]	; (800489c <UART_SetConfig+0x384>)
 80046f2:	fba3 1302 	umull	r1, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2164      	movs	r1, #100	; 0x64
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	3332      	adds	r3, #50	; 0x32
 8004704:	4a65      	ldr	r2, [pc, #404]	; (800489c <UART_SetConfig+0x384>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	f003 0207 	and.w	r2, r3, #7
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4442      	add	r2, r8
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	e26f      	b.n	8004bfa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800471a:	f7ff f847 	bl	80037ac <HAL_RCC_GetPCLK1Freq>
 800471e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	461d      	mov	r5, r3
 8004724:	f04f 0600 	mov.w	r6, #0
 8004728:	46a8      	mov	r8, r5
 800472a:	46b1      	mov	r9, r6
 800472c:	eb18 0308 	adds.w	r3, r8, r8
 8004730:	eb49 0409 	adc.w	r4, r9, r9
 8004734:	4698      	mov	r8, r3
 8004736:	46a1      	mov	r9, r4
 8004738:	eb18 0805 	adds.w	r8, r8, r5
 800473c:	eb49 0906 	adc.w	r9, r9, r6
 8004740:	f04f 0100 	mov.w	r1, #0
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800474c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004750:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004754:	4688      	mov	r8, r1
 8004756:	4691      	mov	r9, r2
 8004758:	eb18 0005 	adds.w	r0, r8, r5
 800475c:	eb49 0106 	adc.w	r1, r9, r6
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	461d      	mov	r5, r3
 8004766:	f04f 0600 	mov.w	r6, #0
 800476a:	196b      	adds	r3, r5, r5
 800476c:	eb46 0406 	adc.w	r4, r6, r6
 8004770:	461a      	mov	r2, r3
 8004772:	4623      	mov	r3, r4
 8004774:	f7fc fa58 	bl	8000c28 <__aeabi_uldivmod>
 8004778:	4603      	mov	r3, r0
 800477a:	460c      	mov	r4, r1
 800477c:	461a      	mov	r2, r3
 800477e:	4b47      	ldr	r3, [pc, #284]	; (800489c <UART_SetConfig+0x384>)
 8004780:	fba3 2302 	umull	r2, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	461d      	mov	r5, r3
 800478e:	f04f 0600 	mov.w	r6, #0
 8004792:	46a9      	mov	r9, r5
 8004794:	46b2      	mov	sl, r6
 8004796:	eb19 0309 	adds.w	r3, r9, r9
 800479a:	eb4a 040a 	adc.w	r4, sl, sl
 800479e:	4699      	mov	r9, r3
 80047a0:	46a2      	mov	sl, r4
 80047a2:	eb19 0905 	adds.w	r9, r9, r5
 80047a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80047aa:	f04f 0100 	mov.w	r1, #0
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047be:	4689      	mov	r9, r1
 80047c0:	4692      	mov	sl, r2
 80047c2:	eb19 0005 	adds.w	r0, r9, r5
 80047c6:	eb4a 0106 	adc.w	r1, sl, r6
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	461d      	mov	r5, r3
 80047d0:	f04f 0600 	mov.w	r6, #0
 80047d4:	196b      	adds	r3, r5, r5
 80047d6:	eb46 0406 	adc.w	r4, r6, r6
 80047da:	461a      	mov	r2, r3
 80047dc:	4623      	mov	r3, r4
 80047de:	f7fc fa23 	bl	8000c28 <__aeabi_uldivmod>
 80047e2:	4603      	mov	r3, r0
 80047e4:	460c      	mov	r4, r1
 80047e6:	461a      	mov	r2, r3
 80047e8:	4b2c      	ldr	r3, [pc, #176]	; (800489c <UART_SetConfig+0x384>)
 80047ea:	fba3 1302 	umull	r1, r3, r3, r2
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2164      	movs	r1, #100	; 0x64
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	3332      	adds	r3, #50	; 0x32
 80047fc:	4a27      	ldr	r2, [pc, #156]	; (800489c <UART_SetConfig+0x384>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800480a:	4498      	add	r8, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	461d      	mov	r5, r3
 8004810:	f04f 0600 	mov.w	r6, #0
 8004814:	46a9      	mov	r9, r5
 8004816:	46b2      	mov	sl, r6
 8004818:	eb19 0309 	adds.w	r3, r9, r9
 800481c:	eb4a 040a 	adc.w	r4, sl, sl
 8004820:	4699      	mov	r9, r3
 8004822:	46a2      	mov	sl, r4
 8004824:	eb19 0905 	adds.w	r9, r9, r5
 8004828:	eb4a 0a06 	adc.w	sl, sl, r6
 800482c:	f04f 0100 	mov.w	r1, #0
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004838:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800483c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004840:	4689      	mov	r9, r1
 8004842:	4692      	mov	sl, r2
 8004844:	eb19 0005 	adds.w	r0, r9, r5
 8004848:	eb4a 0106 	adc.w	r1, sl, r6
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	461d      	mov	r5, r3
 8004852:	f04f 0600 	mov.w	r6, #0
 8004856:	196b      	adds	r3, r5, r5
 8004858:	eb46 0406 	adc.w	r4, r6, r6
 800485c:	461a      	mov	r2, r3
 800485e:	4623      	mov	r3, r4
 8004860:	f7fc f9e2 	bl	8000c28 <__aeabi_uldivmod>
 8004864:	4603      	mov	r3, r0
 8004866:	460c      	mov	r4, r1
 8004868:	461a      	mov	r2, r3
 800486a:	4b0c      	ldr	r3, [pc, #48]	; (800489c <UART_SetConfig+0x384>)
 800486c:	fba3 1302 	umull	r1, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	2164      	movs	r1, #100	; 0x64
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	3332      	adds	r3, #50	; 0x32
 800487e:	4a07      	ldr	r2, [pc, #28]	; (800489c <UART_SetConfig+0x384>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	f003 0207 	and.w	r2, r3, #7
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4442      	add	r2, r8
 8004890:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004892:	e1b2      	b.n	8004bfa <UART_SetConfig+0x6e2>
 8004894:	40011000 	.word	0x40011000
 8004898:	40011400 	.word	0x40011400
 800489c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4ad7      	ldr	r2, [pc, #860]	; (8004c04 <UART_SetConfig+0x6ec>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d005      	beq.n	80048b6 <UART_SetConfig+0x39e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4ad6      	ldr	r2, [pc, #856]	; (8004c08 <UART_SetConfig+0x6f0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	f040 80d1 	bne.w	8004a58 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80048b6:	f7fe ff8d 	bl	80037d4 <HAL_RCC_GetPCLK2Freq>
 80048ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	469a      	mov	sl, r3
 80048c0:	f04f 0b00 	mov.w	fp, #0
 80048c4:	46d0      	mov	r8, sl
 80048c6:	46d9      	mov	r9, fp
 80048c8:	eb18 0308 	adds.w	r3, r8, r8
 80048cc:	eb49 0409 	adc.w	r4, r9, r9
 80048d0:	4698      	mov	r8, r3
 80048d2:	46a1      	mov	r9, r4
 80048d4:	eb18 080a 	adds.w	r8, r8, sl
 80048d8:	eb49 090b 	adc.w	r9, r9, fp
 80048dc:	f04f 0100 	mov.w	r1, #0
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048f0:	4688      	mov	r8, r1
 80048f2:	4691      	mov	r9, r2
 80048f4:	eb1a 0508 	adds.w	r5, sl, r8
 80048f8:	eb4b 0609 	adc.w	r6, fp, r9
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4619      	mov	r1, r3
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	f04f 0400 	mov.w	r4, #0
 800490e:	0094      	lsls	r4, r2, #2
 8004910:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004914:	008b      	lsls	r3, r1, #2
 8004916:	461a      	mov	r2, r3
 8004918:	4623      	mov	r3, r4
 800491a:	4628      	mov	r0, r5
 800491c:	4631      	mov	r1, r6
 800491e:	f7fc f983 	bl	8000c28 <__aeabi_uldivmod>
 8004922:	4603      	mov	r3, r0
 8004924:	460c      	mov	r4, r1
 8004926:	461a      	mov	r2, r3
 8004928:	4bb8      	ldr	r3, [pc, #736]	; (8004c0c <UART_SetConfig+0x6f4>)
 800492a:	fba3 2302 	umull	r2, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	469b      	mov	fp, r3
 8004938:	f04f 0c00 	mov.w	ip, #0
 800493c:	46d9      	mov	r9, fp
 800493e:	46e2      	mov	sl, ip
 8004940:	eb19 0309 	adds.w	r3, r9, r9
 8004944:	eb4a 040a 	adc.w	r4, sl, sl
 8004948:	4699      	mov	r9, r3
 800494a:	46a2      	mov	sl, r4
 800494c:	eb19 090b 	adds.w	r9, r9, fp
 8004950:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004960:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004964:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004968:	4689      	mov	r9, r1
 800496a:	4692      	mov	sl, r2
 800496c:	eb1b 0509 	adds.w	r5, fp, r9
 8004970:	eb4c 060a 	adc.w	r6, ip, sl
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	4619      	mov	r1, r3
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	f04f 0400 	mov.w	r4, #0
 8004986:	0094      	lsls	r4, r2, #2
 8004988:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800498c:	008b      	lsls	r3, r1, #2
 800498e:	461a      	mov	r2, r3
 8004990:	4623      	mov	r3, r4
 8004992:	4628      	mov	r0, r5
 8004994:	4631      	mov	r1, r6
 8004996:	f7fc f947 	bl	8000c28 <__aeabi_uldivmod>
 800499a:	4603      	mov	r3, r0
 800499c:	460c      	mov	r4, r1
 800499e:	461a      	mov	r2, r3
 80049a0:	4b9a      	ldr	r3, [pc, #616]	; (8004c0c <UART_SetConfig+0x6f4>)
 80049a2:	fba3 1302 	umull	r1, r3, r3, r2
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2164      	movs	r1, #100	; 0x64
 80049aa:	fb01 f303 	mul.w	r3, r1, r3
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	3332      	adds	r3, #50	; 0x32
 80049b4:	4a95      	ldr	r2, [pc, #596]	; (8004c0c <UART_SetConfig+0x6f4>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c0:	4498      	add	r8, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	469b      	mov	fp, r3
 80049c6:	f04f 0c00 	mov.w	ip, #0
 80049ca:	46d9      	mov	r9, fp
 80049cc:	46e2      	mov	sl, ip
 80049ce:	eb19 0309 	adds.w	r3, r9, r9
 80049d2:	eb4a 040a 	adc.w	r4, sl, sl
 80049d6:	4699      	mov	r9, r3
 80049d8:	46a2      	mov	sl, r4
 80049da:	eb19 090b 	adds.w	r9, r9, fp
 80049de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049f6:	4689      	mov	r9, r1
 80049f8:	4692      	mov	sl, r2
 80049fa:	eb1b 0509 	adds.w	r5, fp, r9
 80049fe:	eb4c 060a 	adc.w	r6, ip, sl
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4619      	mov	r1, r3
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	f04f 0400 	mov.w	r4, #0
 8004a14:	0094      	lsls	r4, r2, #2
 8004a16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a1a:	008b      	lsls	r3, r1, #2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4623      	mov	r3, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	4631      	mov	r1, r6
 8004a24:	f7fc f900 	bl	8000c28 <__aeabi_uldivmod>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4b77      	ldr	r3, [pc, #476]	; (8004c0c <UART_SetConfig+0x6f4>)
 8004a30:	fba3 1302 	umull	r1, r3, r3, r2
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	2164      	movs	r1, #100	; 0x64
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	3332      	adds	r3, #50	; 0x32
 8004a42:	4a72      	ldr	r2, [pc, #456]	; (8004c0c <UART_SetConfig+0x6f4>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	f003 020f 	and.w	r2, r3, #15
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4442      	add	r2, r8
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	e0d0      	b.n	8004bfa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a58:	f7fe fea8 	bl	80037ac <HAL_RCC_GetPCLK1Freq>
 8004a5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	469a      	mov	sl, r3
 8004a62:	f04f 0b00 	mov.w	fp, #0
 8004a66:	46d0      	mov	r8, sl
 8004a68:	46d9      	mov	r9, fp
 8004a6a:	eb18 0308 	adds.w	r3, r8, r8
 8004a6e:	eb49 0409 	adc.w	r4, r9, r9
 8004a72:	4698      	mov	r8, r3
 8004a74:	46a1      	mov	r9, r4
 8004a76:	eb18 080a 	adds.w	r8, r8, sl
 8004a7a:	eb49 090b 	adc.w	r9, r9, fp
 8004a7e:	f04f 0100 	mov.w	r1, #0
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a92:	4688      	mov	r8, r1
 8004a94:	4691      	mov	r9, r2
 8004a96:	eb1a 0508 	adds.w	r5, sl, r8
 8004a9a:	eb4b 0609 	adc.w	r6, fp, r9
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	f04f 0400 	mov.w	r4, #0
 8004ab0:	0094      	lsls	r4, r2, #2
 8004ab2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ab6:	008b      	lsls	r3, r1, #2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4623      	mov	r3, r4
 8004abc:	4628      	mov	r0, r5
 8004abe:	4631      	mov	r1, r6
 8004ac0:	f7fc f8b2 	bl	8000c28 <__aeabi_uldivmod>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4b50      	ldr	r3, [pc, #320]	; (8004c0c <UART_SetConfig+0x6f4>)
 8004acc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	469b      	mov	fp, r3
 8004ada:	f04f 0c00 	mov.w	ip, #0
 8004ade:	46d9      	mov	r9, fp
 8004ae0:	46e2      	mov	sl, ip
 8004ae2:	eb19 0309 	adds.w	r3, r9, r9
 8004ae6:	eb4a 040a 	adc.w	r4, sl, sl
 8004aea:	4699      	mov	r9, r3
 8004aec:	46a2      	mov	sl, r4
 8004aee:	eb19 090b 	adds.w	r9, r9, fp
 8004af2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004af6:	f04f 0100 	mov.w	r1, #0
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b0a:	4689      	mov	r9, r1
 8004b0c:	4692      	mov	sl, r2
 8004b0e:	eb1b 0509 	adds.w	r5, fp, r9
 8004b12:	eb4c 060a 	adc.w	r6, ip, sl
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	f04f 0400 	mov.w	r4, #0
 8004b28:	0094      	lsls	r4, r2, #2
 8004b2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b2e:	008b      	lsls	r3, r1, #2
 8004b30:	461a      	mov	r2, r3
 8004b32:	4623      	mov	r3, r4
 8004b34:	4628      	mov	r0, r5
 8004b36:	4631      	mov	r1, r6
 8004b38:	f7fc f876 	bl	8000c28 <__aeabi_uldivmod>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	461a      	mov	r2, r3
 8004b42:	4b32      	ldr	r3, [pc, #200]	; (8004c0c <UART_SetConfig+0x6f4>)
 8004b44:	fba3 1302 	umull	r1, r3, r3, r2
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2164      	movs	r1, #100	; 0x64
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a2d      	ldr	r2, [pc, #180]	; (8004c0c <UART_SetConfig+0x6f4>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b62:	4498      	add	r8, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	469b      	mov	fp, r3
 8004b68:	f04f 0c00 	mov.w	ip, #0
 8004b6c:	46d9      	mov	r9, fp
 8004b6e:	46e2      	mov	sl, ip
 8004b70:	eb19 0309 	adds.w	r3, r9, r9
 8004b74:	eb4a 040a 	adc.w	r4, sl, sl
 8004b78:	4699      	mov	r9, r3
 8004b7a:	46a2      	mov	sl, r4
 8004b7c:	eb19 090b 	adds.w	r9, r9, fp
 8004b80:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b84:	f04f 0100 	mov.w	r1, #0
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b98:	4689      	mov	r9, r1
 8004b9a:	4692      	mov	sl, r2
 8004b9c:	eb1b 0509 	adds.w	r5, fp, r9
 8004ba0:	eb4c 060a 	adc.w	r6, ip, sl
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	f04f 0400 	mov.w	r4, #0
 8004bb6:	0094      	lsls	r4, r2, #2
 8004bb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bbc:	008b      	lsls	r3, r1, #2
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4623      	mov	r3, r4
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	f7fc f82f 	bl	8000c28 <__aeabi_uldivmod>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	460c      	mov	r4, r1
 8004bce:	461a      	mov	r2, r3
 8004bd0:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <UART_SetConfig+0x6f4>)
 8004bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2164      	movs	r1, #100	; 0x64
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <UART_SetConfig+0x6f4>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 020f 	and.w	r2, r3, #15
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4442      	add	r2, r8
 8004bf6:	609a      	str	r2, [r3, #8]
}
 8004bf8:	e7ff      	b.n	8004bfa <UART_SetConfig+0x6e2>
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c04:	40011000 	.word	0x40011000
 8004c08:	40011400 	.word	0x40011400
 8004c0c:	51eb851f 	.word	0x51eb851f

08004c10 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004c1e:	6839      	ldr	r1, [r7, #0]
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f001 fcd8 	bl	80065d6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8004c26:	4603      	mov	r3, r0
 8004c28:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	218a      	movs	r1, #138	; 0x8a
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f004 fedb 	bl	8009a0c <VL53L0X_WrByte>
 8004c56:	4603      	mov	r3, r0
 8004c58:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8004c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004c68:	b5b0      	push	{r4, r5, r7, lr}
 8004c6a:	b096      	sub	sp, #88	; 0x58
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c70:	2300      	movs	r3, #0
 8004c72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004c76:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d107      	bne.n	8004c8e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2188      	movs	r1, #136	; 0x88
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f004 fec2 	bl	8009a0c <VL53L0X_WrByte>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c9c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004ca6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a9e      	ldr	r2, [pc, #632]	; (8004f28 <VL53L0X_DataInit+0x2c0>)
 8004cae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a9d      	ldr	r2, [pc, #628]	; (8004f2c <VL53L0X_DataInit+0x2c4>)
 8004cb6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004cc0:	f107 0310 	add.w	r3, r7, #16
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fab4 	bl	8005234 <VL53L0X_GetDeviceParameters>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004cd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d112      	bne.n	8004d00 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f103 0410 	add.w	r4, r3, #16
 8004ce8:	f107 0510 	add.w	r5, r7, #16
 8004cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cf8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2264      	movs	r2, #100	; 0x64
 8004d04:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004d0e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d18:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004d22:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004d2e:	2201      	movs	r2, #1
 8004d30:	2180      	movs	r1, #128	; 0x80
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f004 fe6a 	bl	8009a0c <VL53L0X_WrByte>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004d46:	2201      	movs	r2, #1
 8004d48:	21ff      	movs	r1, #255	; 0xff
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f004 fe5e 	bl	8009a0c <VL53L0X_WrByte>
 8004d50:	4603      	mov	r3, r0
 8004d52:	461a      	mov	r2, r3
 8004d54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2100      	movs	r1, #0
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f004 fe52 	bl	8009a0c <VL53L0X_WrByte>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004d76:	f107 030f 	add.w	r3, r7, #15
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2191      	movs	r1, #145	; 0x91
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f004 fec6 	bl	8009b10 <VL53L0X_RdByte>
 8004d84:	4603      	mov	r3, r0
 8004d86:	461a      	mov	r2, r3
 8004d88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004d92:	7bfa      	ldrb	r2, [r7, #15]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f004 fe34 	bl	8009a0c <VL53L0X_WrByte>
 8004da4:	4603      	mov	r3, r0
 8004da6:	461a      	mov	r2, r3
 8004da8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004db2:	2200      	movs	r2, #0
 8004db4:	21ff      	movs	r1, #255	; 0xff
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f004 fe28 	bl	8009a0c <VL53L0X_WrByte>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2180      	movs	r1, #128	; 0x80
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f004 fe1c 	bl	8009a0c <VL53L0X_WrByte>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004de2:	2300      	movs	r3, #0
 8004de4:	653b      	str	r3, [r7, #80]	; 0x50
 8004de6:	e014      	b.n	8004e12 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004de8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d114      	bne.n	8004e1a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2201      	movs	r2, #1
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fd43 	bl	8005884 <VL53L0X_SetLimitCheckEnable>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	461a      	mov	r2, r3
 8004e02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0e:	3301      	adds	r3, #1
 8004e10:	653b      	str	r3, [r7, #80]	; 0x50
 8004e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e14:	2b05      	cmp	r3, #5
 8004e16:	dde7      	ble.n	8004de8 <VL53L0X_DataInit+0x180>
 8004e18:	e000      	b.n	8004e1c <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004e1a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004e1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d107      	bne.n	8004e34 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004e24:	2200      	movs	r2, #0
 8004e26:	2102      	movs	r1, #2
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fd2b 	bl	8005884 <VL53L0X_SetLimitCheckEnable>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004e34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d107      	bne.n	8004e4c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2103      	movs	r1, #3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fd1f 	bl	8005884 <VL53L0X_SetLimitCheckEnable>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004e4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d107      	bne.n	8004e64 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004e54:	2200      	movs	r2, #0
 8004e56:	2104      	movs	r1, #4
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fd13 	bl	8005884 <VL53L0X_SetLimitCheckEnable>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004e64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d107      	bne.n	8004e7c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2105      	movs	r1, #5
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fd07 	bl	8005884 <VL53L0X_SetLimitCheckEnable>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d108      	bne.n	8004e96 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004e84:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004e88:	2100      	movs	r1, #0
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fdaa 	bl	80059e4 <VL53L0X_SetLimitCheckValue>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004e96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d108      	bne.n	8004eb0 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fd9d 	bl	80059e4 <VL53L0X_SetLimitCheckValue>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004eb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d108      	bne.n	8004eca <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004eb8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fd90 	bl	80059e4 <VL53L0X_SetLimitCheckValue>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004eca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2103      	movs	r1, #3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fd84 	bl	80059e4 <VL53L0X_SetLimitCheckValue>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004ee2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10f      	bne.n	8004f0a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	22ff      	movs	r2, #255	; 0xff
 8004eee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004ef2:	22ff      	movs	r2, #255	; 0xff
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f004 fd88 	bl	8009a0c <VL53L0X_WrByte>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004f0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d103      	bne.n	8004f1a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8004f1a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3758      	adds	r7, #88	; 0x58
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bdb0      	pop	{r4, r5, r7, pc}
 8004f26:	bf00      	nop
 8004f28:	00016b85 	.word	0x00016b85
 8004f2c:	000970a4 	.word	0x000970a4

08004f30 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8004f30:	b5b0      	push	{r4, r5, r7, lr}
 8004f32:	b09e      	sub	sp, #120	; 0x78
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8004f3e:	f107 031c 	add.w	r3, r7, #28
 8004f42:	2240      	movs	r2, #64	; 0x40
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f004 fec5 	bl	8009cd6 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f002 fa87 	bl	8007482 <VL53L0X_get_info_from_device>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004f80:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8004f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d80d      	bhi.n	8004fb0 <VL53L0X_StaticInit+0x80>
 8004f94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d102      	bne.n	8004fa2 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d806      	bhi.n	8004fb0 <VL53L0X_StaticInit+0x80>
 8004fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10e      	bne.n	8004fc8 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8004faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fac:	2b0c      	cmp	r3, #12
 8004fae:	d90b      	bls.n	8004fc8 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004fb0:	f107 0218 	add.w	r2, r7, #24
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f001 fd06 	bl	80069cc <VL53L0X_perform_ref_spad_management>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004fc6:	e009      	b.n	8004fdc <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f001 ff07 	bl	8006de4 <VL53L0X_set_reference_spads>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004fdc:	4b94      	ldr	r3, [pc, #592]	; (8005230 <VL53L0X_StaticInit+0x300>)
 8004fde:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004fe0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10f      	bne.n	8005008 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004fee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004ff2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d104      	bne.n	8005004 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005000:	66bb      	str	r3, [r7, #104]	; 0x68
 8005002:	e001      	b.n	8005008 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8005004:	4b8a      	ldr	r3, [pc, #552]	; (8005230 <VL53L0X_StaticInit+0x300>)
 8005006:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005008:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005010:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f003 fdda 	bl	8008bcc <VL53L0X_load_tuning_settings>
 8005018:	4603      	mov	r3, r0
 800501a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800501e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8005026:	2300      	movs	r3, #0
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	2304      	movs	r3, #4
 800502c:	2200      	movs	r2, #0
 800502e:	2100      	movs	r1, #0
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 f8ff 	bl	8006234 <VL53L0X_SetGpioConfig>
 8005036:	4603      	mov	r3, r0
 8005038:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800503c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005040:	2b00      	cmp	r3, #0
 8005042:	d121      	bne.n	8005088 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005044:	2201      	movs	r2, #1
 8005046:	21ff      	movs	r1, #255	; 0xff
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f004 fcdf 	bl	8009a0c <VL53L0X_WrByte>
 800504e:	4603      	mov	r3, r0
 8005050:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005054:	f107 031a 	add.w	r3, r7, #26
 8005058:	461a      	mov	r2, r3
 800505a:	2184      	movs	r1, #132	; 0x84
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f004 fd81 	bl	8009b64 <VL53L0X_RdWord>
 8005062:	4603      	mov	r3, r0
 8005064:	461a      	mov	r2, r3
 8005066:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800506a:	4313      	orrs	r3, r2
 800506c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005070:	2200      	movs	r2, #0
 8005072:	21ff      	movs	r1, #255	; 0xff
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f004 fcc9 	bl	8009a0c <VL53L0X_WrByte>
 800507a:	4603      	mov	r3, r0
 800507c:	461a      	mov	r2, r3
 800507e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005082:	4313      	orrs	r3, r2
 8005084:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005088:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800508c:	2b00      	cmp	r3, #0
 800508e:	d105      	bne.n	800509c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005090:	8b7b      	ldrh	r3, [r7, #26]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	461a      	mov	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800509c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d108      	bne.n	80050b6 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80050a4:	f107 031c 	add.w	r3, r7, #28
 80050a8:	4619      	mov	r1, r3
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f8c2 	bl	8005234 <VL53L0X_GetDeviceParameters>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80050b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d110      	bne.n	80050e0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80050be:	f107 0319 	add.w	r3, r7, #25
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f9a0 	bl	800540a <VL53L0X_GetFractionEnable>
 80050ca:	4603      	mov	r3, r0
 80050cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80050d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d103      	bne.n	80050e0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80050d8:	7e7a      	ldrb	r2, [r7, #25]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80050e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10e      	bne.n	8005106 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f103 0410 	add.w	r4, r3, #16
 80050ee:	f107 051c 	add.w	r5, r7, #28
 80050f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005102:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8005106:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800510a:	2b00      	cmp	r3, #0
 800510c:	d111      	bne.n	8005132 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800510e:	f107 0319 	add.w	r3, r7, #25
 8005112:	461a      	mov	r2, r3
 8005114:	2101      	movs	r1, #1
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f004 fcfa 	bl	8009b10 <VL53L0X_RdByte>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8005122:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005126:	2b00      	cmp	r3, #0
 8005128:	d103      	bne.n	8005132 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800512a:	7e7a      	ldrb	r2, [r7, #25]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8005132:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005136:	2b00      	cmp	r3, #0
 8005138:	d107      	bne.n	800514a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800513a:	2200      	movs	r2, #0
 800513c:	2100      	movs	r1, #0
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f9d8 	bl	80054f4 <VL53L0X_SetSequenceStepEnable>
 8005144:	4603      	mov	r3, r0
 8005146:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800514a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800514e:	2b00      	cmp	r3, #0
 8005150:	d107      	bne.n	8005162 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005152:	2200      	movs	r2, #0
 8005154:	2102      	movs	r1, #2
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f9cc 	bl	80054f4 <VL53L0X_SetSequenceStepEnable>
 800515c:	4603      	mov	r3, r0
 800515e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8005162:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005166:	2b00      	cmp	r3, #0
 8005168:	d103      	bne.n	8005172 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2203      	movs	r2, #3
 800516e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005172:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800517a:	f107 0313 	add.w	r3, r7, #19
 800517e:	461a      	mov	r2, r3
 8005180:	2100      	movs	r1, #0
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f99e 	bl	80054c4 <VL53L0X_GetVcselPulsePeriod>
 8005188:	4603      	mov	r3, r0
 800518a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800518e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005192:	2b00      	cmp	r3, #0
 8005194:	d103      	bne.n	800519e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005196:	7cfa      	ldrb	r2, [r7, #19]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800519e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80051a6:	f107 0313 	add.w	r3, r7, #19
 80051aa:	461a      	mov	r2, r3
 80051ac:	2101      	movs	r1, #1
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f988 	bl	80054c4 <VL53L0X_GetVcselPulsePeriod>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80051ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80051c2:	7cfa      	ldrb	r2, [r7, #19]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80051ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80051d2:	f107 030c 	add.w	r3, r7, #12
 80051d6:	461a      	mov	r2, r3
 80051d8:	2103      	movs	r1, #3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f002 fed2 	bl	8007f84 <get_sequence_step_timeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80051e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d103      	bne.n	80051f6 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80051f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80051fe:	f107 030c 	add.w	r3, r7, #12
 8005202:	461a      	mov	r2, r3
 8005204:	2104      	movs	r1, #4
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f002 febc 	bl	8007f84 <get_sequence_step_timeout>
 800520c:	4603      	mov	r3, r0
 800520e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005212:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005216:	2b00      	cmp	r3, #0
 8005218:	d103      	bne.n	8005222 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005222:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005226:	4618      	mov	r0, r3
 8005228:	3770      	adds	r7, #112	; 0x70
 800522a:	46bd      	mov	sp, r7
 800522c:	bdb0      	pop	{r4, r5, r7, pc}
 800522e:	bf00      	nop
 8005230:	2000000c 	.word	0x2000000c

08005234 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800523e:	2300      	movs	r3, #0
 8005240:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	4619      	mov	r1, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f8cc 	bl	80053e4 <VL53L0X_GetDeviceMode>
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d107      	bne.n	8005268 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	3308      	adds	r3, #8
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa94 	bl	800578c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d102      	bne.n	8005276 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2200      	movs	r2, #0
 8005274:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d107      	bne.n	800528e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	3310      	adds	r3, #16
 8005282:	4619      	mov	r1, r3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 faca 	bl	800581e <VL53L0X_GetXTalkCompensationRateMegaCps>
 800528a:	4603      	mov	r3, r0
 800528c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800528e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d107      	bne.n	80052a6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	3314      	adds	r3, #20
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff fcb7 	bl	8004c10 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80052a2:	4603      	mov	r3, r0
 80052a4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80052a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d134      	bne.n	8005318 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	e02a      	b.n	800530a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80052b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d12a      	bne.n	8005312 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	b299      	uxth	r1, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	3308      	adds	r3, #8
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	4413      	add	r3, r2
 80052ca:	3304      	adds	r3, #4
 80052cc:	461a      	mov	r2, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fbea 	bl	8005aa8 <VL53L0X_GetLimitCheckValue>
 80052d4:	4603      	mov	r3, r0
 80052d6:	461a      	mov	r2, r3
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	4313      	orrs	r3, r2
 80052dc:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80052de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d117      	bne.n	8005316 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	b299      	uxth	r1, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	3318      	adds	r3, #24
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	4413      	add	r3, r2
 80052f2:	461a      	mov	r2, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fb51 	bl	800599c <VL53L0X_GetLimitCheckEnable>
 80052fa:	4603      	mov	r3, r0
 80052fc:	461a      	mov	r2, r3
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	4313      	orrs	r3, r2
 8005302:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	3301      	adds	r3, #1
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b05      	cmp	r3, #5
 800530e:	ddd1      	ble.n	80052b4 <VL53L0X_GetDeviceParameters+0x80>
 8005310:	e002      	b.n	8005318 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005312:	bf00      	nop
 8005314:	e000      	b.n	8005318 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8005316:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d107      	bne.n	8005330 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	333c      	adds	r3, #60	; 0x3c
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fc4c 	bl	8005bc4 <VL53L0X_GetWrapAroundCheckEnable>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d107      	bne.n	8005348 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	3304      	adds	r3, #4
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f895 	bl	800546e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	2b15      	cmp	r3, #21
 8005368:	d832      	bhi.n	80053d0 <VL53L0X_SetDeviceMode+0x7c>
 800536a:	a201      	add	r2, pc, #4	; (adr r2, 8005370 <VL53L0X_SetDeviceMode+0x1c>)
 800536c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005370:	080053c9 	.word	0x080053c9
 8005374:	080053c9 	.word	0x080053c9
 8005378:	080053d1 	.word	0x080053d1
 800537c:	080053c9 	.word	0x080053c9
 8005380:	080053d1 	.word	0x080053d1
 8005384:	080053d1 	.word	0x080053d1
 8005388:	080053d1 	.word	0x080053d1
 800538c:	080053d1 	.word	0x080053d1
 8005390:	080053d1 	.word	0x080053d1
 8005394:	080053d1 	.word	0x080053d1
 8005398:	080053d1 	.word	0x080053d1
 800539c:	080053d1 	.word	0x080053d1
 80053a0:	080053d1 	.word	0x080053d1
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053d1 	.word	0x080053d1
 80053b0:	080053d1 	.word	0x080053d1
 80053b4:	080053d1 	.word	0x080053d1
 80053b8:	080053d1 	.word	0x080053d1
 80053bc:	080053d1 	.word	0x080053d1
 80053c0:	080053c9 	.word	0x080053c9
 80053c4:	080053c9 	.word	0x080053c9
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	78fa      	ldrb	r2, [r7, #3]
 80053cc:	741a      	strb	r2, [r3, #16]
		break;
 80053ce:	e001      	b.n	80053d4 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80053d0:	23f8      	movs	r3, #248	; 0xf8
 80053d2:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80053d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	7c1a      	ldrb	r2, [r3, #16]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80053fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005414:	2300      	movs	r3, #0
 8005416:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	2109      	movs	r1, #9
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f004 fb77 	bl	8009b10 <VL53L0X_RdByte>
 8005422:	4603      	mov	r3, r0
 8005424:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	b2da      	uxtb	r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800543c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005452:	2300      	movs	r3, #0
 8005454:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f003 fa26 	bl	80088aa <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800545e:	4603      	mov	r3, r0
 8005460:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8005462:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005478:	2300      	movs	r3, #0
 800547a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f003 faf3 	bl	8008a6a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005484:	4603      	mov	r3, r0
 8005486:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8005488:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
 80054a0:	4613      	mov	r3, r2
 80054a2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054a4:	2300      	movs	r3, #0
 80054a6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80054a8:	78ba      	ldrb	r2, [r7, #2]
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f002 ff3b 	bl	800832a <VL53L0X_set_vcsel_pulse_period>
 80054b4:	4603      	mov	r3, r0
 80054b6:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80054b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	460b      	mov	r3, r1
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80054d6:	7afb      	ldrb	r3, [r7, #11]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	4619      	mov	r1, r3
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f003 f9ad 	bl	800883c <VL53L0X_get_vcsel_pulse_period>
 80054e2:	4603      	mov	r3, r0
 80054e4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80054e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
 8005500:	4613      	mov	r3, r2
 8005502:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005504:	2300      	movs	r3, #0
 8005506:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005510:	f107 030f 	add.w	r3, r7, #15
 8005514:	461a      	mov	r2, r3
 8005516:	2101      	movs	r1, #1
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f004 faf9 	bl	8009b10 <VL53L0X_RdByte>
 800551e:	4603      	mov	r3, r0
 8005520:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8005526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d15a      	bne.n	80055e4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800552e:	78bb      	ldrb	r3, [r7, #2]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d12b      	bne.n	800558c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	2b04      	cmp	r3, #4
 8005538:	d825      	bhi.n	8005586 <VL53L0X_SetSequenceStepEnable+0x92>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005555 	.word	0x08005555
 8005544:	0800555f 	.word	0x0800555f
 8005548:	08005569 	.word	0x08005569
 800554c:	08005573 	.word	0x08005573
 8005550:	0800557d 	.word	0x0800557d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005554:	7dbb      	ldrb	r3, [r7, #22]
 8005556:	f043 0310 	orr.w	r3, r3, #16
 800555a:	75bb      	strb	r3, [r7, #22]
				break;
 800555c:	e043      	b.n	80055e6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800555e:	7dbb      	ldrb	r3, [r7, #22]
 8005560:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005564:	75bb      	strb	r3, [r7, #22]
				break;
 8005566:	e03e      	b.n	80055e6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8005568:	7dbb      	ldrb	r3, [r7, #22]
 800556a:	f043 0304 	orr.w	r3, r3, #4
 800556e:	75bb      	strb	r3, [r7, #22]
				break;
 8005570:	e039      	b.n	80055e6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8005572:	7dbb      	ldrb	r3, [r7, #22]
 8005574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005578:	75bb      	strb	r3, [r7, #22]
				break;
 800557a:	e034      	b.n	80055e6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800557c:	7dbb      	ldrb	r3, [r7, #22]
 800557e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005582:	75bb      	strb	r3, [r7, #22]
				break;
 8005584:	e02f      	b.n	80055e6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005586:	23fc      	movs	r3, #252	; 0xfc
 8005588:	75fb      	strb	r3, [r7, #23]
 800558a:	e02c      	b.n	80055e6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	2b04      	cmp	r3, #4
 8005590:	d825      	bhi.n	80055de <VL53L0X_SetSequenceStepEnable+0xea>
 8005592:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005598:	080055ad 	.word	0x080055ad
 800559c:	080055b7 	.word	0x080055b7
 80055a0:	080055c1 	.word	0x080055c1
 80055a4:	080055cb 	.word	0x080055cb
 80055a8:	080055d5 	.word	0x080055d5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80055ac:	7dbb      	ldrb	r3, [r7, #22]
 80055ae:	f023 0310 	bic.w	r3, r3, #16
 80055b2:	75bb      	strb	r3, [r7, #22]
				break;
 80055b4:	e017      	b.n	80055e6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80055b6:	7dbb      	ldrb	r3, [r7, #22]
 80055b8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80055bc:	75bb      	strb	r3, [r7, #22]
				break;
 80055be:	e012      	b.n	80055e6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80055c0:	7dbb      	ldrb	r3, [r7, #22]
 80055c2:	f023 0304 	bic.w	r3, r3, #4
 80055c6:	75bb      	strb	r3, [r7, #22]
				break;
 80055c8:	e00d      	b.n	80055e6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80055ca:	7dbb      	ldrb	r3, [r7, #22]
 80055cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d0:	75bb      	strb	r3, [r7, #22]
				break;
 80055d2:	e008      	b.n	80055e6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80055d4:	7dbb      	ldrb	r3, [r7, #22]
 80055d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055da:	75bb      	strb	r3, [r7, #22]
				break;
 80055dc:	e003      	b.n	80055e6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80055de:	23fc      	movs	r3, #252	; 0xfc
 80055e0:	75fb      	strb	r3, [r7, #23]
 80055e2:	e000      	b.n	80055e6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80055e4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	7dba      	ldrb	r2, [r7, #22]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d01e      	beq.n	800562c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80055ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d107      	bne.n	8005606 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80055f6:	7dbb      	ldrb	r3, [r7, #22]
 80055f8:	461a      	mov	r2, r3
 80055fa:	2101      	movs	r1, #1
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f004 fa05 	bl	8009a0c <VL53L0X_WrByte>
 8005602:	4603      	mov	r3, r0
 8005604:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005606:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	7dba      	ldrb	r2, [r7, #22]
 8005612:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8005616:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005624:	6939      	ldr	r1, [r7, #16]
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff ff0e 	bl	8005448 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800562c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	72fb      	strb	r3, [r7, #11]
 8005646:	4613      	mov	r3, r2
 8005648:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800564a:	2300      	movs	r3, #0
 800564c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005654:	7afb      	ldrb	r3, [r7, #11]
 8005656:	2b04      	cmp	r3, #4
 8005658:	d836      	bhi.n	80056c8 <sequence_step_enabled+0x90>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <sequence_step_enabled+0x28>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	08005675 	.word	0x08005675
 8005664:	08005687 	.word	0x08005687
 8005668:	08005699 	.word	0x08005699
 800566c:	080056ab 	.word	0x080056ab
 8005670:	080056bd 	.word	0x080056bd
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005674:	7abb      	ldrb	r3, [r7, #10]
 8005676:	111b      	asrs	r3, r3, #4
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	b2da      	uxtb	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	701a      	strb	r2, [r3, #0]
		break;
 8005684:	e022      	b.n	80056cc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005686:	7abb      	ldrb	r3, [r7, #10]
 8005688:	10db      	asrs	r3, r3, #3
 800568a:	b2db      	uxtb	r3, r3
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	b2da      	uxtb	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	701a      	strb	r2, [r3, #0]
		break;
 8005696:	e019      	b.n	80056cc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005698:	7abb      	ldrb	r3, [r7, #10]
 800569a:	109b      	asrs	r3, r3, #2
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	701a      	strb	r2, [r3, #0]
		break;
 80056a8:	e010      	b.n	80056cc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80056aa:	7abb      	ldrb	r3, [r7, #10]
 80056ac:	119b      	asrs	r3, r3, #6
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	701a      	strb	r2, [r3, #0]
		break;
 80056ba:	e007      	b.n	80056cc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80056bc:	7abb      	ldrb	r3, [r7, #10]
 80056be:	09db      	lsrs	r3, r3, #7
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	701a      	strb	r2, [r3, #0]
		break;
 80056c6:	e001      	b.n	80056cc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80056c8:	23fc      	movs	r3, #252	; 0xfc
 80056ca:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80056cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80056ee:	f107 030e 	add.w	r3, r7, #14
 80056f2:	461a      	mov	r2, r3
 80056f4:	2101      	movs	r1, #1
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f004 fa0a 	bl	8009b10 <VL53L0X_RdByte>
 80056fc:	4603      	mov	r3, r0
 80056fe:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d107      	bne.n	8005718 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8005708:	7bba      	ldrb	r2, [r7, #14]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2100      	movs	r1, #0
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff ff92 	bl	8005638 <sequence_step_enabled>
 8005714:	4603      	mov	r3, r0
 8005716:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d108      	bne.n	8005732 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8005720:	7bba      	ldrb	r2, [r7, #14]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	3302      	adds	r3, #2
 8005726:	2101      	movs	r1, #1
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ff85 	bl	8005638 <sequence_step_enabled>
 800572e:	4603      	mov	r3, r0
 8005730:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d108      	bne.n	800574c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800573a:	7bba      	ldrb	r2, [r7, #14]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	3301      	adds	r3, #1
 8005740:	2102      	movs	r1, #2
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff ff78 	bl	8005638 <sequence_step_enabled>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800574c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d108      	bne.n	8005766 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005754:	7bba      	ldrb	r2, [r7, #14]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	3303      	adds	r3, #3
 800575a:	2103      	movs	r1, #3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff ff6b 	bl	8005638 <sequence_step_enabled>
 8005762:	4603      	mov	r3, r0
 8005764:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d108      	bne.n	8005780 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800576e:	7bba      	ldrb	r2, [r7, #14]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	3304      	adds	r3, #4
 8005774:	2104      	movs	r1, #4
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff ff5e 	bl	8005638 <sequence_step_enabled>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005780:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005796:	2300      	movs	r3, #0
 8005798:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800579a:	f107 030c 	add.w	r3, r7, #12
 800579e:	461a      	mov	r2, r3
 80057a0:	21f8      	movs	r1, #248	; 0xf8
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f004 f9de 	bl	8009b64 <VL53L0X_RdWord>
 80057a8:	4603      	mov	r3, r0
 80057aa:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80057ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d108      	bne.n	80057c6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80057b4:	f107 0308 	add.w	r3, r7, #8
 80057b8:	461a      	mov	r2, r3
 80057ba:	2104      	movs	r1, #4
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f004 fa09 	bl	8009bd4 <VL53L0X_RdDWord>
 80057c2:	4603      	mov	r3, r0
 80057c4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80057c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10c      	bne.n	80057e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80057ce:	89bb      	ldrh	r3, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	89ba      	ldrh	r2, [r7, #12]
 80057d8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057fe:	2300      	movs	r3, #0
 8005800:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	7f1b      	ldrb	r3, [r3, #28]
 8005806:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	7bba      	ldrb	r2, [r7, #14]
 800580c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800580e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b086      	sub	sp, #24
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005828:	2300      	movs	r3, #0
 800582a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800582c:	f107 030e 	add.w	r3, r7, #14
 8005830:	461a      	mov	r2, r3
 8005832:	2120      	movs	r1, #32
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f004 f995 	bl	8009b64 <VL53L0X_RdWord>
 800583a:	4603      	mov	r3, r0
 800583c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800583e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d118      	bne.n	8005878 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8005846:	89fb      	ldrh	r3, [r7, #14]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d109      	bne.n	8005860 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	771a      	strb	r2, [r3, #28]
 800585e:	e00b      	b.n	8005878 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005860:	89fb      	ldrh	r3, [r7, #14]
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005878:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	807b      	strh	r3, [r7, #2]
 8005890:	4613      	mov	r3, r2
 8005892:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005894:	2300      	movs	r3, #0
 8005896:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80058a4:	887b      	ldrh	r3, [r7, #2]
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	d902      	bls.n	80058b0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80058aa:	23fc      	movs	r3, #252	; 0xfc
 80058ac:	75fb      	strb	r3, [r7, #23]
 80058ae:	e05b      	b.n	8005968 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80058b0:	787b      	ldrb	r3, [r7, #1]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80058be:	2301      	movs	r3, #1
 80058c0:	73bb      	strb	r3, [r7, #14]
 80058c2:	e00a      	b.n	80058da <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058c4:	887b      	ldrh	r3, [r7, #2]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	330c      	adds	r3, #12
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80058d6:	2301      	movs	r3, #1
 80058d8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80058da:	887b      	ldrh	r3, [r7, #2]
 80058dc:	2b05      	cmp	r3, #5
 80058de:	d841      	bhi.n	8005964 <VL53L0X_SetLimitCheckEnable+0xe0>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	08005901 	.word	0x08005901
 80058ec:	0800590b 	.word	0x0800590b
 80058f0:	08005921 	.word	0x08005921
 80058f4:	0800592b 	.word	0x0800592b
 80058f8:	08005935 	.word	0x08005935
 80058fc:	0800594d 	.word	0x0800594d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	7bfa      	ldrb	r2, [r7, #15]
 8005904:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8005908:	e02e      	b.n	8005968 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800590e:	b29b      	uxth	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	2144      	movs	r1, #68	; 0x44
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f004 f89d 	bl	8009a54 <VL53L0X_WrWord>
 800591a:	4603      	mov	r3, r0
 800591c:	75fb      	strb	r3, [r7, #23]

			break;
 800591e:	e023      	b.n	8005968 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	7bfa      	ldrb	r2, [r7, #15]
 8005924:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8005928:	e01e      	b.n	8005968 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	7bfa      	ldrb	r2, [r7, #15]
 800592e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005932:	e019      	b.n	8005968 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005934:	7bbb      	ldrb	r3, [r7, #14]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800593a:	7b7b      	ldrb	r3, [r7, #13]
 800593c:	22fe      	movs	r2, #254	; 0xfe
 800593e:	2160      	movs	r1, #96	; 0x60
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f004 f8b1 	bl	8009aa8 <VL53L0X_UpdateByte>
 8005946:	4603      	mov	r3, r0
 8005948:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800594a:	e00d      	b.n	8005968 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005952:	7b7b      	ldrb	r3, [r7, #13]
 8005954:	22ef      	movs	r2, #239	; 0xef
 8005956:	2160      	movs	r1, #96	; 0x60
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f004 f8a5 	bl	8009aa8 <VL53L0X_UpdateByte>
 800595e:	4603      	mov	r3, r0
 8005960:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005962:	e001      	b.n	8005968 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005964:	23fc      	movs	r3, #252	; 0xfc
 8005966:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10f      	bne.n	8005990 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005970:	787b      	ldrb	r3, [r7, #1]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005976:	887b      	ldrh	r3, [r7, #2]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4413      	add	r3, r2
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005982:	e005      	b.n	8005990 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005984:	887b      	ldrh	r3, [r7, #2]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4413      	add	r3, r2
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005990:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	460b      	mov	r3, r1
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80059ae:	897b      	ldrh	r3, [r7, #10]
 80059b0:	2b05      	cmp	r3, #5
 80059b2:	d905      	bls.n	80059c0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80059b4:	23fc      	movs	r3, #252	; 0xfc
 80059b6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	e008      	b.n	80059d2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80059c0:	897b      	ldrh	r3, [r7, #10]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059ca:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	7dba      	ldrb	r2, [r7, #22]
 80059d0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80059d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	460b      	mov	r3, r1
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059f2:	2300      	movs	r3, #0
 80059f4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80059f6:	897b      	ldrh	r3, [r7, #10]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a00:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005a02:	7dbb      	ldrb	r3, [r7, #22]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d107      	bne.n	8005a18 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a08:	897b      	ldrh	r3, [r7, #10]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	330c      	adds	r3, #12
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	e040      	b.n	8005a9a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005a18:	897b      	ldrh	r3, [r7, #10]
 8005a1a:	2b05      	cmp	r3, #5
 8005a1c:	d830      	bhi.n	8005a80 <VL53L0X_SetLimitCheckValue+0x9c>
 8005a1e:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <VL53L0X_SetLimitCheckValue+0x40>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a3d 	.word	0x08005a3d
 8005a28:	08005a45 	.word	0x08005a45
 8005a2c:	08005a5b 	.word	0x08005a5b
 8005a30:	08005a63 	.word	0x08005a63
 8005a34:	08005a6b 	.word	0x08005a6b
 8005a38:	08005a6b 	.word	0x08005a6b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005a42:	e01f      	b.n	8005a84 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2144      	movs	r1, #68	; 0x44
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f004 f800 	bl	8009a54 <VL53L0X_WrWord>
 8005a54:	4603      	mov	r3, r0
 8005a56:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005a58:	e014      	b.n	8005a84 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005a60:	e010      	b.n	8005a84 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005a68:	e00c      	b.n	8005a84 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	2164      	movs	r1, #100	; 0x64
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f003 ffed 	bl	8009a54 <VL53L0X_WrWord>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005a7e:	e001      	b.n	8005a84 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005a80:	23fc      	movs	r3, #252	; 0xfc
 8005a82:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a8c:	897b      	ldrh	r3, [r7, #10]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	330c      	adds	r3, #12
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop

08005aa8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005abe:	897b      	ldrh	r3, [r7, #10]
 8005ac0:	2b05      	cmp	r3, #5
 8005ac2:	d847      	bhi.n	8005b54 <VL53L0X_GetLimitCheckValue+0xac>
 8005ac4:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <VL53L0X_GetLimitCheckValue+0x24>)
 8005ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aca:	bf00      	nop
 8005acc:	08005ae5 	.word	0x08005ae5
 8005ad0:	08005af1 	.word	0x08005af1
 8005ad4:	08005b17 	.word	0x08005b17
 8005ad8:	08005b23 	.word	0x08005b23
 8005adc:	08005b2f 	.word	0x08005b2f
 8005ae0:	08005b2f 	.word	0x08005b2f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	77bb      	strb	r3, [r7, #30]
		break;
 8005aee:	e033      	b.n	8005b58 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005af0:	f107 0316 	add.w	r3, r7, #22
 8005af4:	461a      	mov	r2, r3
 8005af6:	2144      	movs	r1, #68	; 0x44
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f004 f833 	bl	8009b64 <VL53L0X_RdWord>
 8005afe:	4603      	mov	r3, r0
 8005b00:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005b02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005b0a:	8afb      	ldrh	r3, [r7, #22]
 8005b0c:	025b      	lsls	r3, r3, #9
 8005b0e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005b10:	2301      	movs	r3, #1
 8005b12:	77bb      	strb	r3, [r7, #30]
		break;
 8005b14:	e020      	b.n	8005b58 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	77bb      	strb	r3, [r7, #30]
		break;
 8005b20:	e01a      	b.n	8005b58 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	77bb      	strb	r3, [r7, #30]
		break;
 8005b2c:	e014      	b.n	8005b58 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005b2e:	f107 0316 	add.w	r3, r7, #22
 8005b32:	461a      	mov	r2, r3
 8005b34:	2164      	movs	r1, #100	; 0x64
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f004 f814 	bl	8009b64 <VL53L0X_RdWord>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005b40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005b48:	8afb      	ldrh	r3, [r7, #22]
 8005b4a:	025b      	lsls	r3, r3, #9
 8005b4c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	77bb      	strb	r3, [r7, #30]
		break;
 8005b52:	e001      	b.n	8005b58 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b54:	23fc      	movs	r3, #252	; 0xfc
 8005b56:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d12a      	bne.n	8005bb6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005b60:	7fbb      	ldrb	r3, [r7, #30]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d124      	bne.n	8005bb0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d110      	bne.n	8005b8e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005b6c:	897b      	ldrh	r3, [r7, #10]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	330c      	adds	r3, #12
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005b80:	897b      	ldrh	r3, [r7, #10]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005b8c:	e013      	b.n	8005bb6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005b94:	897b      	ldrh	r3, [r7, #10]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005ba2:	897b      	ldrh	r3, [r7, #10]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005bae:	e002      	b.n	8005bb6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005bb6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop

08005bc4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005bd2:	f107 030e 	add.w	r3, r7, #14
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	2101      	movs	r1, #1
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f003 ff98 	bl	8009b10 <VL53L0X_RdByte>
 8005be0:	4603      	mov	r3, r0
 8005be2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10e      	bne.n	8005c0a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005bec:	7bba      	ldrb	r2, [r7, #14]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8005bf4:	7bbb      	ldrb	r3, [r7, #14]
 8005bf6:	b25b      	sxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	da03      	bge.n	8005c04 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	e002      	b.n	8005c0a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781a      	ldrb	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c30:	2300      	movs	r3, #0
 8005c32:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005c34:	f107 030e 	add.w	r3, r7, #14
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fbd2 	bl	80053e4 <VL53L0X_GetDeviceMode>
 8005c40:	4603      	mov	r3, r0
 8005c42:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d107      	bne.n	8005c5c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005c4c:	7bbb      	ldrb	r3, [r7, #14]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f898 	bl	8005d88 <VL53L0X_StartMeasurement>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 fb3f 	bl	80072e8 <VL53L0X_measurement_poll_for_completion>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005c76:	7bbb      	ldrb	r3, [r7, #14]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d103      	bne.n	8005c84 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2203      	movs	r2, #3
 8005c80:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f001 fae1 	bl	800726e <VL53L0X_perform_ref_calibration>
 8005cac:	4603      	mov	r3, r0
 8005cae:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005cb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005cd2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005cd4:	7dbb      	ldrb	r3, [r7, #22]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d005      	beq.n	8005ce6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005cda:	7dbb      	ldrb	r3, [r7, #22]
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d002      	beq.n	8005ce6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005ce0:	7dbb      	ldrb	r3, [r7, #22]
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d147      	bne.n	8005d76 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005ce6:	f107 030c 	add.w	r3, r7, #12
 8005cea:	f107 0210 	add.w	r2, r7, #16
 8005cee:	2101      	movs	r1, #1
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fbc3 	bl	800647c <VL53L0X_GetInterruptThresholds>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005d00:	d803      	bhi.n	8005d0a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005d02:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005d04:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005d08:	d935      	bls.n	8005d76 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d131      	bne.n	8005d76 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d006      	beq.n	8005d26 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005d18:	491a      	ldr	r1, [pc, #104]	; (8005d84 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f002 ff56 	bl	8008bcc <VL53L0X_load_tuning_settings>
 8005d20:	4603      	mov	r3, r0
 8005d22:	75fb      	strb	r3, [r7, #23]
 8005d24:	e027      	b.n	8005d76 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005d26:	2204      	movs	r2, #4
 8005d28:	21ff      	movs	r1, #255	; 0xff
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f003 fe6e 	bl	8009a0c <VL53L0X_WrByte>
 8005d30:	4603      	mov	r3, r0
 8005d32:	461a      	mov	r2, r3
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2170      	movs	r1, #112	; 0x70
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f003 fe64 	bl	8009a0c <VL53L0X_WrByte>
 8005d44:	4603      	mov	r3, r0
 8005d46:	461a      	mov	r2, r3
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005d4e:	2200      	movs	r2, #0
 8005d50:	21ff      	movs	r1, #255	; 0xff
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f003 fe5a 	bl	8009a0c <VL53L0X_WrByte>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005d62:	2200      	movs	r2, #0
 8005d64:	2180      	movs	r1, #128	; 0x80
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f003 fe50 	bl	8009a0c <VL53L0X_WrByte>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	461a      	mov	r2, r3
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005d76:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000100 	.word	0x20000100

08005d88 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005d98:	f107 030e 	add.w	r3, r7, #14
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff fb20 	bl	80053e4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005da4:	2201      	movs	r2, #1
 8005da6:	2180      	movs	r1, #128	; 0x80
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f003 fe2f 	bl	8009a0c <VL53L0X_WrByte>
 8005dae:	4603      	mov	r3, r0
 8005db0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005db2:	2201      	movs	r2, #1
 8005db4:	21ff      	movs	r1, #255	; 0xff
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f003 fe28 	bl	8009a0c <VL53L0X_WrByte>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f003 fe21 	bl	8009a0c <VL53L0X_WrByte>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	2191      	movs	r1, #145	; 0x91
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f003 fe17 	bl	8009a0c <VL53L0X_WrByte>
 8005dde:	4603      	mov	r3, r0
 8005de0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005de2:	2201      	movs	r2, #1
 8005de4:	2100      	movs	r1, #0
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f003 fe10 	bl	8009a0c <VL53L0X_WrByte>
 8005dec:	4603      	mov	r3, r0
 8005dee:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005df0:	2200      	movs	r2, #0
 8005df2:	21ff      	movs	r1, #255	; 0xff
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f003 fe09 	bl	8009a0c <VL53L0X_WrByte>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2180      	movs	r1, #128	; 0x80
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f003 fe02 	bl	8009a0c <VL53L0X_WrByte>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d037      	beq.n	8005e82 <VL53L0X_StartMeasurement+0xfa>
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d04f      	beq.n	8005eb6 <VL53L0X_StartMeasurement+0x12e>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d167      	bne.n	8005eea <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f003 fdf4 	bl	8009a0c <VL53L0X_WrByte>
 8005e24:	4603      	mov	r3, r0
 8005e26:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d15d      	bne.n	8005ef0 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d008      	beq.n	8005e50 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8005e3e:	f107 030d 	add.w	r3, r7, #13
 8005e42:	461a      	mov	r2, r3
 8005e44:	2100      	movs	r1, #0
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f003 fe62 	bl	8009b10 <VL53L0X_RdByte>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	3301      	adds	r3, #1
 8005e54:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005e56:	7b7a      	ldrb	r2, [r7, #13]
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005e5e:	7bfa      	ldrb	r2, [r7, #15]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d107      	bne.n	8005e74 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8005e64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d103      	bne.n	8005e74 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e72:	d3e1      	bcc.n	8005e38 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e7a:	d339      	bcc.n	8005ef0 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005e7c:	23f9      	movs	r3, #249	; 0xf9
 8005e7e:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005e80:	e036      	b.n	8005ef0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d105      	bne.n	8005e96 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff ff15 	bl	8005cbc <VL53L0X_CheckAndLoadInterruptSettings>
 8005e92:	4603      	mov	r3, r0
 8005e94:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005e96:	2202      	movs	r2, #2
 8005e98:	2100      	movs	r1, #0
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f003 fdb6 	bl	8009a0c <VL53L0X_WrByte>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005ea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d123      	bne.n	8005ef4 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2204      	movs	r2, #4
 8005eb0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005eb4:	e01e      	b.n	8005ef4 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d105      	bne.n	8005eca <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7ff fefb 	bl	8005cbc <VL53L0X_CheckAndLoadInterruptSettings>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005eca:	2204      	movs	r2, #4
 8005ecc:	2100      	movs	r1, #0
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f003 fd9c 	bl	8009a0c <VL53L0X_WrByte>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10b      	bne.n	8005ef8 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005ee8:	e006      	b.n	8005ef8 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005eea:	23f8      	movs	r3, #248	; 0xf8
 8005eec:	75fb      	strb	r3, [r7, #23]
 8005eee:	e004      	b.n	8005efa <VL53L0X_StartMeasurement+0x172>
		break;
 8005ef0:	bf00      	nop
 8005ef2:	e002      	b.n	8005efa <VL53L0X_StartMeasurement+0x172>
		break;
 8005ef4:	bf00      	nop
 8005ef6:	e000      	b.n	8005efa <VL53L0X_StartMeasurement+0x172>
		break;
 8005ef8:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f10:	2300      	movs	r3, #0
 8005f12:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005f1a:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005f1c:	7bbb      	ldrb	r3, [r7, #14]
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d112      	bne.n	8005f48 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005f22:	f107 0308 	add.w	r3, r7, #8
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fb1d 	bl	8006568 <VL53L0X_GetInterruptMaskStatus>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d103      	bne.n	8005f40 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	e01c      	b.n	8005f7a <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	e018      	b.n	8005f7a <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005f48:	f107 030d 	add.w	r3, r7, #13
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	2114      	movs	r1, #20
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f003 fddd 	bl	8009b10 <VL53L0X_RdByte>
 8005f56:	4603      	mov	r3, r0
 8005f58:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10b      	bne.n	8005f7a <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005f62:	7b7b      	ldrb	r3, [r7, #13]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	e002      	b.n	8005f7a <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005f88:	b5b0      	push	{r4, r5, r7, lr}
 8005f8a:	b096      	sub	sp, #88	; 0x58
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005f98:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f9c:	230c      	movs	r3, #12
 8005f9e:	2114      	movs	r1, #20
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f003 fd07 	bl	80099b4 <VL53L0X_ReadMulti>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005fac:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f040 80d2 	bne.w	800615a <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005fc2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005fde:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	4413      	add	r3, r2
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	025b      	lsls	r3, r3, #9
 8005ff4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ffa:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005ffc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006000:	b29b      	uxth	r3, r3
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	b29a      	uxth	r2, r3
 8006006:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800600a:	b29b      	uxth	r3, r3
 800600c:	4413      	add	r3, r2
 800600e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8006012:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006016:	025b      	lsls	r3, r3, #9
 8006018:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800601e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006022:	b29b      	uxth	r3, r3
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	b29a      	uxth	r2, r3
 8006028:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800602c:	b29b      	uxth	r3, r3
 800602e:	4413      	add	r3, r2
 8006030:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800603a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800603c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006040:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800604a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8006056:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800605c:	d047      	beq.n	80060ee <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800605e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006060:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006064:	fb02 f303 	mul.w	r3, r2, r3
 8006068:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800606c:	4a58      	ldr	r2, [pc, #352]	; (80061d0 <VL53L0X_GetRangingMeasurementData+0x248>)
 800606e:	fb82 1203 	smull	r1, r2, r2, r3
 8006072:	1192      	asrs	r2, r2, #6
 8006074:	17db      	asrs	r3, r3, #31
 8006076:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8006078:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	7f1b      	ldrb	r3, [r3, #28]
 8006086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800608a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800608e:	2b00      	cmp	r3, #0
 8006090:	d02d      	beq.n	80060ee <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006092:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006094:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006098:	fb02 f303 	mul.w	r3, r2, r3
 800609c:	121b      	asrs	r3, r3, #8
 800609e:	461a      	mov	r2, r3
				if ((SignalRate
 80060a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d10d      	bne.n	80060c2 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 80060a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d004      	beq.n	80060b8 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 80060ae:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80060b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80060b6:	e016      	b.n	80060e6 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 80060b8:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80060bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80060c0:	e011      	b.n	80060e6 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80060c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80060c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060c8:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80060cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80060ce:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80060d6:	121b      	asrs	r3, r3, #8
 80060d8:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80060da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060dc:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80060de:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80060e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80060e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80060ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00d      	beq.n	8006112 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80060f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80060fa:	089b      	lsrs	r3, r3, #2
 80060fc:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8006102:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006106:	b2db      	uxtb	r3, r3
 8006108:	019b      	lsls	r3, r3, #6
 800610a:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	75da      	strb	r2, [r3, #23]
 8006110:	e006      	b.n	8006120 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006118:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2200      	movs	r2, #0
 800611e:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006120:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006124:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006128:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	4613      	mov	r3, r2
 8006134:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f003 f9f0 	bl	800951c <VL53L0X_get_pal_range_status>
 800613c:	4603      	mov	r3, r0
 800613e:	461a      	mov	r2, r3
 8006140:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006144:	4313      	orrs	r3, r2
 8006146:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800614a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800614e:	2b00      	cmp	r3, #0
 8006150:	d103      	bne.n	800615a <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006152:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800615a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800615e:	2b00      	cmp	r3, #0
 8006160:	d12f      	bne.n	80061c2 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f107 040c 	add.w	r4, r7, #12
 8006168:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800616c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800616e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006170:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006174:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800617c:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800618a:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8006190:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8006196:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800619c:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80061a2:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80061a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80061b2:	f107 050c 	add.w	r5, r7, #12
 80061b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80061be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80061c2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3750      	adds	r7, #80	; 0x50
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bdb0      	pop	{r4, r5, r7, pc}
 80061ce:	bf00      	nop
 80061d0:	10624dd3 	.word	0x10624dd3

080061d4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80061e2:	2100      	movs	r1, #0
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff f8b5 	bl	8005354 <VL53L0X_SetDeviceMode>
 80061ea:	4603      	mov	r3, r0
 80061ec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80061ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff fd16 	bl	8005c28 <VL53L0X_PerformSingleMeasurement>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d105      	bne.n	8006214 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff febc 	bl	8005f88 <VL53L0X_GetRangingMeasurementData>
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d105      	bne.n	8006228 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800621c:	2100      	movs	r1, #0
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f962 	bl	80064e8 <VL53L0X_ClearInterruptMask>
 8006224:	4603      	mov	r3, r0
 8006226:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006228:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	4608      	mov	r0, r1
 800623e:	4611      	mov	r1, r2
 8006240:	461a      	mov	r2, r3
 8006242:	4603      	mov	r3, r0
 8006244:	70fb      	strb	r3, [r7, #3]
 8006246:	460b      	mov	r3, r1
 8006248:	70bb      	strb	r3, [r7, #2]
 800624a:	4613      	mov	r3, r2
 800624c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8006252:	78fb      	ldrb	r3, [r7, #3]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006258:	23f6      	movs	r3, #246	; 0xf6
 800625a:	73fb      	strb	r3, [r7, #15]
 800625c:	e107      	b.n	800646e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800625e:	78bb      	ldrb	r3, [r7, #2]
 8006260:	2b14      	cmp	r3, #20
 8006262:	d110      	bne.n	8006286 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006264:	7e3b      	ldrb	r3, [r7, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d102      	bne.n	8006270 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800626a:	2310      	movs	r3, #16
 800626c:	73bb      	strb	r3, [r7, #14]
 800626e:	e001      	b.n	8006274 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006270:	2301      	movs	r3, #1
 8006272:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	461a      	mov	r2, r3
 8006278:	2184      	movs	r1, #132	; 0x84
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f003 fbc6 	bl	8009a0c <VL53L0X_WrByte>
 8006280:	4603      	mov	r3, r0
 8006282:	73fb      	strb	r3, [r7, #15]
 8006284:	e0f3      	b.n	800646e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006286:	78bb      	ldrb	r3, [r7, #2]
 8006288:	2b15      	cmp	r3, #21
 800628a:	f040 8097 	bne.w	80063bc <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800628e:	2201      	movs	r2, #1
 8006290:	21ff      	movs	r1, #255	; 0xff
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f003 fbba 	bl	8009a0c <VL53L0X_WrByte>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	4313      	orrs	r3, r2
 80062a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80062a2:	2200      	movs	r2, #0
 80062a4:	2100      	movs	r1, #0
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f003 fbb0 	bl	8009a0c <VL53L0X_WrByte>
 80062ac:	4603      	mov	r3, r0
 80062ae:	461a      	mov	r2, r3
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80062b6:	2200      	movs	r2, #0
 80062b8:	21ff      	movs	r1, #255	; 0xff
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f003 fba6 	bl	8009a0c <VL53L0X_WrByte>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80062ca:	2201      	movs	r2, #1
 80062cc:	2180      	movs	r1, #128	; 0x80
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f003 fb9c 	bl	8009a0c <VL53L0X_WrByte>
 80062d4:	4603      	mov	r3, r0
 80062d6:	461a      	mov	r2, r3
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	4313      	orrs	r3, r2
 80062dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80062de:	2202      	movs	r2, #2
 80062e0:	2185      	movs	r1, #133	; 0x85
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f003 fb92 	bl	8009a0c <VL53L0X_WrByte>
 80062e8:	4603      	mov	r3, r0
 80062ea:	461a      	mov	r2, r3
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80062f2:	2204      	movs	r2, #4
 80062f4:	21ff      	movs	r1, #255	; 0xff
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f003 fb88 	bl	8009a0c <VL53L0X_WrByte>
 80062fc:	4603      	mov	r3, r0
 80062fe:	461a      	mov	r2, r3
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	4313      	orrs	r3, r2
 8006304:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8006306:	2200      	movs	r2, #0
 8006308:	21cd      	movs	r1, #205	; 0xcd
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f003 fb7e 	bl	8009a0c <VL53L0X_WrByte>
 8006310:	4603      	mov	r3, r0
 8006312:	461a      	mov	r2, r3
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	4313      	orrs	r3, r2
 8006318:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800631a:	2211      	movs	r2, #17
 800631c:	21cc      	movs	r1, #204	; 0xcc
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f003 fb74 	bl	8009a0c <VL53L0X_WrByte>
 8006324:	4603      	mov	r3, r0
 8006326:	461a      	mov	r2, r3
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	4313      	orrs	r3, r2
 800632c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800632e:	2207      	movs	r2, #7
 8006330:	21ff      	movs	r1, #255	; 0xff
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f003 fb6a 	bl	8009a0c <VL53L0X_WrByte>
 8006338:	4603      	mov	r3, r0
 800633a:	461a      	mov	r2, r3
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	4313      	orrs	r3, r2
 8006340:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006342:	2200      	movs	r2, #0
 8006344:	21be      	movs	r1, #190	; 0xbe
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f003 fb60 	bl	8009a0c <VL53L0X_WrByte>
 800634c:	4603      	mov	r3, r0
 800634e:	461a      	mov	r2, r3
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	4313      	orrs	r3, r2
 8006354:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8006356:	2206      	movs	r2, #6
 8006358:	21ff      	movs	r1, #255	; 0xff
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f003 fb56 	bl	8009a0c <VL53L0X_WrByte>
 8006360:	4603      	mov	r3, r0
 8006362:	461a      	mov	r2, r3
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	4313      	orrs	r3, r2
 8006368:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800636a:	2209      	movs	r2, #9
 800636c:	21cc      	movs	r1, #204	; 0xcc
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f003 fb4c 	bl	8009a0c <VL53L0X_WrByte>
 8006374:	4603      	mov	r3, r0
 8006376:	461a      	mov	r2, r3
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	4313      	orrs	r3, r2
 800637c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800637e:	2200      	movs	r2, #0
 8006380:	21ff      	movs	r1, #255	; 0xff
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f003 fb42 	bl	8009a0c <VL53L0X_WrByte>
 8006388:	4603      	mov	r3, r0
 800638a:	461a      	mov	r2, r3
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	4313      	orrs	r3, r2
 8006390:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006392:	2201      	movs	r2, #1
 8006394:	21ff      	movs	r1, #255	; 0xff
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f003 fb38 	bl	8009a0c <VL53L0X_WrByte>
 800639c:	4603      	mov	r3, r0
 800639e:	461a      	mov	r2, r3
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80063a6:	2200      	movs	r2, #0
 80063a8:	2100      	movs	r1, #0
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f003 fb2e 	bl	8009a0c <VL53L0X_WrByte>
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	73fb      	strb	r3, [r7, #15]
 80063ba:	e058      	b.n	800646e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80063bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d121      	bne.n	8006408 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80063c4:	787b      	ldrb	r3, [r7, #1]
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d81b      	bhi.n	8006402 <VL53L0X_SetGpioConfig+0x1ce>
 80063ca:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <VL53L0X_SetGpioConfig+0x19c>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	080063e5 	.word	0x080063e5
 80063d4:	080063eb 	.word	0x080063eb
 80063d8:	080063f1 	.word	0x080063f1
 80063dc:	080063f7 	.word	0x080063f7
 80063e0:	080063fd 	.word	0x080063fd
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73bb      	strb	r3, [r7, #14]
				break;
 80063e8:	e00f      	b.n	800640a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80063ea:	2301      	movs	r3, #1
 80063ec:	73bb      	strb	r3, [r7, #14]
				break;
 80063ee:	e00c      	b.n	800640a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80063f0:	2302      	movs	r3, #2
 80063f2:	73bb      	strb	r3, [r7, #14]
				break;
 80063f4:	e009      	b.n	800640a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80063f6:	2303      	movs	r3, #3
 80063f8:	73bb      	strb	r3, [r7, #14]
				break;
 80063fa:	e006      	b.n	800640a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80063fc:	2304      	movs	r3, #4
 80063fe:	73bb      	strb	r3, [r7, #14]
				break;
 8006400:	e003      	b.n	800640a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8006402:	23f5      	movs	r3, #245	; 0xf5
 8006404:	73fb      	strb	r3, [r7, #15]
 8006406:	e000      	b.n	800640a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8006408:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800640a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d107      	bne.n	8006422 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	461a      	mov	r2, r3
 8006416:	210a      	movs	r1, #10
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f003 faf7 	bl	8009a0c <VL53L0X_WrByte>
 800641e:	4603      	mov	r3, r0
 8006420:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8006422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10f      	bne.n	800644a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800642a:	7e3b      	ldrb	r3, [r7, #24]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	73bb      	strb	r3, [r7, #14]
 8006434:	e001      	b.n	800643a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8006436:	2310      	movs	r3, #16
 8006438:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	22ef      	movs	r2, #239	; 0xef
 800643e:	2184      	movs	r1, #132	; 0x84
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f003 fb31 	bl	8009aa8 <VL53L0X_UpdateByte>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800644a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d103      	bne.n	800645a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	787a      	ldrb	r2, [r7, #1]
 8006456:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800645a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d105      	bne.n	800646e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006462:	2100      	movs	r1, #0
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f83f 	bl	80064e8 <VL53L0X_ClearInterruptMask>
 800646a:	4603      	mov	r3, r0
 800646c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800646e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop

0800647c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	460b      	mov	r3, r1
 800648a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800648c:	2300      	movs	r3, #0
 800648e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006490:	f107 0314 	add.w	r3, r7, #20
 8006494:	461a      	mov	r2, r3
 8006496:	210e      	movs	r1, #14
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f003 fb63 	bl	8009b64 <VL53L0X_RdWord>
 800649e:	4603      	mov	r3, r0
 80064a0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80064a2:	8abb      	ldrh	r3, [r7, #20]
 80064a4:	045b      	lsls	r3, r3, #17
 80064a6:	461a      	mov	r2, r3
 80064a8:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <VL53L0X_GetInterruptThresholds+0x68>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80064b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10f      	bne.n	80064d8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80064b8:	f107 0314 	add.w	r3, r7, #20
 80064bc:	461a      	mov	r2, r3
 80064be:	210c      	movs	r1, #12
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f003 fb4f 	bl	8009b64 <VL53L0X_RdWord>
 80064c6:	4603      	mov	r3, r0
 80064c8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80064ca:	8abb      	ldrh	r3, [r7, #20]
 80064cc:	045b      	lsls	r3, r3, #17
 80064ce:	461a      	mov	r2, r3
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <VL53L0X_GetInterruptThresholds+0x68>)
 80064d2:	4013      	ands	r3, r2
		*pThresholdHigh =
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	1ffe0000 	.word	0x1ffe0000

080064e8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80064fa:	2201      	movs	r2, #1
 80064fc:	210b      	movs	r1, #11
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f003 fa84 	bl	8009a0c <VL53L0X_WrByte>
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8006508:	2200      	movs	r2, #0
 800650a:	210b      	movs	r1, #11
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f003 fa7d 	bl	8009a0c <VL53L0X_WrByte>
 8006512:	4603      	mov	r3, r0
 8006514:	461a      	mov	r2, r3
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	4313      	orrs	r3, r2
 800651a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800651c:	f107 030d 	add.w	r3, r7, #13
 8006520:	461a      	mov	r2, r3
 8006522:	2113      	movs	r1, #19
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f003 faf3 	bl	8009b10 <VL53L0X_RdByte>
 800652a:	4603      	mov	r3, r0
 800652c:	461a      	mov	r2, r3
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	4313      	orrs	r3, r2
 8006532:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	3301      	adds	r3, #1
 8006538:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800653a:	7b7b      	ldrb	r3, [r7, #13]
 800653c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d803      	bhi.n	8006552 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800654a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0d3      	beq.n	80064fa <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006552:	7bbb      	ldrb	r3, [r7, #14]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006558:	23f4      	movs	r3, #244	; 0xf4
 800655a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800655c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006576:	f107 030e 	add.w	r3, r7, #14
 800657a:	461a      	mov	r2, r3
 800657c:	2113      	movs	r1, #19
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f003 fac6 	bl	8009b10 <VL53L0X_RdByte>
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	f003 0207 	and.w	r2, r3, #7
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006592:	7bbb      	ldrb	r3, [r7, #14]
 8006594:	f003 0318 	and.w	r3, r3, #24
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800659c:	23fa      	movs	r3, #250	; 0xfa
 800659e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80065a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fa03 	bl	80069cc <VL53L0X_perform_ref_spad_management>
 80065c6:	4603      	mov	r3, r0
 80065c8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80065ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80065e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80065e8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80065ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065ee:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80065f0:	f107 0308 	add.w	r3, r7, #8
 80065f4:	461a      	mov	r2, r3
 80065f6:	2128      	movs	r1, #40	; 0x28
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f003 fab3 	bl	8009b64 <VL53L0X_RdWord>
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8006602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d11e      	bne.n	8006648 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800660a:	893b      	ldrh	r3, [r7, #8]
 800660c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006610:	b29b      	uxth	r3, r3
 8006612:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006614:	893b      	ldrh	r3, [r7, #8]
 8006616:	461a      	mov	r2, r3
 8006618:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800661c:	429a      	cmp	r2, r3
 800661e:	dd0b      	ble.n	8006638 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8006620:	893a      	ldrh	r2, [r7, #8]
 8006622:	897b      	ldrh	r3, [r7, #10]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	b29b      	uxth	r3, r3
 8006628:	b21b      	sxth	r3, r3
 800662a:	461a      	mov	r2, r3
					* 250;
 800662c:	23fa      	movs	r3, #250	; 0xfa
 800662e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	e007      	b.n	8006648 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006638:	893b      	ldrh	r3, [r7, #8]
 800663a:	b21b      	sxth	r3, r3
 800663c:	461a      	mov	r2, r3
 800663e:	23fa      	movs	r3, #250	; 0xfa
 8006640:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006654:	b480      	push	{r7}
 8006656:	b08b      	sub	sp, #44	; 0x2c
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8006662:	2308      	movs	r3, #8
 8006664:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	f04f 32ff 	mov.w	r2, #4294967295
 8006670:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	fbb2 f3f3 	udiv	r3, r2, r3
 800667a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	fbb3 f2f2 	udiv	r2, r3, r2
 8006684:	69b9      	ldr	r1, [r7, #24]
 8006686:	fb01 f202 	mul.w	r2, r1, r2
 800668a:	1a9b      	subs	r3, r3, r2
 800668c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
 8006692:	e030      	b.n	80066f6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	4413      	add	r3, r2
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80066a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d11e      	bne.n	80066e8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80066aa:	7ffa      	ldrb	r2, [r7, #31]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	fa42 f303 	asr.w	r3, r2, r3
 80066b2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80066b8:	e016      	b.n	80066e8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80066ba:	7ffb      	ldrb	r3, [r7, #31]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <get_next_good_spad+0x88>
				success = 1;
 80066c4:	2301      	movs	r3, #1
 80066c6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	fb02 f203 	mul.w	r2, r2, r3
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	4413      	add	r3, r2
 80066d4:	461a      	mov	r2, r3
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	601a      	str	r2, [r3, #0]
				break;
 80066da:	e009      	b.n	80066f0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80066dc:	7ffb      	ldrb	r3, [r7, #31]
 80066de:	085b      	lsrs	r3, r3, #1
 80066e0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	3301      	adds	r3, #1
 80066e6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80066e8:	6a3a      	ldr	r2, [r7, #32]
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d3e4      	bcc.n	80066ba <get_next_good_spad+0x66>
				coarseIndex++) {
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	3301      	adds	r3, #1
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80066f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d202      	bcs.n	8006704 <get_next_good_spad+0xb0>
 80066fe:	7fbb      	ldrb	r3, [r7, #30]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0c7      	beq.n	8006694 <get_next_good_spad+0x40>
		}
	}
}
 8006704:	bf00      	nop
 8006706:	372c      	adds	r7, #44	; 0x2c
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8006718:	2301      	movs	r3, #1
 800671a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	099b      	lsrs	r3, r3, #6
 8006720:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006722:	4a07      	ldr	r2, [pc, #28]	; (8006740 <is_aperture+0x30>)
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <is_aperture+0x22>
		isAperture = 0;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	200002b8 	.word	0x200002b8

08006744 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006744:	b480      	push	{r7}
 8006746:	b089      	sub	sp, #36	; 0x24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006750:	2300      	movs	r3, #0
 8006752:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006754:	2308      	movs	r3, #8
 8006756:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006760:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	fbb3 f2f2 	udiv	r2, r3, r2
 800676a:	69b9      	ldr	r1, [r7, #24]
 800676c:	fb01 f202 	mul.w	r2, r1, r2
 8006770:	1a9b      	subs	r3, r3, r2
 8006772:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	429a      	cmp	r2, r3
 800677a:	d302      	bcc.n	8006782 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800677c:	23ce      	movs	r3, #206	; 0xce
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e010      	b.n	80067a4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	4413      	add	r3, r2
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	b25a      	sxtb	r2, r3
 800678c:	2101      	movs	r1, #1
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	fa01 f303 	lsl.w	r3, r1, r3
 8006794:	b25b      	sxtb	r3, r3
 8006796:	4313      	orrs	r3, r2
 8006798:	b259      	sxtb	r1, r3
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	4413      	add	r3, r2
 80067a0:	b2ca      	uxtb	r2, r1
 80067a2:	701a      	strb	r2, [r3, #0]

	return status;
 80067a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3724      	adds	r7, #36	; 0x24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80067be:	2306      	movs	r3, #6
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	21b0      	movs	r1, #176	; 0xb0
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f003 f8c5 	bl	8009954 <VL53L0X_WriteMulti>
 80067ca:	4603      	mov	r3, r0
 80067cc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80067ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80067e4:	2306      	movs	r3, #6
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	21b0      	movs	r1, #176	; 0xb0
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f003 f8e2 	bl	80099b4 <VL53L0X_ReadMulti>
 80067f0:	4603      	mov	r3, r0
 80067f2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80067f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08c      	sub	sp, #48	; 0x30
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	607a      	str	r2, [r7, #4]
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	460b      	mov	r3, r1
 800680e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006810:	2300      	movs	r3, #0
 8006812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006818:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800681a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800681e:	2300      	movs	r3, #0
 8006820:	62bb      	str	r3, [r7, #40]	; 0x28
 8006822:	e02b      	b.n	800687c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006824:	f107 031c 	add.w	r3, r7, #28
 8006828:	6a3a      	ldr	r2, [r7, #32]
 800682a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff ff11 	bl	8006654 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006838:	d103      	bne.n	8006842 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800683a:	23ce      	movs	r3, #206	; 0xce
 800683c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006840:	e020      	b.n	8006884 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	461a      	mov	r2, r3
 8006846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006848:	4413      	add	r3, r2
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff ff60 	bl	8006710 <is_aperture>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	7afb      	ldrb	r3, [r7, #11]
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800685a:	23ce      	movs	r3, #206	; 0xce
 800685c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006860:	e010      	b.n	8006884 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8006866:	6a3a      	ldr	r2, [r7, #32]
 8006868:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800686a:	6838      	ldr	r0, [r7, #0]
 800686c:	f7ff ff6a 	bl	8006744 <enable_spad_bit>
		currentSpad++;
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	3301      	adds	r3, #1
 8006874:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	3301      	adds	r3, #1
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
 800687c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800687e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006880:	429a      	cmp	r2, r3
 8006882:	d3cf      	bcc.n	8006824 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006886:	6a3a      	ldr	r2, [r7, #32]
 8006888:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800688a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800688e:	2b00      	cmp	r3, #0
 8006890:	d106      	bne.n	80068a0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7ff ff8d 	bl	80067b4 <set_ref_spad_map>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80068a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d121      	bne.n	80068ec <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80068a8:	f107 0314 	add.w	r3, r7, #20
 80068ac:	4619      	mov	r1, r3
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff ff93 	bl	80067da <get_ref_spad_map>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80068be:	e011      	b.n	80068e4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	4413      	add	r3, r2
 80068c6:	781a      	ldrb	r2, [r3, #0]
 80068c8:	f107 0114 	add.w	r1, r7, #20
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	440b      	add	r3, r1
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d003      	beq.n	80068de <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80068d6:	23ce      	movs	r3, #206	; 0xce
 80068d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80068dc:	e006      	b.n	80068ec <enable_ref_spads+0xec>
			}
			i++;
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	3301      	adds	r3, #1
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80068e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d3e9      	bcc.n	80068c0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80068ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3730      	adds	r7, #48	; 0x30
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	; 0x28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006902:	2300      	movs	r3, #0
 8006904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006914:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006918:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800691c:	2b00      	cmp	r3, #0
 800691e:	d107      	bne.n	8006930 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8006920:	22c0      	movs	r2, #192	; 0xc0
 8006922:	2101      	movs	r1, #1
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f003 f871 	bl	8009a0c <VL53L0X_WrByte>
 800692a:	4603      	mov	r3, r0
 800692c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006930:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006934:	2b00      	cmp	r3, #0
 8006936:	d108      	bne.n	800694a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006938:	f107 0308 	add.w	r3, r7, #8
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff fc48 	bl	80061d4 <VL53L0X_PerformSingleRangingMeasurement>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800694a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800694e:	2b00      	cmp	r3, #0
 8006950:	d107      	bne.n	8006962 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006952:	2201      	movs	r2, #1
 8006954:	21ff      	movs	r1, #255	; 0xff
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f003 f858 	bl	8009a0c <VL53L0X_WrByte>
 800695c:	4603      	mov	r3, r0
 800695e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8006962:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006966:	2b00      	cmp	r3, #0
 8006968:	d107      	bne.n	800697a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	21b6      	movs	r1, #182	; 0xb6
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f003 f8f8 	bl	8009b64 <VL53L0X_RdWord>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800697a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800697e:	2b00      	cmp	r3, #0
 8006980:	d107      	bne.n	8006992 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006982:	2200      	movs	r2, #0
 8006984:	21ff      	movs	r1, #255	; 0xff
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f003 f840 	bl	8009a0c <VL53L0X_WrByte>
 800698c:	4603      	mov	r3, r0
 800698e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006992:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006996:	2b00      	cmp	r3, #0
 8006998:	d112      	bne.n	80069c0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800699a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800699e:	461a      	mov	r2, r3
 80069a0:	2101      	movs	r1, #1
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f003 f832 	bl	8009a0c <VL53L0X_WrByte>
 80069a8:	4603      	mov	r3, r0
 80069aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80069ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d104      	bne.n	80069c0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80069bc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80069c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3728      	adds	r7, #40	; 0x28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80069cc:	b590      	push	{r4, r7, lr}
 80069ce:	b09d      	sub	sp, #116	; 0x74
 80069d0:	af06      	add	r7, sp, #24
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069d8:	2300      	movs	r3, #0
 80069da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80069de:	23b4      	movs	r3, #180	; 0xb4
 80069e0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80069e4:	2303      	movs	r3, #3
 80069e6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80069e8:	232c      	movs	r3, #44	; 0x2c
 80069ea:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80069f8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80069fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8006a06:	2306      	movs	r3, #6
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8006a30:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8006a32:	2300      	movs	r3, #0
 8006a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a36:	e009      	b.n	8006a4c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006a42:	2200      	movs	r2, #0
 8006a44:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a48:	3301      	adds	r3, #1
 8006a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d3f1      	bcc.n	8006a38 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006a54:	2201      	movs	r2, #1
 8006a56:	21ff      	movs	r1, #255	; 0xff
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f002 ffd7 	bl	8009a0c <VL53L0X_WrByte>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006a64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d107      	bne.n	8006a7c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	214f      	movs	r1, #79	; 0x4f
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f002 ffcb 	bl	8009a0c <VL53L0X_WrByte>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006a7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d107      	bne.n	8006a94 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006a84:	222c      	movs	r2, #44	; 0x2c
 8006a86:	214e      	movs	r1, #78	; 0x4e
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f002 ffbf 	bl	8009a0c <VL53L0X_WrByte>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006a94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d107      	bne.n	8006aac <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	21ff      	movs	r1, #255	; 0xff
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f002 ffb3 	bl	8009a0c <VL53L0X_WrByte>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006aac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d109      	bne.n	8006ac8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8006ab4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006ab8:	461a      	mov	r2, r3
 8006aba:	21b6      	movs	r1, #182	; 0xb6
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f002 ffa5 	bl	8009a0c <VL53L0X_WrByte>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006ac8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d107      	bne.n	8006ae0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2180      	movs	r1, #128	; 0x80
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f002 ff99 	bl	8009a0c <VL53L0X_WrByte>
 8006ada:	4603      	mov	r3, r0
 8006adc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8006ae0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006ae8:	f107 0210 	add.w	r2, r7, #16
 8006aec:	f107 0111 	add.w	r1, r7, #17
 8006af0:	2300      	movs	r3, #0
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fbbb 	bl	800726e <VL53L0X_perform_ref_calibration>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8006afe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d121      	bne.n	8006b4a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8006b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b0c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8006b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b14:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006b22:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006b26:	f107 0218 	add.w	r2, r7, #24
 8006b2a:	9204      	str	r2, [sp, #16]
 8006b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b2e:	9203      	str	r2, [sp, #12]
 8006b30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b32:	9202      	str	r2, [sp, #8]
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	4623      	mov	r3, r4
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7ff fe5e 	bl	8006800 <enable_ref_spads>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d174      	bne.n	8006c3c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8006b56:	f107 0312 	add.w	r3, r7, #18
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f7ff fecb 	bl	80068f8 <perform_ref_signal_measurement>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006b68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d161      	bne.n	8006c34 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006b70:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006b72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d25d      	bcs.n	8006c34 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b7c:	e009      	b.n	8006b92 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006b88:	2200      	movs	r2, #0
 8006b8a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b8e:	3301      	adds	r3, #1
 8006b90:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d3f1      	bcc.n	8006b7e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006b9a:	e002      	b.n	8006ba2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8006ba2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8006ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba8:	4413      	add	r3, r2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff fdb0 	bl	8006710 <is_aperture>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d103      	bne.n	8006bbe <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006bb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d3ee      	bcc.n	8006b9c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8006bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8006bd2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006bd6:	f107 0218 	add.w	r2, r7, #24
 8006bda:	9204      	str	r2, [sp, #16]
 8006bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bde:	9203      	str	r2, [sp, #12]
 8006be0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006be2:	9202      	str	r2, [sp, #8]
 8006be4:	9301      	str	r3, [sp, #4]
 8006be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	4623      	mov	r3, r4
 8006bec:	4602      	mov	r2, r0
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7ff fe06 	bl	8006800 <enable_ref_spads>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006bfa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d11b      	bne.n	8006c3a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8006c06:	f107 0312 	add.w	r3, r7, #18
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7ff fe73 	bl	80068f8 <perform_ref_signal_measurement>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006c18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10c      	bne.n	8006c3a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006c20:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006c22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d208      	bcs.n	8006c3a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c30:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006c32:	e002      	b.n	8006c3a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c38:	e000      	b.n	8006c3c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006c3a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006c3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f040 80af 	bne.w	8006da4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8006c46:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006c48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	f240 80aa 	bls.w	8006da4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006c60:	f107 031c 	add.w	r3, r7, #28
 8006c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c66:	4618      	mov	r0, r3
 8006c68:	f003 f82a 	bl	8009cc0 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006c6c:	8a7b      	ldrh	r3, [r7, #18]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bfb8      	it	lt
 8006c78:	425b      	neglt	r3, r3
 8006c7a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006c82:	e086      	b.n	8006d92 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006c8a:	f107 0314 	add.w	r3, r7, #20
 8006c8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c92:	f7ff fcdf 	bl	8006654 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d103      	bne.n	8006ca6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006c9e:	23ce      	movs	r3, #206	; 0xce
 8006ca0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006ca4:	e07e      	b.n	8006da4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006ca6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	4413      	add	r3, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fd2e 	bl	8006710 <is_aperture>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d003      	beq.n	8006cc6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006cc4:	e06e      	b.n	8006da4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc8:	3301      	adds	r3, #1
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006cd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fd32 	bl	8006744 <enable_spad_bit>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006ce6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10c      	bne.n	8006d08 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fd59 	bl	80067b4 <set_ref_spad_map>
 8006d02:	4603      	mov	r3, r0
 8006d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006d08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d146      	bne.n	8006d9e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006d10:	f107 0312 	add.w	r3, r7, #18
 8006d14:	4619      	mov	r1, r3
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f7ff fdee 	bl	80068f8 <perform_ref_signal_measurement>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006d22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d13b      	bne.n	8006da2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006d2a:	8a7b      	ldrh	r3, [r7, #18]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bfb8      	it	lt
 8006d36:	425b      	neglt	r3, r3
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006d3a:	8a7b      	ldrh	r3, [r7, #18]
 8006d3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d21c      	bcs.n	8006d7c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d914      	bls.n	8006d74 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006d4a:	f107 031c 	add.w	r3, r7, #28
 8006d4e:	4619      	mov	r1, r3
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7ff fd2f 	bl	80067b4 <set_ref_spad_map>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8006d62:	f107 011c 	add.w	r1, r7, #28
 8006d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f002 ffa9 	bl	8009cc0 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d70:	3b01      	subs	r3, #1
 8006d72:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7a:	e00a      	b.n	8006d92 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8006d86:	f107 031c 	add.w	r3, r7, #28
 8006d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f002 ff97 	bl	8009cc0 <memcpy>
		while (!complete) {
 8006d92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f43f af74 	beq.w	8006c84 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006d9c:	e002      	b.n	8006da4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006d9e:	bf00      	nop
 8006da0:	e000      	b.n	8006da4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006da2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006da4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d115      	bne.n	8006dd8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006db0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006db8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006dd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	375c      	adds	r7, #92	; 0x5c
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd90      	pop	{r4, r7, pc}

08006de4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b093      	sub	sp, #76	; 0x4c
 8006de8:	af06      	add	r7, sp, #24
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006df2:	2300      	movs	r3, #0
 8006df4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006dfc:	23b4      	movs	r3, #180	; 0xb4
 8006dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006e02:	2306      	movs	r3, #6
 8006e04:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006e06:	232c      	movs	r3, #44	; 0x2c
 8006e08:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	21ff      	movs	r1, #255	; 0xff
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f002 fdfc 	bl	8009a0c <VL53L0X_WrByte>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006e1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d107      	bne.n	8006e32 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006e22:	2200      	movs	r2, #0
 8006e24:	214f      	movs	r1, #79	; 0x4f
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f002 fdf0 	bl	8009a0c <VL53L0X_WrByte>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006e32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d107      	bne.n	8006e4a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006e3a:	222c      	movs	r2, #44	; 0x2c
 8006e3c:	214e      	movs	r1, #78	; 0x4e
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f002 fde4 	bl	8009a0c <VL53L0X_WrByte>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006e4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d107      	bne.n	8006e62 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006e52:	2200      	movs	r2, #0
 8006e54:	21ff      	movs	r1, #255	; 0xff
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f002 fdd8 	bl	8009a0c <VL53L0X_WrByte>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006e62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d109      	bne.n	8006e7e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006e6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e6e:	461a      	mov	r2, r3
 8006e70:	21b6      	movs	r1, #182	; 0xb6
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f002 fdca 	bl	8009a0c <VL53L0X_WrByte>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006e7e:	2300      	movs	r3, #0
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
 8006e82:	e009      	b.n	8006e98 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006e8e:	2200      	movs	r2, #0
 8006e90:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	3301      	adds	r3, #1
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
 8006e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d3f1      	bcc.n	8006e84 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d011      	beq.n	8006eca <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006ea6:	e002      	b.n	8006eae <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	3301      	adds	r3, #1
 8006eac:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006eae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	4413      	add	r3, r2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff fc2a 	bl	8006710 <is_aperture>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d103      	bne.n	8006eca <VL53L0X_set_reference_spads+0xe6>
 8006ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d3ee      	bcc.n	8006ea8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8006ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eda:	79f9      	ldrb	r1, [r7, #7]
 8006edc:	f107 0214 	add.w	r2, r7, #20
 8006ee0:	9204      	str	r2, [sp, #16]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	9203      	str	r2, [sp, #12]
 8006ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee8:	9202      	str	r2, [sp, #8]
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	4623      	mov	r3, r4
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff fc83 	bl	8006800 <enable_ref_spads>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006f00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10c      	bne.n	8006f22 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	79fa      	ldrb	r2, [r7, #7]
 8006f1e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006f22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3734      	adds	r7, #52	; 0x34
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd90      	pop	{r4, r7, pc}

08006f2e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	f043 0301 	orr.w	r3, r3, #1
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	2100      	movs	r1, #0
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f002 fd5a 	bl	8009a0c <VL53L0X_WrByte>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f9bf 	bl	80072e8 <VL53L0X_measurement_poll_for_completion>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d105      	bne.n	8006f82 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006f76:	2100      	movs	r1, #0
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff fab5 	bl	80064e8 <VL53L0X_ClearInterruptMask>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d106      	bne.n	8006f98 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f002 fd3c 	bl	8009a0c <VL53L0X_WrByte>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	4608      	mov	r0, r1
 8006fae:	4611      	mov	r1, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	70fb      	strb	r3, [r7, #3]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70bb      	strb	r3, [r7, #2]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	21ff      	movs	r1, #255	; 0xff
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f002 fd1e 	bl	8009a0c <VL53L0X_WrByte>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006fda:	2200      	movs	r2, #0
 8006fdc:	2100      	movs	r1, #0
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f002 fd14 	bl	8009a0c <VL53L0X_WrByte>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006fee:	2200      	movs	r2, #0
 8006ff0:	21ff      	movs	r1, #255	; 0xff
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f002 fd0a 	bl	8009a0c <VL53L0X_WrByte>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d01e      	beq.n	8007046 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8007008:	f897 3020 	ldrb.w	r3, [r7, #32]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d009      	beq.n	8007024 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	21cb      	movs	r1, #203	; 0xcb
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f002 fd7b 	bl	8009b10 <VL53L0X_RdByte>
 800701a:	4603      	mov	r3, r0
 800701c:	461a      	mov	r2, r3
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	4313      	orrs	r3, r2
 8007022:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007024:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007028:	2b00      	cmp	r3, #0
 800702a:	d02a      	beq.n	8007082 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800702c:	f107 030e 	add.w	r3, r7, #14
 8007030:	461a      	mov	r2, r3
 8007032:	21ee      	movs	r1, #238	; 0xee
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f002 fd6b 	bl	8009b10 <VL53L0X_RdByte>
 800703a:	4603      	mov	r3, r0
 800703c:	461a      	mov	r2, r3
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	4313      	orrs	r3, r2
 8007042:	73fb      	strb	r3, [r7, #15]
 8007044:	e01d      	b.n	8007082 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007046:	f897 3020 	ldrb.w	r3, [r7, #32]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800704e:	78bb      	ldrb	r3, [r7, #2]
 8007050:	461a      	mov	r2, r3
 8007052:	21cb      	movs	r1, #203	; 0xcb
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f002 fcd9 	bl	8009a0c <VL53L0X_WrByte>
 800705a:	4603      	mov	r3, r0
 800705c:	461a      	mov	r2, r3
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	4313      	orrs	r3, r2
 8007062:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007064:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800706c:	787b      	ldrb	r3, [r7, #1]
 800706e:	2280      	movs	r2, #128	; 0x80
 8007070:	21ee      	movs	r1, #238	; 0xee
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f002 fd18 	bl	8009aa8 <VL53L0X_UpdateByte>
 8007078:	4603      	mov	r3, r0
 800707a:	461a      	mov	r2, r3
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	4313      	orrs	r3, r2
 8007080:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007082:	2201      	movs	r2, #1
 8007084:	21ff      	movs	r1, #255	; 0xff
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f002 fcc0 	bl	8009a0c <VL53L0X_WrByte>
 800708c:	4603      	mov	r3, r0
 800708e:	461a      	mov	r2, r3
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	4313      	orrs	r3, r2
 8007094:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007096:	2201      	movs	r2, #1
 8007098:	2100      	movs	r1, #0
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f002 fcb6 	bl	8009a0c <VL53L0X_WrByte>
 80070a0:	4603      	mov	r3, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80070aa:	2200      	movs	r2, #0
 80070ac:	21ff      	movs	r1, #255	; 0xff
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f002 fcac 	bl	8009a0c <VL53L0X_WrByte>
 80070b4:	4603      	mov	r3, r0
 80070b6:	461a      	mov	r2, r3
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	f023 0310 	bic.w	r3, r3, #16
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	701a      	strb	r2, [r3, #0]

	return Status;
 80070ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b08a      	sub	sp, #40	; 0x28
 80070da:	af04      	add	r7, sp, #16
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	4611      	mov	r1, r2
 80070e2:	461a      	mov	r2, r3
 80070e4:	460b      	mov	r3, r1
 80070e6:	71fb      	strb	r3, [r7, #7]
 80070e8:	4613      	mov	r3, r2
 80070ea:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070ec:	2300      	movs	r3, #0
 80070ee:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007100:	79bb      	ldrb	r3, [r7, #6]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800710c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800710e:	2201      	movs	r2, #1
 8007110:	2101      	movs	r1, #1
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f002 fc7a 	bl	8009a0c <VL53L0X_WrByte>
 8007118:	4603      	mov	r3, r0
 800711a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800711c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d105      	bne.n	8007130 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007124:	2140      	movs	r1, #64	; 0x40
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7ff ff01 	bl	8006f2e <VL53L0X_perform_single_ref_calibration>
 800712c:	4603      	mov	r3, r0
 800712e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007130:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d115      	bne.n	8007164 <VL53L0X_perform_vhv_calibration+0x8e>
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d112      	bne.n	8007164 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800713e:	7d39      	ldrb	r1, [r7, #20]
 8007140:	7d7a      	ldrb	r2, [r7, #21]
 8007142:	2300      	movs	r3, #0
 8007144:	9303      	str	r3, [sp, #12]
 8007146:	2301      	movs	r3, #1
 8007148:	9302      	str	r3, [sp, #8]
 800714a:	f107 0313 	add.w	r3, r7, #19
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	460b      	mov	r3, r1
 8007156:	2101      	movs	r1, #1
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f7ff ff23 	bl	8006fa4 <VL53L0X_ref_calibration_io>
 800715e:	4603      	mov	r3, r0
 8007160:	75fb      	strb	r3, [r7, #23]
 8007162:	e002      	b.n	800716a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800716a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d112      	bne.n	8007198 <VL53L0X_perform_vhv_calibration+0xc2>
 8007172:	79bb      	ldrb	r3, [r7, #6]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00f      	beq.n	8007198 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007178:	7dbb      	ldrb	r3, [r7, #22]
 800717a:	461a      	mov	r2, r3
 800717c:	2101      	movs	r1, #1
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f002 fc44 	bl	8009a0c <VL53L0X_WrByte>
 8007184:	4603      	mov	r3, r0
 8007186:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007188:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d103      	bne.n	8007198 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	7dba      	ldrb	r2, [r7, #22]
 8007194:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007198:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	; 0x28
 80071a8:	af04      	add	r7, sp, #16
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	4611      	mov	r1, r2
 80071b0:	461a      	mov	r2, r3
 80071b2:	460b      	mov	r3, r1
 80071b4:	71fb      	strb	r3, [r7, #7]
 80071b6:	4613      	mov	r3, r2
 80071b8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071ba:	2300      	movs	r3, #0
 80071bc:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80071be:	2300      	movs	r3, #0
 80071c0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80071ca:	79bb      	ldrb	r3, [r7, #6]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80071d6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80071d8:	2202      	movs	r2, #2
 80071da:	2101      	movs	r1, #1
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f002 fc15 	bl	8009a0c <VL53L0X_WrByte>
 80071e2:	4603      	mov	r3, r0
 80071e4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80071e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d105      	bne.n	80071fa <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80071ee:	2100      	movs	r1, #0
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f7ff fe9c 	bl	8006f2e <VL53L0X_perform_single_ref_calibration>
 80071f6:	4603      	mov	r3, r0
 80071f8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80071fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d115      	bne.n	800722e <VL53L0X_perform_phase_calibration+0x8a>
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d112      	bne.n	800722e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007208:	7d39      	ldrb	r1, [r7, #20]
 800720a:	7d7a      	ldrb	r2, [r7, #21]
 800720c:	2301      	movs	r3, #1
 800720e:	9303      	str	r3, [sp, #12]
 8007210:	2300      	movs	r3, #0
 8007212:	9302      	str	r3, [sp, #8]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	f107 0313 	add.w	r3, r7, #19
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	460b      	mov	r3, r1
 8007220:	2101      	movs	r1, #1
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f7ff febe 	bl	8006fa4 <VL53L0X_ref_calibration_io>
 8007228:	4603      	mov	r3, r0
 800722a:	75fb      	strb	r3, [r7, #23]
 800722c:	e002      	b.n	8007234 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007234:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d112      	bne.n	8007262 <VL53L0X_perform_phase_calibration+0xbe>
 800723c:	79bb      	ldrb	r3, [r7, #6]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00f      	beq.n	8007262 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007242:	7dbb      	ldrb	r3, [r7, #22]
 8007244:	461a      	mov	r2, r3
 8007246:	2101      	movs	r1, #1
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f002 fbdf 	bl	8009a0c <VL53L0X_WrByte>
 800724e:	4603      	mov	r3, r0
 8007250:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007252:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d103      	bne.n	8007262 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	7dba      	ldrb	r2, [r7, #22]
 800725e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007262:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b086      	sub	sp, #24
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800727c:	2300      	movs	r3, #0
 800727e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800728a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800728c:	78fa      	ldrb	r2, [r7, #3]
 800728e:	2300      	movs	r3, #0
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7ff ff1f 	bl	80070d6 <VL53L0X_perform_vhv_calibration>
 8007298:	4603      	mov	r3, r0
 800729a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800729c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d107      	bne.n	80072b4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	2300      	movs	r3, #0
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7ff ff7a 	bl	80071a4 <VL53L0X_perform_phase_calibration>
 80072b0:	4603      	mov	r3, r0
 80072b2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80072b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10f      	bne.n	80072dc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80072bc:	7dbb      	ldrb	r3, [r7, #22]
 80072be:	461a      	mov	r2, r3
 80072c0:	2101      	movs	r1, #1
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f002 fba2 	bl	8009a0c <VL53L0X_WrByte>
 80072c8:	4603      	mov	r3, r0
 80072ca:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80072cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d103      	bne.n	80072dc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	7dba      	ldrb	r2, [r7, #22]
 80072d8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80072dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80072fc:	f107 030f 	add.w	r3, r7, #15
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fe fdff 	bl	8005f06 <VL53L0X_GetMeasurementDataReady>
 8007308:	4603      	mov	r3, r0
 800730a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800730c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d110      	bne.n	8007336 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d00f      	beq.n	800733a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	3301      	adds	r3, #1
 800731e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007326:	d302      	bcc.n	800732e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007328:	23f9      	movs	r3, #249	; 0xf9
 800732a:	75fb      	strb	r3, [r7, #23]
			break;
 800732c:	e006      	b.n	800733c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f002 fc8c 	bl	8009c4c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007334:	e7e2      	b.n	80072fc <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8007336:	bf00      	nop
 8007338:	e000      	b.n	800733c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800733a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800733c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	3301      	adds	r3, #1
 800735a:	b2db      	uxtb	r3, r3
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	4603      	mov	r3, r0
 8007376:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	b2db      	uxtb	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80073a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073a4:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80073a6:	e002      	b.n	80073ae <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	089b      	lsrs	r3, r3, #2
 80073ac:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d8f8      	bhi.n	80073a8 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80073b6:	e017      	b.n	80073e8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	4413      	add	r3, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d30b      	bcc.n	80073dc <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	085b      	lsrs	r3, r3, #1
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	4413      	add	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	e002      	b.n	80073e2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	085b      	lsrs	r3, r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	089b      	lsrs	r3, r3, #2
 80073e6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e4      	bne.n	80073b8 <VL53L0X_isqrt+0x24>
	}

	return res;
 80073ee:	68fb      	ldr	r3, [r7, #12]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007404:	2300      	movs	r3, #0
 8007406:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8007408:	2200      	movs	r2, #0
 800740a:	2183      	movs	r1, #131	; 0x83
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f002 fafd 	bl	8009a0c <VL53L0X_WrByte>
 8007412:	4603      	mov	r3, r0
 8007414:	461a      	mov	r2, r3
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	4313      	orrs	r3, r2
 800741a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800741c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11e      	bne.n	8007462 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8007428:	f107 030f 	add.w	r3, r7, #15
 800742c:	461a      	mov	r2, r3
 800742e:	2183      	movs	r1, #131	; 0x83
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f002 fb6d 	bl	8009b10 <VL53L0X_RdByte>
 8007436:	4603      	mov	r3, r0
 8007438:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10a      	bne.n	8007456 <VL53L0X_device_read_strobe+0x5a>
 8007440:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d106      	bne.n	8007456 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	3301      	adds	r3, #1
 800744c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007454:	d3e8      	bcc.n	8007428 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800745c:	d301      	bcc.n	8007462 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800745e:	23f9      	movs	r3, #249	; 0xf9
 8007460:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8007462:	2201      	movs	r2, #1
 8007464:	2183      	movs	r1, #131	; 0x83
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f002 fad0 	bl	8009a0c <VL53L0X_WrByte>
 800746c:	4603      	mov	r3, r0
 800746e:	461a      	mov	r2, r3
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	4313      	orrs	r3, r2
 8007474:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8007476:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b098      	sub	sp, #96	; 0x60
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800748e:	2300      	movs	r3, #0
 8007490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80074a0:	2300      	movs	r3, #0
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80074b2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80074b6:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80074ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80074ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074d2:	2b07      	cmp	r3, #7
 80074d4:	f000 8408 	beq.w	8007ce8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80074d8:	2201      	movs	r2, #1
 80074da:	2180      	movs	r1, #128	; 0x80
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f002 fa95 	bl	8009a0c <VL53L0X_WrByte>
 80074e2:	4603      	mov	r3, r0
 80074e4:	461a      	mov	r2, r3
 80074e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80074f0:	2201      	movs	r2, #1
 80074f2:	21ff      	movs	r1, #255	; 0xff
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f002 fa89 	bl	8009a0c <VL53L0X_WrByte>
 80074fa:	4603      	mov	r3, r0
 80074fc:	461a      	mov	r2, r3
 80074fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007502:	4313      	orrs	r3, r2
 8007504:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007508:	2200      	movs	r2, #0
 800750a:	2100      	movs	r1, #0
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f002 fa7d 	bl	8009a0c <VL53L0X_WrByte>
 8007512:	4603      	mov	r3, r0
 8007514:	461a      	mov	r2, r3
 8007516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800751a:	4313      	orrs	r3, r2
 800751c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007520:	2206      	movs	r2, #6
 8007522:	21ff      	movs	r1, #255	; 0xff
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f002 fa71 	bl	8009a0c <VL53L0X_WrByte>
 800752a:	4603      	mov	r3, r0
 800752c:	461a      	mov	r2, r3
 800752e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007532:	4313      	orrs	r3, r2
 8007534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007538:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800753c:	461a      	mov	r2, r3
 800753e:	2183      	movs	r1, #131	; 0x83
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f002 fae5 	bl	8009b10 <VL53L0X_RdByte>
 8007546:	4603      	mov	r3, r0
 8007548:	461a      	mov	r2, r3
 800754a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800754e:	4313      	orrs	r3, r2
 8007550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007558:	f043 0304 	orr.w	r3, r3, #4
 800755c:	b2db      	uxtb	r3, r3
 800755e:	461a      	mov	r2, r3
 8007560:	2183      	movs	r1, #131	; 0x83
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f002 fa52 	bl	8009a0c <VL53L0X_WrByte>
 8007568:	4603      	mov	r3, r0
 800756a:	461a      	mov	r2, r3
 800756c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007570:	4313      	orrs	r3, r2
 8007572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8007576:	2207      	movs	r2, #7
 8007578:	21ff      	movs	r1, #255	; 0xff
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f002 fa46 	bl	8009a0c <VL53L0X_WrByte>
 8007580:	4603      	mov	r3, r0
 8007582:	461a      	mov	r2, r3
 8007584:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007588:	4313      	orrs	r3, r2
 800758a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800758e:	2201      	movs	r2, #1
 8007590:	2181      	movs	r1, #129	; 0x81
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f002 fa3a 	bl	8009a0c <VL53L0X_WrByte>
 8007598:	4603      	mov	r3, r0
 800759a:	461a      	mov	r2, r3
 800759c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075a0:	4313      	orrs	r3, r2
 80075a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f002 fb50 	bl	8009c4c <VL53L0X_PollingDelay>
 80075ac:	4603      	mov	r3, r0
 80075ae:	461a      	mov	r2, r3
 80075b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80075ba:	2201      	movs	r2, #1
 80075bc:	2180      	movs	r1, #128	; 0x80
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f002 fa24 	bl	8009a0c <VL53L0X_WrByte>
 80075c4:	4603      	mov	r3, r0
 80075c6:	461a      	mov	r2, r3
 80075c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075cc:	4313      	orrs	r3, r2
 80075ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 8098 	beq.w	800770e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80075de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80075e2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f040 8091 	bne.w	800770e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80075ec:	226b      	movs	r2, #107	; 0x6b
 80075ee:	2194      	movs	r1, #148	; 0x94
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f002 fa0b 	bl	8009a0c <VL53L0X_WrByte>
 80075f6:	4603      	mov	r3, r0
 80075f8:	461a      	mov	r2, r3
 80075fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075fe:	4313      	orrs	r3, r2
 8007600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fef9 	bl	80073fc <VL53L0X_device_read_strobe>
 800760a:	4603      	mov	r3, r0
 800760c:	461a      	mov	r2, r3
 800760e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007612:	4313      	orrs	r3, r2
 8007614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800761c:	461a      	mov	r2, r3
 800761e:	2190      	movs	r1, #144	; 0x90
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f002 fad7 	bl	8009bd4 <VL53L0X_RdDWord>
 8007626:	4603      	mov	r3, r0
 8007628:	461a      	mov	r2, r3
 800762a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800762e:	4313      	orrs	r3, r2
 8007630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	0a1b      	lsrs	r3, r3, #8
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	0bdb      	lsrs	r3, r3, #15
 8007646:	b2db      	uxtb	r3, r3
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8007650:	2224      	movs	r2, #36	; 0x24
 8007652:	2194      	movs	r1, #148	; 0x94
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f002 f9d9 	bl	8009a0c <VL53L0X_WrByte>
 800765a:	4603      	mov	r3, r0
 800765c:	461a      	mov	r2, r3
 800765e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007662:	4313      	orrs	r3, r2
 8007664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff fec7 	bl	80073fc <VL53L0X_device_read_strobe>
 800766e:	4603      	mov	r3, r0
 8007670:	461a      	mov	r2, r3
 8007672:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007676:	4313      	orrs	r3, r2
 8007678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800767c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007680:	461a      	mov	r2, r3
 8007682:	2190      	movs	r1, #144	; 0x90
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f002 faa5 	bl	8009bd4 <VL53L0X_RdDWord>
 800768a:	4603      	mov	r3, r0
 800768c:	461a      	mov	r2, r3
 800768e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007692:	4313      	orrs	r3, r2
 8007694:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	0e1b      	lsrs	r3, r3, #24
 800769c:	b2db      	uxtb	r3, r3
 800769e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80076b6:	2225      	movs	r2, #37	; 0x25
 80076b8:	2194      	movs	r1, #148	; 0x94
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f002 f9a6 	bl	8009a0c <VL53L0X_WrByte>
 80076c0:	4603      	mov	r3, r0
 80076c2:	461a      	mov	r2, r3
 80076c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7ff fe94 	bl	80073fc <VL53L0X_device_read_strobe>
 80076d4:	4603      	mov	r3, r0
 80076d6:	461a      	mov	r2, r3
 80076d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076dc:	4313      	orrs	r3, r2
 80076de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80076e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076e6:	461a      	mov	r2, r3
 80076e8:	2190      	movs	r1, #144	; 0x90
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f002 fa72 	bl	8009bd4 <VL53L0X_RdDWord>
 80076f0:	4603      	mov	r3, r0
 80076f2:	461a      	mov	r2, r3
 80076f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	0e1b      	lsrs	r3, r3, #24
 8007702:	b2db      	uxtb	r3, r3
 8007704:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	0c1b      	lsrs	r3, r3, #16
 800770a:	b2db      	uxtb	r3, r3
 800770c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 8189 	beq.w	8007a2c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800771a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800771e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007722:	2b00      	cmp	r3, #0
 8007724:	f040 8182 	bne.w	8007a2c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8007728:	2202      	movs	r2, #2
 800772a:	2194      	movs	r1, #148	; 0x94
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f002 f96d 	bl	8009a0c <VL53L0X_WrByte>
 8007732:	4603      	mov	r3, r0
 8007734:	461a      	mov	r2, r3
 8007736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800773a:	4313      	orrs	r3, r2
 800773c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff fe5b 	bl	80073fc <VL53L0X_device_read_strobe>
 8007746:	4603      	mov	r3, r0
 8007748:	461a      	mov	r2, r3
 800774a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800774e:	4313      	orrs	r3, r2
 8007750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8007754:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007758:	461a      	mov	r2, r3
 800775a:	2190      	movs	r1, #144	; 0x90
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f002 f9d7 	bl	8009b10 <VL53L0X_RdByte>
 8007762:	4603      	mov	r3, r0
 8007764:	461a      	mov	r2, r3
 8007766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800776a:	4313      	orrs	r3, r2
 800776c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007770:	227b      	movs	r2, #123	; 0x7b
 8007772:	2194      	movs	r1, #148	; 0x94
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f002 f949 	bl	8009a0c <VL53L0X_WrByte>
 800777a:	4603      	mov	r3, r0
 800777c:	461a      	mov	r2, r3
 800777e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007782:	4313      	orrs	r3, r2
 8007784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff fe37 	bl	80073fc <VL53L0X_device_read_strobe>
 800778e:	4603      	mov	r3, r0
 8007790:	461a      	mov	r2, r3
 8007792:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007796:	4313      	orrs	r3, r2
 8007798:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800779c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80077a0:	461a      	mov	r2, r3
 80077a2:	2190      	movs	r1, #144	; 0x90
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f002 f9b3 	bl	8009b10 <VL53L0X_RdByte>
 80077aa:	4603      	mov	r3, r0
 80077ac:	461a      	mov	r2, r3
 80077ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077b2:	4313      	orrs	r3, r2
 80077b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80077b8:	2277      	movs	r2, #119	; 0x77
 80077ba:	2194      	movs	r1, #148	; 0x94
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f002 f925 	bl	8009a0c <VL53L0X_WrByte>
 80077c2:	4603      	mov	r3, r0
 80077c4:	461a      	mov	r2, r3
 80077c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077ca:	4313      	orrs	r3, r2
 80077cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff fe13 	bl	80073fc <VL53L0X_device_read_strobe>
 80077d6:	4603      	mov	r3, r0
 80077d8:	461a      	mov	r2, r3
 80077da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077de:	4313      	orrs	r3, r2
 80077e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80077e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077e8:	461a      	mov	r2, r3
 80077ea:	2190      	movs	r1, #144	; 0x90
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f002 f9f1 	bl	8009bd4 <VL53L0X_RdDWord>
 80077f2:	4603      	mov	r3, r0
 80077f4:	461a      	mov	r2, r3
 80077f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	0e5b      	lsrs	r3, r3, #25
 8007804:	b2db      	uxtb	r3, r3
 8007806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780a:	b2db      	uxtb	r3, r3
 800780c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	0c9b      	lsrs	r3, r3, #18
 8007812:	b2db      	uxtb	r3, r3
 8007814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007818:	b2db      	uxtb	r3, r3
 800781a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	0adb      	lsrs	r3, r3, #11
 8007820:	b2db      	uxtb	r3, r3
 8007822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007826:	b2db      	uxtb	r3, r3
 8007828:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	091b      	lsrs	r3, r3, #4
 800782e:	b2db      	uxtb	r3, r3
 8007830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007834:	b2db      	uxtb	r3, r3
 8007836:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	b2db      	uxtb	r3, r3
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	b2db      	uxtb	r3, r3
 8007840:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007844:	b2db      	uxtb	r3, r3
 8007846:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800784a:	2278      	movs	r2, #120	; 0x78
 800784c:	2194      	movs	r1, #148	; 0x94
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f002 f8dc 	bl	8009a0c <VL53L0X_WrByte>
 8007854:	4603      	mov	r3, r0
 8007856:	461a      	mov	r2, r3
 8007858:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800785c:	4313      	orrs	r3, r2
 800785e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff fdca 	bl	80073fc <VL53L0X_device_read_strobe>
 8007868:	4603      	mov	r3, r0
 800786a:	461a      	mov	r2, r3
 800786c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007870:	4313      	orrs	r3, r2
 8007872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800787a:	461a      	mov	r2, r3
 800787c:	2190      	movs	r1, #144	; 0x90
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f002 f9a8 	bl	8009bd4 <VL53L0X_RdDWord>
 8007884:	4603      	mov	r3, r0
 8007886:	461a      	mov	r2, r3
 8007888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800788c:	4313      	orrs	r3, r2
 800788e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	0f5b      	lsrs	r3, r3, #29
 8007896:	b2db      	uxtb	r3, r3
 8007898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800789c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800789e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078a2:	4413      	add	r3, r2
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	0d9b      	lsrs	r3, r3, #22
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	0bdb      	lsrs	r3, r3, #15
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c6:	0a1b      	lsrs	r3, r3, #8
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	085b      	lsrs	r3, r3, #1
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	019b      	lsls	r3, r3, #6
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80078f2:	2279      	movs	r2, #121	; 0x79
 80078f4:	2194      	movs	r1, #148	; 0x94
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f002 f888 	bl	8009a0c <VL53L0X_WrByte>
 80078fc:	4603      	mov	r3, r0
 80078fe:	461a      	mov	r2, r3
 8007900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007904:	4313      	orrs	r3, r2
 8007906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff fd76 	bl	80073fc <VL53L0X_device_read_strobe>
 8007910:	4603      	mov	r3, r0
 8007912:	461a      	mov	r2, r3
 8007914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007918:	4313      	orrs	r3, r2
 800791a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800791e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007922:	461a      	mov	r2, r3
 8007924:	2190      	movs	r1, #144	; 0x90
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f002 f954 	bl	8009bd4 <VL53L0X_RdDWord>
 800792c:	4603      	mov	r3, r0
 800792e:	461a      	mov	r2, r3
 8007930:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007934:	4313      	orrs	r3, r2
 8007936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	0e9b      	lsrs	r3, r3, #26
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007944:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8007946:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800794a:	4413      	add	r3, r2
 800794c:	b2db      	uxtb	r3, r3
 800794e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	0cdb      	lsrs	r3, r3, #19
 8007954:	b2db      	uxtb	r3, r3
 8007956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795a:	b2db      	uxtb	r3, r3
 800795c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	0b1b      	lsrs	r3, r3, #12
 8007962:	b2db      	uxtb	r3, r3
 8007964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007968:	b2db      	uxtb	r3, r3
 800796a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	b2db      	uxtb	r3, r3
 8007972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007976:	b2db      	uxtb	r3, r3
 8007978:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	b2db      	uxtb	r3, r3
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	b2db      	uxtb	r3, r3
 8007982:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007986:	b2db      	uxtb	r3, r3
 8007988:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800798c:	227a      	movs	r2, #122	; 0x7a
 800798e:	2194      	movs	r1, #148	; 0x94
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f002 f83b 	bl	8009a0c <VL53L0X_WrByte>
 8007996:	4603      	mov	r3, r0
 8007998:	461a      	mov	r2, r3
 800799a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800799e:	4313      	orrs	r3, r2
 80079a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff fd29 	bl	80073fc <VL53L0X_device_read_strobe>
 80079aa:	4603      	mov	r3, r0
 80079ac:	461a      	mov	r2, r3
 80079ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80079b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079bc:	461a      	mov	r2, r3
 80079be:	2190      	movs	r1, #144	; 0x90
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f002 f907 	bl	8009bd4 <VL53L0X_RdDWord>
 80079c6:	4603      	mov	r3, r0
 80079c8:	461a      	mov	r2, r3
 80079ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079ce:	4313      	orrs	r3, r2
 80079d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	0f9b      	lsrs	r3, r3, #30
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079de:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80079e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079e4:	4413      	add	r3, r2
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	0ddb      	lsrs	r3, r3, #23
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	0c1b      	lsrs	r3, r3, #16
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	0a5b      	lsrs	r3, r3, #9
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	089b      	lsrs	r3, r3, #2
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8007a26:	2300      	movs	r3, #0
 8007a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007a2c:	78fb      	ldrb	r3, [r7, #3]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 80f1 	beq.w	8007c1a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007a38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a3c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f040 80ea 	bne.w	8007c1a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007a46:	227b      	movs	r2, #123	; 0x7b
 8007a48:	2194      	movs	r1, #148	; 0x94
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 ffde 	bl	8009a0c <VL53L0X_WrByte>
 8007a50:	4603      	mov	r3, r0
 8007a52:	461a      	mov	r2, r3
 8007a54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fccc 	bl	80073fc <VL53L0X_device_read_strobe>
 8007a64:	4603      	mov	r3, r0
 8007a66:	461a      	mov	r2, r3
 8007a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a76:	461a      	mov	r2, r3
 8007a78:	2190      	movs	r1, #144	; 0x90
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f002 f8aa 	bl	8009bd4 <VL53L0X_RdDWord>
 8007a80:	4603      	mov	r3, r0
 8007a82:	461a      	mov	r2, r3
 8007a84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007a8e:	227c      	movs	r2, #124	; 0x7c
 8007a90:	2194      	movs	r1, #148	; 0x94
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 ffba 	bl	8009a0c <VL53L0X_WrByte>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff fca8 	bl	80073fc <VL53L0X_device_read_strobe>
 8007aac:	4603      	mov	r3, r0
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007abe:	461a      	mov	r2, r3
 8007ac0:	2190      	movs	r1, #144	; 0x90
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f002 f886 	bl	8009bd4 <VL53L0X_RdDWord>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	461a      	mov	r2, r3
 8007acc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8007ad6:	2273      	movs	r2, #115	; 0x73
 8007ad8:	2194      	movs	r1, #148	; 0x94
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 ff96 	bl	8009a0c <VL53L0X_WrByte>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff fc84 	bl	80073fc <VL53L0X_device_read_strobe>
 8007af4:	4603      	mov	r3, r0
 8007af6:	461a      	mov	r2, r3
 8007af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007afc:	4313      	orrs	r3, r2
 8007afe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007b02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b06:	461a      	mov	r2, r3
 8007b08:	2190      	movs	r1, #144	; 0x90
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f002 f862 	bl	8009bd4 <VL53L0X_RdDWord>
 8007b10:	4603      	mov	r3, r0
 8007b12:	461a      	mov	r2, r3
 8007b14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007b26:	2274      	movs	r2, #116	; 0x74
 8007b28:	2194      	movs	r1, #148	; 0x94
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 ff6e 	bl	8009a0c <VL53L0X_WrByte>
 8007b30:	4603      	mov	r3, r0
 8007b32:	461a      	mov	r2, r3
 8007b34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fc5c 	bl	80073fc <VL53L0X_device_read_strobe>
 8007b44:	4603      	mov	r3, r0
 8007b46:	461a      	mov	r2, r3
 8007b48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007b52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b56:	461a      	mov	r2, r3
 8007b58:	2190      	movs	r1, #144	; 0x90
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f002 f83a 	bl	8009bd4 <VL53L0X_RdDWord>
 8007b60:	4603      	mov	r3, r0
 8007b62:	461a      	mov	r2, r3
 8007b64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007b72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b74:	4313      	orrs	r3, r2
 8007b76:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8007b78:	2275      	movs	r2, #117	; 0x75
 8007b7a:	2194      	movs	r1, #148	; 0x94
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 ff45 	bl	8009a0c <VL53L0X_WrByte>
 8007b82:	4603      	mov	r3, r0
 8007b84:	461a      	mov	r2, r3
 8007b86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff fc33 	bl	80073fc <VL53L0X_device_read_strobe>
 8007b96:	4603      	mov	r3, r0
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007ba4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ba8:	461a      	mov	r2, r3
 8007baa:	2190      	movs	r1, #144	; 0x90
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f002 f811 	bl	8009bd4 <VL53L0X_RdDWord>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007bc8:	2276      	movs	r2, #118	; 0x76
 8007bca:	2194      	movs	r1, #148	; 0x94
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f001 ff1d 	bl	8009a0c <VL53L0X_WrByte>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fc0b 	bl	80073fc <VL53L0X_device_read_strobe>
 8007be6:	4603      	mov	r3, r0
 8007be8:	461a      	mov	r2, r3
 8007bea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	2190      	movs	r1, #144	; 0x90
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 ffe9 	bl	8009bd4 <VL53L0X_RdDWord>
 8007c02:	4603      	mov	r3, r0
 8007c04:	461a      	mov	r2, r3
 8007c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007c14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c16:	4313      	orrs	r3, r2
 8007c18:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2181      	movs	r1, #129	; 0x81
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 fef4 	bl	8009a0c <VL53L0X_WrByte>
 8007c24:	4603      	mov	r3, r0
 8007c26:	461a      	mov	r2, r3
 8007c28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007c32:	2206      	movs	r2, #6
 8007c34:	21ff      	movs	r1, #255	; 0xff
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f001 fee8 	bl	8009a0c <VL53L0X_WrByte>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c44:	4313      	orrs	r3, r2
 8007c46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007c4a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007c4e:	461a      	mov	r2, r3
 8007c50:	2183      	movs	r1, #131	; 0x83
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 ff5c 	bl	8009b10 <VL53L0X_RdByte>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c60:	4313      	orrs	r3, r2
 8007c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007c66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c6a:	f023 0304 	bic.w	r3, r3, #4
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	2183      	movs	r1, #131	; 0x83
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 fec9 	bl	8009a0c <VL53L0X_WrByte>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007c88:	2201      	movs	r2, #1
 8007c8a:	21ff      	movs	r1, #255	; 0xff
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 febd 	bl	8009a0c <VL53L0X_WrByte>
 8007c92:	4603      	mov	r3, r0
 8007c94:	461a      	mov	r2, r3
 8007c96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 feb1 	bl	8009a0c <VL53L0X_WrByte>
 8007caa:	4603      	mov	r3, r0
 8007cac:	461a      	mov	r2, r3
 8007cae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007cb8:	2200      	movs	r2, #0
 8007cba:	21ff      	movs	r1, #255	; 0xff
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 fea5 	bl	8009a0c <VL53L0X_WrByte>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2180      	movs	r1, #128	; 0x80
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 fe99 	bl	8009a0c <VL53L0X_WrByte>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007ce8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f040 808f 	bne.w	8007e10 <VL53L0X_get_info_from_device+0x98e>
 8007cf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007cf6:	2b07      	cmp	r3, #7
 8007cf8:	f000 808a 	beq.w	8007e10 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d024      	beq.n	8007d50 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007d06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d0a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d11e      	bne.n	8007d50 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007d18:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007d22:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007d26:	2300      	movs	r3, #0
 8007d28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d2a:	e00e      	b.n	8007d4a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007d2c:	f107 0208 	add.w	r2, r7, #8
 8007d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d32:	4413      	add	r3, r2
 8007d34:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007d40:	460a      	mov	r2, r1
 8007d42:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d46:	3301      	adds	r3, #1
 8007d48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d4c:	2b05      	cmp	r3, #5
 8007d4e:	dded      	ble.n	8007d2c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d018      	beq.n	8007d8c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007d5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d5e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d112      	bne.n	8007d8c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007d66:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007d70:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	33f3      	adds	r3, #243	; 0xf3
 8007d7e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007d80:	f107 0310 	add.w	r3, r7, #16
 8007d84:	4619      	mov	r1, r3
 8007d86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d88:	f002 fd34 	bl	800a7f4 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d030      	beq.n	8007df8 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007d96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d9a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d12a      	bne.n	8007df8 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db4:	025b      	lsls	r3, r3, #9
 8007db6:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dbc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d011      	beq.n	8007df0 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8007dcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dda:	fb02 f303 	mul.w	r3, r2, r3
 8007dde:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007de0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007de4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007de8:	425b      	negs	r3, r3
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007df0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007df8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007e06:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e10:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3760      	adds	r7, #96	; 0x60
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007e1c:	b490      	push	{r4, r7}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007e28:	f240 6377 	movw	r3, #1655	; 0x677
 8007e2c:	f04f 0400 	mov.w	r4, #0
 8007e30:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8007e34:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007e38:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	fb02 f303 	mul.w	r3, r2, r3
 8007e48:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3718      	adds	r7, #24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bc90      	pop	{r4, r7}
 8007e54:	4770      	bx	lr

08007e56 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b087      	sub	sp, #28
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d017      	beq.n	8007ea0 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007e76:	e005      	b.n	8007e84 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	085b      	lsrs	r3, r3, #1
 8007e7c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007e7e:	89fb      	ldrh	r3, [r7, #14]
 8007e80:	3301      	adds	r3, #1
 8007e82:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1f4      	bne.n	8007e78 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007e8e:	89fb      	ldrh	r3, [r7, #14]
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007e9c:	4413      	add	r3, r2
 8007e9e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007ea0:	8afb      	ldrh	r3, [r7, #22]

}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b085      	sub	sp, #20
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007ebc:	88fb      	ldrh	r3, [r7, #6]
 8007ebe:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007ec0:	88fa      	ldrh	r2, [r7, #6]
 8007ec2:	0a12      	lsrs	r2, r2, #8
 8007ec4:	b292      	uxth	r2, r2
 8007ec6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007ec8:	3301      	adds	r3, #1
 8007eca:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
	...

08007edc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f7ff ff92 	bl	8007e1c <VL53L0X_calc_macro_period_ps>
 8007ef8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007f00:	4a0a      	ldr	r2, [pc, #40]	; (8007f2c <VL53L0X_calc_timeout_mclks+0x50>)
 8007f02:	fba2 2303 	umull	r2, r3, r2, r3
 8007f06:	099b      	lsrs	r3, r3, #6
 8007f08:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f10:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	085b      	lsrs	r3, r3, #1
 8007f18:	441a      	add	r2, r3
	timeout_period_mclks =
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f20:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8007f22:	69fb      	ldr	r3, [r7, #28]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3720      	adds	r7, #32
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	10624dd3 	.word	0x10624dd3

08007f30 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	807b      	strh	r3, [r7, #2]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007f44:	787b      	ldrb	r3, [r7, #1]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff ff67 	bl	8007e1c <VL53L0X_calc_macro_period_ps>
 8007f4e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007f56:	4a0a      	ldr	r2, [pc, #40]	; (8007f80 <VL53L0X_calc_timeout_us+0x50>)
 8007f58:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5c:	099b      	lsrs	r3, r3, #6
 8007f5e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007f60:	887b      	ldrh	r3, [r7, #2]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	fb02 f303 	mul.w	r3, r2, r3
 8007f68:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007f6c:	4a04      	ldr	r2, [pc, #16]	; (8007f80 <VL53L0X_calc_timeout_us+0x50>)
 8007f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f72:	099b      	lsrs	r3, r3, #6
 8007f74:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007f76:	697b      	ldr	r3, [r7, #20]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	10624dd3 	.word	0x10624dd3

08007f84 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08c      	sub	sp, #48	; 0x30
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f92:	2300      	movs	r3, #0
 8007f94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007faa:	7afb      	ldrb	r3, [r7, #11]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d005      	beq.n	8007fbc <get_sequence_step_timeout+0x38>
 8007fb0:	7afb      	ldrb	r3, [r7, #11]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d002      	beq.n	8007fbc <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d128      	bne.n	800800e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007fbc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f7fd fa7d 	bl	80054c4 <VL53L0X_GetVcselPulsePeriod>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007fd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d109      	bne.n	8007fec <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007fd8:	f107 0320 	add.w	r3, r7, #32
 8007fdc:	461a      	mov	r2, r3
 8007fde:	2146      	movs	r1, #70	; 0x46
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f001 fd95 	bl	8009b10 <VL53L0X_RdByte>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007fec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff ff5b 	bl	8007eae <VL53L0X_decode_timeout>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007ffc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008002:	4619      	mov	r1, r3
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff ff93 	bl	8007f30 <VL53L0X_calc_timeout_us>
 800800a:	62b8      	str	r0, [r7, #40]	; 0x28
 800800c:	e092      	b.n	8008134 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800800e:	7afb      	ldrb	r3, [r7, #11]
 8008010:	2b03      	cmp	r3, #3
 8008012:	d135      	bne.n	8008080 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008014:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008018:	461a      	mov	r2, r3
 800801a:	2100      	movs	r1, #0
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f7fd fa51 	bl	80054c4 <VL53L0X_GetVcselPulsePeriod>
 8008022:	4603      	mov	r3, r0
 8008024:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008028:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800802c:	2b00      	cmp	r3, #0
 800802e:	f040 8081 	bne.w	8008134 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008032:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008036:	461a      	mov	r2, r3
 8008038:	2100      	movs	r1, #0
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f7fd fa42 	bl	80054c4 <VL53L0X_GetVcselPulsePeriod>
 8008040:	4603      	mov	r3, r0
 8008042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008046:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800804a:	2b00      	cmp	r3, #0
 800804c:	d109      	bne.n	8008062 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800804e:	f107 031e 	add.w	r3, r7, #30
 8008052:	461a      	mov	r2, r3
 8008054:	2151      	movs	r1, #81	; 0x51
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f001 fd84 	bl	8009b64 <VL53L0X_RdWord>
 800805c:	4603      	mov	r3, r0
 800805e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008062:	8bfb      	ldrh	r3, [r7, #30]
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff ff22 	bl	8007eae <VL53L0X_decode_timeout>
 800806a:	4603      	mov	r3, r0
 800806c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800806e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008072:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008074:	4619      	mov	r1, r3
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff ff5a 	bl	8007f30 <VL53L0X_calc_timeout_us>
 800807c:	62b8      	str	r0, [r7, #40]	; 0x28
 800807e:	e059      	b.n	8008134 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008080:	7afb      	ldrb	r3, [r7, #11]
 8008082:	2b04      	cmp	r3, #4
 8008084:	d156      	bne.n	8008134 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008086:	f107 0314 	add.w	r3, r7, #20
 800808a:	4619      	mov	r1, r3
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7fd fb25 	bl	80056dc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01d      	beq.n	80080d8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800809c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80080a0:	461a      	mov	r2, r3
 80080a2:	2100      	movs	r1, #0
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f7fd fa0d 	bl	80054c4 <VL53L0X_GetVcselPulsePeriod>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80080b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10f      	bne.n	80080d8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80080b8:	f107 031e 	add.w	r3, r7, #30
 80080bc:	461a      	mov	r2, r3
 80080be:	2151      	movs	r1, #81	; 0x51
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f001 fd4f 	bl	8009b64 <VL53L0X_RdWord>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80080cc:	8bfb      	ldrh	r3, [r7, #30]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff feed 	bl	8007eae <VL53L0X_decode_timeout>
 80080d4:	4603      	mov	r3, r0
 80080d6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80080d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d109      	bne.n	80080f4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80080e0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80080e4:	461a      	mov	r2, r3
 80080e6:	2101      	movs	r1, #1
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f7fd f9eb 	bl	80054c4 <VL53L0X_GetVcselPulsePeriod>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80080f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10f      	bne.n	800811c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80080fc:	f107 031c 	add.w	r3, r7, #28
 8008100:	461a      	mov	r2, r3
 8008102:	2171      	movs	r1, #113	; 0x71
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f001 fd2d 	bl	8009b64 <VL53L0X_RdWord>
 800810a:	4603      	mov	r3, r0
 800810c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008110:	8bbb      	ldrh	r3, [r7, #28]
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff fecb 	bl	8007eae <VL53L0X_decode_timeout>
 8008118:	4603      	mov	r3, r0
 800811a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800811c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800811e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008124:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008128:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800812a:	4619      	mov	r1, r3
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff feff 	bl	8007f30 <VL53L0X_calc_timeout_us>
 8008132:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008138:	601a      	str	r2, [r3, #0]

	return Status;
 800813a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800813e:	4618      	mov	r0, r3
 8008140:	3730      	adds	r7, #48	; 0x30
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b08a      	sub	sp, #40	; 0x28
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	460b      	mov	r3, r1
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008154:	2300      	movs	r3, #0
 8008156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800815a:	7afb      	ldrb	r3, [r7, #11]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <set_sequence_step_timeout+0x26>
 8008160:	7afb      	ldrb	r3, [r7, #11]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d002      	beq.n	800816c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	2b02      	cmp	r3, #2
 800816a:	d138      	bne.n	80081de <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800816c:	f107 031b 	add.w	r3, r7, #27
 8008170:	461a      	mov	r2, r3
 8008172:	2100      	movs	r1, #0
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f7fd f9a5 	bl	80054c4 <VL53L0X_GetVcselPulsePeriod>
 800817a:	4603      	mov	r3, r0
 800817c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8008180:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008184:	2b00      	cmp	r3, #0
 8008186:	d11a      	bne.n	80081be <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8008188:	7efb      	ldrb	r3, [r7, #27]
 800818a:	461a      	mov	r2, r3
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f7ff fea4 	bl	8007edc <VL53L0X_calc_timeout_mclks>
 8008194:	4603      	mov	r3, r0
 8008196:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8008198:	8bbb      	ldrh	r3, [r7, #28]
 800819a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819e:	d903      	bls.n	80081a8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80081a0:	23ff      	movs	r3, #255	; 0xff
 80081a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80081a6:	e004      	b.n	80081b2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80081a8:	8bbb      	ldrh	r3, [r7, #28]
 80081aa:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80081ac:	3b01      	subs	r3, #1
 80081ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80081b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80081be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f040 80ab 	bne.w	800831e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80081c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081cc:	461a      	mov	r2, r3
 80081ce:	2146      	movs	r1, #70	; 0x46
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f001 fc1b 	bl	8009a0c <VL53L0X_WrByte>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80081dc:	e09f      	b.n	800831e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80081de:	7afb      	ldrb	r3, [r7, #11]
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d135      	bne.n	8008250 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80081e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d11b      	bne.n	8008224 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80081ec:	f107 031b 	add.w	r3, r7, #27
 80081f0:	461a      	mov	r2, r3
 80081f2:	2100      	movs	r1, #0
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7fd f965 	bl	80054c4 <VL53L0X_GetVcselPulsePeriod>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008200:	7efb      	ldrb	r3, [r7, #27]
 8008202:	461a      	mov	r2, r3
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f7ff fe68 	bl	8007edc <VL53L0X_calc_timeout_mclks>
 800820c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800820e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8008210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fe1f 	bl	8007e56 <VL53L0X_encode_timeout>
 8008218:	4603      	mov	r3, r0
 800821a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800821c:	8b3a      	ldrh	r2, [r7, #24]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008224:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008228:	2b00      	cmp	r3, #0
 800822a:	d108      	bne.n	800823e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800822c:	8b3b      	ldrh	r3, [r7, #24]
 800822e:	461a      	mov	r2, r3
 8008230:	2151      	movs	r1, #81	; 0x51
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f001 fc0e 	bl	8009a54 <VL53L0X_WrWord>
 8008238:	4603      	mov	r3, r0
 800823a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800823e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008242:	2b00      	cmp	r3, #0
 8008244:	d16b      	bne.n	800831e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800824e:	e066      	b.n	800831e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008250:	7afb      	ldrb	r3, [r7, #11]
 8008252:	2b04      	cmp	r3, #4
 8008254:	d160      	bne.n	8008318 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008256:	f107 0310 	add.w	r3, r7, #16
 800825a:	4619      	mov	r1, r3
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f7fd fa3d 	bl	80056dc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008266:	7cfb      	ldrb	r3, [r7, #19]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01d      	beq.n	80082a8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800826c:	f107 031b 	add.w	r3, r7, #27
 8008270:	461a      	mov	r2, r3
 8008272:	2100      	movs	r1, #0
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7fd f925 	bl	80054c4 <VL53L0X_GetVcselPulsePeriod>
 800827a:	4603      	mov	r3, r0
 800827c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008280:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10f      	bne.n	80082a8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008288:	f107 0318 	add.w	r3, r7, #24
 800828c:	461a      	mov	r2, r3
 800828e:	2151      	movs	r1, #81	; 0x51
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f001 fc67 	bl	8009b64 <VL53L0X_RdWord>
 8008296:	4603      	mov	r3, r0
 8008298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800829c:	8b3b      	ldrh	r3, [r7, #24]
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fe05 	bl	8007eae <VL53L0X_decode_timeout>
 80082a4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80082a6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80082a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d109      	bne.n	80082c4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80082b0:	f107 031b 	add.w	r3, r7, #27
 80082b4:	461a      	mov	r2, r3
 80082b6:	2101      	movs	r1, #1
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f7fd f903 	bl	80054c4 <VL53L0X_GetVcselPulsePeriod>
 80082be:	4603      	mov	r3, r0
 80082c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80082c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d128      	bne.n	800831e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80082cc:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 80082ce:	461a      	mov	r2, r3
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff fe02 	bl	8007edc <VL53L0X_calc_timeout_mclks>
 80082d8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80082da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082dc:	6a3a      	ldr	r2, [r7, #32]
 80082de:	4413      	add	r3, r2
 80082e0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 80082e2:	6a38      	ldr	r0, [r7, #32]
 80082e4:	f7ff fdb7 	bl	8007e56 <VL53L0X_encode_timeout>
 80082e8:	4603      	mov	r3, r0
 80082ea:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 80082ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d108      	bne.n	8008306 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80082f4:	8bfb      	ldrh	r3, [r7, #30]
 80082f6:	461a      	mov	r2, r3
 80082f8:	2171      	movs	r1, #113	; 0x71
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f001 fbaa 	bl	8009a54 <VL53L0X_WrWord>
 8008300:	4603      	mov	r3, r0
 8008302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8008306:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800830a:	2b00      	cmp	r3, #0
 800830c:	d107      	bne.n	800831e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8008316:	e002      	b.n	800831e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008318:	23fc      	movs	r3, #252	; 0xfc
 800831a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800831e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008322:	4618      	mov	r0, r3
 8008324:	3728      	adds	r7, #40	; 0x28
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b08a      	sub	sp, #40	; 0x28
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
 8008336:	4613      	mov	r3, r2
 8008338:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800833a:	2300      	movs	r3, #0
 800833c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8008340:	230c      	movs	r3, #12
 8008342:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8008346:	2312      	movs	r3, #18
 8008348:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800834c:	2308      	movs	r3, #8
 800834e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8008352:	230e      	movs	r3, #14
 8008354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800835c:	78bb      	ldrb	r3, [r7, #2]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008368:	23fc      	movs	r3, #252	; 0xfc
 800836a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800836e:	e020      	b.n	80083b2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8008370:	78fb      	ldrb	r3, [r7, #3]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10d      	bne.n	8008392 <VL53L0X_set_vcsel_pulse_period+0x68>
 8008376:	78ba      	ldrb	r2, [r7, #2]
 8008378:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800837c:	429a      	cmp	r2, r3
 800837e:	d304      	bcc.n	800838a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8008380:	78ba      	ldrb	r2, [r7, #2]
 8008382:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008386:	429a      	cmp	r2, r3
 8008388:	d903      	bls.n	8008392 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800838a:	23fc      	movs	r3, #252	; 0xfc
 800838c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008390:	e00f      	b.n	80083b2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d10c      	bne.n	80083b2 <VL53L0X_set_vcsel_pulse_period+0x88>
 8008398:	78ba      	ldrb	r2, [r7, #2]
 800839a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800839e:	429a      	cmp	r2, r3
 80083a0:	d304      	bcc.n	80083ac <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80083a2:	78ba      	ldrb	r2, [r7, #2]
 80083a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d902      	bls.n	80083b2 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80083ac:	23fc      	movs	r3, #252	; 0xfc
 80083ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80083b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80083ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083be:	e239      	b.n	8008834 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80083c0:	78fb      	ldrb	r3, [r7, #3]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d150      	bne.n	8008468 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80083c6:	78bb      	ldrb	r3, [r7, #2]
 80083c8:	2b0c      	cmp	r3, #12
 80083ca:	d110      	bne.n	80083ee <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80083cc:	2218      	movs	r2, #24
 80083ce:	2157      	movs	r1, #87	; 0x57
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 fb1b 	bl	8009a0c <VL53L0X_WrByte>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80083dc:	2208      	movs	r2, #8
 80083de:	2156      	movs	r1, #86	; 0x56
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 fb13 	bl	8009a0c <VL53L0X_WrByte>
 80083e6:	4603      	mov	r3, r0
 80083e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083ec:	e17f      	b.n	80086ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80083ee:	78bb      	ldrb	r3, [r7, #2]
 80083f0:	2b0e      	cmp	r3, #14
 80083f2:	d110      	bne.n	8008416 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80083f4:	2230      	movs	r2, #48	; 0x30
 80083f6:	2157      	movs	r1, #87	; 0x57
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 fb07 	bl	8009a0c <VL53L0X_WrByte>
 80083fe:	4603      	mov	r3, r0
 8008400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8008404:	2208      	movs	r2, #8
 8008406:	2156      	movs	r1, #86	; 0x56
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 faff 	bl	8009a0c <VL53L0X_WrByte>
 800840e:	4603      	mov	r3, r0
 8008410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008414:	e16b      	b.n	80086ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8008416:	78bb      	ldrb	r3, [r7, #2]
 8008418:	2b10      	cmp	r3, #16
 800841a:	d110      	bne.n	800843e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800841c:	2240      	movs	r2, #64	; 0x40
 800841e:	2157      	movs	r1, #87	; 0x57
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 faf3 	bl	8009a0c <VL53L0X_WrByte>
 8008426:	4603      	mov	r3, r0
 8008428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800842c:	2208      	movs	r2, #8
 800842e:	2156      	movs	r1, #86	; 0x56
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 faeb 	bl	8009a0c <VL53L0X_WrByte>
 8008436:	4603      	mov	r3, r0
 8008438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800843c:	e157      	b.n	80086ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800843e:	78bb      	ldrb	r3, [r7, #2]
 8008440:	2b12      	cmp	r3, #18
 8008442:	f040 8154 	bne.w	80086ee <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8008446:	2250      	movs	r2, #80	; 0x50
 8008448:	2157      	movs	r1, #87	; 0x57
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 fade 	bl	8009a0c <VL53L0X_WrByte>
 8008450:	4603      	mov	r3, r0
 8008452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8008456:	2208      	movs	r2, #8
 8008458:	2156      	movs	r1, #86	; 0x56
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f001 fad6 	bl	8009a0c <VL53L0X_WrByte>
 8008460:	4603      	mov	r3, r0
 8008462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008466:	e142      	b.n	80086ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8008468:	78fb      	ldrb	r3, [r7, #3]
 800846a:	2b01      	cmp	r3, #1
 800846c:	f040 813f 	bne.w	80086ee <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8008470:	78bb      	ldrb	r3, [r7, #2]
 8008472:	2b08      	cmp	r3, #8
 8008474:	d14c      	bne.n	8008510 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8008476:	2210      	movs	r2, #16
 8008478:	2148      	movs	r1, #72	; 0x48
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 fac6 	bl	8009a0c <VL53L0X_WrByte>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8008486:	2208      	movs	r2, #8
 8008488:	2147      	movs	r1, #71	; 0x47
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 fabe 	bl	8009a0c <VL53L0X_WrByte>
 8008490:	4603      	mov	r3, r0
 8008492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008496:	2202      	movs	r2, #2
 8008498:	2132      	movs	r1, #50	; 0x32
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f001 fab6 	bl	8009a0c <VL53L0X_WrByte>
 80084a0:	4603      	mov	r3, r0
 80084a2:	461a      	mov	r2, r3
 80084a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084a8:	4313      	orrs	r3, r2
 80084aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80084ae:	220c      	movs	r2, #12
 80084b0:	2130      	movs	r1, #48	; 0x30
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 faaa 	bl	8009a0c <VL53L0X_WrByte>
 80084b8:	4603      	mov	r3, r0
 80084ba:	461a      	mov	r2, r3
 80084bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084c0:	4313      	orrs	r3, r2
 80084c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80084c6:	2201      	movs	r2, #1
 80084c8:	21ff      	movs	r1, #255	; 0xff
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 fa9e 	bl	8009a0c <VL53L0X_WrByte>
 80084d0:	4603      	mov	r3, r0
 80084d2:	461a      	mov	r2, r3
 80084d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084d8:	4313      	orrs	r3, r2
 80084da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80084de:	2230      	movs	r2, #48	; 0x30
 80084e0:	2130      	movs	r1, #48	; 0x30
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f001 fa92 	bl	8009a0c <VL53L0X_WrByte>
 80084e8:	4603      	mov	r3, r0
 80084ea:	461a      	mov	r2, r3
 80084ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084f0:	4313      	orrs	r3, r2
 80084f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80084f6:	2200      	movs	r2, #0
 80084f8:	21ff      	movs	r1, #255	; 0xff
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f001 fa86 	bl	8009a0c <VL53L0X_WrByte>
 8008500:	4603      	mov	r3, r0
 8008502:	461a      	mov	r2, r3
 8008504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008508:	4313      	orrs	r3, r2
 800850a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800850e:	e0ee      	b.n	80086ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8008510:	78bb      	ldrb	r3, [r7, #2]
 8008512:	2b0a      	cmp	r3, #10
 8008514:	d14c      	bne.n	80085b0 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8008516:	2228      	movs	r2, #40	; 0x28
 8008518:	2148      	movs	r1, #72	; 0x48
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f001 fa76 	bl	8009a0c <VL53L0X_WrByte>
 8008520:	4603      	mov	r3, r0
 8008522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8008526:	2208      	movs	r2, #8
 8008528:	2147      	movs	r1, #71	; 0x47
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f001 fa6e 	bl	8009a0c <VL53L0X_WrByte>
 8008530:	4603      	mov	r3, r0
 8008532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008536:	2203      	movs	r2, #3
 8008538:	2132      	movs	r1, #50	; 0x32
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f001 fa66 	bl	8009a0c <VL53L0X_WrByte>
 8008540:	4603      	mov	r3, r0
 8008542:	461a      	mov	r2, r3
 8008544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008548:	4313      	orrs	r3, r2
 800854a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800854e:	2209      	movs	r2, #9
 8008550:	2130      	movs	r1, #48	; 0x30
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 fa5a 	bl	8009a0c <VL53L0X_WrByte>
 8008558:	4603      	mov	r3, r0
 800855a:	461a      	mov	r2, r3
 800855c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008560:	4313      	orrs	r3, r2
 8008562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008566:	2201      	movs	r2, #1
 8008568:	21ff      	movs	r1, #255	; 0xff
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f001 fa4e 	bl	8009a0c <VL53L0X_WrByte>
 8008570:	4603      	mov	r3, r0
 8008572:	461a      	mov	r2, r3
 8008574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008578:	4313      	orrs	r3, r2
 800857a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800857e:	2220      	movs	r2, #32
 8008580:	2130      	movs	r1, #48	; 0x30
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 fa42 	bl	8009a0c <VL53L0X_WrByte>
 8008588:	4603      	mov	r3, r0
 800858a:	461a      	mov	r2, r3
 800858c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008590:	4313      	orrs	r3, r2
 8008592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008596:	2200      	movs	r2, #0
 8008598:	21ff      	movs	r1, #255	; 0xff
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 fa36 	bl	8009a0c <VL53L0X_WrByte>
 80085a0:	4603      	mov	r3, r0
 80085a2:	461a      	mov	r2, r3
 80085a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085a8:	4313      	orrs	r3, r2
 80085aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085ae:	e09e      	b.n	80086ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80085b0:	78bb      	ldrb	r3, [r7, #2]
 80085b2:	2b0c      	cmp	r3, #12
 80085b4:	d14c      	bne.n	8008650 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80085b6:	2238      	movs	r2, #56	; 0x38
 80085b8:	2148      	movs	r1, #72	; 0x48
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fa26 	bl	8009a0c <VL53L0X_WrByte>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80085c6:	2208      	movs	r2, #8
 80085c8:	2147      	movs	r1, #71	; 0x47
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f001 fa1e 	bl	8009a0c <VL53L0X_WrByte>
 80085d0:	4603      	mov	r3, r0
 80085d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80085d6:	2203      	movs	r2, #3
 80085d8:	2132      	movs	r1, #50	; 0x32
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 fa16 	bl	8009a0c <VL53L0X_WrByte>
 80085e0:	4603      	mov	r3, r0
 80085e2:	461a      	mov	r2, r3
 80085e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085e8:	4313      	orrs	r3, r2
 80085ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80085ee:	2208      	movs	r2, #8
 80085f0:	2130      	movs	r1, #48	; 0x30
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 fa0a 	bl	8009a0c <VL53L0X_WrByte>
 80085f8:	4603      	mov	r3, r0
 80085fa:	461a      	mov	r2, r3
 80085fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008600:	4313      	orrs	r3, r2
 8008602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008606:	2201      	movs	r2, #1
 8008608:	21ff      	movs	r1, #255	; 0xff
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 f9fe 	bl	8009a0c <VL53L0X_WrByte>
 8008610:	4603      	mov	r3, r0
 8008612:	461a      	mov	r2, r3
 8008614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008618:	4313      	orrs	r3, r2
 800861a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800861e:	2220      	movs	r2, #32
 8008620:	2130      	movs	r1, #48	; 0x30
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 f9f2 	bl	8009a0c <VL53L0X_WrByte>
 8008628:	4603      	mov	r3, r0
 800862a:	461a      	mov	r2, r3
 800862c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008630:	4313      	orrs	r3, r2
 8008632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008636:	2200      	movs	r2, #0
 8008638:	21ff      	movs	r1, #255	; 0xff
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f001 f9e6 	bl	8009a0c <VL53L0X_WrByte>
 8008640:	4603      	mov	r3, r0
 8008642:	461a      	mov	r2, r3
 8008644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008648:	4313      	orrs	r3, r2
 800864a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800864e:	e04e      	b.n	80086ee <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8008650:	78bb      	ldrb	r3, [r7, #2]
 8008652:	2b0e      	cmp	r3, #14
 8008654:	d14b      	bne.n	80086ee <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8008656:	2248      	movs	r2, #72	; 0x48
 8008658:	2148      	movs	r1, #72	; 0x48
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 f9d6 	bl	8009a0c <VL53L0X_WrByte>
 8008660:	4603      	mov	r3, r0
 8008662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8008666:	2208      	movs	r2, #8
 8008668:	2147      	movs	r1, #71	; 0x47
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f001 f9ce 	bl	8009a0c <VL53L0X_WrByte>
 8008670:	4603      	mov	r3, r0
 8008672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008676:	2203      	movs	r2, #3
 8008678:	2132      	movs	r1, #50	; 0x32
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f001 f9c6 	bl	8009a0c <VL53L0X_WrByte>
 8008680:	4603      	mov	r3, r0
 8008682:	461a      	mov	r2, r3
 8008684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008688:	4313      	orrs	r3, r2
 800868a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800868e:	2207      	movs	r2, #7
 8008690:	2130      	movs	r1, #48	; 0x30
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 f9ba 	bl	8009a0c <VL53L0X_WrByte>
 8008698:	4603      	mov	r3, r0
 800869a:	461a      	mov	r2, r3
 800869c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086a0:	4313      	orrs	r3, r2
 80086a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80086a6:	2201      	movs	r2, #1
 80086a8:	21ff      	movs	r1, #255	; 0xff
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 f9ae 	bl	8009a0c <VL53L0X_WrByte>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086b8:	4313      	orrs	r3, r2
 80086ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80086be:	2220      	movs	r2, #32
 80086c0:	2130      	movs	r1, #48	; 0x30
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 f9a2 	bl	8009a0c <VL53L0X_WrByte>
 80086c8:	4603      	mov	r3, r0
 80086ca:	461a      	mov	r2, r3
 80086cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086d0:	4313      	orrs	r3, r2
 80086d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80086d6:	2200      	movs	r2, #0
 80086d8:	21ff      	movs	r1, #255	; 0xff
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f001 f996 	bl	8009a0c <VL53L0X_WrByte>
 80086e0:	4603      	mov	r3, r0
 80086e2:	461a      	mov	r2, r3
 80086e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086e8:	4313      	orrs	r3, r2
 80086ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80086ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d17f      	bne.n	80087f6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80086f6:	78bb      	ldrb	r3, [r7, #2]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe fe38 	bl	800736e <VL53L0X_encode_vcsel_period>
 80086fe:	4603      	mov	r3, r0
 8008700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800870a:	2b01      	cmp	r3, #1
 800870c:	d045      	beq.n	800879a <VL53L0X_set_vcsel_pulse_period+0x470>
 800870e:	e06e      	b.n	80087ee <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008710:	f107 0314 	add.w	r3, r7, #20
 8008714:	461a      	mov	r2, r3
 8008716:	2103      	movs	r1, #3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff fc33 	bl	8007f84 <get_sequence_step_timeout>
 800871e:	4603      	mov	r3, r0
 8008720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008728:	2b00      	cmp	r3, #0
 800872a:	d109      	bne.n	8008740 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800872c:	f107 0310 	add.w	r3, r7, #16
 8008730:	461a      	mov	r2, r3
 8008732:	2102      	movs	r1, #2
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff fc25 	bl	8007f84 <get_sequence_step_timeout>
 800873a:	4603      	mov	r3, r0
 800873c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008744:	2b00      	cmp	r3, #0
 8008746:	d109      	bne.n	800875c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8008748:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800874c:	461a      	mov	r2, r3
 800874e:	2150      	movs	r1, #80	; 0x50
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f001 f95b 	bl	8009a0c <VL53L0X_WrByte>
 8008756:	4603      	mov	r3, r0
 8008758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800875c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008760:	2b00      	cmp	r3, #0
 8008762:	d108      	bne.n	8008776 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	461a      	mov	r2, r3
 8008768:	2103      	movs	r1, #3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff fceb 	bl	8008146 <set_sequence_step_timeout>
 8008770:	4603      	mov	r3, r0
 8008772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8008776:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800877a:	2b00      	cmp	r3, #0
 800877c:	d108      	bne.n	8008790 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	461a      	mov	r2, r3
 8008782:	2102      	movs	r1, #2
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff fcde 	bl	8008146 <set_sequence_step_timeout>
 800878a:	4603      	mov	r3, r0
 800878c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	78ba      	ldrb	r2, [r7, #2]
 8008794:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008798:	e02e      	b.n	80087f8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800879a:	f107 0318 	add.w	r3, r7, #24
 800879e:	461a      	mov	r2, r3
 80087a0:	2104      	movs	r1, #4
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff fbee 	bl	8007f84 <get_sequence_step_timeout>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80087ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80087b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80087ba:	461a      	mov	r2, r3
 80087bc:	2170      	movs	r1, #112	; 0x70
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 f924 	bl	8009a0c <VL53L0X_WrByte>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80087ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d108      	bne.n	80087e4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	461a      	mov	r2, r3
 80087d6:	2104      	movs	r1, #4
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff fcb4 	bl	8008146 <set_sequence_step_timeout>
 80087de:	4603      	mov	r3, r0
 80087e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	78ba      	ldrb	r2, [r7, #2]
 80087e8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80087ec:	e004      	b.n	80087f8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087ee:	23fc      	movs	r3, #252	; 0xfc
 80087f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80087f4:	e000      	b.n	80087f8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80087f6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80087f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d109      	bne.n	8008814 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008806:	69f9      	ldr	r1, [r7, #28]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7fc fe1d 	bl	8005448 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800880e:	4603      	mov	r3, r0
 8008810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8008814:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008818:	2b00      	cmp	r3, #0
 800881a:	d109      	bne.n	8008830 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800881c:	f107 010f 	add.w	r1, r7, #15
 8008820:	2301      	movs	r3, #1
 8008822:	2200      	movs	r2, #0
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7fe fcbd 	bl	80071a4 <VL53L0X_perform_phase_calibration>
 800882a:	4603      	mov	r3, r0
 800882c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8008830:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008834:	4618      	mov	r0, r3
 8008836:	3728      	adds	r7, #40	; 0x28
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	460b      	mov	r3, r1
 8008846:	607a      	str	r2, [r7, #4]
 8008848:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800884a:	2300      	movs	r3, #0
 800884c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8008854:	2b01      	cmp	r3, #1
 8008856:	d00a      	beq.n	800886e <VL53L0X_get_vcsel_pulse_period+0x32>
 8008858:	e013      	b.n	8008882 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800885a:	f107 0316 	add.w	r3, r7, #22
 800885e:	461a      	mov	r2, r3
 8008860:	2150      	movs	r1, #80	; 0x50
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f001 f954 	bl	8009b10 <VL53L0X_RdByte>
 8008868:	4603      	mov	r3, r0
 800886a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800886c:	e00b      	b.n	8008886 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800886e:	f107 0316 	add.w	r3, r7, #22
 8008872:	461a      	mov	r2, r3
 8008874:	2170      	movs	r1, #112	; 0x70
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f001 f94a 	bl	8009b10 <VL53L0X_RdByte>
 800887c:	4603      	mov	r3, r0
 800887e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008880:	e001      	b.n	8008886 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008882:	23fc      	movs	r3, #252	; 0xfc
 8008884:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008886:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d107      	bne.n	800889e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800888e:	7dbb      	ldrb	r3, [r7, #22]
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe fd59 	bl	8007348 <VL53L0X_decode_vcsel_period>
 8008896:	4603      	mov	r3, r0
 8008898:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	701a      	strb	r2, [r3, #0]

	return Status;
 800889e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b092      	sub	sp, #72	; 0x48
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80088ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80088be:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80088c0:	f240 7376 	movw	r3, #1910	; 0x776
 80088c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80088c6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80088ca:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80088cc:	f44f 7325 	mov.w	r3, #660	; 0x294
 80088d0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80088d2:	f240 234e 	movw	r3, #590	; 0x24e
 80088d6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80088d8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80088dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80088de:	f44f 7325 	mov.w	r3, #660	; 0x294
 80088e2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80088e4:	f240 2326 	movw	r3, #550	; 0x226
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80088ee:	f644 6320 	movw	r3, #20000	; 0x4e20
 80088f2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d205      	bcs.n	800890c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008900:	23fc      	movs	r3, #252	; 0xfc
 8008902:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8008906:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800890a:	e0aa      	b.n	8008a62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800890c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008918:	f107 0314 	add.w	r3, r7, #20
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7fc fedc 	bl	80056dc <VL53L0X_GetSequenceStepEnables>
 8008924:	4603      	mov	r3, r0
 8008926:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800892a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800892e:	2b00      	cmp	r3, #0
 8008930:	d15b      	bne.n	80089ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8008932:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8008934:	2b00      	cmp	r3, #0
 8008936:	d105      	bne.n	8008944 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008938:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800893a:	2b00      	cmp	r3, #0
 800893c:	d102      	bne.n	8008944 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800893e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8008940:	2b00      	cmp	r3, #0
 8008942:	d052      	beq.n	80089ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8008944:	f107 0310 	add.w	r3, r7, #16
 8008948:	461a      	mov	r2, r3
 800894a:	2102      	movs	r1, #2
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7ff fb19 	bl	8007f84 <get_sequence_step_timeout>
 8008952:	4603      	mov	r3, r0
 8008954:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008958:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008960:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008964:	e07d      	b.n	8008a62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8008966:	7d3b      	ldrb	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00f      	beq.n	800898c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800896c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800896e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008970:	4413      	add	r3, r2
 8008972:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8008974:	69fa      	ldr	r2, [r7, #28]
 8008976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008978:	429a      	cmp	r2, r3
 800897a:	d204      	bcs.n	8008986 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800897c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	643b      	str	r3, [r7, #64]	; 0x40
 8008984:	e002      	b.n	800898c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008986:	23fc      	movs	r3, #252	; 0xfc
 8008988:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800898c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8008994:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008998:	e063      	b.n	8008a62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800899a:	7dbb      	ldrb	r3, [r7, #22]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d011      	beq.n	80089c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a4:	4413      	add	r3, r2
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80089aa:	69fa      	ldr	r2, [r7, #28]
 80089ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d204      	bcs.n	80089bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80089b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	643b      	str	r3, [r7, #64]	; 0x40
 80089ba:	e016      	b.n	80089ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80089bc:	23fc      	movs	r3, #252	; 0xfc
 80089be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80089c2:	e012      	b.n	80089ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80089c4:	7d7b      	ldrb	r3, [r7, #21]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00f      	beq.n	80089ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ce:	4413      	add	r3, r2
 80089d0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80089d2:	69fa      	ldr	r2, [r7, #28]
 80089d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d204      	bcs.n	80089e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80089da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	643b      	str	r3, [r7, #64]	; 0x40
 80089e2:	e002      	b.n	80089ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80089e4:	23fc      	movs	r3, #252	; 0xfc
 80089e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80089ea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80089f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80089f6:	e034      	b.n	8008a62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d019      	beq.n	8008a32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80089fe:	f107 030c 	add.w	r3, r7, #12
 8008a02:	461a      	mov	r2, r3
 8008a04:	2103      	movs	r1, #3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff fabc 	bl	8007f84 <get_sequence_step_timeout>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a16:	4413      	add	r3, r2
 8008a18:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008a1a:	69fa      	ldr	r2, [r7, #28]
 8008a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d204      	bcs.n	8008a2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8008a22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	643b      	str	r3, [r7, #64]	; 0x40
 8008a2a:	e002      	b.n	8008a32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008a2c:	23fc      	movs	r3, #252	; 0xfc
 8008a2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8008a32:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d111      	bne.n	8008a5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8008a3a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00e      	beq.n	8008a5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8008a40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008a48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a4a:	2104      	movs	r1, #4
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff fb7a 	bl	8008146 <set_sequence_step_timeout>
 8008a52:	4603      	mov	r3, r0
 8008a54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008a5e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3748      	adds	r7, #72	; 0x48
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b090      	sub	sp, #64	; 0x40
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a74:	2300      	movs	r3, #0
 8008a76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008a7a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008a7e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008a80:	f240 7376 	movw	r3, #1910	; 0x776
 8008a84:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8008a86:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008a8a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008a8c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008a90:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8008a92:	f240 234e 	movw	r3, #590	; 0x24e
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008a98:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008a9e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008aa4:	f240 2326 	movw	r3, #550	; 0x226
 8008aa8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab2:	441a      	add	r2, r3
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008ab8:	f107 0318 	add.w	r3, r7, #24
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7fc fe0c 	bl	80056dc <VL53L0X_GetSequenceStepEnables>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008aca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008ad2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ad6:	e075      	b.n	8008bc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8008ad8:	7e3b      	ldrb	r3, [r7, #24]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d105      	bne.n	8008aea <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008ade:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8008ae4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d030      	beq.n	8008b4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008aea:	f107 0310 	add.w	r3, r7, #16
 8008aee:	461a      	mov	r2, r3
 8008af0:	2102      	movs	r1, #2
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7ff fa46 	bl	8007f84 <get_sequence_step_timeout>
 8008af8:	4603      	mov	r3, r0
 8008afa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008afe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d122      	bne.n	8008b4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8008b06:	7e3b      	ldrb	r3, [r7, #24]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d007      	beq.n	8008b1c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008b10:	6939      	ldr	r1, [r7, #16]
 8008b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b14:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008b16:	441a      	add	r2, r3
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8008b1c:	7ebb      	ldrb	r3, [r7, #26]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d009      	beq.n	8008b36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8008b26:	6939      	ldr	r1, [r7, #16]
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	440b      	add	r3, r1
 8008b2c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008b2e:	441a      	add	r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	e00a      	b.n	8008b4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8008b36:	7e7b      	ldrb	r3, [r7, #25]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d007      	beq.n	8008b4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008b40:	6939      	ldr	r1, [r7, #16]
 8008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b44:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008b46:	441a      	add	r2, r3
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d114      	bne.n	8008b7e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8008b54:	7efb      	ldrb	r3, [r7, #27]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d011      	beq.n	8008b7e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008b5a:	f107 030c 	add.w	r3, r7, #12
 8008b5e:	461a      	mov	r2, r3
 8008b60:	2103      	movs	r1, #3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7ff fa0e 	bl	8007f84 <get_sequence_step_timeout>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8008b72:	68f9      	ldr	r1, [r7, #12]
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008b78:	441a      	add	r2, r3
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d114      	bne.n	8008bb0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8008b86:	7f3b      	ldrb	r3, [r7, #28]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d011      	beq.n	8008bb0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008b8c:	f107 0314 	add.w	r3, r7, #20
 8008b90:	461a      	mov	r2, r3
 8008b92:	2104      	movs	r1, #4
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7ff f9f5 	bl	8007f84 <get_sequence_step_timeout>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8008ba4:	6979      	ldr	r1, [r7, #20]
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008baa:	441a      	add	r2, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008bb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bc0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3740      	adds	r7, #64	; 0x40
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008bde:	e0c6      	b.n	8008d6e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	4413      	add	r3, r2
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	74fb      	strb	r3, [r7, #19]
		Index++;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	3301      	adds	r3, #1
 8008bee:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008bf0:	7cfb      	ldrb	r3, [r7, #19]
 8008bf2:	2bff      	cmp	r3, #255	; 0xff
 8008bf4:	f040 808d 	bne.w	8008d12 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	747b      	strb	r3, [r7, #17]
			Index++;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	3301      	adds	r3, #1
 8008c06:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008c08:	7c7b      	ldrb	r3, [r7, #17]
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d87e      	bhi.n	8008d0c <VL53L0X_load_tuning_settings+0x140>
 8008c0e:	a201      	add	r2, pc, #4	; (adr r2, 8008c14 <VL53L0X_load_tuning_settings+0x48>)
 8008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c14:	08008c25 	.word	0x08008c25
 8008c18:	08008c5f 	.word	0x08008c5f
 8008c1c:	08008c99 	.word	0x08008c99
 8008c20:	08008cd3 	.word	0x08008cd3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	4413      	add	r3, r2
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	743b      	strb	r3, [r7, #16]
				Index++;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	3301      	adds	r3, #1
 8008c32:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	4413      	add	r3, r2
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	3301      	adds	r3, #1
 8008c42:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008c44:	7c3b      	ldrb	r3, [r7, #16]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	021b      	lsls	r3, r3, #8
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	4413      	add	r3, r2
 8008c52:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	89ba      	ldrh	r2, [r7, #12]
 8008c58:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008c5c:	e087      	b.n	8008d6e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	4413      	add	r3, r2
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	743b      	strb	r3, [r7, #16]
				Index++;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	4413      	add	r3, r2
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008c7e:	7c3b      	ldrb	r3, [r7, #16]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	021b      	lsls	r3, r3, #8
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	89ba      	ldrh	r2, [r7, #12]
 8008c92:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8008c96:	e06a      	b.n	8008d6e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	743b      	strb	r3, [r7, #16]
				Index++;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4413      	add	r3, r2
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008cb8:	7c3b      	ldrb	r3, [r7, #16]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	021b      	lsls	r3, r3, #8
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	4413      	add	r3, r2
 8008cc6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	89ba      	ldrh	r2, [r7, #12]
 8008ccc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008cd0:	e04d      	b.n	8008d6e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	743b      	strb	r3, [r7, #16]
				Index++;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008cf2:	7c3b      	ldrb	r3, [r7, #16]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	4413      	add	r3, r2
 8008d00:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	89ba      	ldrh	r2, [r7, #12]
 8008d06:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8008d0a:	e030      	b.n	8008d6e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d0c:	23fc      	movs	r3, #252	; 0xfc
 8008d0e:	77fb      	strb	r3, [r7, #31]
 8008d10:	e02d      	b.n	8008d6e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008d12:	7cfb      	ldrb	r3, [r7, #19]
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d828      	bhi.n	8008d6a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	3301      	adds	r3, #1
 8008d26:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61bb      	str	r3, [r7, #24]
 8008d2c:	e00f      	b.n	8008d4e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	4413      	add	r3, r2
 8008d34:	7819      	ldrb	r1, [r3, #0]
 8008d36:	f107 0208 	add.w	r2, r7, #8
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	460a      	mov	r2, r1
 8008d40:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	3301      	adds	r3, #1
 8008d46:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	61bb      	str	r3, [r7, #24]
 8008d4e:	7cfb      	ldrb	r3, [r7, #19]
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	dbeb      	blt.n	8008d2e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8008d56:	7cfb      	ldrb	r3, [r7, #19]
 8008d58:	f107 0208 	add.w	r2, r7, #8
 8008d5c:	7cb9      	ldrb	r1, [r7, #18]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fdf8 	bl	8009954 <VL53L0X_WriteMulti>
 8008d64:	4603      	mov	r3, r0
 8008d66:	77fb      	strb	r3, [r7, #31]
 8008d68:	e001      	b.n	8008d6e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d6a:	23fc      	movs	r3, #252	; 0xfc
 8008d6c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	4413      	add	r3, r2
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d004      	beq.n	8008d84 <VL53L0X_load_tuning_settings+0x1b8>
 8008d7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f43f af2e 	beq.w	8008be0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3720      	adds	r7, #32
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b088      	sub	sp, #32
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008da6:	f107 0313 	add.w	r3, r7, #19
 8008daa:	4619      	mov	r1, r3
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7fc fd21 	bl	80057f4 <VL53L0X_GetXTalkCompensationEnable>
 8008db2:	4603      	mov	r3, r0
 8008db4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008db6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d111      	bne.n	8008de2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008dbe:	7cfb      	ldrb	r3, [r7, #19]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00e      	beq.n	8008de2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	8a9b      	ldrh	r3, [r3, #20]
 8008dce:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	fb02 f303 	mul.w	r3, r2, r3
 8008dd6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	3380      	adds	r3, #128	; 0x80
 8008ddc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008de2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3720      	adds	r7, #32
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b086      	sub	sp, #24
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8008e06:	f107 0310 	add.w	r3, r7, #16
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	68b9      	ldr	r1, [r7, #8]
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7ff ffbe 	bl	8008d90 <VL53L0X_get_total_xtalk_rate>
 8008e14:	4603      	mov	r3, r0
 8008e16:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8008e18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d105      	bne.n	8008e2c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	441a      	add	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	601a      	str	r2, [r3, #0]

	return Status;
 8008e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3718      	adds	r7, #24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b09a      	sub	sp, #104	; 0x68
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
 8008e44:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8008e46:	2312      	movs	r3, #18
 8008e48:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8008e4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e4e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008e50:	2342      	movs	r3, #66	; 0x42
 8008e52:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8008e54:	2306      	movs	r3, #6
 8008e56:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008e58:	2307      	movs	r3, #7
 8008e5a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8008e68:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008e70:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8008e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e76:	fb02 f303 	mul.w	r3, r2, r3
 8008e7a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7e:	3380      	adds	r3, #128	; 0x80
 8008e80:	0a1b      	lsrs	r3, r3, #8
 8008e82:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8008e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e88:	fb02 f303 	mul.w	r3, r2, r3
 8008e8c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d01b      	beq.n	8008ed0 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	029b      	lsls	r3, r3, #10
 8008e9c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8008ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ea4:	4413      	add	r3, r2
 8008ea6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008ea8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8008eb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	4413      	add	r3, r2
 8008eba:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ebe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ec0:	fb02 f303 	mul.w	r3, r2, r3
 8008ec4:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8008ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ec8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008ecc:	0c1b      	lsrs	r3, r3, #16
 8008ece:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008ed4:	fb02 f303 	mul.w	r3, r2, r3
 8008ed8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008edc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008ee0:	0c1b      	lsrs	r3, r3, #16
 8008ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8008ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ee8:	fb02 f303 	mul.w	r3, r2, r3
 8008eec:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ef0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008ef4:	0c1b      	lsrs	r3, r3, #16
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8008ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008efa:	085a      	lsrs	r2, r3, #1
 8008efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efe:	441a      	add	r2, r3
 8008f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f06:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f0c:	fb02 f303 	mul.w	r3, r2, r3
 8008f10:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f18:	d302      	bcc.n	8008f20 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8008f1a:	4b55      	ldr	r3, [pc, #340]	; (8009070 <VL53L0X_calc_dmax+0x238>)
 8008f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8008f1e:	e016      	b.n	8008f4e <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8008f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f22:	085a      	lsrs	r2, r3, #1
 8008f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f26:	441a      	add	r2, r3
 8008f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8008f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f34:	fb02 f303 	mul.w	r3, r2, r3
 8008f38:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8008f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008f40:	0c1b      	lsrs	r3, r3, #16
 8008f42:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8008f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f48:	fb02 f303 	mul.w	r3, r2, r3
 8008f4c:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f50:	039b      	lsls	r3, r3, #14
 8008f52:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008f56:	4a47      	ldr	r2, [pc, #284]	; (8009074 <VL53L0X_calc_dmax+0x23c>)
 8008f58:	fba2 2303 	umull	r2, r3, r2, r3
 8008f5c:	099b      	lsrs	r3, r3, #6
 8008f5e:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f64:	fb02 f303 	mul.w	r3, r2, r3
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8008f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f6e:	fb02 f303 	mul.w	r3, r2, r3
 8008f72:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	3308      	adds	r3, #8
 8008f78:	091b      	lsrs	r3, r3, #4
 8008f7a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8008f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f86:	4613      	mov	r3, r2
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	4413      	add	r3, r2
 8008f8c:	011b      	lsls	r3, r3, #4
 8008f8e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008f96:	0b9b      	lsrs	r3, r3, #14
 8008f98:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f9e:	4413      	add	r3, r2
 8008fa0:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fa4:	085b      	lsrs	r3, r3, #1
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	4413      	add	r3, r2
 8008faa:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb4:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	039b      	lsls	r3, r3, #14
 8008fba:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	085b      	lsrs	r3, r3, #1
 8008fc0:	69ba      	ldr	r2, [r7, #24]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fce:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008fd4:	fb02 f303 	mul.w	r3, r2, r3
 8008fd8:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008fe0:	4a24      	ldr	r2, [pc, #144]	; (8009074 <VL53L0X_calc_dmax+0x23c>)
 8008fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe6:	099b      	lsrs	r3, r3, #6
 8008fe8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008ff6:	4a1f      	ldr	r2, [pc, #124]	; (8009074 <VL53L0X_calc_dmax+0x23c>)
 8008ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffc:	099b      	lsrs	r3, r3, #6
 8008ffe:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8009000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009002:	3380      	adds	r3, #128	; 0x80
 8009004:	0a1b      	lsrs	r3, r3, #8
 8009006:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d008      	beq.n	8009020 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	085a      	lsrs	r2, r3, #1
 8009012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009014:	441a      	add	r2, r3
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	fbb2 f3f3 	udiv	r3, r2, r3
 800901c:	65bb      	str	r3, [r7, #88]	; 0x58
 800901e:	e001      	b.n	8009024 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8009024:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009026:	f7fe f9b5 	bl	8007394 <VL53L0X_isqrt>
 800902a:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d008      	beq.n	8009044 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	085a      	lsrs	r2, r3, #1
 8009036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009038:	441a      	add	r2, r3
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009040:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009042:	e001      	b.n	8009048 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8009048:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800904a:	f7fe f9a3 	bl	8007394 <VL53L0X_isqrt>
 800904e:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800905a:	429a      	cmp	r2, r3
 800905c:	d902      	bls.n	8009064 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800905e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009060:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009062:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8009064:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8009068:	4618      	mov	r0, r3
 800906a:	3768      	adds	r7, #104	; 0x68
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	fff00000 	.word	0xfff00000
 8009074:	10624dd3 	.word	0x10624dd3

08009078 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b0b4      	sub	sp, #208	; 0xd0
 800907c:	af04      	add	r7, sp, #16
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
 8009084:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8009086:	f44f 7348 	mov.w	r3, #800	; 0x320
 800908a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800908e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009092:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8009096:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800909a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800909e:	f241 235c 	movw	r3, #4700	; 0x125c
 80090a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80090a6:	4b9e      	ldr	r3, [pc, #632]	; (8009320 <VL53L0X_calc_sigma_estimate+0x2a8>)
 80090a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80090ac:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80090b0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80090b2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80090b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80090be:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80090c0:	4b98      	ldr	r3, [pc, #608]	; (8009324 <VL53L0X_calc_sigma_estimate+0x2ac>)
 80090c2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80090c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090c8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80090ca:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80090ce:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80090d0:	f240 6377 	movw	r3, #1655	; 0x677
 80090d4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090ea:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80090ee:	0c1b      	lsrs	r3, r3, #16
 80090f0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80090f8:	f107 0310 	add.w	r3, r7, #16
 80090fc:	461a      	mov	r2, r3
 80090fe:	68b9      	ldr	r1, [r7, #8]
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f7ff fe74 	bl	8008dee <VL53L0X_get_total_signal_rate>
 8009106:	4603      	mov	r3, r0
 8009108:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800910c:	f107 0314 	add.w	r3, r7, #20
 8009110:	461a      	mov	r2, r3
 8009112:	68b9      	ldr	r1, [r7, #8]
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f7ff fe3b 	bl	8008d90 <VL53L0X_get_total_xtalk_rate>
 800911a:	4603      	mov	r3, r0
 800911c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009126:	fb02 f303 	mul.w	r3, r2, r3
 800912a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800912c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800912e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009132:	0c1b      	lsrs	r3, r3, #16
 8009134:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800913c:	fb02 f303 	mul.w	r3, r2, r3
 8009140:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8009144:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800914a:	429a      	cmp	r2, r3
 800914c:	d902      	bls.n	8009154 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800914e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009150:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8009154:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009158:	2b00      	cmp	r3, #0
 800915a:	d168      	bne.n	800922e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009162:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800916c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009170:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009174:	461a      	mov	r2, r3
 8009176:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f7fe feae 	bl	8007edc <VL53L0X_calc_timeout_mclks>
 8009180:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8009192:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009196:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800919a:	461a      	mov	r2, r3
 800919c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7fe fe9b 	bl	8007edc <VL53L0X_calc_timeout_mclks>
 80091a6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80091a8:	2303      	movs	r3, #3
 80091aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80091ae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80091b2:	2b08      	cmp	r3, #8
 80091b4:	d102      	bne.n	80091bc <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80091b6:	2302      	movs	r3, #2
 80091b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80091bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091c0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80091c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80091c6:	fb02 f303 	mul.w	r3, r2, r3
 80091ca:	02db      	lsls	r3, r3, #11
 80091cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80091d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80091d8:	4a53      	ldr	r2, [pc, #332]	; (8009328 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80091da:	fba2 2303 	umull	r2, r3, r2, r3
 80091de:	099b      	lsrs	r3, r3, #6
 80091e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80091e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091ea:	fb02 f303 	mul.w	r3, r2, r3
 80091ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80091f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80091fa:	4a4b      	ldr	r2, [pc, #300]	; (8009328 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80091fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009200:	099b      	lsrs	r3, r3, #6
 8009202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	3380      	adds	r3, #128	; 0x80
 800920a:	0a1b      	lsrs	r3, r3, #8
 800920c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009214:	fb02 f303 	mul.w	r3, r2, r3
 8009218:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800921c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009220:	3380      	adds	r3, #128	; 0x80
 8009222:	0a1b      	lsrs	r3, r3, #8
 8009224:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	021b      	lsls	r3, r3, #8
 800922c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800922e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009232:	2b00      	cmp	r3, #0
 8009234:	d002      	beq.n	800923c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8009236:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800923a:	e165      	b.n	8009508 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800923c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10c      	bne.n	800925c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009248:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009250:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2200      	movs	r2, #0
 8009258:	601a      	str	r2, [r3, #0]
 800925a:	e153      	b.n	8009504 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800925c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8009264:	2301      	movs	r3, #1
 8009266:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800926a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800926e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009272:	041a      	lsls	r2, r3, #16
 8009274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009276:	fbb2 f3f3 	udiv	r3, r2, r3
 800927a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800927e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009284:	429a      	cmp	r2, r3
 8009286:	d902      	bls.n	800928e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800928a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800928e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009292:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009296:	fb02 f303 	mul.w	r3, r2, r3
 800929a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800929e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80092a2:	4613      	mov	r3, r2
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	4413      	add	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe f872 	bl	8007394 <VL53L0X_isqrt>
 80092b0:	4603      	mov	r3, r0
 80092b2:	005b      	lsls	r3, r3, #1
 80092b4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	891b      	ldrh	r3, [r3, #8]
 80092ba:	461a      	mov	r2, r3
 80092bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092be:	fb02 f303 	mul.w	r3, r2, r3
 80092c2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80092c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092c6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80092c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092cc:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80092ce:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80092d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80092d4:	4a14      	ldr	r2, [pc, #80]	; (8009328 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80092d6:	fba2 2303 	umull	r2, r3, r2, r3
 80092da:	099b      	lsrs	r3, r3, #6
 80092dc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80092de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092e0:	041b      	lsls	r3, r3, #16
 80092e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80092e6:	4a10      	ldr	r2, [pc, #64]	; (8009328 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80092e8:	fba2 2303 	umull	r2, r3, r2, r3
 80092ec:	099b      	lsrs	r3, r3, #6
 80092ee:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80092f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80092f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	bfb8      	it	lt
 8009302:	425b      	neglt	r3, r3
 8009304:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8009306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	7e1b      	ldrb	r3, [r3, #24]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8009314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800931c:	e035      	b.n	800938a <VL53L0X_calc_sigma_estimate+0x312>
 800931e:	bf00      	nop
 8009320:	028f87ae 	.word	0x028f87ae
 8009324:	0006999a 	.word	0x0006999a
 8009328:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800932c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800932e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009332:	fbb2 f3f3 	udiv	r3, r2, r3
 8009336:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800933a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009344:	fb02 f303 	mul.w	r3, r2, r3
 8009348:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800934c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009352:	4413      	add	r3, r2
 8009354:	0c1b      	lsrs	r3, r3, #16
 8009356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800935a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800935e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8009366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800936a:	085b      	lsrs	r3, r3, #1
 800936c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009374:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009378:	fb02 f303 	mul.w	r3, r2, r3
 800937c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8009380:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009384:	0b9b      	lsrs	r3, r3, #14
 8009386:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800938a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800938e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009390:	fb02 f303 	mul.w	r3, r2, r3
 8009394:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800939c:	0c1b      	lsrs	r3, r3, #16
 800939e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80093a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093a4:	fb02 f303 	mul.w	r3, r2, r3
 80093a8:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80093aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80093b6:	0c1b      	lsrs	r3, r3, #16
 80093b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80093ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093be:	fb02 f303 	mul.w	r3, r2, r3
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80093c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c8:	4413      	add	r3, r2
 80093ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80093cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ce:	f7fd ffe1 	bl	8007394 <VL53L0X_isqrt>
 80093d2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	3332      	adds	r3, #50	; 0x32
 80093de:	4a4c      	ldr	r2, [pc, #304]	; (8009510 <VL53L0X_calc_sigma_estimate+0x498>)
 80093e0:	fba2 2303 	umull	r2, r3, r2, r3
 80093e4:	095a      	lsrs	r2, r3, #5
 80093e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80093f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80093f4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80093f8:	fb02 f303 	mul.w	r3, r2, r3
 80093fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8009400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009404:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009408:	3308      	adds	r3, #8
 800940a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800940e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009412:	4a40      	ldr	r2, [pc, #256]	; (8009514 <VL53L0X_calc_sigma_estimate+0x49c>)
 8009414:	fba2 2303 	umull	r2, r3, r2, r3
 8009418:	0b5b      	lsrs	r3, r3, #13
 800941a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800941e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009422:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009424:	429a      	cmp	r2, r3
 8009426:	d902      	bls.n	800942e <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8009428:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800942a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800942e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009436:	4413      	add	r3, r2
 8009438:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800943c:	4a36      	ldr	r2, [pc, #216]	; (8009518 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800943e:	fba2 2303 	umull	r2, r3, r2, r3
 8009442:	099b      	lsrs	r3, r3, #6
 8009444:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800944a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800944e:	441a      	add	r2, r3
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 8009456:	4618      	mov	r0, r3
 8009458:	f7fd ff9c 	bl	8007394 <VL53L0X_isqrt>
 800945c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	021b      	lsls	r3, r3, #8
 8009462:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800946a:	4a2b      	ldr	r2, [pc, #172]	; (8009518 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800946c:	fba2 2303 	umull	r2, r3, r2, r3
 8009470:	099b      	lsrs	r3, r3, #6
 8009472:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8009474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009478:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800947c:	fb02 f303 	mul.w	r3, r2, r3
 8009480:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	69fa      	ldr	r2, [r7, #28]
 8009486:	fb02 f303 	mul.w	r3, r2, r3
 800948a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800948c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800948e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009490:	4413      	add	r3, r2
 8009492:	4618      	mov	r0, r3
 8009494:	f7fd ff7e 	bl	8007394 <VL53L0X_isqrt>
 8009498:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094a0:	fb02 f303 	mul.w	r3, r2, r3
 80094a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80094a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d009      	beq.n	80094c2 <VL53L0X_calc_sigma_estimate+0x44a>
 80094ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d005      	beq.n	80094c2 <VL53L0X_calc_sigma_estimate+0x44a>
 80094b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80094ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094be:	429a      	cmp	r2, r3
 80094c0:	d903      	bls.n	80094ca <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80094c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80094d0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80094dc:	6939      	ldr	r1, [r7, #16]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	9303      	str	r3, [sp, #12]
 80094e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094e6:	9302      	str	r3, [sp, #8]
 80094e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff fc9d 	bl	8008e38 <VL53L0X_calc_dmax>
 80094fe:	4603      	mov	r3, r0
 8009500:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009504:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8009508:	4618      	mov	r0, r3
 800950a:	37c0      	adds	r7, #192	; 0xc0
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	51eb851f 	.word	0x51eb851f
 8009514:	d1b71759 	.word	0xd1b71759
 8009518:	10624dd3 	.word	0x10624dd3

0800951c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b090      	sub	sp, #64	; 0x40
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	607a      	str	r2, [r7, #4]
 8009526:	461a      	mov	r2, r3
 8009528:	460b      	mov	r3, r1
 800952a:	72fb      	strb	r3, [r7, #11]
 800952c:	4613      	mov	r3, r2
 800952e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009530:	2300      	movs	r3, #0
 8009532:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800956e:	7afb      	ldrb	r3, [r7, #11]
 8009570:	10db      	asrs	r3, r3, #3
 8009572:	b2db      	uxtb	r3, r3
 8009574:	f003 030f 	and.w	r3, r3, #15
 8009578:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800957c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009580:	2b00      	cmp	r3, #0
 8009582:	d017      	beq.n	80095b4 <VL53L0X_get_pal_range_status+0x98>
 8009584:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009588:	2b05      	cmp	r3, #5
 800958a:	d013      	beq.n	80095b4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800958c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009590:	2b07      	cmp	r3, #7
 8009592:	d00f      	beq.n	80095b4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8009594:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009598:	2b0c      	cmp	r3, #12
 800959a:	d00b      	beq.n	80095b4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800959c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095a0:	2b0d      	cmp	r3, #13
 80095a2:	d007      	beq.n	80095b4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80095a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095a8:	2b0e      	cmp	r3, #14
 80095aa:	d003      	beq.n	80095b4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80095ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095b0:	2b0f      	cmp	r3, #15
 80095b2:	d103      	bne.n	80095bc <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80095b4:	2301      	movs	r3, #1
 80095b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80095ba:	e002      	b.n	80095c2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80095c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d109      	bne.n	80095de <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80095ca:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80095ce:	461a      	mov	r2, r3
 80095d0:	2100      	movs	r1, #0
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f7fc f9e2 	bl	800599c <VL53L0X_GetLimitCheckEnable>
 80095d8:	4603      	mov	r3, r0
 80095da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80095de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d02e      	beq.n	8009644 <VL53L0X_get_pal_range_status+0x128>
 80095e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d12a      	bne.n	8009644 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80095ee:	f107 0310 	add.w	r3, r7, #16
 80095f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80095f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff fd3d 	bl	8009078 <VL53L0X_calc_sigma_estimate>
 80095fe:	4603      	mov	r3, r0
 8009600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8009604:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009608:	2b00      	cmp	r3, #0
 800960a:	d103      	bne.n	8009614 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	b29a      	uxth	r2, r3
 8009610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009612:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8009614:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009618:	2b00      	cmp	r3, #0
 800961a:	d113      	bne.n	8009644 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800961c:	f107 0320 	add.w	r3, r7, #32
 8009620:	461a      	mov	r2, r3
 8009622:	2100      	movs	r1, #0
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f7fc fa3f 	bl	8005aa8 <VL53L0X_GetLimitCheckValue>
 800962a:	4603      	mov	r3, r0
 800962c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d006      	beq.n	8009644 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8009636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009638:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800963a:	429a      	cmp	r2, r3
 800963c:	d902      	bls.n	8009644 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800963e:	2301      	movs	r3, #1
 8009640:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009644:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009648:	2b00      	cmp	r3, #0
 800964a:	d109      	bne.n	8009660 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800964c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8009650:	461a      	mov	r2, r3
 8009652:	2102      	movs	r1, #2
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7fc f9a1 	bl	800599c <VL53L0X_GetLimitCheckEnable>
 800965a:	4603      	mov	r3, r0
 800965c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8009660:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009664:	2b00      	cmp	r3, #0
 8009666:	d044      	beq.n	80096f2 <VL53L0X_get_pal_range_status+0x1d6>
 8009668:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800966c:	2b00      	cmp	r3, #0
 800966e:	d140      	bne.n	80096f2 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009670:	f107 031c 	add.w	r3, r7, #28
 8009674:	461a      	mov	r2, r3
 8009676:	2102      	movs	r1, #2
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f7fc fa15 	bl	8005aa8 <VL53L0X_GetLimitCheckValue>
 800967e:	4603      	mov	r3, r0
 8009680:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009684:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009688:	2b00      	cmp	r3, #0
 800968a:	d107      	bne.n	800969c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800968c:	2201      	movs	r2, #1
 800968e:	21ff      	movs	r1, #255	; 0xff
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 f9bb 	bl	8009a0c <VL53L0X_WrByte>
 8009696:	4603      	mov	r3, r0
 8009698:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800969c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d109      	bne.n	80096b8 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 80096a4:	f107 0316 	add.w	r3, r7, #22
 80096a8:	461a      	mov	r2, r3
 80096aa:	21b6      	movs	r1, #182	; 0xb6
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 fa59 	bl	8009b64 <VL53L0X_RdWord>
 80096b2:	4603      	mov	r3, r0
 80096b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80096b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d107      	bne.n	80096d0 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80096c0:	2200      	movs	r2, #0
 80096c2:	21ff      	movs	r1, #255	; 0xff
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 f9a1 	bl	8009a0c <VL53L0X_WrByte>
 80096ca:	4603      	mov	r3, r0
 80096cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80096d0:	8afb      	ldrh	r3, [r7, #22]
 80096d2:	025b      	lsls	r3, r3, #9
 80096d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096da:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d006      	beq.n	80096f2 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80096e4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80096e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d902      	bls.n	80096f2 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80096ec:	2301      	movs	r3, #1
 80096ee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80096f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d109      	bne.n	800970e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80096fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80096fe:	461a      	mov	r2, r3
 8009700:	2103      	movs	r1, #3
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f7fc f94a 	bl	800599c <VL53L0X_GetLimitCheckEnable>
 8009708:	4603      	mov	r3, r0
 800970a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800970e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009712:	2b00      	cmp	r3, #0
 8009714:	d023      	beq.n	800975e <VL53L0X_get_pal_range_status+0x242>
 8009716:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800971a:	2b00      	cmp	r3, #0
 800971c:	d11f      	bne.n	800975e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800971e:	893b      	ldrh	r3, [r7, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d102      	bne.n	800972a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	637b      	str	r3, [r7, #52]	; 0x34
 8009728:	e005      	b.n	8009736 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	021a      	lsls	r2, r3, #8
 800972e:	893b      	ldrh	r3, [r7, #8]
 8009730:	fbb2 f3f3 	udiv	r3, r2, r3
 8009734:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009736:	f107 0318 	add.w	r3, r7, #24
 800973a:	461a      	mov	r2, r3
 800973c:	2103      	movs	r1, #3
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f7fc f9b2 	bl	8005aa8 <VL53L0X_GetLimitCheckValue>
 8009744:	4603      	mov	r3, r0
 8009746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d006      	beq.n	800975e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009750:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8009752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009754:	429a      	cmp	r2, r3
 8009756:	d202      	bcs.n	800975e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009758:	2301      	movs	r3, #1
 800975a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800975e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009762:	2b00      	cmp	r3, #0
 8009764:	d14a      	bne.n	80097fc <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8009766:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800976a:	2b01      	cmp	r3, #1
 800976c:	d103      	bne.n	8009776 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800976e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009770:	22ff      	movs	r2, #255	; 0xff
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	e042      	b.n	80097fc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8009776:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800977a:	2b01      	cmp	r3, #1
 800977c:	d007      	beq.n	800978e <VL53L0X_get_pal_range_status+0x272>
 800977e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009782:	2b02      	cmp	r3, #2
 8009784:	d003      	beq.n	800978e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8009786:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800978a:	2b03      	cmp	r3, #3
 800978c:	d103      	bne.n	8009796 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800978e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009790:	2205      	movs	r2, #5
 8009792:	701a      	strb	r2, [r3, #0]
 8009794:	e032      	b.n	80097fc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8009796:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800979a:	2b06      	cmp	r3, #6
 800979c:	d003      	beq.n	80097a6 <VL53L0X_get_pal_range_status+0x28a>
 800979e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097a2:	2b09      	cmp	r3, #9
 80097a4:	d103      	bne.n	80097ae <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80097a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a8:	2204      	movs	r2, #4
 80097aa:	701a      	strb	r2, [r3, #0]
 80097ac:	e026      	b.n	80097fc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80097ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097b2:	2b08      	cmp	r3, #8
 80097b4:	d007      	beq.n	80097c6 <VL53L0X_get_pal_range_status+0x2aa>
 80097b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097ba:	2b0a      	cmp	r3, #10
 80097bc:	d003      	beq.n	80097c6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80097be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d103      	bne.n	80097ce <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80097c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097c8:	2203      	movs	r2, #3
 80097ca:	701a      	strb	r2, [r3, #0]
 80097cc:	e016      	b.n	80097fc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80097ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d003      	beq.n	80097de <VL53L0X_get_pal_range_status+0x2c2>
 80097d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d103      	bne.n	80097e6 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80097de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e0:	2202      	movs	r2, #2
 80097e2:	701a      	strb	r2, [r3, #0]
 80097e4:	e00a      	b.n	80097fc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80097e6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d103      	bne.n	80097f6 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80097ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f0:	2201      	movs	r2, #1
 80097f2:	701a      	strb	r2, [r3, #0]
 80097f4:	e002      	b.n	80097fc <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80097f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f8:	2200      	movs	r2, #0
 80097fa:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80097fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d102      	bne.n	800980a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009806:	2200      	movs	r2, #0
 8009808:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800980a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800980e:	461a      	mov	r2, r3
 8009810:	2101      	movs	r1, #1
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f7fc f8c2 	bl	800599c <VL53L0X_GetLimitCheckEnable>
 8009818:	4603      	mov	r3, r0
 800981a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800981e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009822:	2b00      	cmp	r3, #0
 8009824:	d14f      	bne.n	80098c6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8009826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <VL53L0X_get_pal_range_status+0x31a>
 800982e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009832:	2b01      	cmp	r3, #1
 8009834:	d103      	bne.n	800983e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8009836:	2301      	movs	r3, #1
 8009838:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983c:	e002      	b.n	8009844 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800984a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800984e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009852:	2b04      	cmp	r3, #4
 8009854:	d003      	beq.n	800985e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8009856:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800985a:	2b00      	cmp	r3, #0
 800985c:	d103      	bne.n	8009866 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800985e:	2301      	movs	r3, #1
 8009860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009864:	e002      	b.n	800986c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009872:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8009876:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800987a:	2b00      	cmp	r3, #0
 800987c:	d003      	beq.n	8009886 <VL53L0X_get_pal_range_status+0x36a>
 800987e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009882:	2b01      	cmp	r3, #1
 8009884:	d103      	bne.n	800988e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8009886:	2301      	movs	r3, #1
 8009888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988c:	e002      	b.n	8009894 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800988e:	2300      	movs	r3, #0
 8009890:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800989a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800989e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <VL53L0X_get_pal_range_status+0x392>
 80098a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d103      	bne.n	80098b6 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80098ae:	2301      	movs	r3, #1
 80098b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b4:	e002      	b.n	80098bc <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80098c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80098c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3740      	adds	r7, #64	; 0x40
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b088      	sub	sp, #32
 80098d6:	af02      	add	r7, sp, #8
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	330a      	adds	r3, #10
 80098e2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80098f0:	b299      	uxth	r1, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	4613      	mov	r3, r2
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	f7f9 f811 	bl	8002924 <HAL_I2C_Master_Transmit>
 8009902:	4603      	mov	r3, r0
 8009904:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009906:	693b      	ldr	r3, [r7, #16]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af02      	add	r7, sp, #8
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	330a      	adds	r3, #10
 8009920:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800992e:	f043 0301 	orr.w	r3, r3, #1
 8009932:	b2db      	uxtb	r3, r3
 8009934:	b299      	uxth	r1, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	b29a      	uxth	r2, r3
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	4613      	mov	r3, r2
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	f7f9 f8ed 	bl	8002b20 <HAL_I2C_Master_Receive>
 8009946:	4603      	mov	r3, r0
 8009948:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800994a:	693b      	ldr	r3, [r7, #16]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	607a      	str	r2, [r7, #4]
 800995e:	603b      	str	r3, [r7, #0]
 8009960:	460b      	mov	r3, r1
 8009962:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009964:	2300      	movs	r3, #0
 8009966:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	2b3f      	cmp	r3, #63	; 0x3f
 800996c:	d902      	bls.n	8009974 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800996e:	f06f 0303 	mvn.w	r3, #3
 8009972:	e016      	b.n	80099a2 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8009974:	4a0d      	ldr	r2, [pc, #52]	; (80099ac <VL53L0X_WriteMulti+0x58>)
 8009976:	7afb      	ldrb	r3, [r7, #11]
 8009978:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	6879      	ldr	r1, [r7, #4]
 800997e:	480c      	ldr	r0, [pc, #48]	; (80099b0 <VL53L0X_WriteMulti+0x5c>)
 8009980:	f000 f99e 	bl	8009cc0 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	3301      	adds	r3, #1
 8009988:	461a      	mov	r2, r3
 800998a:	4908      	ldr	r1, [pc, #32]	; (80099ac <VL53L0X_WriteMulti+0x58>)
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7ff ffa0 	bl	80098d2 <_I2CWrite>
 8009992:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800999a:	23ec      	movs	r3, #236	; 0xec
 800999c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800999e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	2000072c 	.word	0x2000072c
 80099b0:	2000072d 	.word	0x2000072d

080099b4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	607a      	str	r2, [r7, #4]
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	460b      	mov	r3, r1
 80099c2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099c4:	2300      	movs	r3, #0
 80099c6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80099c8:	f107 030b 	add.w	r3, r7, #11
 80099cc:	2201      	movs	r2, #1
 80099ce:	4619      	mov	r1, r3
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f7ff ff7e 	bl	80098d2 <_I2CWrite>
 80099d6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80099de:	23ec      	movs	r3, #236	; 0xec
 80099e0:	75fb      	strb	r3, [r7, #23]
        goto done;
 80099e2:	e00c      	b.n	80099fe <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7ff ff91 	bl	8009910 <_I2CRead>
 80099ee:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80099f6:	23ec      	movs	r3, #236	; 0xec
 80099f8:	75fb      	strb	r3, [r7, #23]
 80099fa:	e000      	b.n	80099fe <VL53L0X_ReadMulti+0x4a>
    }
done:
 80099fc:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80099fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	70fb      	strb	r3, [r7, #3]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009a20:	4a0b      	ldr	r2, [pc, #44]	; (8009a50 <VL53L0X_WrByte+0x44>)
 8009a22:	78fb      	ldrb	r3, [r7, #3]
 8009a24:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8009a26:	4a0a      	ldr	r2, [pc, #40]	; (8009a50 <VL53L0X_WrByte+0x44>)
 8009a28:	78bb      	ldrb	r3, [r7, #2]
 8009a2a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	4908      	ldr	r1, [pc, #32]	; (8009a50 <VL53L0X_WrByte+0x44>)
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff ff4e 	bl	80098d2 <_I2CWrite>
 8009a36:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009a3e:	23ec      	movs	r3, #236	; 0xec
 8009a40:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	2000072c 	.word	0x2000072c

08009a54 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
 8009a60:	4613      	mov	r3, r2
 8009a62:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009a68:	4a0e      	ldr	r2, [pc, #56]	; (8009aa4 <VL53L0X_WrWord+0x50>)
 8009a6a:	78fb      	ldrb	r3, [r7, #3]
 8009a6c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8009a6e:	883b      	ldrh	r3, [r7, #0]
 8009a70:	0a1b      	lsrs	r3, r3, #8
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <VL53L0X_WrWord+0x50>)
 8009a78:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8009a7a:	883b      	ldrh	r3, [r7, #0]
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <VL53L0X_WrWord+0x50>)
 8009a80:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8009a82:	2203      	movs	r2, #3
 8009a84:	4907      	ldr	r1, [pc, #28]	; (8009aa4 <VL53L0X_WrWord+0x50>)
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff ff23 	bl	80098d2 <_I2CWrite>
 8009a8c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009a94:	23ec      	movs	r3, #236	; 0xec
 8009a96:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	2000072c 	.word	0x2000072c

08009aa8 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	70fb      	strb	r3, [r7, #3]
 8009aba:	460b      	mov	r3, r1
 8009abc:	70bb      	strb	r3, [r7, #2]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8009ac6:	f107 020e 	add.w	r2, r7, #14
 8009aca:	78fb      	ldrb	r3, [r7, #3]
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f81e 	bl	8009b10 <VL53L0X_RdByte>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8009ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d110      	bne.n	8009b02 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8009ae0:	7bba      	ldrb	r2, [r7, #14]
 8009ae2:	78bb      	ldrb	r3, [r7, #2]
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	787b      	ldrb	r3, [r7, #1]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8009af0:	7bba      	ldrb	r2, [r7, #14]
 8009af2:	78fb      	ldrb	r3, [r7, #3]
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff ff88 	bl	8009a0c <VL53L0X_WrByte>
 8009afc:	4603      	mov	r3, r0
 8009afe:	73fb      	strb	r3, [r7, #15]
 8009b00:	e000      	b.n	8009b04 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8009b02:	bf00      	nop
done:
    return Status;
 8009b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009b22:	f107 030b 	add.w	r3, r7, #11
 8009b26:	2201      	movs	r2, #1
 8009b28:	4619      	mov	r1, r3
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f7ff fed1 	bl	80098d2 <_I2CWrite>
 8009b30:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009b38:	23ec      	movs	r3, #236	; 0xec
 8009b3a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009b3c:	e00c      	b.n	8009b58 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8009b3e:	2201      	movs	r2, #1
 8009b40:	6879      	ldr	r1, [r7, #4]
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff fee4 	bl	8009910 <_I2CRead>
 8009b48:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009b50:	23ec      	movs	r3, #236	; 0xec
 8009b52:	75fb      	strb	r3, [r7, #23]
 8009b54:	e000      	b.n	8009b58 <VL53L0X_RdByte+0x48>
    }
done:
 8009b56:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b72:	2300      	movs	r3, #0
 8009b74:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009b76:	f107 030b 	add.w	r3, r7, #11
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f7ff fea7 	bl	80098d2 <_I2CWrite>
 8009b84:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009b8c:	23ec      	movs	r3, #236	; 0xec
 8009b8e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009b90:	e017      	b.n	8009bc2 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009b92:	2202      	movs	r2, #2
 8009b94:	490e      	ldr	r1, [pc, #56]	; (8009bd0 <VL53L0X_RdWord+0x6c>)
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f7ff feba 	bl	8009910 <_I2CRead>
 8009b9c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009ba4:	23ec      	movs	r3, #236	; 0xec
 8009ba6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009ba8:	e00b      	b.n	8009bc2 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8009baa:	4b09      	ldr	r3, [pc, #36]	; (8009bd0 <VL53L0X_RdWord+0x6c>)
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	021b      	lsls	r3, r3, #8
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	4b06      	ldr	r3, [pc, #24]	; (8009bd0 <VL53L0X_RdWord+0x6c>)
 8009bb6:	785b      	ldrb	r3, [r3, #1]
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	4413      	add	r3, r2
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8009bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	2000072c 	.word	0x2000072c

08009bd4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009be2:	2300      	movs	r3, #0
 8009be4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009be6:	f107 030b 	add.w	r3, r7, #11
 8009bea:	2201      	movs	r2, #1
 8009bec:	4619      	mov	r1, r3
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f7ff fe6f 	bl	80098d2 <_I2CWrite>
 8009bf4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009bfc:	23ec      	movs	r3, #236	; 0xec
 8009bfe:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009c00:	e01b      	b.n	8009c3a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8009c02:	2204      	movs	r2, #4
 8009c04:	4910      	ldr	r1, [pc, #64]	; (8009c48 <VL53L0X_RdDWord+0x74>)
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f7ff fe82 	bl	8009910 <_I2CRead>
 8009c0c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009c14:	23ec      	movs	r3, #236	; 0xec
 8009c16:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009c18:	e00f      	b.n	8009c3a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8009c1a:	4b0b      	ldr	r3, [pc, #44]	; (8009c48 <VL53L0X_RdDWord+0x74>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	061a      	lsls	r2, r3, #24
 8009c20:	4b09      	ldr	r3, [pc, #36]	; (8009c48 <VL53L0X_RdDWord+0x74>)
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	041b      	lsls	r3, r3, #16
 8009c26:	441a      	add	r2, r3
 8009c28:	4b07      	ldr	r3, [pc, #28]	; (8009c48 <VL53L0X_RdDWord+0x74>)
 8009c2a:	789b      	ldrb	r3, [r3, #2]
 8009c2c:	021b      	lsls	r3, r3, #8
 8009c2e:	4413      	add	r3, r2
 8009c30:	4a05      	ldr	r2, [pc, #20]	; (8009c48 <VL53L0X_RdDWord+0x74>)
 8009c32:	78d2      	ldrb	r2, [r2, #3]
 8009c34:	441a      	add	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8009c3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	2000072c 	.word	0x2000072c

08009c4c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009c54:	2300      	movs	r3, #0
 8009c56:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8009c58:	2002      	movs	r0, #2
 8009c5a:	f7f8 fa27 	bl	80020ac <HAL_Delay>
    return status;
 8009c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <__errno>:
 8009c6c:	4b01      	ldr	r3, [pc, #4]	; (8009c74 <__errno+0x8>)
 8009c6e:	6818      	ldr	r0, [r3, #0]
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	200002c8 	.word	0x200002c8

08009c78 <__libc_init_array>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	4e0d      	ldr	r6, [pc, #52]	; (8009cb0 <__libc_init_array+0x38>)
 8009c7c:	4c0d      	ldr	r4, [pc, #52]	; (8009cb4 <__libc_init_array+0x3c>)
 8009c7e:	1ba4      	subs	r4, r4, r6
 8009c80:	10a4      	asrs	r4, r4, #2
 8009c82:	2500      	movs	r5, #0
 8009c84:	42a5      	cmp	r5, r4
 8009c86:	d109      	bne.n	8009c9c <__libc_init_array+0x24>
 8009c88:	4e0b      	ldr	r6, [pc, #44]	; (8009cb8 <__libc_init_array+0x40>)
 8009c8a:	4c0c      	ldr	r4, [pc, #48]	; (8009cbc <__libc_init_array+0x44>)
 8009c8c:	f002 fc64 	bl	800c558 <_init>
 8009c90:	1ba4      	subs	r4, r4, r6
 8009c92:	10a4      	asrs	r4, r4, #2
 8009c94:	2500      	movs	r5, #0
 8009c96:	42a5      	cmp	r5, r4
 8009c98:	d105      	bne.n	8009ca6 <__libc_init_array+0x2e>
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ca0:	4798      	blx	r3
 8009ca2:	3501      	adds	r5, #1
 8009ca4:	e7ee      	b.n	8009c84 <__libc_init_array+0xc>
 8009ca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009caa:	4798      	blx	r3
 8009cac:	3501      	adds	r5, #1
 8009cae:	e7f2      	b.n	8009c96 <__libc_init_array+0x1e>
 8009cb0:	0800c8e0 	.word	0x0800c8e0
 8009cb4:	0800c8e0 	.word	0x0800c8e0
 8009cb8:	0800c8e0 	.word	0x0800c8e0
 8009cbc:	0800c8e4 	.word	0x0800c8e4

08009cc0 <memcpy>:
 8009cc0:	b510      	push	{r4, lr}
 8009cc2:	1e43      	subs	r3, r0, #1
 8009cc4:	440a      	add	r2, r1
 8009cc6:	4291      	cmp	r1, r2
 8009cc8:	d100      	bne.n	8009ccc <memcpy+0xc>
 8009cca:	bd10      	pop	{r4, pc}
 8009ccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cd4:	e7f7      	b.n	8009cc6 <memcpy+0x6>

08009cd6 <memset>:
 8009cd6:	4402      	add	r2, r0
 8009cd8:	4603      	mov	r3, r0
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d100      	bne.n	8009ce0 <memset+0xa>
 8009cde:	4770      	bx	lr
 8009ce0:	f803 1b01 	strb.w	r1, [r3], #1
 8009ce4:	e7f9      	b.n	8009cda <memset+0x4>

08009ce6 <__cvt>:
 8009ce6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cea:	ec55 4b10 	vmov	r4, r5, d0
 8009cee:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009cf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009cf4:	2d00      	cmp	r5, #0
 8009cf6:	460e      	mov	r6, r1
 8009cf8:	4691      	mov	r9, r2
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	bfb8      	it	lt
 8009cfe:	4622      	movlt	r2, r4
 8009d00:	462b      	mov	r3, r5
 8009d02:	f027 0720 	bic.w	r7, r7, #32
 8009d06:	bfbb      	ittet	lt
 8009d08:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d0c:	461d      	movlt	r5, r3
 8009d0e:	2300      	movge	r3, #0
 8009d10:	232d      	movlt	r3, #45	; 0x2d
 8009d12:	bfb8      	it	lt
 8009d14:	4614      	movlt	r4, r2
 8009d16:	2f46      	cmp	r7, #70	; 0x46
 8009d18:	700b      	strb	r3, [r1, #0]
 8009d1a:	d004      	beq.n	8009d26 <__cvt+0x40>
 8009d1c:	2f45      	cmp	r7, #69	; 0x45
 8009d1e:	d100      	bne.n	8009d22 <__cvt+0x3c>
 8009d20:	3601      	adds	r6, #1
 8009d22:	2102      	movs	r1, #2
 8009d24:	e000      	b.n	8009d28 <__cvt+0x42>
 8009d26:	2103      	movs	r1, #3
 8009d28:	ab03      	add	r3, sp, #12
 8009d2a:	9301      	str	r3, [sp, #4]
 8009d2c:	ab02      	add	r3, sp, #8
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	4632      	mov	r2, r6
 8009d32:	4653      	mov	r3, sl
 8009d34:	ec45 4b10 	vmov	d0, r4, r5
 8009d38:	f000 feb2 	bl	800aaa0 <_dtoa_r>
 8009d3c:	2f47      	cmp	r7, #71	; 0x47
 8009d3e:	4680      	mov	r8, r0
 8009d40:	d102      	bne.n	8009d48 <__cvt+0x62>
 8009d42:	f019 0f01 	tst.w	r9, #1
 8009d46:	d026      	beq.n	8009d96 <__cvt+0xb0>
 8009d48:	2f46      	cmp	r7, #70	; 0x46
 8009d4a:	eb08 0906 	add.w	r9, r8, r6
 8009d4e:	d111      	bne.n	8009d74 <__cvt+0x8e>
 8009d50:	f898 3000 	ldrb.w	r3, [r8]
 8009d54:	2b30      	cmp	r3, #48	; 0x30
 8009d56:	d10a      	bne.n	8009d6e <__cvt+0x88>
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4629      	mov	r1, r5
 8009d60:	f7f6 fed2 	bl	8000b08 <__aeabi_dcmpeq>
 8009d64:	b918      	cbnz	r0, 8009d6e <__cvt+0x88>
 8009d66:	f1c6 0601 	rsb	r6, r6, #1
 8009d6a:	f8ca 6000 	str.w	r6, [sl]
 8009d6e:	f8da 3000 	ldr.w	r3, [sl]
 8009d72:	4499      	add	r9, r3
 8009d74:	2200      	movs	r2, #0
 8009d76:	2300      	movs	r3, #0
 8009d78:	4620      	mov	r0, r4
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	f7f6 fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8009d80:	b938      	cbnz	r0, 8009d92 <__cvt+0xac>
 8009d82:	2230      	movs	r2, #48	; 0x30
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	454b      	cmp	r3, r9
 8009d88:	d205      	bcs.n	8009d96 <__cvt+0xb0>
 8009d8a:	1c59      	adds	r1, r3, #1
 8009d8c:	9103      	str	r1, [sp, #12]
 8009d8e:	701a      	strb	r2, [r3, #0]
 8009d90:	e7f8      	b.n	8009d84 <__cvt+0x9e>
 8009d92:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d9a:	eba3 0308 	sub.w	r3, r3, r8
 8009d9e:	4640      	mov	r0, r8
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	b004      	add	sp, #16
 8009da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009da8 <__exponent>:
 8009da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009daa:	2900      	cmp	r1, #0
 8009dac:	4604      	mov	r4, r0
 8009dae:	bfba      	itte	lt
 8009db0:	4249      	neglt	r1, r1
 8009db2:	232d      	movlt	r3, #45	; 0x2d
 8009db4:	232b      	movge	r3, #43	; 0x2b
 8009db6:	2909      	cmp	r1, #9
 8009db8:	f804 2b02 	strb.w	r2, [r4], #2
 8009dbc:	7043      	strb	r3, [r0, #1]
 8009dbe:	dd20      	ble.n	8009e02 <__exponent+0x5a>
 8009dc0:	f10d 0307 	add.w	r3, sp, #7
 8009dc4:	461f      	mov	r7, r3
 8009dc6:	260a      	movs	r6, #10
 8009dc8:	fb91 f5f6 	sdiv	r5, r1, r6
 8009dcc:	fb06 1115 	mls	r1, r6, r5, r1
 8009dd0:	3130      	adds	r1, #48	; 0x30
 8009dd2:	2d09      	cmp	r5, #9
 8009dd4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009dd8:	f103 32ff 	add.w	r2, r3, #4294967295
 8009ddc:	4629      	mov	r1, r5
 8009dde:	dc09      	bgt.n	8009df4 <__exponent+0x4c>
 8009de0:	3130      	adds	r1, #48	; 0x30
 8009de2:	3b02      	subs	r3, #2
 8009de4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009de8:	42bb      	cmp	r3, r7
 8009dea:	4622      	mov	r2, r4
 8009dec:	d304      	bcc.n	8009df8 <__exponent+0x50>
 8009dee:	1a10      	subs	r0, r2, r0
 8009df0:	b003      	add	sp, #12
 8009df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009df4:	4613      	mov	r3, r2
 8009df6:	e7e7      	b.n	8009dc8 <__exponent+0x20>
 8009df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dfc:	f804 2b01 	strb.w	r2, [r4], #1
 8009e00:	e7f2      	b.n	8009de8 <__exponent+0x40>
 8009e02:	2330      	movs	r3, #48	; 0x30
 8009e04:	4419      	add	r1, r3
 8009e06:	7083      	strb	r3, [r0, #2]
 8009e08:	1d02      	adds	r2, r0, #4
 8009e0a:	70c1      	strb	r1, [r0, #3]
 8009e0c:	e7ef      	b.n	8009dee <__exponent+0x46>
	...

08009e10 <_printf_float>:
 8009e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	b08d      	sub	sp, #52	; 0x34
 8009e16:	460c      	mov	r4, r1
 8009e18:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009e1c:	4616      	mov	r6, r2
 8009e1e:	461f      	mov	r7, r3
 8009e20:	4605      	mov	r5, r0
 8009e22:	f001 fd6f 	bl	800b904 <_localeconv_r>
 8009e26:	6803      	ldr	r3, [r0, #0]
 8009e28:	9304      	str	r3, [sp, #16]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7f6 f9f0 	bl	8000210 <strlen>
 8009e30:	2300      	movs	r3, #0
 8009e32:	930a      	str	r3, [sp, #40]	; 0x28
 8009e34:	f8d8 3000 	ldr.w	r3, [r8]
 8009e38:	9005      	str	r0, [sp, #20]
 8009e3a:	3307      	adds	r3, #7
 8009e3c:	f023 0307 	bic.w	r3, r3, #7
 8009e40:	f103 0208 	add.w	r2, r3, #8
 8009e44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009e48:	f8d4 b000 	ldr.w	fp, [r4]
 8009e4c:	f8c8 2000 	str.w	r2, [r8]
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e58:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009e5c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e60:	9307      	str	r3, [sp, #28]
 8009e62:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e66:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6a:	4ba7      	ldr	r3, [pc, #668]	; (800a108 <_printf_float+0x2f8>)
 8009e6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e70:	f7f6 fe7c 	bl	8000b6c <__aeabi_dcmpun>
 8009e74:	bb70      	cbnz	r0, 8009ed4 <_printf_float+0xc4>
 8009e76:	f04f 32ff 	mov.w	r2, #4294967295
 8009e7a:	4ba3      	ldr	r3, [pc, #652]	; (800a108 <_printf_float+0x2f8>)
 8009e7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e80:	f7f6 fe56 	bl	8000b30 <__aeabi_dcmple>
 8009e84:	bb30      	cbnz	r0, 8009ed4 <_printf_float+0xc4>
 8009e86:	2200      	movs	r2, #0
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	4649      	mov	r1, r9
 8009e8e:	f7f6 fe45 	bl	8000b1c <__aeabi_dcmplt>
 8009e92:	b110      	cbz	r0, 8009e9a <_printf_float+0x8a>
 8009e94:	232d      	movs	r3, #45	; 0x2d
 8009e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e9a:	4a9c      	ldr	r2, [pc, #624]	; (800a10c <_printf_float+0x2fc>)
 8009e9c:	4b9c      	ldr	r3, [pc, #624]	; (800a110 <_printf_float+0x300>)
 8009e9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009ea2:	bf8c      	ite	hi
 8009ea4:	4690      	movhi	r8, r2
 8009ea6:	4698      	movls	r8, r3
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	f02b 0204 	bic.w	r2, fp, #4
 8009eae:	6123      	str	r3, [r4, #16]
 8009eb0:	6022      	str	r2, [r4, #0]
 8009eb2:	f04f 0900 	mov.w	r9, #0
 8009eb6:	9700      	str	r7, [sp, #0]
 8009eb8:	4633      	mov	r3, r6
 8009eba:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	f000 f9e6 	bl	800a290 <_printf_common>
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	f040 808d 	bne.w	8009fe4 <_printf_float+0x1d4>
 8009eca:	f04f 30ff 	mov.w	r0, #4294967295
 8009ece:	b00d      	add	sp, #52	; 0x34
 8009ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed4:	4642      	mov	r2, r8
 8009ed6:	464b      	mov	r3, r9
 8009ed8:	4640      	mov	r0, r8
 8009eda:	4649      	mov	r1, r9
 8009edc:	f7f6 fe46 	bl	8000b6c <__aeabi_dcmpun>
 8009ee0:	b110      	cbz	r0, 8009ee8 <_printf_float+0xd8>
 8009ee2:	4a8c      	ldr	r2, [pc, #560]	; (800a114 <_printf_float+0x304>)
 8009ee4:	4b8c      	ldr	r3, [pc, #560]	; (800a118 <_printf_float+0x308>)
 8009ee6:	e7da      	b.n	8009e9e <_printf_float+0x8e>
 8009ee8:	6861      	ldr	r1, [r4, #4]
 8009eea:	1c4b      	adds	r3, r1, #1
 8009eec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009ef0:	a80a      	add	r0, sp, #40	; 0x28
 8009ef2:	d13e      	bne.n	8009f72 <_printf_float+0x162>
 8009ef4:	2306      	movs	r3, #6
 8009ef6:	6063      	str	r3, [r4, #4]
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009efe:	ab09      	add	r3, sp, #36	; 0x24
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	ec49 8b10 	vmov	d0, r8, r9
 8009f06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f0a:	6022      	str	r2, [r4, #0]
 8009f0c:	f8cd a004 	str.w	sl, [sp, #4]
 8009f10:	6861      	ldr	r1, [r4, #4]
 8009f12:	4628      	mov	r0, r5
 8009f14:	f7ff fee7 	bl	8009ce6 <__cvt>
 8009f18:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009f1c:	2b47      	cmp	r3, #71	; 0x47
 8009f1e:	4680      	mov	r8, r0
 8009f20:	d109      	bne.n	8009f36 <_printf_float+0x126>
 8009f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f24:	1cd8      	adds	r0, r3, #3
 8009f26:	db02      	blt.n	8009f2e <_printf_float+0x11e>
 8009f28:	6862      	ldr	r2, [r4, #4]
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	dd47      	ble.n	8009fbe <_printf_float+0x1ae>
 8009f2e:	f1aa 0a02 	sub.w	sl, sl, #2
 8009f32:	fa5f fa8a 	uxtb.w	sl, sl
 8009f36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009f3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f3c:	d824      	bhi.n	8009f88 <_printf_float+0x178>
 8009f3e:	3901      	subs	r1, #1
 8009f40:	4652      	mov	r2, sl
 8009f42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f46:	9109      	str	r1, [sp, #36]	; 0x24
 8009f48:	f7ff ff2e 	bl	8009da8 <__exponent>
 8009f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f4e:	1813      	adds	r3, r2, r0
 8009f50:	2a01      	cmp	r2, #1
 8009f52:	4681      	mov	r9, r0
 8009f54:	6123      	str	r3, [r4, #16]
 8009f56:	dc02      	bgt.n	8009f5e <_printf_float+0x14e>
 8009f58:	6822      	ldr	r2, [r4, #0]
 8009f5a:	07d1      	lsls	r1, r2, #31
 8009f5c:	d501      	bpl.n	8009f62 <_printf_float+0x152>
 8009f5e:	3301      	adds	r3, #1
 8009f60:	6123      	str	r3, [r4, #16]
 8009f62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d0a5      	beq.n	8009eb6 <_printf_float+0xa6>
 8009f6a:	232d      	movs	r3, #45	; 0x2d
 8009f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f70:	e7a1      	b.n	8009eb6 <_printf_float+0xa6>
 8009f72:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009f76:	f000 8177 	beq.w	800a268 <_printf_float+0x458>
 8009f7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009f7e:	d1bb      	bne.n	8009ef8 <_printf_float+0xe8>
 8009f80:	2900      	cmp	r1, #0
 8009f82:	d1b9      	bne.n	8009ef8 <_printf_float+0xe8>
 8009f84:	2301      	movs	r3, #1
 8009f86:	e7b6      	b.n	8009ef6 <_printf_float+0xe6>
 8009f88:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009f8c:	d119      	bne.n	8009fc2 <_printf_float+0x1b2>
 8009f8e:	2900      	cmp	r1, #0
 8009f90:	6863      	ldr	r3, [r4, #4]
 8009f92:	dd0c      	ble.n	8009fae <_printf_float+0x19e>
 8009f94:	6121      	str	r1, [r4, #16]
 8009f96:	b913      	cbnz	r3, 8009f9e <_printf_float+0x18e>
 8009f98:	6822      	ldr	r2, [r4, #0]
 8009f9a:	07d2      	lsls	r2, r2, #31
 8009f9c:	d502      	bpl.n	8009fa4 <_printf_float+0x194>
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	440b      	add	r3, r1
 8009fa2:	6123      	str	r3, [r4, #16]
 8009fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa6:	65a3      	str	r3, [r4, #88]	; 0x58
 8009fa8:	f04f 0900 	mov.w	r9, #0
 8009fac:	e7d9      	b.n	8009f62 <_printf_float+0x152>
 8009fae:	b913      	cbnz	r3, 8009fb6 <_printf_float+0x1a6>
 8009fb0:	6822      	ldr	r2, [r4, #0]
 8009fb2:	07d0      	lsls	r0, r2, #31
 8009fb4:	d501      	bpl.n	8009fba <_printf_float+0x1aa>
 8009fb6:	3302      	adds	r3, #2
 8009fb8:	e7f3      	b.n	8009fa2 <_printf_float+0x192>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e7f1      	b.n	8009fa2 <_printf_float+0x192>
 8009fbe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009fc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	db05      	blt.n	8009fd6 <_printf_float+0x1c6>
 8009fca:	6822      	ldr	r2, [r4, #0]
 8009fcc:	6123      	str	r3, [r4, #16]
 8009fce:	07d1      	lsls	r1, r2, #31
 8009fd0:	d5e8      	bpl.n	8009fa4 <_printf_float+0x194>
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	e7e5      	b.n	8009fa2 <_printf_float+0x192>
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	bfd4      	ite	le
 8009fda:	f1c3 0302 	rsble	r3, r3, #2
 8009fde:	2301      	movgt	r3, #1
 8009fe0:	4413      	add	r3, r2
 8009fe2:	e7de      	b.n	8009fa2 <_printf_float+0x192>
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	055a      	lsls	r2, r3, #21
 8009fe8:	d407      	bmi.n	8009ffa <_printf_float+0x1ea>
 8009fea:	6923      	ldr	r3, [r4, #16]
 8009fec:	4642      	mov	r2, r8
 8009fee:	4631      	mov	r1, r6
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	47b8      	blx	r7
 8009ff4:	3001      	adds	r0, #1
 8009ff6:	d12b      	bne.n	800a050 <_printf_float+0x240>
 8009ff8:	e767      	b.n	8009eca <_printf_float+0xba>
 8009ffa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009ffe:	f240 80dc 	bls.w	800a1ba <_printf_float+0x3aa>
 800a002:	2200      	movs	r2, #0
 800a004:	2300      	movs	r3, #0
 800a006:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a00a:	f7f6 fd7d 	bl	8000b08 <__aeabi_dcmpeq>
 800a00e:	2800      	cmp	r0, #0
 800a010:	d033      	beq.n	800a07a <_printf_float+0x26a>
 800a012:	2301      	movs	r3, #1
 800a014:	4a41      	ldr	r2, [pc, #260]	; (800a11c <_printf_float+0x30c>)
 800a016:	4631      	mov	r1, r6
 800a018:	4628      	mov	r0, r5
 800a01a:	47b8      	blx	r7
 800a01c:	3001      	adds	r0, #1
 800a01e:	f43f af54 	beq.w	8009eca <_printf_float+0xba>
 800a022:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a026:	429a      	cmp	r2, r3
 800a028:	db02      	blt.n	800a030 <_printf_float+0x220>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	07d8      	lsls	r0, r3, #31
 800a02e:	d50f      	bpl.n	800a050 <_printf_float+0x240>
 800a030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a034:	4631      	mov	r1, r6
 800a036:	4628      	mov	r0, r5
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	f43f af45 	beq.w	8009eca <_printf_float+0xba>
 800a040:	f04f 0800 	mov.w	r8, #0
 800a044:	f104 091a 	add.w	r9, r4, #26
 800a048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a04a:	3b01      	subs	r3, #1
 800a04c:	4543      	cmp	r3, r8
 800a04e:	dc09      	bgt.n	800a064 <_printf_float+0x254>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	079b      	lsls	r3, r3, #30
 800a054:	f100 8103 	bmi.w	800a25e <_printf_float+0x44e>
 800a058:	68e0      	ldr	r0, [r4, #12]
 800a05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a05c:	4298      	cmp	r0, r3
 800a05e:	bfb8      	it	lt
 800a060:	4618      	movlt	r0, r3
 800a062:	e734      	b.n	8009ece <_printf_float+0xbe>
 800a064:	2301      	movs	r3, #1
 800a066:	464a      	mov	r2, r9
 800a068:	4631      	mov	r1, r6
 800a06a:	4628      	mov	r0, r5
 800a06c:	47b8      	blx	r7
 800a06e:	3001      	adds	r0, #1
 800a070:	f43f af2b 	beq.w	8009eca <_printf_float+0xba>
 800a074:	f108 0801 	add.w	r8, r8, #1
 800a078:	e7e6      	b.n	800a048 <_printf_float+0x238>
 800a07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	dc2b      	bgt.n	800a0d8 <_printf_float+0x2c8>
 800a080:	2301      	movs	r3, #1
 800a082:	4a26      	ldr	r2, [pc, #152]	; (800a11c <_printf_float+0x30c>)
 800a084:	4631      	mov	r1, r6
 800a086:	4628      	mov	r0, r5
 800a088:	47b8      	blx	r7
 800a08a:	3001      	adds	r0, #1
 800a08c:	f43f af1d 	beq.w	8009eca <_printf_float+0xba>
 800a090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a092:	b923      	cbnz	r3, 800a09e <_printf_float+0x28e>
 800a094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a096:	b913      	cbnz	r3, 800a09e <_printf_float+0x28e>
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	07d9      	lsls	r1, r3, #31
 800a09c:	d5d8      	bpl.n	800a050 <_printf_float+0x240>
 800a09e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	47b8      	blx	r7
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	f43f af0e 	beq.w	8009eca <_printf_float+0xba>
 800a0ae:	f04f 0900 	mov.w	r9, #0
 800a0b2:	f104 0a1a 	add.w	sl, r4, #26
 800a0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b8:	425b      	negs	r3, r3
 800a0ba:	454b      	cmp	r3, r9
 800a0bc:	dc01      	bgt.n	800a0c2 <_printf_float+0x2b2>
 800a0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0c0:	e794      	b.n	8009fec <_printf_float+0x1dc>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	4652      	mov	r2, sl
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b8      	blx	r7
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	f43f aefc 	beq.w	8009eca <_printf_float+0xba>
 800a0d2:	f109 0901 	add.w	r9, r9, #1
 800a0d6:	e7ee      	b.n	800a0b6 <_printf_float+0x2a6>
 800a0d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	bfa8      	it	ge
 800a0e0:	461a      	movge	r2, r3
 800a0e2:	2a00      	cmp	r2, #0
 800a0e4:	4691      	mov	r9, r2
 800a0e6:	dd07      	ble.n	800a0f8 <_printf_float+0x2e8>
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	47b8      	blx	r7
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	f43f aee9 	beq.w	8009eca <_printf_float+0xba>
 800a0f8:	f104 031a 	add.w	r3, r4, #26
 800a0fc:	f04f 0b00 	mov.w	fp, #0
 800a100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a104:	9306      	str	r3, [sp, #24]
 800a106:	e015      	b.n	800a134 <_printf_float+0x324>
 800a108:	7fefffff 	.word	0x7fefffff
 800a10c:	0800c61c 	.word	0x0800c61c
 800a110:	0800c618 	.word	0x0800c618
 800a114:	0800c624 	.word	0x0800c624
 800a118:	0800c620 	.word	0x0800c620
 800a11c:	0800c628 	.word	0x0800c628
 800a120:	2301      	movs	r3, #1
 800a122:	9a06      	ldr	r2, [sp, #24]
 800a124:	4631      	mov	r1, r6
 800a126:	4628      	mov	r0, r5
 800a128:	47b8      	blx	r7
 800a12a:	3001      	adds	r0, #1
 800a12c:	f43f aecd 	beq.w	8009eca <_printf_float+0xba>
 800a130:	f10b 0b01 	add.w	fp, fp, #1
 800a134:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a138:	ebaa 0309 	sub.w	r3, sl, r9
 800a13c:	455b      	cmp	r3, fp
 800a13e:	dcef      	bgt.n	800a120 <_printf_float+0x310>
 800a140:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a144:	429a      	cmp	r2, r3
 800a146:	44d0      	add	r8, sl
 800a148:	db15      	blt.n	800a176 <_printf_float+0x366>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	07da      	lsls	r2, r3, #31
 800a14e:	d412      	bmi.n	800a176 <_printf_float+0x366>
 800a150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a152:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a154:	eba3 020a 	sub.w	r2, r3, sl
 800a158:	eba3 0a01 	sub.w	sl, r3, r1
 800a15c:	4592      	cmp	sl, r2
 800a15e:	bfa8      	it	ge
 800a160:	4692      	movge	sl, r2
 800a162:	f1ba 0f00 	cmp.w	sl, #0
 800a166:	dc0e      	bgt.n	800a186 <_printf_float+0x376>
 800a168:	f04f 0800 	mov.w	r8, #0
 800a16c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a170:	f104 091a 	add.w	r9, r4, #26
 800a174:	e019      	b.n	800a1aa <_printf_float+0x39a>
 800a176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a17a:	4631      	mov	r1, r6
 800a17c:	4628      	mov	r0, r5
 800a17e:	47b8      	blx	r7
 800a180:	3001      	adds	r0, #1
 800a182:	d1e5      	bne.n	800a150 <_printf_float+0x340>
 800a184:	e6a1      	b.n	8009eca <_printf_float+0xba>
 800a186:	4653      	mov	r3, sl
 800a188:	4642      	mov	r2, r8
 800a18a:	4631      	mov	r1, r6
 800a18c:	4628      	mov	r0, r5
 800a18e:	47b8      	blx	r7
 800a190:	3001      	adds	r0, #1
 800a192:	d1e9      	bne.n	800a168 <_printf_float+0x358>
 800a194:	e699      	b.n	8009eca <_printf_float+0xba>
 800a196:	2301      	movs	r3, #1
 800a198:	464a      	mov	r2, r9
 800a19a:	4631      	mov	r1, r6
 800a19c:	4628      	mov	r0, r5
 800a19e:	47b8      	blx	r7
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	f43f ae92 	beq.w	8009eca <_printf_float+0xba>
 800a1a6:	f108 0801 	add.w	r8, r8, #1
 800a1aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1ae:	1a9b      	subs	r3, r3, r2
 800a1b0:	eba3 030a 	sub.w	r3, r3, sl
 800a1b4:	4543      	cmp	r3, r8
 800a1b6:	dcee      	bgt.n	800a196 <_printf_float+0x386>
 800a1b8:	e74a      	b.n	800a050 <_printf_float+0x240>
 800a1ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1bc:	2a01      	cmp	r2, #1
 800a1be:	dc01      	bgt.n	800a1c4 <_printf_float+0x3b4>
 800a1c0:	07db      	lsls	r3, r3, #31
 800a1c2:	d53a      	bpl.n	800a23a <_printf_float+0x42a>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	4642      	mov	r2, r8
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f43f ae7b 	beq.w	8009eca <_printf_float+0xba>
 800a1d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1d8:	4631      	mov	r1, r6
 800a1da:	4628      	mov	r0, r5
 800a1dc:	47b8      	blx	r7
 800a1de:	3001      	adds	r0, #1
 800a1e0:	f108 0801 	add.w	r8, r8, #1
 800a1e4:	f43f ae71 	beq.w	8009eca <_printf_float+0xba>
 800a1e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f103 3aff 	add.w	sl, r3, #4294967295
 800a1f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	f7f6 fc87 	bl	8000b08 <__aeabi_dcmpeq>
 800a1fa:	b9c8      	cbnz	r0, 800a230 <_printf_float+0x420>
 800a1fc:	4653      	mov	r3, sl
 800a1fe:	4642      	mov	r2, r8
 800a200:	4631      	mov	r1, r6
 800a202:	4628      	mov	r0, r5
 800a204:	47b8      	blx	r7
 800a206:	3001      	adds	r0, #1
 800a208:	d10e      	bne.n	800a228 <_printf_float+0x418>
 800a20a:	e65e      	b.n	8009eca <_printf_float+0xba>
 800a20c:	2301      	movs	r3, #1
 800a20e:	4652      	mov	r2, sl
 800a210:	4631      	mov	r1, r6
 800a212:	4628      	mov	r0, r5
 800a214:	47b8      	blx	r7
 800a216:	3001      	adds	r0, #1
 800a218:	f43f ae57 	beq.w	8009eca <_printf_float+0xba>
 800a21c:	f108 0801 	add.w	r8, r8, #1
 800a220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a222:	3b01      	subs	r3, #1
 800a224:	4543      	cmp	r3, r8
 800a226:	dcf1      	bgt.n	800a20c <_printf_float+0x3fc>
 800a228:	464b      	mov	r3, r9
 800a22a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a22e:	e6de      	b.n	8009fee <_printf_float+0x1de>
 800a230:	f04f 0800 	mov.w	r8, #0
 800a234:	f104 0a1a 	add.w	sl, r4, #26
 800a238:	e7f2      	b.n	800a220 <_printf_float+0x410>
 800a23a:	2301      	movs	r3, #1
 800a23c:	e7df      	b.n	800a1fe <_printf_float+0x3ee>
 800a23e:	2301      	movs	r3, #1
 800a240:	464a      	mov	r2, r9
 800a242:	4631      	mov	r1, r6
 800a244:	4628      	mov	r0, r5
 800a246:	47b8      	blx	r7
 800a248:	3001      	adds	r0, #1
 800a24a:	f43f ae3e 	beq.w	8009eca <_printf_float+0xba>
 800a24e:	f108 0801 	add.w	r8, r8, #1
 800a252:	68e3      	ldr	r3, [r4, #12]
 800a254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a256:	1a9b      	subs	r3, r3, r2
 800a258:	4543      	cmp	r3, r8
 800a25a:	dcf0      	bgt.n	800a23e <_printf_float+0x42e>
 800a25c:	e6fc      	b.n	800a058 <_printf_float+0x248>
 800a25e:	f04f 0800 	mov.w	r8, #0
 800a262:	f104 0919 	add.w	r9, r4, #25
 800a266:	e7f4      	b.n	800a252 <_printf_float+0x442>
 800a268:	2900      	cmp	r1, #0
 800a26a:	f43f ae8b 	beq.w	8009f84 <_printf_float+0x174>
 800a26e:	2300      	movs	r3, #0
 800a270:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a274:	ab09      	add	r3, sp, #36	; 0x24
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	ec49 8b10 	vmov	d0, r8, r9
 800a27c:	6022      	str	r2, [r4, #0]
 800a27e:	f8cd a004 	str.w	sl, [sp, #4]
 800a282:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a286:	4628      	mov	r0, r5
 800a288:	f7ff fd2d 	bl	8009ce6 <__cvt>
 800a28c:	4680      	mov	r8, r0
 800a28e:	e648      	b.n	8009f22 <_printf_float+0x112>

0800a290 <_printf_common>:
 800a290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a294:	4691      	mov	r9, r2
 800a296:	461f      	mov	r7, r3
 800a298:	688a      	ldr	r2, [r1, #8]
 800a29a:	690b      	ldr	r3, [r1, #16]
 800a29c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	bfb8      	it	lt
 800a2a4:	4613      	movlt	r3, r2
 800a2a6:	f8c9 3000 	str.w	r3, [r9]
 800a2aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	b112      	cbz	r2, 800a2ba <_printf_common+0x2a>
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	f8c9 3000 	str.w	r3, [r9]
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	0699      	lsls	r1, r3, #26
 800a2be:	bf42      	ittt	mi
 800a2c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a2c4:	3302      	addmi	r3, #2
 800a2c6:	f8c9 3000 	strmi.w	r3, [r9]
 800a2ca:	6825      	ldr	r5, [r4, #0]
 800a2cc:	f015 0506 	ands.w	r5, r5, #6
 800a2d0:	d107      	bne.n	800a2e2 <_printf_common+0x52>
 800a2d2:	f104 0a19 	add.w	sl, r4, #25
 800a2d6:	68e3      	ldr	r3, [r4, #12]
 800a2d8:	f8d9 2000 	ldr.w	r2, [r9]
 800a2dc:	1a9b      	subs	r3, r3, r2
 800a2de:	42ab      	cmp	r3, r5
 800a2e0:	dc28      	bgt.n	800a334 <_printf_common+0xa4>
 800a2e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a2e6:	6822      	ldr	r2, [r4, #0]
 800a2e8:	3300      	adds	r3, #0
 800a2ea:	bf18      	it	ne
 800a2ec:	2301      	movne	r3, #1
 800a2ee:	0692      	lsls	r2, r2, #26
 800a2f0:	d42d      	bmi.n	800a34e <_printf_common+0xbe>
 800a2f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	47c0      	blx	r8
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d020      	beq.n	800a342 <_printf_common+0xb2>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	68e5      	ldr	r5, [r4, #12]
 800a304:	f8d9 2000 	ldr.w	r2, [r9]
 800a308:	f003 0306 	and.w	r3, r3, #6
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	bf08      	it	eq
 800a310:	1aad      	subeq	r5, r5, r2
 800a312:	68a3      	ldr	r3, [r4, #8]
 800a314:	6922      	ldr	r2, [r4, #16]
 800a316:	bf0c      	ite	eq
 800a318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a31c:	2500      	movne	r5, #0
 800a31e:	4293      	cmp	r3, r2
 800a320:	bfc4      	itt	gt
 800a322:	1a9b      	subgt	r3, r3, r2
 800a324:	18ed      	addgt	r5, r5, r3
 800a326:	f04f 0900 	mov.w	r9, #0
 800a32a:	341a      	adds	r4, #26
 800a32c:	454d      	cmp	r5, r9
 800a32e:	d11a      	bne.n	800a366 <_printf_common+0xd6>
 800a330:	2000      	movs	r0, #0
 800a332:	e008      	b.n	800a346 <_printf_common+0xb6>
 800a334:	2301      	movs	r3, #1
 800a336:	4652      	mov	r2, sl
 800a338:	4639      	mov	r1, r7
 800a33a:	4630      	mov	r0, r6
 800a33c:	47c0      	blx	r8
 800a33e:	3001      	adds	r0, #1
 800a340:	d103      	bne.n	800a34a <_printf_common+0xba>
 800a342:	f04f 30ff 	mov.w	r0, #4294967295
 800a346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a34a:	3501      	adds	r5, #1
 800a34c:	e7c3      	b.n	800a2d6 <_printf_common+0x46>
 800a34e:	18e1      	adds	r1, r4, r3
 800a350:	1c5a      	adds	r2, r3, #1
 800a352:	2030      	movs	r0, #48	; 0x30
 800a354:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a358:	4422      	add	r2, r4
 800a35a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a35e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a362:	3302      	adds	r3, #2
 800a364:	e7c5      	b.n	800a2f2 <_printf_common+0x62>
 800a366:	2301      	movs	r3, #1
 800a368:	4622      	mov	r2, r4
 800a36a:	4639      	mov	r1, r7
 800a36c:	4630      	mov	r0, r6
 800a36e:	47c0      	blx	r8
 800a370:	3001      	adds	r0, #1
 800a372:	d0e6      	beq.n	800a342 <_printf_common+0xb2>
 800a374:	f109 0901 	add.w	r9, r9, #1
 800a378:	e7d8      	b.n	800a32c <_printf_common+0x9c>
	...

0800a37c <_printf_i>:
 800a37c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a380:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a384:	460c      	mov	r4, r1
 800a386:	7e09      	ldrb	r1, [r1, #24]
 800a388:	b085      	sub	sp, #20
 800a38a:	296e      	cmp	r1, #110	; 0x6e
 800a38c:	4617      	mov	r7, r2
 800a38e:	4606      	mov	r6, r0
 800a390:	4698      	mov	r8, r3
 800a392:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a394:	f000 80b3 	beq.w	800a4fe <_printf_i+0x182>
 800a398:	d822      	bhi.n	800a3e0 <_printf_i+0x64>
 800a39a:	2963      	cmp	r1, #99	; 0x63
 800a39c:	d036      	beq.n	800a40c <_printf_i+0x90>
 800a39e:	d80a      	bhi.n	800a3b6 <_printf_i+0x3a>
 800a3a0:	2900      	cmp	r1, #0
 800a3a2:	f000 80b9 	beq.w	800a518 <_printf_i+0x19c>
 800a3a6:	2958      	cmp	r1, #88	; 0x58
 800a3a8:	f000 8083 	beq.w	800a4b2 <_printf_i+0x136>
 800a3ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a3b4:	e032      	b.n	800a41c <_printf_i+0xa0>
 800a3b6:	2964      	cmp	r1, #100	; 0x64
 800a3b8:	d001      	beq.n	800a3be <_printf_i+0x42>
 800a3ba:	2969      	cmp	r1, #105	; 0x69
 800a3bc:	d1f6      	bne.n	800a3ac <_printf_i+0x30>
 800a3be:	6820      	ldr	r0, [r4, #0]
 800a3c0:	6813      	ldr	r3, [r2, #0]
 800a3c2:	0605      	lsls	r5, r0, #24
 800a3c4:	f103 0104 	add.w	r1, r3, #4
 800a3c8:	d52a      	bpl.n	800a420 <_printf_i+0xa4>
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6011      	str	r1, [r2, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	da03      	bge.n	800a3da <_printf_i+0x5e>
 800a3d2:	222d      	movs	r2, #45	; 0x2d
 800a3d4:	425b      	negs	r3, r3
 800a3d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a3da:	486f      	ldr	r0, [pc, #444]	; (800a598 <_printf_i+0x21c>)
 800a3dc:	220a      	movs	r2, #10
 800a3de:	e039      	b.n	800a454 <_printf_i+0xd8>
 800a3e0:	2973      	cmp	r1, #115	; 0x73
 800a3e2:	f000 809d 	beq.w	800a520 <_printf_i+0x1a4>
 800a3e6:	d808      	bhi.n	800a3fa <_printf_i+0x7e>
 800a3e8:	296f      	cmp	r1, #111	; 0x6f
 800a3ea:	d020      	beq.n	800a42e <_printf_i+0xb2>
 800a3ec:	2970      	cmp	r1, #112	; 0x70
 800a3ee:	d1dd      	bne.n	800a3ac <_printf_i+0x30>
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	f043 0320 	orr.w	r3, r3, #32
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	e003      	b.n	800a402 <_printf_i+0x86>
 800a3fa:	2975      	cmp	r1, #117	; 0x75
 800a3fc:	d017      	beq.n	800a42e <_printf_i+0xb2>
 800a3fe:	2978      	cmp	r1, #120	; 0x78
 800a400:	d1d4      	bne.n	800a3ac <_printf_i+0x30>
 800a402:	2378      	movs	r3, #120	; 0x78
 800a404:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a408:	4864      	ldr	r0, [pc, #400]	; (800a59c <_printf_i+0x220>)
 800a40a:	e055      	b.n	800a4b8 <_printf_i+0x13c>
 800a40c:	6813      	ldr	r3, [r2, #0]
 800a40e:	1d19      	adds	r1, r3, #4
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6011      	str	r1, [r2, #0]
 800a414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a41c:	2301      	movs	r3, #1
 800a41e:	e08c      	b.n	800a53a <_printf_i+0x1be>
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6011      	str	r1, [r2, #0]
 800a424:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a428:	bf18      	it	ne
 800a42a:	b21b      	sxthne	r3, r3
 800a42c:	e7cf      	b.n	800a3ce <_printf_i+0x52>
 800a42e:	6813      	ldr	r3, [r2, #0]
 800a430:	6825      	ldr	r5, [r4, #0]
 800a432:	1d18      	adds	r0, r3, #4
 800a434:	6010      	str	r0, [r2, #0]
 800a436:	0628      	lsls	r0, r5, #24
 800a438:	d501      	bpl.n	800a43e <_printf_i+0xc2>
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	e002      	b.n	800a444 <_printf_i+0xc8>
 800a43e:	0668      	lsls	r0, r5, #25
 800a440:	d5fb      	bpl.n	800a43a <_printf_i+0xbe>
 800a442:	881b      	ldrh	r3, [r3, #0]
 800a444:	4854      	ldr	r0, [pc, #336]	; (800a598 <_printf_i+0x21c>)
 800a446:	296f      	cmp	r1, #111	; 0x6f
 800a448:	bf14      	ite	ne
 800a44a:	220a      	movne	r2, #10
 800a44c:	2208      	moveq	r2, #8
 800a44e:	2100      	movs	r1, #0
 800a450:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a454:	6865      	ldr	r5, [r4, #4]
 800a456:	60a5      	str	r5, [r4, #8]
 800a458:	2d00      	cmp	r5, #0
 800a45a:	f2c0 8095 	blt.w	800a588 <_printf_i+0x20c>
 800a45e:	6821      	ldr	r1, [r4, #0]
 800a460:	f021 0104 	bic.w	r1, r1, #4
 800a464:	6021      	str	r1, [r4, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d13d      	bne.n	800a4e6 <_printf_i+0x16a>
 800a46a:	2d00      	cmp	r5, #0
 800a46c:	f040 808e 	bne.w	800a58c <_printf_i+0x210>
 800a470:	4665      	mov	r5, ip
 800a472:	2a08      	cmp	r2, #8
 800a474:	d10b      	bne.n	800a48e <_printf_i+0x112>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	07db      	lsls	r3, r3, #31
 800a47a:	d508      	bpl.n	800a48e <_printf_i+0x112>
 800a47c:	6923      	ldr	r3, [r4, #16]
 800a47e:	6862      	ldr	r2, [r4, #4]
 800a480:	429a      	cmp	r2, r3
 800a482:	bfde      	ittt	le
 800a484:	2330      	movle	r3, #48	; 0x30
 800a486:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a48a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a48e:	ebac 0305 	sub.w	r3, ip, r5
 800a492:	6123      	str	r3, [r4, #16]
 800a494:	f8cd 8000 	str.w	r8, [sp]
 800a498:	463b      	mov	r3, r7
 800a49a:	aa03      	add	r2, sp, #12
 800a49c:	4621      	mov	r1, r4
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f7ff fef6 	bl	800a290 <_printf_common>
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	d14d      	bne.n	800a544 <_printf_i+0x1c8>
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	b005      	add	sp, #20
 800a4ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4b2:	4839      	ldr	r0, [pc, #228]	; (800a598 <_printf_i+0x21c>)
 800a4b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a4b8:	6813      	ldr	r3, [r2, #0]
 800a4ba:	6821      	ldr	r1, [r4, #0]
 800a4bc:	1d1d      	adds	r5, r3, #4
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6015      	str	r5, [r2, #0]
 800a4c2:	060a      	lsls	r2, r1, #24
 800a4c4:	d50b      	bpl.n	800a4de <_printf_i+0x162>
 800a4c6:	07ca      	lsls	r2, r1, #31
 800a4c8:	bf44      	itt	mi
 800a4ca:	f041 0120 	orrmi.w	r1, r1, #32
 800a4ce:	6021      	strmi	r1, [r4, #0]
 800a4d0:	b91b      	cbnz	r3, 800a4da <_printf_i+0x15e>
 800a4d2:	6822      	ldr	r2, [r4, #0]
 800a4d4:	f022 0220 	bic.w	r2, r2, #32
 800a4d8:	6022      	str	r2, [r4, #0]
 800a4da:	2210      	movs	r2, #16
 800a4dc:	e7b7      	b.n	800a44e <_printf_i+0xd2>
 800a4de:	064d      	lsls	r5, r1, #25
 800a4e0:	bf48      	it	mi
 800a4e2:	b29b      	uxthmi	r3, r3
 800a4e4:	e7ef      	b.n	800a4c6 <_printf_i+0x14a>
 800a4e6:	4665      	mov	r5, ip
 800a4e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4ec:	fb02 3311 	mls	r3, r2, r1, r3
 800a4f0:	5cc3      	ldrb	r3, [r0, r3]
 800a4f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	2900      	cmp	r1, #0
 800a4fa:	d1f5      	bne.n	800a4e8 <_printf_i+0x16c>
 800a4fc:	e7b9      	b.n	800a472 <_printf_i+0xf6>
 800a4fe:	6813      	ldr	r3, [r2, #0]
 800a500:	6825      	ldr	r5, [r4, #0]
 800a502:	6961      	ldr	r1, [r4, #20]
 800a504:	1d18      	adds	r0, r3, #4
 800a506:	6010      	str	r0, [r2, #0]
 800a508:	0628      	lsls	r0, r5, #24
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	d501      	bpl.n	800a512 <_printf_i+0x196>
 800a50e:	6019      	str	r1, [r3, #0]
 800a510:	e002      	b.n	800a518 <_printf_i+0x19c>
 800a512:	066a      	lsls	r2, r5, #25
 800a514:	d5fb      	bpl.n	800a50e <_printf_i+0x192>
 800a516:	8019      	strh	r1, [r3, #0]
 800a518:	2300      	movs	r3, #0
 800a51a:	6123      	str	r3, [r4, #16]
 800a51c:	4665      	mov	r5, ip
 800a51e:	e7b9      	b.n	800a494 <_printf_i+0x118>
 800a520:	6813      	ldr	r3, [r2, #0]
 800a522:	1d19      	adds	r1, r3, #4
 800a524:	6011      	str	r1, [r2, #0]
 800a526:	681d      	ldr	r5, [r3, #0]
 800a528:	6862      	ldr	r2, [r4, #4]
 800a52a:	2100      	movs	r1, #0
 800a52c:	4628      	mov	r0, r5
 800a52e:	f7f5 fe77 	bl	8000220 <memchr>
 800a532:	b108      	cbz	r0, 800a538 <_printf_i+0x1bc>
 800a534:	1b40      	subs	r0, r0, r5
 800a536:	6060      	str	r0, [r4, #4]
 800a538:	6863      	ldr	r3, [r4, #4]
 800a53a:	6123      	str	r3, [r4, #16]
 800a53c:	2300      	movs	r3, #0
 800a53e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a542:	e7a7      	b.n	800a494 <_printf_i+0x118>
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	462a      	mov	r2, r5
 800a548:	4639      	mov	r1, r7
 800a54a:	4630      	mov	r0, r6
 800a54c:	47c0      	blx	r8
 800a54e:	3001      	adds	r0, #1
 800a550:	d0aa      	beq.n	800a4a8 <_printf_i+0x12c>
 800a552:	6823      	ldr	r3, [r4, #0]
 800a554:	079b      	lsls	r3, r3, #30
 800a556:	d413      	bmi.n	800a580 <_printf_i+0x204>
 800a558:	68e0      	ldr	r0, [r4, #12]
 800a55a:	9b03      	ldr	r3, [sp, #12]
 800a55c:	4298      	cmp	r0, r3
 800a55e:	bfb8      	it	lt
 800a560:	4618      	movlt	r0, r3
 800a562:	e7a3      	b.n	800a4ac <_printf_i+0x130>
 800a564:	2301      	movs	r3, #1
 800a566:	464a      	mov	r2, r9
 800a568:	4639      	mov	r1, r7
 800a56a:	4630      	mov	r0, r6
 800a56c:	47c0      	blx	r8
 800a56e:	3001      	adds	r0, #1
 800a570:	d09a      	beq.n	800a4a8 <_printf_i+0x12c>
 800a572:	3501      	adds	r5, #1
 800a574:	68e3      	ldr	r3, [r4, #12]
 800a576:	9a03      	ldr	r2, [sp, #12]
 800a578:	1a9b      	subs	r3, r3, r2
 800a57a:	42ab      	cmp	r3, r5
 800a57c:	dcf2      	bgt.n	800a564 <_printf_i+0x1e8>
 800a57e:	e7eb      	b.n	800a558 <_printf_i+0x1dc>
 800a580:	2500      	movs	r5, #0
 800a582:	f104 0919 	add.w	r9, r4, #25
 800a586:	e7f5      	b.n	800a574 <_printf_i+0x1f8>
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1ac      	bne.n	800a4e6 <_printf_i+0x16a>
 800a58c:	7803      	ldrb	r3, [r0, #0]
 800a58e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a592:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a596:	e76c      	b.n	800a472 <_printf_i+0xf6>
 800a598:	0800c62a 	.word	0x0800c62a
 800a59c:	0800c63b 	.word	0x0800c63b

0800a5a0 <iprintf>:
 800a5a0:	b40f      	push	{r0, r1, r2, r3}
 800a5a2:	4b0a      	ldr	r3, [pc, #40]	; (800a5cc <iprintf+0x2c>)
 800a5a4:	b513      	push	{r0, r1, r4, lr}
 800a5a6:	681c      	ldr	r4, [r3, #0]
 800a5a8:	b124      	cbz	r4, 800a5b4 <iprintf+0x14>
 800a5aa:	69a3      	ldr	r3, [r4, #24]
 800a5ac:	b913      	cbnz	r3, 800a5b4 <iprintf+0x14>
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	f001 f91e 	bl	800b7f0 <__sinit>
 800a5b4:	ab05      	add	r3, sp, #20
 800a5b6:	9a04      	ldr	r2, [sp, #16]
 800a5b8:	68a1      	ldr	r1, [r4, #8]
 800a5ba:	9301      	str	r3, [sp, #4]
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f001 fdd7 	bl	800c170 <_vfiprintf_r>
 800a5c2:	b002      	add	sp, #8
 800a5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5c8:	b004      	add	sp, #16
 800a5ca:	4770      	bx	lr
 800a5cc:	200002c8 	.word	0x200002c8

0800a5d0 <_puts_r>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	460e      	mov	r6, r1
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	b118      	cbz	r0, 800a5e0 <_puts_r+0x10>
 800a5d8:	6983      	ldr	r3, [r0, #24]
 800a5da:	b90b      	cbnz	r3, 800a5e0 <_puts_r+0x10>
 800a5dc:	f001 f908 	bl	800b7f0 <__sinit>
 800a5e0:	69ab      	ldr	r3, [r5, #24]
 800a5e2:	68ac      	ldr	r4, [r5, #8]
 800a5e4:	b913      	cbnz	r3, 800a5ec <_puts_r+0x1c>
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f001 f902 	bl	800b7f0 <__sinit>
 800a5ec:	4b23      	ldr	r3, [pc, #140]	; (800a67c <_puts_r+0xac>)
 800a5ee:	429c      	cmp	r4, r3
 800a5f0:	d117      	bne.n	800a622 <_puts_r+0x52>
 800a5f2:	686c      	ldr	r4, [r5, #4]
 800a5f4:	89a3      	ldrh	r3, [r4, #12]
 800a5f6:	071b      	lsls	r3, r3, #28
 800a5f8:	d51d      	bpl.n	800a636 <_puts_r+0x66>
 800a5fa:	6923      	ldr	r3, [r4, #16]
 800a5fc:	b1db      	cbz	r3, 800a636 <_puts_r+0x66>
 800a5fe:	3e01      	subs	r6, #1
 800a600:	68a3      	ldr	r3, [r4, #8]
 800a602:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a606:	3b01      	subs	r3, #1
 800a608:	60a3      	str	r3, [r4, #8]
 800a60a:	b9e9      	cbnz	r1, 800a648 <_puts_r+0x78>
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	da2e      	bge.n	800a66e <_puts_r+0x9e>
 800a610:	4622      	mov	r2, r4
 800a612:	210a      	movs	r1, #10
 800a614:	4628      	mov	r0, r5
 800a616:	f000 f8f5 	bl	800a804 <__swbuf_r>
 800a61a:	3001      	adds	r0, #1
 800a61c:	d011      	beq.n	800a642 <_puts_r+0x72>
 800a61e:	200a      	movs	r0, #10
 800a620:	e011      	b.n	800a646 <_puts_r+0x76>
 800a622:	4b17      	ldr	r3, [pc, #92]	; (800a680 <_puts_r+0xb0>)
 800a624:	429c      	cmp	r4, r3
 800a626:	d101      	bne.n	800a62c <_puts_r+0x5c>
 800a628:	68ac      	ldr	r4, [r5, #8]
 800a62a:	e7e3      	b.n	800a5f4 <_puts_r+0x24>
 800a62c:	4b15      	ldr	r3, [pc, #84]	; (800a684 <_puts_r+0xb4>)
 800a62e:	429c      	cmp	r4, r3
 800a630:	bf08      	it	eq
 800a632:	68ec      	ldreq	r4, [r5, #12]
 800a634:	e7de      	b.n	800a5f4 <_puts_r+0x24>
 800a636:	4621      	mov	r1, r4
 800a638:	4628      	mov	r0, r5
 800a63a:	f000 f935 	bl	800a8a8 <__swsetup_r>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d0dd      	beq.n	800a5fe <_puts_r+0x2e>
 800a642:	f04f 30ff 	mov.w	r0, #4294967295
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	2b00      	cmp	r3, #0
 800a64a:	da04      	bge.n	800a656 <_puts_r+0x86>
 800a64c:	69a2      	ldr	r2, [r4, #24]
 800a64e:	429a      	cmp	r2, r3
 800a650:	dc06      	bgt.n	800a660 <_puts_r+0x90>
 800a652:	290a      	cmp	r1, #10
 800a654:	d004      	beq.n	800a660 <_puts_r+0x90>
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	1c5a      	adds	r2, r3, #1
 800a65a:	6022      	str	r2, [r4, #0]
 800a65c:	7019      	strb	r1, [r3, #0]
 800a65e:	e7cf      	b.n	800a600 <_puts_r+0x30>
 800a660:	4622      	mov	r2, r4
 800a662:	4628      	mov	r0, r5
 800a664:	f000 f8ce 	bl	800a804 <__swbuf_r>
 800a668:	3001      	adds	r0, #1
 800a66a:	d1c9      	bne.n	800a600 <_puts_r+0x30>
 800a66c:	e7e9      	b.n	800a642 <_puts_r+0x72>
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	200a      	movs	r0, #10
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	6022      	str	r2, [r4, #0]
 800a676:	7018      	strb	r0, [r3, #0]
 800a678:	e7e5      	b.n	800a646 <_puts_r+0x76>
 800a67a:	bf00      	nop
 800a67c:	0800c67c 	.word	0x0800c67c
 800a680:	0800c69c 	.word	0x0800c69c
 800a684:	0800c65c 	.word	0x0800c65c

0800a688 <puts>:
 800a688:	4b02      	ldr	r3, [pc, #8]	; (800a694 <puts+0xc>)
 800a68a:	4601      	mov	r1, r0
 800a68c:	6818      	ldr	r0, [r3, #0]
 800a68e:	f7ff bf9f 	b.w	800a5d0 <_puts_r>
 800a692:	bf00      	nop
 800a694:	200002c8 	.word	0x200002c8

0800a698 <setvbuf>:
 800a698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a69c:	461d      	mov	r5, r3
 800a69e:	4b51      	ldr	r3, [pc, #324]	; (800a7e4 <setvbuf+0x14c>)
 800a6a0:	681e      	ldr	r6, [r3, #0]
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	4690      	mov	r8, r2
 800a6a8:	b126      	cbz	r6, 800a6b4 <setvbuf+0x1c>
 800a6aa:	69b3      	ldr	r3, [r6, #24]
 800a6ac:	b913      	cbnz	r3, 800a6b4 <setvbuf+0x1c>
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f001 f89e 	bl	800b7f0 <__sinit>
 800a6b4:	4b4c      	ldr	r3, [pc, #304]	; (800a7e8 <setvbuf+0x150>)
 800a6b6:	429c      	cmp	r4, r3
 800a6b8:	d152      	bne.n	800a760 <setvbuf+0xc8>
 800a6ba:	6874      	ldr	r4, [r6, #4]
 800a6bc:	f1b8 0f02 	cmp.w	r8, #2
 800a6c0:	d006      	beq.n	800a6d0 <setvbuf+0x38>
 800a6c2:	f1b8 0f01 	cmp.w	r8, #1
 800a6c6:	f200 8089 	bhi.w	800a7dc <setvbuf+0x144>
 800a6ca:	2d00      	cmp	r5, #0
 800a6cc:	f2c0 8086 	blt.w	800a7dc <setvbuf+0x144>
 800a6d0:	4621      	mov	r1, r4
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f001 f822 	bl	800b71c <_fflush_r>
 800a6d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6da:	b141      	cbz	r1, 800a6ee <setvbuf+0x56>
 800a6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d002      	beq.n	800a6ea <setvbuf+0x52>
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f001 fc71 	bl	800bfcc <_free_r>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	61a3      	str	r3, [r4, #24]
 800a6f2:	6063      	str	r3, [r4, #4]
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	061b      	lsls	r3, r3, #24
 800a6f8:	d503      	bpl.n	800a702 <setvbuf+0x6a>
 800a6fa:	6921      	ldr	r1, [r4, #16]
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f001 fc65 	bl	800bfcc <_free_r>
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a708:	f023 0303 	bic.w	r3, r3, #3
 800a70c:	f1b8 0f02 	cmp.w	r8, #2
 800a710:	81a3      	strh	r3, [r4, #12]
 800a712:	d05d      	beq.n	800a7d0 <setvbuf+0x138>
 800a714:	ab01      	add	r3, sp, #4
 800a716:	466a      	mov	r2, sp
 800a718:	4621      	mov	r1, r4
 800a71a:	4630      	mov	r0, r6
 800a71c:	f001 f900 	bl	800b920 <__swhatbuf_r>
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	4318      	orrs	r0, r3
 800a724:	81a0      	strh	r0, [r4, #12]
 800a726:	bb2d      	cbnz	r5, 800a774 <setvbuf+0xdc>
 800a728:	9d00      	ldr	r5, [sp, #0]
 800a72a:	4628      	mov	r0, r5
 800a72c:	f001 f95c 	bl	800b9e8 <malloc>
 800a730:	4607      	mov	r7, r0
 800a732:	2800      	cmp	r0, #0
 800a734:	d14e      	bne.n	800a7d4 <setvbuf+0x13c>
 800a736:	f8dd 9000 	ldr.w	r9, [sp]
 800a73a:	45a9      	cmp	r9, r5
 800a73c:	d13c      	bne.n	800a7b8 <setvbuf+0x120>
 800a73e:	f04f 30ff 	mov.w	r0, #4294967295
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	f043 0302 	orr.w	r3, r3, #2
 800a748:	81a3      	strh	r3, [r4, #12]
 800a74a:	2300      	movs	r3, #0
 800a74c:	60a3      	str	r3, [r4, #8]
 800a74e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a752:	6023      	str	r3, [r4, #0]
 800a754:	6123      	str	r3, [r4, #16]
 800a756:	2301      	movs	r3, #1
 800a758:	6163      	str	r3, [r4, #20]
 800a75a:	b003      	add	sp, #12
 800a75c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a760:	4b22      	ldr	r3, [pc, #136]	; (800a7ec <setvbuf+0x154>)
 800a762:	429c      	cmp	r4, r3
 800a764:	d101      	bne.n	800a76a <setvbuf+0xd2>
 800a766:	68b4      	ldr	r4, [r6, #8]
 800a768:	e7a8      	b.n	800a6bc <setvbuf+0x24>
 800a76a:	4b21      	ldr	r3, [pc, #132]	; (800a7f0 <setvbuf+0x158>)
 800a76c:	429c      	cmp	r4, r3
 800a76e:	bf08      	it	eq
 800a770:	68f4      	ldreq	r4, [r6, #12]
 800a772:	e7a3      	b.n	800a6bc <setvbuf+0x24>
 800a774:	2f00      	cmp	r7, #0
 800a776:	d0d8      	beq.n	800a72a <setvbuf+0x92>
 800a778:	69b3      	ldr	r3, [r6, #24]
 800a77a:	b913      	cbnz	r3, 800a782 <setvbuf+0xea>
 800a77c:	4630      	mov	r0, r6
 800a77e:	f001 f837 	bl	800b7f0 <__sinit>
 800a782:	f1b8 0f01 	cmp.w	r8, #1
 800a786:	bf08      	it	eq
 800a788:	89a3      	ldrheq	r3, [r4, #12]
 800a78a:	6027      	str	r7, [r4, #0]
 800a78c:	bf04      	itt	eq
 800a78e:	f043 0301 	orreq.w	r3, r3, #1
 800a792:	81a3      	strheq	r3, [r4, #12]
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	f013 0008 	ands.w	r0, r3, #8
 800a79a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800a79e:	d01b      	beq.n	800a7d8 <setvbuf+0x140>
 800a7a0:	f013 0001 	ands.w	r0, r3, #1
 800a7a4:	bf18      	it	ne
 800a7a6:	426d      	negne	r5, r5
 800a7a8:	f04f 0300 	mov.w	r3, #0
 800a7ac:	bf1d      	ittte	ne
 800a7ae:	60a3      	strne	r3, [r4, #8]
 800a7b0:	61a5      	strne	r5, [r4, #24]
 800a7b2:	4618      	movne	r0, r3
 800a7b4:	60a5      	streq	r5, [r4, #8]
 800a7b6:	e7d0      	b.n	800a75a <setvbuf+0xc2>
 800a7b8:	4648      	mov	r0, r9
 800a7ba:	f001 f915 	bl	800b9e8 <malloc>
 800a7be:	4607      	mov	r7, r0
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d0bc      	beq.n	800a73e <setvbuf+0xa6>
 800a7c4:	89a3      	ldrh	r3, [r4, #12]
 800a7c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ca:	81a3      	strh	r3, [r4, #12]
 800a7cc:	464d      	mov	r5, r9
 800a7ce:	e7d3      	b.n	800a778 <setvbuf+0xe0>
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	e7b6      	b.n	800a742 <setvbuf+0xaa>
 800a7d4:	46a9      	mov	r9, r5
 800a7d6:	e7f5      	b.n	800a7c4 <setvbuf+0x12c>
 800a7d8:	60a0      	str	r0, [r4, #8]
 800a7da:	e7be      	b.n	800a75a <setvbuf+0xc2>
 800a7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e0:	e7bb      	b.n	800a75a <setvbuf+0xc2>
 800a7e2:	bf00      	nop
 800a7e4:	200002c8 	.word	0x200002c8
 800a7e8:	0800c67c 	.word	0x0800c67c
 800a7ec:	0800c69c 	.word	0x0800c69c
 800a7f0:	0800c65c 	.word	0x0800c65c

0800a7f4 <strcpy>:
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7fa:	f803 2b01 	strb.w	r2, [r3], #1
 800a7fe:	2a00      	cmp	r2, #0
 800a800:	d1f9      	bne.n	800a7f6 <strcpy+0x2>
 800a802:	4770      	bx	lr

0800a804 <__swbuf_r>:
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	460e      	mov	r6, r1
 800a808:	4614      	mov	r4, r2
 800a80a:	4605      	mov	r5, r0
 800a80c:	b118      	cbz	r0, 800a816 <__swbuf_r+0x12>
 800a80e:	6983      	ldr	r3, [r0, #24]
 800a810:	b90b      	cbnz	r3, 800a816 <__swbuf_r+0x12>
 800a812:	f000 ffed 	bl	800b7f0 <__sinit>
 800a816:	4b21      	ldr	r3, [pc, #132]	; (800a89c <__swbuf_r+0x98>)
 800a818:	429c      	cmp	r4, r3
 800a81a:	d12a      	bne.n	800a872 <__swbuf_r+0x6e>
 800a81c:	686c      	ldr	r4, [r5, #4]
 800a81e:	69a3      	ldr	r3, [r4, #24]
 800a820:	60a3      	str	r3, [r4, #8]
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	071a      	lsls	r2, r3, #28
 800a826:	d52e      	bpl.n	800a886 <__swbuf_r+0x82>
 800a828:	6923      	ldr	r3, [r4, #16]
 800a82a:	b363      	cbz	r3, 800a886 <__swbuf_r+0x82>
 800a82c:	6923      	ldr	r3, [r4, #16]
 800a82e:	6820      	ldr	r0, [r4, #0]
 800a830:	1ac0      	subs	r0, r0, r3
 800a832:	6963      	ldr	r3, [r4, #20]
 800a834:	b2f6      	uxtb	r6, r6
 800a836:	4283      	cmp	r3, r0
 800a838:	4637      	mov	r7, r6
 800a83a:	dc04      	bgt.n	800a846 <__swbuf_r+0x42>
 800a83c:	4621      	mov	r1, r4
 800a83e:	4628      	mov	r0, r5
 800a840:	f000 ff6c 	bl	800b71c <_fflush_r>
 800a844:	bb28      	cbnz	r0, 800a892 <__swbuf_r+0x8e>
 800a846:	68a3      	ldr	r3, [r4, #8]
 800a848:	3b01      	subs	r3, #1
 800a84a:	60a3      	str	r3, [r4, #8]
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	1c5a      	adds	r2, r3, #1
 800a850:	6022      	str	r2, [r4, #0]
 800a852:	701e      	strb	r6, [r3, #0]
 800a854:	6963      	ldr	r3, [r4, #20]
 800a856:	3001      	adds	r0, #1
 800a858:	4283      	cmp	r3, r0
 800a85a:	d004      	beq.n	800a866 <__swbuf_r+0x62>
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	07db      	lsls	r3, r3, #31
 800a860:	d519      	bpl.n	800a896 <__swbuf_r+0x92>
 800a862:	2e0a      	cmp	r6, #10
 800a864:	d117      	bne.n	800a896 <__swbuf_r+0x92>
 800a866:	4621      	mov	r1, r4
 800a868:	4628      	mov	r0, r5
 800a86a:	f000 ff57 	bl	800b71c <_fflush_r>
 800a86e:	b190      	cbz	r0, 800a896 <__swbuf_r+0x92>
 800a870:	e00f      	b.n	800a892 <__swbuf_r+0x8e>
 800a872:	4b0b      	ldr	r3, [pc, #44]	; (800a8a0 <__swbuf_r+0x9c>)
 800a874:	429c      	cmp	r4, r3
 800a876:	d101      	bne.n	800a87c <__swbuf_r+0x78>
 800a878:	68ac      	ldr	r4, [r5, #8]
 800a87a:	e7d0      	b.n	800a81e <__swbuf_r+0x1a>
 800a87c:	4b09      	ldr	r3, [pc, #36]	; (800a8a4 <__swbuf_r+0xa0>)
 800a87e:	429c      	cmp	r4, r3
 800a880:	bf08      	it	eq
 800a882:	68ec      	ldreq	r4, [r5, #12]
 800a884:	e7cb      	b.n	800a81e <__swbuf_r+0x1a>
 800a886:	4621      	mov	r1, r4
 800a888:	4628      	mov	r0, r5
 800a88a:	f000 f80d 	bl	800a8a8 <__swsetup_r>
 800a88e:	2800      	cmp	r0, #0
 800a890:	d0cc      	beq.n	800a82c <__swbuf_r+0x28>
 800a892:	f04f 37ff 	mov.w	r7, #4294967295
 800a896:	4638      	mov	r0, r7
 800a898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a89a:	bf00      	nop
 800a89c:	0800c67c 	.word	0x0800c67c
 800a8a0:	0800c69c 	.word	0x0800c69c
 800a8a4:	0800c65c 	.word	0x0800c65c

0800a8a8 <__swsetup_r>:
 800a8a8:	4b32      	ldr	r3, [pc, #200]	; (800a974 <__swsetup_r+0xcc>)
 800a8aa:	b570      	push	{r4, r5, r6, lr}
 800a8ac:	681d      	ldr	r5, [r3, #0]
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	b125      	cbz	r5, 800a8be <__swsetup_r+0x16>
 800a8b4:	69ab      	ldr	r3, [r5, #24]
 800a8b6:	b913      	cbnz	r3, 800a8be <__swsetup_r+0x16>
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f000 ff99 	bl	800b7f0 <__sinit>
 800a8be:	4b2e      	ldr	r3, [pc, #184]	; (800a978 <__swsetup_r+0xd0>)
 800a8c0:	429c      	cmp	r4, r3
 800a8c2:	d10f      	bne.n	800a8e4 <__swsetup_r+0x3c>
 800a8c4:	686c      	ldr	r4, [r5, #4]
 800a8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	0715      	lsls	r5, r2, #28
 800a8ce:	d42c      	bmi.n	800a92a <__swsetup_r+0x82>
 800a8d0:	06d0      	lsls	r0, r2, #27
 800a8d2:	d411      	bmi.n	800a8f8 <__swsetup_r+0x50>
 800a8d4:	2209      	movs	r2, #9
 800a8d6:	6032      	str	r2, [r6, #0]
 800a8d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8dc:	81a3      	strh	r3, [r4, #12]
 800a8de:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e2:	e03e      	b.n	800a962 <__swsetup_r+0xba>
 800a8e4:	4b25      	ldr	r3, [pc, #148]	; (800a97c <__swsetup_r+0xd4>)
 800a8e6:	429c      	cmp	r4, r3
 800a8e8:	d101      	bne.n	800a8ee <__swsetup_r+0x46>
 800a8ea:	68ac      	ldr	r4, [r5, #8]
 800a8ec:	e7eb      	b.n	800a8c6 <__swsetup_r+0x1e>
 800a8ee:	4b24      	ldr	r3, [pc, #144]	; (800a980 <__swsetup_r+0xd8>)
 800a8f0:	429c      	cmp	r4, r3
 800a8f2:	bf08      	it	eq
 800a8f4:	68ec      	ldreq	r4, [r5, #12]
 800a8f6:	e7e6      	b.n	800a8c6 <__swsetup_r+0x1e>
 800a8f8:	0751      	lsls	r1, r2, #29
 800a8fa:	d512      	bpl.n	800a922 <__swsetup_r+0x7a>
 800a8fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8fe:	b141      	cbz	r1, 800a912 <__swsetup_r+0x6a>
 800a900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a904:	4299      	cmp	r1, r3
 800a906:	d002      	beq.n	800a90e <__swsetup_r+0x66>
 800a908:	4630      	mov	r0, r6
 800a90a:	f001 fb5f 	bl	800bfcc <_free_r>
 800a90e:	2300      	movs	r3, #0
 800a910:	6363      	str	r3, [r4, #52]	; 0x34
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a918:	81a3      	strh	r3, [r4, #12]
 800a91a:	2300      	movs	r3, #0
 800a91c:	6063      	str	r3, [r4, #4]
 800a91e:	6923      	ldr	r3, [r4, #16]
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	89a3      	ldrh	r3, [r4, #12]
 800a924:	f043 0308 	orr.w	r3, r3, #8
 800a928:	81a3      	strh	r3, [r4, #12]
 800a92a:	6923      	ldr	r3, [r4, #16]
 800a92c:	b94b      	cbnz	r3, 800a942 <__swsetup_r+0x9a>
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a938:	d003      	beq.n	800a942 <__swsetup_r+0x9a>
 800a93a:	4621      	mov	r1, r4
 800a93c:	4630      	mov	r0, r6
 800a93e:	f001 f813 	bl	800b968 <__smakebuf_r>
 800a942:	89a2      	ldrh	r2, [r4, #12]
 800a944:	f012 0301 	ands.w	r3, r2, #1
 800a948:	d00c      	beq.n	800a964 <__swsetup_r+0xbc>
 800a94a:	2300      	movs	r3, #0
 800a94c:	60a3      	str	r3, [r4, #8]
 800a94e:	6963      	ldr	r3, [r4, #20]
 800a950:	425b      	negs	r3, r3
 800a952:	61a3      	str	r3, [r4, #24]
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	b953      	cbnz	r3, 800a96e <__swsetup_r+0xc6>
 800a958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a95c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a960:	d1ba      	bne.n	800a8d8 <__swsetup_r+0x30>
 800a962:	bd70      	pop	{r4, r5, r6, pc}
 800a964:	0792      	lsls	r2, r2, #30
 800a966:	bf58      	it	pl
 800a968:	6963      	ldrpl	r3, [r4, #20]
 800a96a:	60a3      	str	r3, [r4, #8]
 800a96c:	e7f2      	b.n	800a954 <__swsetup_r+0xac>
 800a96e:	2000      	movs	r0, #0
 800a970:	e7f7      	b.n	800a962 <__swsetup_r+0xba>
 800a972:	bf00      	nop
 800a974:	200002c8 	.word	0x200002c8
 800a978:	0800c67c 	.word	0x0800c67c
 800a97c:	0800c69c 	.word	0x0800c69c
 800a980:	0800c65c 	.word	0x0800c65c

0800a984 <quorem>:
 800a984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a988:	6903      	ldr	r3, [r0, #16]
 800a98a:	690c      	ldr	r4, [r1, #16]
 800a98c:	42a3      	cmp	r3, r4
 800a98e:	4680      	mov	r8, r0
 800a990:	f2c0 8082 	blt.w	800aa98 <quorem+0x114>
 800a994:	3c01      	subs	r4, #1
 800a996:	f101 0714 	add.w	r7, r1, #20
 800a99a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a99e:	f100 0614 	add.w	r6, r0, #20
 800a9a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a9a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a9aa:	eb06 030c 	add.w	r3, r6, ip
 800a9ae:	3501      	adds	r5, #1
 800a9b0:	eb07 090c 	add.w	r9, r7, ip
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	fbb0 f5f5 	udiv	r5, r0, r5
 800a9ba:	b395      	cbz	r5, 800aa22 <quorem+0x9e>
 800a9bc:	f04f 0a00 	mov.w	sl, #0
 800a9c0:	4638      	mov	r0, r7
 800a9c2:	46b6      	mov	lr, r6
 800a9c4:	46d3      	mov	fp, sl
 800a9c6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a9ca:	b293      	uxth	r3, r2
 800a9cc:	fb05 a303 	mla	r3, r5, r3, sl
 800a9d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	ebab 0303 	sub.w	r3, fp, r3
 800a9da:	0c12      	lsrs	r2, r2, #16
 800a9dc:	f8de b000 	ldr.w	fp, [lr]
 800a9e0:	fb05 a202 	mla	r2, r5, r2, sl
 800a9e4:	fa13 f38b 	uxtah	r3, r3, fp
 800a9e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a9ec:	fa1f fb82 	uxth.w	fp, r2
 800a9f0:	f8de 2000 	ldr.w	r2, [lr]
 800a9f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a9f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa02:	4581      	cmp	r9, r0
 800aa04:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800aa08:	f84e 3b04 	str.w	r3, [lr], #4
 800aa0c:	d2db      	bcs.n	800a9c6 <quorem+0x42>
 800aa0e:	f856 300c 	ldr.w	r3, [r6, ip]
 800aa12:	b933      	cbnz	r3, 800aa22 <quorem+0x9e>
 800aa14:	9b01      	ldr	r3, [sp, #4]
 800aa16:	3b04      	subs	r3, #4
 800aa18:	429e      	cmp	r6, r3
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	d330      	bcc.n	800aa80 <quorem+0xfc>
 800aa1e:	f8c8 4010 	str.w	r4, [r8, #16]
 800aa22:	4640      	mov	r0, r8
 800aa24:	f001 f9fe 	bl	800be24 <__mcmp>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	db25      	blt.n	800aa78 <quorem+0xf4>
 800aa2c:	3501      	adds	r5, #1
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f04f 0c00 	mov.w	ip, #0
 800aa34:	f857 2b04 	ldr.w	r2, [r7], #4
 800aa38:	f8d0 e000 	ldr.w	lr, [r0]
 800aa3c:	b293      	uxth	r3, r2
 800aa3e:	ebac 0303 	sub.w	r3, ip, r3
 800aa42:	0c12      	lsrs	r2, r2, #16
 800aa44:	fa13 f38e 	uxtah	r3, r3, lr
 800aa48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aa4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa56:	45b9      	cmp	r9, r7
 800aa58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aa5c:	f840 3b04 	str.w	r3, [r0], #4
 800aa60:	d2e8      	bcs.n	800aa34 <quorem+0xb0>
 800aa62:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800aa66:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800aa6a:	b92a      	cbnz	r2, 800aa78 <quorem+0xf4>
 800aa6c:	3b04      	subs	r3, #4
 800aa6e:	429e      	cmp	r6, r3
 800aa70:	461a      	mov	r2, r3
 800aa72:	d30b      	bcc.n	800aa8c <quorem+0x108>
 800aa74:	f8c8 4010 	str.w	r4, [r8, #16]
 800aa78:	4628      	mov	r0, r5
 800aa7a:	b003      	add	sp, #12
 800aa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa80:	6812      	ldr	r2, [r2, #0]
 800aa82:	3b04      	subs	r3, #4
 800aa84:	2a00      	cmp	r2, #0
 800aa86:	d1ca      	bne.n	800aa1e <quorem+0x9a>
 800aa88:	3c01      	subs	r4, #1
 800aa8a:	e7c5      	b.n	800aa18 <quorem+0x94>
 800aa8c:	6812      	ldr	r2, [r2, #0]
 800aa8e:	3b04      	subs	r3, #4
 800aa90:	2a00      	cmp	r2, #0
 800aa92:	d1ef      	bne.n	800aa74 <quorem+0xf0>
 800aa94:	3c01      	subs	r4, #1
 800aa96:	e7ea      	b.n	800aa6e <quorem+0xea>
 800aa98:	2000      	movs	r0, #0
 800aa9a:	e7ee      	b.n	800aa7a <quorem+0xf6>
 800aa9c:	0000      	movs	r0, r0
	...

0800aaa0 <_dtoa_r>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	ec57 6b10 	vmov	r6, r7, d0
 800aaa8:	b097      	sub	sp, #92	; 0x5c
 800aaaa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aaac:	9106      	str	r1, [sp, #24]
 800aaae:	4604      	mov	r4, r0
 800aab0:	920b      	str	r2, [sp, #44]	; 0x2c
 800aab2:	9312      	str	r3, [sp, #72]	; 0x48
 800aab4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aab8:	e9cd 6700 	strd	r6, r7, [sp]
 800aabc:	b93d      	cbnz	r5, 800aace <_dtoa_r+0x2e>
 800aabe:	2010      	movs	r0, #16
 800aac0:	f000 ff92 	bl	800b9e8 <malloc>
 800aac4:	6260      	str	r0, [r4, #36]	; 0x24
 800aac6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aaca:	6005      	str	r5, [r0, #0]
 800aacc:	60c5      	str	r5, [r0, #12]
 800aace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aad0:	6819      	ldr	r1, [r3, #0]
 800aad2:	b151      	cbz	r1, 800aaea <_dtoa_r+0x4a>
 800aad4:	685a      	ldr	r2, [r3, #4]
 800aad6:	604a      	str	r2, [r1, #4]
 800aad8:	2301      	movs	r3, #1
 800aada:	4093      	lsls	r3, r2
 800aadc:	608b      	str	r3, [r1, #8]
 800aade:	4620      	mov	r0, r4
 800aae0:	f000 ffbe 	bl	800ba60 <_Bfree>
 800aae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aae6:	2200      	movs	r2, #0
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	1e3b      	subs	r3, r7, #0
 800aaec:	bfbb      	ittet	lt
 800aaee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aaf2:	9301      	strlt	r3, [sp, #4]
 800aaf4:	2300      	movge	r3, #0
 800aaf6:	2201      	movlt	r2, #1
 800aaf8:	bfac      	ite	ge
 800aafa:	f8c8 3000 	strge.w	r3, [r8]
 800aafe:	f8c8 2000 	strlt.w	r2, [r8]
 800ab02:	4baf      	ldr	r3, [pc, #700]	; (800adc0 <_dtoa_r+0x320>)
 800ab04:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ab08:	ea33 0308 	bics.w	r3, r3, r8
 800ab0c:	d114      	bne.n	800ab38 <_dtoa_r+0x98>
 800ab0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab10:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab14:	6013      	str	r3, [r2, #0]
 800ab16:	9b00      	ldr	r3, [sp, #0]
 800ab18:	b923      	cbnz	r3, 800ab24 <_dtoa_r+0x84>
 800ab1a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	f000 8542 	beq.w	800b5a8 <_dtoa_r+0xb08>
 800ab24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab26:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800add4 <_dtoa_r+0x334>
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 8544 	beq.w	800b5b8 <_dtoa_r+0xb18>
 800ab30:	f10b 0303 	add.w	r3, fp, #3
 800ab34:	f000 bd3e 	b.w	800b5b4 <_dtoa_r+0xb14>
 800ab38:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	2300      	movs	r3, #0
 800ab40:	4630      	mov	r0, r6
 800ab42:	4639      	mov	r1, r7
 800ab44:	f7f5 ffe0 	bl	8000b08 <__aeabi_dcmpeq>
 800ab48:	4681      	mov	r9, r0
 800ab4a:	b168      	cbz	r0, 800ab68 <_dtoa_r+0xc8>
 800ab4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab4e:	2301      	movs	r3, #1
 800ab50:	6013      	str	r3, [r2, #0]
 800ab52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f000 8524 	beq.w	800b5a2 <_dtoa_r+0xb02>
 800ab5a:	4b9a      	ldr	r3, [pc, #616]	; (800adc4 <_dtoa_r+0x324>)
 800ab5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab5e:	f103 3bff 	add.w	fp, r3, #4294967295
 800ab62:	6013      	str	r3, [r2, #0]
 800ab64:	f000 bd28 	b.w	800b5b8 <_dtoa_r+0xb18>
 800ab68:	aa14      	add	r2, sp, #80	; 0x50
 800ab6a:	a915      	add	r1, sp, #84	; 0x54
 800ab6c:	ec47 6b10 	vmov	d0, r6, r7
 800ab70:	4620      	mov	r0, r4
 800ab72:	f001 f9ce 	bl	800bf12 <__d2b>
 800ab76:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ab7a:	9004      	str	r0, [sp, #16]
 800ab7c:	2d00      	cmp	r5, #0
 800ab7e:	d07c      	beq.n	800ac7a <_dtoa_r+0x1da>
 800ab80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab84:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ab88:	46b2      	mov	sl, r6
 800ab8a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ab8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab92:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ab96:	2200      	movs	r2, #0
 800ab98:	4b8b      	ldr	r3, [pc, #556]	; (800adc8 <_dtoa_r+0x328>)
 800ab9a:	4650      	mov	r0, sl
 800ab9c:	4659      	mov	r1, fp
 800ab9e:	f7f5 fb93 	bl	80002c8 <__aeabi_dsub>
 800aba2:	a381      	add	r3, pc, #516	; (adr r3, 800ada8 <_dtoa_r+0x308>)
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	f7f5 fd46 	bl	8000638 <__aeabi_dmul>
 800abac:	a380      	add	r3, pc, #512	; (adr r3, 800adb0 <_dtoa_r+0x310>)
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f7f5 fb8b 	bl	80002cc <__adddf3>
 800abb6:	4606      	mov	r6, r0
 800abb8:	4628      	mov	r0, r5
 800abba:	460f      	mov	r7, r1
 800abbc:	f7f5 fcd2 	bl	8000564 <__aeabi_i2d>
 800abc0:	a37d      	add	r3, pc, #500	; (adr r3, 800adb8 <_dtoa_r+0x318>)
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	f7f5 fd37 	bl	8000638 <__aeabi_dmul>
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	4630      	mov	r0, r6
 800abd0:	4639      	mov	r1, r7
 800abd2:	f7f5 fb7b 	bl	80002cc <__adddf3>
 800abd6:	4606      	mov	r6, r0
 800abd8:	460f      	mov	r7, r1
 800abda:	f7f5 ffdd 	bl	8000b98 <__aeabi_d2iz>
 800abde:	2200      	movs	r2, #0
 800abe0:	4682      	mov	sl, r0
 800abe2:	2300      	movs	r3, #0
 800abe4:	4630      	mov	r0, r6
 800abe6:	4639      	mov	r1, r7
 800abe8:	f7f5 ff98 	bl	8000b1c <__aeabi_dcmplt>
 800abec:	b148      	cbz	r0, 800ac02 <_dtoa_r+0x162>
 800abee:	4650      	mov	r0, sl
 800abf0:	f7f5 fcb8 	bl	8000564 <__aeabi_i2d>
 800abf4:	4632      	mov	r2, r6
 800abf6:	463b      	mov	r3, r7
 800abf8:	f7f5 ff86 	bl	8000b08 <__aeabi_dcmpeq>
 800abfc:	b908      	cbnz	r0, 800ac02 <_dtoa_r+0x162>
 800abfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac02:	f1ba 0f16 	cmp.w	sl, #22
 800ac06:	d859      	bhi.n	800acbc <_dtoa_r+0x21c>
 800ac08:	4970      	ldr	r1, [pc, #448]	; (800adcc <_dtoa_r+0x32c>)
 800ac0a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ac0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac16:	f7f5 ff9f 	bl	8000b58 <__aeabi_dcmpgt>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d050      	beq.n	800acc0 <_dtoa_r+0x220>
 800ac1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac22:	2300      	movs	r3, #0
 800ac24:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac28:	1b5d      	subs	r5, r3, r5
 800ac2a:	f1b5 0801 	subs.w	r8, r5, #1
 800ac2e:	bf49      	itett	mi
 800ac30:	f1c5 0301 	rsbmi	r3, r5, #1
 800ac34:	2300      	movpl	r3, #0
 800ac36:	9305      	strmi	r3, [sp, #20]
 800ac38:	f04f 0800 	movmi.w	r8, #0
 800ac3c:	bf58      	it	pl
 800ac3e:	9305      	strpl	r3, [sp, #20]
 800ac40:	f1ba 0f00 	cmp.w	sl, #0
 800ac44:	db3e      	blt.n	800acc4 <_dtoa_r+0x224>
 800ac46:	2300      	movs	r3, #0
 800ac48:	44d0      	add	r8, sl
 800ac4a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ac4e:	9307      	str	r3, [sp, #28]
 800ac50:	9b06      	ldr	r3, [sp, #24]
 800ac52:	2b09      	cmp	r3, #9
 800ac54:	f200 8090 	bhi.w	800ad78 <_dtoa_r+0x2d8>
 800ac58:	2b05      	cmp	r3, #5
 800ac5a:	bfc4      	itt	gt
 800ac5c:	3b04      	subgt	r3, #4
 800ac5e:	9306      	strgt	r3, [sp, #24]
 800ac60:	9b06      	ldr	r3, [sp, #24]
 800ac62:	f1a3 0302 	sub.w	r3, r3, #2
 800ac66:	bfcc      	ite	gt
 800ac68:	2500      	movgt	r5, #0
 800ac6a:	2501      	movle	r5, #1
 800ac6c:	2b03      	cmp	r3, #3
 800ac6e:	f200 808f 	bhi.w	800ad90 <_dtoa_r+0x2f0>
 800ac72:	e8df f003 	tbb	[pc, r3]
 800ac76:	7f7d      	.short	0x7f7d
 800ac78:	7131      	.short	0x7131
 800ac7a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ac7e:	441d      	add	r5, r3
 800ac80:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ac84:	2820      	cmp	r0, #32
 800ac86:	dd13      	ble.n	800acb0 <_dtoa_r+0x210>
 800ac88:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ac8c:	9b00      	ldr	r3, [sp, #0]
 800ac8e:	fa08 f800 	lsl.w	r8, r8, r0
 800ac92:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ac96:	fa23 f000 	lsr.w	r0, r3, r0
 800ac9a:	ea48 0000 	orr.w	r0, r8, r0
 800ac9e:	f7f5 fc51 	bl	8000544 <__aeabi_ui2d>
 800aca2:	2301      	movs	r3, #1
 800aca4:	4682      	mov	sl, r0
 800aca6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800acaa:	3d01      	subs	r5, #1
 800acac:	9313      	str	r3, [sp, #76]	; 0x4c
 800acae:	e772      	b.n	800ab96 <_dtoa_r+0xf6>
 800acb0:	9b00      	ldr	r3, [sp, #0]
 800acb2:	f1c0 0020 	rsb	r0, r0, #32
 800acb6:	fa03 f000 	lsl.w	r0, r3, r0
 800acba:	e7f0      	b.n	800ac9e <_dtoa_r+0x1fe>
 800acbc:	2301      	movs	r3, #1
 800acbe:	e7b1      	b.n	800ac24 <_dtoa_r+0x184>
 800acc0:	900f      	str	r0, [sp, #60]	; 0x3c
 800acc2:	e7b0      	b.n	800ac26 <_dtoa_r+0x186>
 800acc4:	9b05      	ldr	r3, [sp, #20]
 800acc6:	eba3 030a 	sub.w	r3, r3, sl
 800acca:	9305      	str	r3, [sp, #20]
 800accc:	f1ca 0300 	rsb	r3, sl, #0
 800acd0:	9307      	str	r3, [sp, #28]
 800acd2:	2300      	movs	r3, #0
 800acd4:	930e      	str	r3, [sp, #56]	; 0x38
 800acd6:	e7bb      	b.n	800ac50 <_dtoa_r+0x1b0>
 800acd8:	2301      	movs	r3, #1
 800acda:	930a      	str	r3, [sp, #40]	; 0x28
 800acdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	dd59      	ble.n	800ad96 <_dtoa_r+0x2f6>
 800ace2:	9302      	str	r3, [sp, #8]
 800ace4:	4699      	mov	r9, r3
 800ace6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ace8:	2200      	movs	r2, #0
 800acea:	6072      	str	r2, [r6, #4]
 800acec:	2204      	movs	r2, #4
 800acee:	f102 0014 	add.w	r0, r2, #20
 800acf2:	4298      	cmp	r0, r3
 800acf4:	6871      	ldr	r1, [r6, #4]
 800acf6:	d953      	bls.n	800ada0 <_dtoa_r+0x300>
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 fe7d 	bl	800b9f8 <_Balloc>
 800acfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad00:	6030      	str	r0, [r6, #0]
 800ad02:	f1b9 0f0e 	cmp.w	r9, #14
 800ad06:	f8d3 b000 	ldr.w	fp, [r3]
 800ad0a:	f200 80e6 	bhi.w	800aeda <_dtoa_r+0x43a>
 800ad0e:	2d00      	cmp	r5, #0
 800ad10:	f000 80e3 	beq.w	800aeda <_dtoa_r+0x43a>
 800ad14:	ed9d 7b00 	vldr	d7, [sp]
 800ad18:	f1ba 0f00 	cmp.w	sl, #0
 800ad1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ad20:	dd74      	ble.n	800ae0c <_dtoa_r+0x36c>
 800ad22:	4a2a      	ldr	r2, [pc, #168]	; (800adcc <_dtoa_r+0x32c>)
 800ad24:	f00a 030f 	and.w	r3, sl, #15
 800ad28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad2c:	ed93 7b00 	vldr	d7, [r3]
 800ad30:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ad34:	06f0      	lsls	r0, r6, #27
 800ad36:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ad3a:	d565      	bpl.n	800ae08 <_dtoa_r+0x368>
 800ad3c:	4b24      	ldr	r3, [pc, #144]	; (800add0 <_dtoa_r+0x330>)
 800ad3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad46:	f7f5 fda1 	bl	800088c <__aeabi_ddiv>
 800ad4a:	e9cd 0100 	strd	r0, r1, [sp]
 800ad4e:	f006 060f 	and.w	r6, r6, #15
 800ad52:	2503      	movs	r5, #3
 800ad54:	4f1e      	ldr	r7, [pc, #120]	; (800add0 <_dtoa_r+0x330>)
 800ad56:	e04c      	b.n	800adf2 <_dtoa_r+0x352>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad5e:	4453      	add	r3, sl
 800ad60:	f103 0901 	add.w	r9, r3, #1
 800ad64:	9302      	str	r3, [sp, #8]
 800ad66:	464b      	mov	r3, r9
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	bfb8      	it	lt
 800ad6c:	2301      	movlt	r3, #1
 800ad6e:	e7ba      	b.n	800ace6 <_dtoa_r+0x246>
 800ad70:	2300      	movs	r3, #0
 800ad72:	e7b2      	b.n	800acda <_dtoa_r+0x23a>
 800ad74:	2300      	movs	r3, #0
 800ad76:	e7f0      	b.n	800ad5a <_dtoa_r+0x2ba>
 800ad78:	2501      	movs	r5, #1
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9306      	str	r3, [sp, #24]
 800ad7e:	950a      	str	r5, [sp, #40]	; 0x28
 800ad80:	f04f 33ff 	mov.w	r3, #4294967295
 800ad84:	9302      	str	r3, [sp, #8]
 800ad86:	4699      	mov	r9, r3
 800ad88:	2200      	movs	r2, #0
 800ad8a:	2312      	movs	r3, #18
 800ad8c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad8e:	e7aa      	b.n	800ace6 <_dtoa_r+0x246>
 800ad90:	2301      	movs	r3, #1
 800ad92:	930a      	str	r3, [sp, #40]	; 0x28
 800ad94:	e7f4      	b.n	800ad80 <_dtoa_r+0x2e0>
 800ad96:	2301      	movs	r3, #1
 800ad98:	9302      	str	r3, [sp, #8]
 800ad9a:	4699      	mov	r9, r3
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	e7f5      	b.n	800ad8c <_dtoa_r+0x2ec>
 800ada0:	3101      	adds	r1, #1
 800ada2:	6071      	str	r1, [r6, #4]
 800ada4:	0052      	lsls	r2, r2, #1
 800ada6:	e7a2      	b.n	800acee <_dtoa_r+0x24e>
 800ada8:	636f4361 	.word	0x636f4361
 800adac:	3fd287a7 	.word	0x3fd287a7
 800adb0:	8b60c8b3 	.word	0x8b60c8b3
 800adb4:	3fc68a28 	.word	0x3fc68a28
 800adb8:	509f79fb 	.word	0x509f79fb
 800adbc:	3fd34413 	.word	0x3fd34413
 800adc0:	7ff00000 	.word	0x7ff00000
 800adc4:	0800c629 	.word	0x0800c629
 800adc8:	3ff80000 	.word	0x3ff80000
 800adcc:	0800c6e8 	.word	0x0800c6e8
 800add0:	0800c6c0 	.word	0x0800c6c0
 800add4:	0800c655 	.word	0x0800c655
 800add8:	07f1      	lsls	r1, r6, #31
 800adda:	d508      	bpl.n	800adee <_dtoa_r+0x34e>
 800addc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ade0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ade4:	f7f5 fc28 	bl	8000638 <__aeabi_dmul>
 800ade8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800adec:	3501      	adds	r5, #1
 800adee:	1076      	asrs	r6, r6, #1
 800adf0:	3708      	adds	r7, #8
 800adf2:	2e00      	cmp	r6, #0
 800adf4:	d1f0      	bne.n	800add8 <_dtoa_r+0x338>
 800adf6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800adfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adfe:	f7f5 fd45 	bl	800088c <__aeabi_ddiv>
 800ae02:	e9cd 0100 	strd	r0, r1, [sp]
 800ae06:	e01a      	b.n	800ae3e <_dtoa_r+0x39e>
 800ae08:	2502      	movs	r5, #2
 800ae0a:	e7a3      	b.n	800ad54 <_dtoa_r+0x2b4>
 800ae0c:	f000 80a0 	beq.w	800af50 <_dtoa_r+0x4b0>
 800ae10:	f1ca 0600 	rsb	r6, sl, #0
 800ae14:	4b9f      	ldr	r3, [pc, #636]	; (800b094 <_dtoa_r+0x5f4>)
 800ae16:	4fa0      	ldr	r7, [pc, #640]	; (800b098 <_dtoa_r+0x5f8>)
 800ae18:	f006 020f 	and.w	r2, r6, #15
 800ae1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae28:	f7f5 fc06 	bl	8000638 <__aeabi_dmul>
 800ae2c:	e9cd 0100 	strd	r0, r1, [sp]
 800ae30:	1136      	asrs	r6, r6, #4
 800ae32:	2300      	movs	r3, #0
 800ae34:	2502      	movs	r5, #2
 800ae36:	2e00      	cmp	r6, #0
 800ae38:	d17f      	bne.n	800af3a <_dtoa_r+0x49a>
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1e1      	bne.n	800ae02 <_dtoa_r+0x362>
 800ae3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f000 8087 	beq.w	800af54 <_dtoa_r+0x4b4>
 800ae46:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	4b93      	ldr	r3, [pc, #588]	; (800b09c <_dtoa_r+0x5fc>)
 800ae4e:	4630      	mov	r0, r6
 800ae50:	4639      	mov	r1, r7
 800ae52:	f7f5 fe63 	bl	8000b1c <__aeabi_dcmplt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d07c      	beq.n	800af54 <_dtoa_r+0x4b4>
 800ae5a:	f1b9 0f00 	cmp.w	r9, #0
 800ae5e:	d079      	beq.n	800af54 <_dtoa_r+0x4b4>
 800ae60:	9b02      	ldr	r3, [sp, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	dd35      	ble.n	800aed2 <_dtoa_r+0x432>
 800ae66:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ae6a:	9308      	str	r3, [sp, #32]
 800ae6c:	4639      	mov	r1, r7
 800ae6e:	2200      	movs	r2, #0
 800ae70:	4b8b      	ldr	r3, [pc, #556]	; (800b0a0 <_dtoa_r+0x600>)
 800ae72:	4630      	mov	r0, r6
 800ae74:	f7f5 fbe0 	bl	8000638 <__aeabi_dmul>
 800ae78:	e9cd 0100 	strd	r0, r1, [sp]
 800ae7c:	9f02      	ldr	r7, [sp, #8]
 800ae7e:	3501      	adds	r5, #1
 800ae80:	4628      	mov	r0, r5
 800ae82:	f7f5 fb6f 	bl	8000564 <__aeabi_i2d>
 800ae86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae8a:	f7f5 fbd5 	bl	8000638 <__aeabi_dmul>
 800ae8e:	2200      	movs	r2, #0
 800ae90:	4b84      	ldr	r3, [pc, #528]	; (800b0a4 <_dtoa_r+0x604>)
 800ae92:	f7f5 fa1b 	bl	80002cc <__adddf3>
 800ae96:	4605      	mov	r5, r0
 800ae98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ae9c:	2f00      	cmp	r7, #0
 800ae9e:	d15d      	bne.n	800af5c <_dtoa_r+0x4bc>
 800aea0:	2200      	movs	r2, #0
 800aea2:	4b81      	ldr	r3, [pc, #516]	; (800b0a8 <_dtoa_r+0x608>)
 800aea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aea8:	f7f5 fa0e 	bl	80002c8 <__aeabi_dsub>
 800aeac:	462a      	mov	r2, r5
 800aeae:	4633      	mov	r3, r6
 800aeb0:	e9cd 0100 	strd	r0, r1, [sp]
 800aeb4:	f7f5 fe50 	bl	8000b58 <__aeabi_dcmpgt>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	f040 8288 	bne.w	800b3ce <_dtoa_r+0x92e>
 800aebe:	462a      	mov	r2, r5
 800aec0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aec8:	f7f5 fe28 	bl	8000b1c <__aeabi_dcmplt>
 800aecc:	2800      	cmp	r0, #0
 800aece:	f040 827c 	bne.w	800b3ca <_dtoa_r+0x92a>
 800aed2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aed6:	e9cd 2300 	strd	r2, r3, [sp]
 800aeda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f2c0 8150 	blt.w	800b182 <_dtoa_r+0x6e2>
 800aee2:	f1ba 0f0e 	cmp.w	sl, #14
 800aee6:	f300 814c 	bgt.w	800b182 <_dtoa_r+0x6e2>
 800aeea:	4b6a      	ldr	r3, [pc, #424]	; (800b094 <_dtoa_r+0x5f4>)
 800aeec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aef0:	ed93 7b00 	vldr	d7, [r3]
 800aef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aefc:	f280 80d8 	bge.w	800b0b0 <_dtoa_r+0x610>
 800af00:	f1b9 0f00 	cmp.w	r9, #0
 800af04:	f300 80d4 	bgt.w	800b0b0 <_dtoa_r+0x610>
 800af08:	f040 825e 	bne.w	800b3c8 <_dtoa_r+0x928>
 800af0c:	2200      	movs	r2, #0
 800af0e:	4b66      	ldr	r3, [pc, #408]	; (800b0a8 <_dtoa_r+0x608>)
 800af10:	ec51 0b17 	vmov	r0, r1, d7
 800af14:	f7f5 fb90 	bl	8000638 <__aeabi_dmul>
 800af18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af1c:	f7f5 fe12 	bl	8000b44 <__aeabi_dcmpge>
 800af20:	464f      	mov	r7, r9
 800af22:	464e      	mov	r6, r9
 800af24:	2800      	cmp	r0, #0
 800af26:	f040 8234 	bne.w	800b392 <_dtoa_r+0x8f2>
 800af2a:	2331      	movs	r3, #49	; 0x31
 800af2c:	f10b 0501 	add.w	r5, fp, #1
 800af30:	f88b 3000 	strb.w	r3, [fp]
 800af34:	f10a 0a01 	add.w	sl, sl, #1
 800af38:	e22f      	b.n	800b39a <_dtoa_r+0x8fa>
 800af3a:	07f2      	lsls	r2, r6, #31
 800af3c:	d505      	bpl.n	800af4a <_dtoa_r+0x4aa>
 800af3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af42:	f7f5 fb79 	bl	8000638 <__aeabi_dmul>
 800af46:	3501      	adds	r5, #1
 800af48:	2301      	movs	r3, #1
 800af4a:	1076      	asrs	r6, r6, #1
 800af4c:	3708      	adds	r7, #8
 800af4e:	e772      	b.n	800ae36 <_dtoa_r+0x396>
 800af50:	2502      	movs	r5, #2
 800af52:	e774      	b.n	800ae3e <_dtoa_r+0x39e>
 800af54:	f8cd a020 	str.w	sl, [sp, #32]
 800af58:	464f      	mov	r7, r9
 800af5a:	e791      	b.n	800ae80 <_dtoa_r+0x3e0>
 800af5c:	4b4d      	ldr	r3, [pc, #308]	; (800b094 <_dtoa_r+0x5f4>)
 800af5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af62:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800af66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d047      	beq.n	800affc <_dtoa_r+0x55c>
 800af6c:	4602      	mov	r2, r0
 800af6e:	460b      	mov	r3, r1
 800af70:	2000      	movs	r0, #0
 800af72:	494e      	ldr	r1, [pc, #312]	; (800b0ac <_dtoa_r+0x60c>)
 800af74:	f7f5 fc8a 	bl	800088c <__aeabi_ddiv>
 800af78:	462a      	mov	r2, r5
 800af7a:	4633      	mov	r3, r6
 800af7c:	f7f5 f9a4 	bl	80002c8 <__aeabi_dsub>
 800af80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af84:	465d      	mov	r5, fp
 800af86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af8a:	f7f5 fe05 	bl	8000b98 <__aeabi_d2iz>
 800af8e:	4606      	mov	r6, r0
 800af90:	f7f5 fae8 	bl	8000564 <__aeabi_i2d>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af9c:	f7f5 f994 	bl	80002c8 <__aeabi_dsub>
 800afa0:	3630      	adds	r6, #48	; 0x30
 800afa2:	f805 6b01 	strb.w	r6, [r5], #1
 800afa6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800afaa:	e9cd 0100 	strd	r0, r1, [sp]
 800afae:	f7f5 fdb5 	bl	8000b1c <__aeabi_dcmplt>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d163      	bne.n	800b07e <_dtoa_r+0x5de>
 800afb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afba:	2000      	movs	r0, #0
 800afbc:	4937      	ldr	r1, [pc, #220]	; (800b09c <_dtoa_r+0x5fc>)
 800afbe:	f7f5 f983 	bl	80002c8 <__aeabi_dsub>
 800afc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800afc6:	f7f5 fda9 	bl	8000b1c <__aeabi_dcmplt>
 800afca:	2800      	cmp	r0, #0
 800afcc:	f040 80b7 	bne.w	800b13e <_dtoa_r+0x69e>
 800afd0:	eba5 030b 	sub.w	r3, r5, fp
 800afd4:	429f      	cmp	r7, r3
 800afd6:	f77f af7c 	ble.w	800aed2 <_dtoa_r+0x432>
 800afda:	2200      	movs	r2, #0
 800afdc:	4b30      	ldr	r3, [pc, #192]	; (800b0a0 <_dtoa_r+0x600>)
 800afde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afe2:	f7f5 fb29 	bl	8000638 <__aeabi_dmul>
 800afe6:	2200      	movs	r2, #0
 800afe8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800afec:	4b2c      	ldr	r3, [pc, #176]	; (800b0a0 <_dtoa_r+0x600>)
 800afee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aff2:	f7f5 fb21 	bl	8000638 <__aeabi_dmul>
 800aff6:	e9cd 0100 	strd	r0, r1, [sp]
 800affa:	e7c4      	b.n	800af86 <_dtoa_r+0x4e6>
 800affc:	462a      	mov	r2, r5
 800affe:	4633      	mov	r3, r6
 800b000:	f7f5 fb1a 	bl	8000638 <__aeabi_dmul>
 800b004:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b008:	eb0b 0507 	add.w	r5, fp, r7
 800b00c:	465e      	mov	r6, fp
 800b00e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b012:	f7f5 fdc1 	bl	8000b98 <__aeabi_d2iz>
 800b016:	4607      	mov	r7, r0
 800b018:	f7f5 faa4 	bl	8000564 <__aeabi_i2d>
 800b01c:	3730      	adds	r7, #48	; 0x30
 800b01e:	4602      	mov	r2, r0
 800b020:	460b      	mov	r3, r1
 800b022:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b026:	f7f5 f94f 	bl	80002c8 <__aeabi_dsub>
 800b02a:	f806 7b01 	strb.w	r7, [r6], #1
 800b02e:	42ae      	cmp	r6, r5
 800b030:	e9cd 0100 	strd	r0, r1, [sp]
 800b034:	f04f 0200 	mov.w	r2, #0
 800b038:	d126      	bne.n	800b088 <_dtoa_r+0x5e8>
 800b03a:	4b1c      	ldr	r3, [pc, #112]	; (800b0ac <_dtoa_r+0x60c>)
 800b03c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b040:	f7f5 f944 	bl	80002cc <__adddf3>
 800b044:	4602      	mov	r2, r0
 800b046:	460b      	mov	r3, r1
 800b048:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b04c:	f7f5 fd84 	bl	8000b58 <__aeabi_dcmpgt>
 800b050:	2800      	cmp	r0, #0
 800b052:	d174      	bne.n	800b13e <_dtoa_r+0x69e>
 800b054:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b058:	2000      	movs	r0, #0
 800b05a:	4914      	ldr	r1, [pc, #80]	; (800b0ac <_dtoa_r+0x60c>)
 800b05c:	f7f5 f934 	bl	80002c8 <__aeabi_dsub>
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b068:	f7f5 fd58 	bl	8000b1c <__aeabi_dcmplt>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	f43f af30 	beq.w	800aed2 <_dtoa_r+0x432>
 800b072:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b076:	2b30      	cmp	r3, #48	; 0x30
 800b078:	f105 32ff 	add.w	r2, r5, #4294967295
 800b07c:	d002      	beq.n	800b084 <_dtoa_r+0x5e4>
 800b07e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b082:	e04a      	b.n	800b11a <_dtoa_r+0x67a>
 800b084:	4615      	mov	r5, r2
 800b086:	e7f4      	b.n	800b072 <_dtoa_r+0x5d2>
 800b088:	4b05      	ldr	r3, [pc, #20]	; (800b0a0 <_dtoa_r+0x600>)
 800b08a:	f7f5 fad5 	bl	8000638 <__aeabi_dmul>
 800b08e:	e9cd 0100 	strd	r0, r1, [sp]
 800b092:	e7bc      	b.n	800b00e <_dtoa_r+0x56e>
 800b094:	0800c6e8 	.word	0x0800c6e8
 800b098:	0800c6c0 	.word	0x0800c6c0
 800b09c:	3ff00000 	.word	0x3ff00000
 800b0a0:	40240000 	.word	0x40240000
 800b0a4:	401c0000 	.word	0x401c0000
 800b0a8:	40140000 	.word	0x40140000
 800b0ac:	3fe00000 	.word	0x3fe00000
 800b0b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b0b4:	465d      	mov	r5, fp
 800b0b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	4639      	mov	r1, r7
 800b0be:	f7f5 fbe5 	bl	800088c <__aeabi_ddiv>
 800b0c2:	f7f5 fd69 	bl	8000b98 <__aeabi_d2iz>
 800b0c6:	4680      	mov	r8, r0
 800b0c8:	f7f5 fa4c 	bl	8000564 <__aeabi_i2d>
 800b0cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0d0:	f7f5 fab2 	bl	8000638 <__aeabi_dmul>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4639      	mov	r1, r7
 800b0dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b0e0:	f7f5 f8f2 	bl	80002c8 <__aeabi_dsub>
 800b0e4:	f805 6b01 	strb.w	r6, [r5], #1
 800b0e8:	eba5 060b 	sub.w	r6, r5, fp
 800b0ec:	45b1      	cmp	r9, r6
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	d139      	bne.n	800b168 <_dtoa_r+0x6c8>
 800b0f4:	f7f5 f8ea 	bl	80002cc <__adddf3>
 800b0f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	460f      	mov	r7, r1
 800b100:	f7f5 fd2a 	bl	8000b58 <__aeabi_dcmpgt>
 800b104:	b9c8      	cbnz	r0, 800b13a <_dtoa_r+0x69a>
 800b106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b10a:	4630      	mov	r0, r6
 800b10c:	4639      	mov	r1, r7
 800b10e:	f7f5 fcfb 	bl	8000b08 <__aeabi_dcmpeq>
 800b112:	b110      	cbz	r0, 800b11a <_dtoa_r+0x67a>
 800b114:	f018 0f01 	tst.w	r8, #1
 800b118:	d10f      	bne.n	800b13a <_dtoa_r+0x69a>
 800b11a:	9904      	ldr	r1, [sp, #16]
 800b11c:	4620      	mov	r0, r4
 800b11e:	f000 fc9f 	bl	800ba60 <_Bfree>
 800b122:	2300      	movs	r3, #0
 800b124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b126:	702b      	strb	r3, [r5, #0]
 800b128:	f10a 0301 	add.w	r3, sl, #1
 800b12c:	6013      	str	r3, [r2, #0]
 800b12e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 8241 	beq.w	800b5b8 <_dtoa_r+0xb18>
 800b136:	601d      	str	r5, [r3, #0]
 800b138:	e23e      	b.n	800b5b8 <_dtoa_r+0xb18>
 800b13a:	f8cd a020 	str.w	sl, [sp, #32]
 800b13e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b142:	2a39      	cmp	r2, #57	; 0x39
 800b144:	f105 33ff 	add.w	r3, r5, #4294967295
 800b148:	d108      	bne.n	800b15c <_dtoa_r+0x6bc>
 800b14a:	459b      	cmp	fp, r3
 800b14c:	d10a      	bne.n	800b164 <_dtoa_r+0x6c4>
 800b14e:	9b08      	ldr	r3, [sp, #32]
 800b150:	3301      	adds	r3, #1
 800b152:	9308      	str	r3, [sp, #32]
 800b154:	2330      	movs	r3, #48	; 0x30
 800b156:	f88b 3000 	strb.w	r3, [fp]
 800b15a:	465b      	mov	r3, fp
 800b15c:	781a      	ldrb	r2, [r3, #0]
 800b15e:	3201      	adds	r2, #1
 800b160:	701a      	strb	r2, [r3, #0]
 800b162:	e78c      	b.n	800b07e <_dtoa_r+0x5de>
 800b164:	461d      	mov	r5, r3
 800b166:	e7ea      	b.n	800b13e <_dtoa_r+0x69e>
 800b168:	2200      	movs	r2, #0
 800b16a:	4b9b      	ldr	r3, [pc, #620]	; (800b3d8 <_dtoa_r+0x938>)
 800b16c:	f7f5 fa64 	bl	8000638 <__aeabi_dmul>
 800b170:	2200      	movs	r2, #0
 800b172:	2300      	movs	r3, #0
 800b174:	4606      	mov	r6, r0
 800b176:	460f      	mov	r7, r1
 800b178:	f7f5 fcc6 	bl	8000b08 <__aeabi_dcmpeq>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d09a      	beq.n	800b0b6 <_dtoa_r+0x616>
 800b180:	e7cb      	b.n	800b11a <_dtoa_r+0x67a>
 800b182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b184:	2a00      	cmp	r2, #0
 800b186:	f000 808b 	beq.w	800b2a0 <_dtoa_r+0x800>
 800b18a:	9a06      	ldr	r2, [sp, #24]
 800b18c:	2a01      	cmp	r2, #1
 800b18e:	dc6e      	bgt.n	800b26e <_dtoa_r+0x7ce>
 800b190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b192:	2a00      	cmp	r2, #0
 800b194:	d067      	beq.n	800b266 <_dtoa_r+0x7c6>
 800b196:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b19a:	9f07      	ldr	r7, [sp, #28]
 800b19c:	9d05      	ldr	r5, [sp, #20]
 800b19e:	9a05      	ldr	r2, [sp, #20]
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	441a      	add	r2, r3
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	9205      	str	r2, [sp, #20]
 800b1a8:	4498      	add	r8, r3
 800b1aa:	f000 fcf9 	bl	800bba0 <__i2b>
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	2d00      	cmp	r5, #0
 800b1b2:	dd0c      	ble.n	800b1ce <_dtoa_r+0x72e>
 800b1b4:	f1b8 0f00 	cmp.w	r8, #0
 800b1b8:	dd09      	ble.n	800b1ce <_dtoa_r+0x72e>
 800b1ba:	4545      	cmp	r5, r8
 800b1bc:	9a05      	ldr	r2, [sp, #20]
 800b1be:	462b      	mov	r3, r5
 800b1c0:	bfa8      	it	ge
 800b1c2:	4643      	movge	r3, r8
 800b1c4:	1ad2      	subs	r2, r2, r3
 800b1c6:	9205      	str	r2, [sp, #20]
 800b1c8:	1aed      	subs	r5, r5, r3
 800b1ca:	eba8 0803 	sub.w	r8, r8, r3
 800b1ce:	9b07      	ldr	r3, [sp, #28]
 800b1d0:	b1eb      	cbz	r3, 800b20e <_dtoa_r+0x76e>
 800b1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d067      	beq.n	800b2a8 <_dtoa_r+0x808>
 800b1d8:	b18f      	cbz	r7, 800b1fe <_dtoa_r+0x75e>
 800b1da:	4631      	mov	r1, r6
 800b1dc:	463a      	mov	r2, r7
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f000 fd7e 	bl	800bce0 <__pow5mult>
 800b1e4:	9a04      	ldr	r2, [sp, #16]
 800b1e6:	4601      	mov	r1, r0
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f000 fce1 	bl	800bbb2 <__multiply>
 800b1f0:	9904      	ldr	r1, [sp, #16]
 800b1f2:	9008      	str	r0, [sp, #32]
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	f000 fc33 	bl	800ba60 <_Bfree>
 800b1fa:	9b08      	ldr	r3, [sp, #32]
 800b1fc:	9304      	str	r3, [sp, #16]
 800b1fe:	9b07      	ldr	r3, [sp, #28]
 800b200:	1bda      	subs	r2, r3, r7
 800b202:	d004      	beq.n	800b20e <_dtoa_r+0x76e>
 800b204:	9904      	ldr	r1, [sp, #16]
 800b206:	4620      	mov	r0, r4
 800b208:	f000 fd6a 	bl	800bce0 <__pow5mult>
 800b20c:	9004      	str	r0, [sp, #16]
 800b20e:	2101      	movs	r1, #1
 800b210:	4620      	mov	r0, r4
 800b212:	f000 fcc5 	bl	800bba0 <__i2b>
 800b216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b218:	4607      	mov	r7, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 81d0 	beq.w	800b5c0 <_dtoa_r+0xb20>
 800b220:	461a      	mov	r2, r3
 800b222:	4601      	mov	r1, r0
 800b224:	4620      	mov	r0, r4
 800b226:	f000 fd5b 	bl	800bce0 <__pow5mult>
 800b22a:	9b06      	ldr	r3, [sp, #24]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	4607      	mov	r7, r0
 800b230:	dc40      	bgt.n	800b2b4 <_dtoa_r+0x814>
 800b232:	9b00      	ldr	r3, [sp, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d139      	bne.n	800b2ac <_dtoa_r+0x80c>
 800b238:	9b01      	ldr	r3, [sp, #4]
 800b23a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d136      	bne.n	800b2b0 <_dtoa_r+0x810>
 800b242:	9b01      	ldr	r3, [sp, #4]
 800b244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b248:	0d1b      	lsrs	r3, r3, #20
 800b24a:	051b      	lsls	r3, r3, #20
 800b24c:	b12b      	cbz	r3, 800b25a <_dtoa_r+0x7ba>
 800b24e:	9b05      	ldr	r3, [sp, #20]
 800b250:	3301      	adds	r3, #1
 800b252:	9305      	str	r3, [sp, #20]
 800b254:	f108 0801 	add.w	r8, r8, #1
 800b258:	2301      	movs	r3, #1
 800b25a:	9307      	str	r3, [sp, #28]
 800b25c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d12a      	bne.n	800b2b8 <_dtoa_r+0x818>
 800b262:	2001      	movs	r0, #1
 800b264:	e030      	b.n	800b2c8 <_dtoa_r+0x828>
 800b266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b268:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b26c:	e795      	b.n	800b19a <_dtoa_r+0x6fa>
 800b26e:	9b07      	ldr	r3, [sp, #28]
 800b270:	f109 37ff 	add.w	r7, r9, #4294967295
 800b274:	42bb      	cmp	r3, r7
 800b276:	bfbf      	itttt	lt
 800b278:	9b07      	ldrlt	r3, [sp, #28]
 800b27a:	9707      	strlt	r7, [sp, #28]
 800b27c:	1afa      	sublt	r2, r7, r3
 800b27e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b280:	bfbb      	ittet	lt
 800b282:	189b      	addlt	r3, r3, r2
 800b284:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b286:	1bdf      	subge	r7, r3, r7
 800b288:	2700      	movlt	r7, #0
 800b28a:	f1b9 0f00 	cmp.w	r9, #0
 800b28e:	bfb5      	itete	lt
 800b290:	9b05      	ldrlt	r3, [sp, #20]
 800b292:	9d05      	ldrge	r5, [sp, #20]
 800b294:	eba3 0509 	sublt.w	r5, r3, r9
 800b298:	464b      	movge	r3, r9
 800b29a:	bfb8      	it	lt
 800b29c:	2300      	movlt	r3, #0
 800b29e:	e77e      	b.n	800b19e <_dtoa_r+0x6fe>
 800b2a0:	9f07      	ldr	r7, [sp, #28]
 800b2a2:	9d05      	ldr	r5, [sp, #20]
 800b2a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b2a6:	e783      	b.n	800b1b0 <_dtoa_r+0x710>
 800b2a8:	9a07      	ldr	r2, [sp, #28]
 800b2aa:	e7ab      	b.n	800b204 <_dtoa_r+0x764>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	e7d4      	b.n	800b25a <_dtoa_r+0x7ba>
 800b2b0:	9b00      	ldr	r3, [sp, #0]
 800b2b2:	e7d2      	b.n	800b25a <_dtoa_r+0x7ba>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	9307      	str	r3, [sp, #28]
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b2be:	6918      	ldr	r0, [r3, #16]
 800b2c0:	f000 fc20 	bl	800bb04 <__hi0bits>
 800b2c4:	f1c0 0020 	rsb	r0, r0, #32
 800b2c8:	4440      	add	r0, r8
 800b2ca:	f010 001f 	ands.w	r0, r0, #31
 800b2ce:	d047      	beq.n	800b360 <_dtoa_r+0x8c0>
 800b2d0:	f1c0 0320 	rsb	r3, r0, #32
 800b2d4:	2b04      	cmp	r3, #4
 800b2d6:	dd3b      	ble.n	800b350 <_dtoa_r+0x8b0>
 800b2d8:	9b05      	ldr	r3, [sp, #20]
 800b2da:	f1c0 001c 	rsb	r0, r0, #28
 800b2de:	4403      	add	r3, r0
 800b2e0:	9305      	str	r3, [sp, #20]
 800b2e2:	4405      	add	r5, r0
 800b2e4:	4480      	add	r8, r0
 800b2e6:	9b05      	ldr	r3, [sp, #20]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	dd05      	ble.n	800b2f8 <_dtoa_r+0x858>
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	9904      	ldr	r1, [sp, #16]
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f000 fd43 	bl	800bd7c <__lshift>
 800b2f6:	9004      	str	r0, [sp, #16]
 800b2f8:	f1b8 0f00 	cmp.w	r8, #0
 800b2fc:	dd05      	ble.n	800b30a <_dtoa_r+0x86a>
 800b2fe:	4639      	mov	r1, r7
 800b300:	4642      	mov	r2, r8
 800b302:	4620      	mov	r0, r4
 800b304:	f000 fd3a 	bl	800bd7c <__lshift>
 800b308:	4607      	mov	r7, r0
 800b30a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b30c:	b353      	cbz	r3, 800b364 <_dtoa_r+0x8c4>
 800b30e:	4639      	mov	r1, r7
 800b310:	9804      	ldr	r0, [sp, #16]
 800b312:	f000 fd87 	bl	800be24 <__mcmp>
 800b316:	2800      	cmp	r0, #0
 800b318:	da24      	bge.n	800b364 <_dtoa_r+0x8c4>
 800b31a:	2300      	movs	r3, #0
 800b31c:	220a      	movs	r2, #10
 800b31e:	9904      	ldr	r1, [sp, #16]
 800b320:	4620      	mov	r0, r4
 800b322:	f000 fbb4 	bl	800ba8e <__multadd>
 800b326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b328:	9004      	str	r0, [sp, #16]
 800b32a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f000 814d 	beq.w	800b5ce <_dtoa_r+0xb2e>
 800b334:	2300      	movs	r3, #0
 800b336:	4631      	mov	r1, r6
 800b338:	220a      	movs	r2, #10
 800b33a:	4620      	mov	r0, r4
 800b33c:	f000 fba7 	bl	800ba8e <__multadd>
 800b340:	9b02      	ldr	r3, [sp, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	4606      	mov	r6, r0
 800b346:	dc4f      	bgt.n	800b3e8 <_dtoa_r+0x948>
 800b348:	9b06      	ldr	r3, [sp, #24]
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	dd4c      	ble.n	800b3e8 <_dtoa_r+0x948>
 800b34e:	e011      	b.n	800b374 <_dtoa_r+0x8d4>
 800b350:	d0c9      	beq.n	800b2e6 <_dtoa_r+0x846>
 800b352:	9a05      	ldr	r2, [sp, #20]
 800b354:	331c      	adds	r3, #28
 800b356:	441a      	add	r2, r3
 800b358:	9205      	str	r2, [sp, #20]
 800b35a:	441d      	add	r5, r3
 800b35c:	4498      	add	r8, r3
 800b35e:	e7c2      	b.n	800b2e6 <_dtoa_r+0x846>
 800b360:	4603      	mov	r3, r0
 800b362:	e7f6      	b.n	800b352 <_dtoa_r+0x8b2>
 800b364:	f1b9 0f00 	cmp.w	r9, #0
 800b368:	dc38      	bgt.n	800b3dc <_dtoa_r+0x93c>
 800b36a:	9b06      	ldr	r3, [sp, #24]
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	dd35      	ble.n	800b3dc <_dtoa_r+0x93c>
 800b370:	f8cd 9008 	str.w	r9, [sp, #8]
 800b374:	9b02      	ldr	r3, [sp, #8]
 800b376:	b963      	cbnz	r3, 800b392 <_dtoa_r+0x8f2>
 800b378:	4639      	mov	r1, r7
 800b37a:	2205      	movs	r2, #5
 800b37c:	4620      	mov	r0, r4
 800b37e:	f000 fb86 	bl	800ba8e <__multadd>
 800b382:	4601      	mov	r1, r0
 800b384:	4607      	mov	r7, r0
 800b386:	9804      	ldr	r0, [sp, #16]
 800b388:	f000 fd4c 	bl	800be24 <__mcmp>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	f73f adcc 	bgt.w	800af2a <_dtoa_r+0x48a>
 800b392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b394:	465d      	mov	r5, fp
 800b396:	ea6f 0a03 	mvn.w	sl, r3
 800b39a:	f04f 0900 	mov.w	r9, #0
 800b39e:	4639      	mov	r1, r7
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f000 fb5d 	bl	800ba60 <_Bfree>
 800b3a6:	2e00      	cmp	r6, #0
 800b3a8:	f43f aeb7 	beq.w	800b11a <_dtoa_r+0x67a>
 800b3ac:	f1b9 0f00 	cmp.w	r9, #0
 800b3b0:	d005      	beq.n	800b3be <_dtoa_r+0x91e>
 800b3b2:	45b1      	cmp	r9, r6
 800b3b4:	d003      	beq.n	800b3be <_dtoa_r+0x91e>
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 fb51 	bl	800ba60 <_Bfree>
 800b3be:	4631      	mov	r1, r6
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fb4d 	bl	800ba60 <_Bfree>
 800b3c6:	e6a8      	b.n	800b11a <_dtoa_r+0x67a>
 800b3c8:	2700      	movs	r7, #0
 800b3ca:	463e      	mov	r6, r7
 800b3cc:	e7e1      	b.n	800b392 <_dtoa_r+0x8f2>
 800b3ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b3d2:	463e      	mov	r6, r7
 800b3d4:	e5a9      	b.n	800af2a <_dtoa_r+0x48a>
 800b3d6:	bf00      	nop
 800b3d8:	40240000 	.word	0x40240000
 800b3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3de:	f8cd 9008 	str.w	r9, [sp, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f000 80fa 	beq.w	800b5dc <_dtoa_r+0xb3c>
 800b3e8:	2d00      	cmp	r5, #0
 800b3ea:	dd05      	ble.n	800b3f8 <_dtoa_r+0x958>
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	462a      	mov	r2, r5
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f000 fcc3 	bl	800bd7c <__lshift>
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	9b07      	ldr	r3, [sp, #28]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d04c      	beq.n	800b498 <_dtoa_r+0x9f8>
 800b3fe:	6871      	ldr	r1, [r6, #4]
 800b400:	4620      	mov	r0, r4
 800b402:	f000 faf9 	bl	800b9f8 <_Balloc>
 800b406:	6932      	ldr	r2, [r6, #16]
 800b408:	3202      	adds	r2, #2
 800b40a:	4605      	mov	r5, r0
 800b40c:	0092      	lsls	r2, r2, #2
 800b40e:	f106 010c 	add.w	r1, r6, #12
 800b412:	300c      	adds	r0, #12
 800b414:	f7fe fc54 	bl	8009cc0 <memcpy>
 800b418:	2201      	movs	r2, #1
 800b41a:	4629      	mov	r1, r5
 800b41c:	4620      	mov	r0, r4
 800b41e:	f000 fcad 	bl	800bd7c <__lshift>
 800b422:	9b00      	ldr	r3, [sp, #0]
 800b424:	f8cd b014 	str.w	fp, [sp, #20]
 800b428:	f003 0301 	and.w	r3, r3, #1
 800b42c:	46b1      	mov	r9, r6
 800b42e:	9307      	str	r3, [sp, #28]
 800b430:	4606      	mov	r6, r0
 800b432:	4639      	mov	r1, r7
 800b434:	9804      	ldr	r0, [sp, #16]
 800b436:	f7ff faa5 	bl	800a984 <quorem>
 800b43a:	4649      	mov	r1, r9
 800b43c:	4605      	mov	r5, r0
 800b43e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b442:	9804      	ldr	r0, [sp, #16]
 800b444:	f000 fcee 	bl	800be24 <__mcmp>
 800b448:	4632      	mov	r2, r6
 800b44a:	9000      	str	r0, [sp, #0]
 800b44c:	4639      	mov	r1, r7
 800b44e:	4620      	mov	r0, r4
 800b450:	f000 fd02 	bl	800be58 <__mdiff>
 800b454:	68c3      	ldr	r3, [r0, #12]
 800b456:	4602      	mov	r2, r0
 800b458:	bb03      	cbnz	r3, 800b49c <_dtoa_r+0x9fc>
 800b45a:	4601      	mov	r1, r0
 800b45c:	9008      	str	r0, [sp, #32]
 800b45e:	9804      	ldr	r0, [sp, #16]
 800b460:	f000 fce0 	bl	800be24 <__mcmp>
 800b464:	9a08      	ldr	r2, [sp, #32]
 800b466:	4603      	mov	r3, r0
 800b468:	4611      	mov	r1, r2
 800b46a:	4620      	mov	r0, r4
 800b46c:	9308      	str	r3, [sp, #32]
 800b46e:	f000 faf7 	bl	800ba60 <_Bfree>
 800b472:	9b08      	ldr	r3, [sp, #32]
 800b474:	b9a3      	cbnz	r3, 800b4a0 <_dtoa_r+0xa00>
 800b476:	9a06      	ldr	r2, [sp, #24]
 800b478:	b992      	cbnz	r2, 800b4a0 <_dtoa_r+0xa00>
 800b47a:	9a07      	ldr	r2, [sp, #28]
 800b47c:	b982      	cbnz	r2, 800b4a0 <_dtoa_r+0xa00>
 800b47e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b482:	d029      	beq.n	800b4d8 <_dtoa_r+0xa38>
 800b484:	9b00      	ldr	r3, [sp, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	dd01      	ble.n	800b48e <_dtoa_r+0x9ee>
 800b48a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b48e:	9b05      	ldr	r3, [sp, #20]
 800b490:	1c5d      	adds	r5, r3, #1
 800b492:	f883 8000 	strb.w	r8, [r3]
 800b496:	e782      	b.n	800b39e <_dtoa_r+0x8fe>
 800b498:	4630      	mov	r0, r6
 800b49a:	e7c2      	b.n	800b422 <_dtoa_r+0x982>
 800b49c:	2301      	movs	r3, #1
 800b49e:	e7e3      	b.n	800b468 <_dtoa_r+0x9c8>
 800b4a0:	9a00      	ldr	r2, [sp, #0]
 800b4a2:	2a00      	cmp	r2, #0
 800b4a4:	db04      	blt.n	800b4b0 <_dtoa_r+0xa10>
 800b4a6:	d125      	bne.n	800b4f4 <_dtoa_r+0xa54>
 800b4a8:	9a06      	ldr	r2, [sp, #24]
 800b4aa:	bb1a      	cbnz	r2, 800b4f4 <_dtoa_r+0xa54>
 800b4ac:	9a07      	ldr	r2, [sp, #28]
 800b4ae:	bb0a      	cbnz	r2, 800b4f4 <_dtoa_r+0xa54>
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	ddec      	ble.n	800b48e <_dtoa_r+0x9ee>
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	9904      	ldr	r1, [sp, #16]
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f000 fc5f 	bl	800bd7c <__lshift>
 800b4be:	4639      	mov	r1, r7
 800b4c0:	9004      	str	r0, [sp, #16]
 800b4c2:	f000 fcaf 	bl	800be24 <__mcmp>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	dc03      	bgt.n	800b4d2 <_dtoa_r+0xa32>
 800b4ca:	d1e0      	bne.n	800b48e <_dtoa_r+0x9ee>
 800b4cc:	f018 0f01 	tst.w	r8, #1
 800b4d0:	d0dd      	beq.n	800b48e <_dtoa_r+0x9ee>
 800b4d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b4d6:	d1d8      	bne.n	800b48a <_dtoa_r+0x9ea>
 800b4d8:	9b05      	ldr	r3, [sp, #20]
 800b4da:	9a05      	ldr	r2, [sp, #20]
 800b4dc:	1c5d      	adds	r5, r3, #1
 800b4de:	2339      	movs	r3, #57	; 0x39
 800b4e0:	7013      	strb	r3, [r2, #0]
 800b4e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4e6:	2b39      	cmp	r3, #57	; 0x39
 800b4e8:	f105 32ff 	add.w	r2, r5, #4294967295
 800b4ec:	d04f      	beq.n	800b58e <_dtoa_r+0xaee>
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	7013      	strb	r3, [r2, #0]
 800b4f2:	e754      	b.n	800b39e <_dtoa_r+0x8fe>
 800b4f4:	9a05      	ldr	r2, [sp, #20]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f102 0501 	add.w	r5, r2, #1
 800b4fc:	dd06      	ble.n	800b50c <_dtoa_r+0xa6c>
 800b4fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b502:	d0e9      	beq.n	800b4d8 <_dtoa_r+0xa38>
 800b504:	f108 0801 	add.w	r8, r8, #1
 800b508:	9b05      	ldr	r3, [sp, #20]
 800b50a:	e7c2      	b.n	800b492 <_dtoa_r+0x9f2>
 800b50c:	9a02      	ldr	r2, [sp, #8]
 800b50e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b512:	eba5 030b 	sub.w	r3, r5, fp
 800b516:	4293      	cmp	r3, r2
 800b518:	d021      	beq.n	800b55e <_dtoa_r+0xabe>
 800b51a:	2300      	movs	r3, #0
 800b51c:	220a      	movs	r2, #10
 800b51e:	9904      	ldr	r1, [sp, #16]
 800b520:	4620      	mov	r0, r4
 800b522:	f000 fab4 	bl	800ba8e <__multadd>
 800b526:	45b1      	cmp	r9, r6
 800b528:	9004      	str	r0, [sp, #16]
 800b52a:	f04f 0300 	mov.w	r3, #0
 800b52e:	f04f 020a 	mov.w	r2, #10
 800b532:	4649      	mov	r1, r9
 800b534:	4620      	mov	r0, r4
 800b536:	d105      	bne.n	800b544 <_dtoa_r+0xaa4>
 800b538:	f000 faa9 	bl	800ba8e <__multadd>
 800b53c:	4681      	mov	r9, r0
 800b53e:	4606      	mov	r6, r0
 800b540:	9505      	str	r5, [sp, #20]
 800b542:	e776      	b.n	800b432 <_dtoa_r+0x992>
 800b544:	f000 faa3 	bl	800ba8e <__multadd>
 800b548:	4631      	mov	r1, r6
 800b54a:	4681      	mov	r9, r0
 800b54c:	2300      	movs	r3, #0
 800b54e:	220a      	movs	r2, #10
 800b550:	4620      	mov	r0, r4
 800b552:	f000 fa9c 	bl	800ba8e <__multadd>
 800b556:	4606      	mov	r6, r0
 800b558:	e7f2      	b.n	800b540 <_dtoa_r+0xaa0>
 800b55a:	f04f 0900 	mov.w	r9, #0
 800b55e:	2201      	movs	r2, #1
 800b560:	9904      	ldr	r1, [sp, #16]
 800b562:	4620      	mov	r0, r4
 800b564:	f000 fc0a 	bl	800bd7c <__lshift>
 800b568:	4639      	mov	r1, r7
 800b56a:	9004      	str	r0, [sp, #16]
 800b56c:	f000 fc5a 	bl	800be24 <__mcmp>
 800b570:	2800      	cmp	r0, #0
 800b572:	dcb6      	bgt.n	800b4e2 <_dtoa_r+0xa42>
 800b574:	d102      	bne.n	800b57c <_dtoa_r+0xadc>
 800b576:	f018 0f01 	tst.w	r8, #1
 800b57a:	d1b2      	bne.n	800b4e2 <_dtoa_r+0xa42>
 800b57c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b580:	2b30      	cmp	r3, #48	; 0x30
 800b582:	f105 32ff 	add.w	r2, r5, #4294967295
 800b586:	f47f af0a 	bne.w	800b39e <_dtoa_r+0x8fe>
 800b58a:	4615      	mov	r5, r2
 800b58c:	e7f6      	b.n	800b57c <_dtoa_r+0xadc>
 800b58e:	4593      	cmp	fp, r2
 800b590:	d105      	bne.n	800b59e <_dtoa_r+0xafe>
 800b592:	2331      	movs	r3, #49	; 0x31
 800b594:	f10a 0a01 	add.w	sl, sl, #1
 800b598:	f88b 3000 	strb.w	r3, [fp]
 800b59c:	e6ff      	b.n	800b39e <_dtoa_r+0x8fe>
 800b59e:	4615      	mov	r5, r2
 800b5a0:	e79f      	b.n	800b4e2 <_dtoa_r+0xa42>
 800b5a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b608 <_dtoa_r+0xb68>
 800b5a6:	e007      	b.n	800b5b8 <_dtoa_r+0xb18>
 800b5a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b60c <_dtoa_r+0xb6c>
 800b5ae:	b11b      	cbz	r3, 800b5b8 <_dtoa_r+0xb18>
 800b5b0:	f10b 0308 	add.w	r3, fp, #8
 800b5b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	4658      	mov	r0, fp
 800b5ba:	b017      	add	sp, #92	; 0x5c
 800b5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c0:	9b06      	ldr	r3, [sp, #24]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	f77f ae35 	ble.w	800b232 <_dtoa_r+0x792>
 800b5c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5ca:	9307      	str	r3, [sp, #28]
 800b5cc:	e649      	b.n	800b262 <_dtoa_r+0x7c2>
 800b5ce:	9b02      	ldr	r3, [sp, #8]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	dc03      	bgt.n	800b5dc <_dtoa_r+0xb3c>
 800b5d4:	9b06      	ldr	r3, [sp, #24]
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	f73f aecc 	bgt.w	800b374 <_dtoa_r+0x8d4>
 800b5dc:	465d      	mov	r5, fp
 800b5de:	4639      	mov	r1, r7
 800b5e0:	9804      	ldr	r0, [sp, #16]
 800b5e2:	f7ff f9cf 	bl	800a984 <quorem>
 800b5e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b5ea:	f805 8b01 	strb.w	r8, [r5], #1
 800b5ee:	9a02      	ldr	r2, [sp, #8]
 800b5f0:	eba5 030b 	sub.w	r3, r5, fp
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	ddb0      	ble.n	800b55a <_dtoa_r+0xaba>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	220a      	movs	r2, #10
 800b5fc:	9904      	ldr	r1, [sp, #16]
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 fa45 	bl	800ba8e <__multadd>
 800b604:	9004      	str	r0, [sp, #16]
 800b606:	e7ea      	b.n	800b5de <_dtoa_r+0xb3e>
 800b608:	0800c628 	.word	0x0800c628
 800b60c:	0800c64c 	.word	0x0800c64c

0800b610 <__sflush_r>:
 800b610:	898a      	ldrh	r2, [r1, #12]
 800b612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b616:	4605      	mov	r5, r0
 800b618:	0710      	lsls	r0, r2, #28
 800b61a:	460c      	mov	r4, r1
 800b61c:	d458      	bmi.n	800b6d0 <__sflush_r+0xc0>
 800b61e:	684b      	ldr	r3, [r1, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	dc05      	bgt.n	800b630 <__sflush_r+0x20>
 800b624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b626:	2b00      	cmp	r3, #0
 800b628:	dc02      	bgt.n	800b630 <__sflush_r+0x20>
 800b62a:	2000      	movs	r0, #0
 800b62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b632:	2e00      	cmp	r6, #0
 800b634:	d0f9      	beq.n	800b62a <__sflush_r+0x1a>
 800b636:	2300      	movs	r3, #0
 800b638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b63c:	682f      	ldr	r7, [r5, #0]
 800b63e:	6a21      	ldr	r1, [r4, #32]
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	d032      	beq.n	800b6aa <__sflush_r+0x9a>
 800b644:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	075a      	lsls	r2, r3, #29
 800b64a:	d505      	bpl.n	800b658 <__sflush_r+0x48>
 800b64c:	6863      	ldr	r3, [r4, #4]
 800b64e:	1ac0      	subs	r0, r0, r3
 800b650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b652:	b10b      	cbz	r3, 800b658 <__sflush_r+0x48>
 800b654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b656:	1ac0      	subs	r0, r0, r3
 800b658:	2300      	movs	r3, #0
 800b65a:	4602      	mov	r2, r0
 800b65c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b65e:	6a21      	ldr	r1, [r4, #32]
 800b660:	4628      	mov	r0, r5
 800b662:	47b0      	blx	r6
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	89a3      	ldrh	r3, [r4, #12]
 800b668:	d106      	bne.n	800b678 <__sflush_r+0x68>
 800b66a:	6829      	ldr	r1, [r5, #0]
 800b66c:	291d      	cmp	r1, #29
 800b66e:	d848      	bhi.n	800b702 <__sflush_r+0xf2>
 800b670:	4a29      	ldr	r2, [pc, #164]	; (800b718 <__sflush_r+0x108>)
 800b672:	40ca      	lsrs	r2, r1
 800b674:	07d6      	lsls	r6, r2, #31
 800b676:	d544      	bpl.n	800b702 <__sflush_r+0xf2>
 800b678:	2200      	movs	r2, #0
 800b67a:	6062      	str	r2, [r4, #4]
 800b67c:	04d9      	lsls	r1, r3, #19
 800b67e:	6922      	ldr	r2, [r4, #16]
 800b680:	6022      	str	r2, [r4, #0]
 800b682:	d504      	bpl.n	800b68e <__sflush_r+0x7e>
 800b684:	1c42      	adds	r2, r0, #1
 800b686:	d101      	bne.n	800b68c <__sflush_r+0x7c>
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	b903      	cbnz	r3, 800b68e <__sflush_r+0x7e>
 800b68c:	6560      	str	r0, [r4, #84]	; 0x54
 800b68e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b690:	602f      	str	r7, [r5, #0]
 800b692:	2900      	cmp	r1, #0
 800b694:	d0c9      	beq.n	800b62a <__sflush_r+0x1a>
 800b696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b69a:	4299      	cmp	r1, r3
 800b69c:	d002      	beq.n	800b6a4 <__sflush_r+0x94>
 800b69e:	4628      	mov	r0, r5
 800b6a0:	f000 fc94 	bl	800bfcc <_free_r>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	6360      	str	r0, [r4, #52]	; 0x34
 800b6a8:	e7c0      	b.n	800b62c <__sflush_r+0x1c>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	47b0      	blx	r6
 800b6b0:	1c41      	adds	r1, r0, #1
 800b6b2:	d1c8      	bne.n	800b646 <__sflush_r+0x36>
 800b6b4:	682b      	ldr	r3, [r5, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d0c5      	beq.n	800b646 <__sflush_r+0x36>
 800b6ba:	2b1d      	cmp	r3, #29
 800b6bc:	d001      	beq.n	800b6c2 <__sflush_r+0xb2>
 800b6be:	2b16      	cmp	r3, #22
 800b6c0:	d101      	bne.n	800b6c6 <__sflush_r+0xb6>
 800b6c2:	602f      	str	r7, [r5, #0]
 800b6c4:	e7b1      	b.n	800b62a <__sflush_r+0x1a>
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6cc:	81a3      	strh	r3, [r4, #12]
 800b6ce:	e7ad      	b.n	800b62c <__sflush_r+0x1c>
 800b6d0:	690f      	ldr	r7, [r1, #16]
 800b6d2:	2f00      	cmp	r7, #0
 800b6d4:	d0a9      	beq.n	800b62a <__sflush_r+0x1a>
 800b6d6:	0793      	lsls	r3, r2, #30
 800b6d8:	680e      	ldr	r6, [r1, #0]
 800b6da:	bf08      	it	eq
 800b6dc:	694b      	ldreq	r3, [r1, #20]
 800b6de:	600f      	str	r7, [r1, #0]
 800b6e0:	bf18      	it	ne
 800b6e2:	2300      	movne	r3, #0
 800b6e4:	eba6 0807 	sub.w	r8, r6, r7
 800b6e8:	608b      	str	r3, [r1, #8]
 800b6ea:	f1b8 0f00 	cmp.w	r8, #0
 800b6ee:	dd9c      	ble.n	800b62a <__sflush_r+0x1a>
 800b6f0:	4643      	mov	r3, r8
 800b6f2:	463a      	mov	r2, r7
 800b6f4:	6a21      	ldr	r1, [r4, #32]
 800b6f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	47b0      	blx	r6
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	dc06      	bgt.n	800b70e <__sflush_r+0xfe>
 800b700:	89a3      	ldrh	r3, [r4, #12]
 800b702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b706:	81a3      	strh	r3, [r4, #12]
 800b708:	f04f 30ff 	mov.w	r0, #4294967295
 800b70c:	e78e      	b.n	800b62c <__sflush_r+0x1c>
 800b70e:	4407      	add	r7, r0
 800b710:	eba8 0800 	sub.w	r8, r8, r0
 800b714:	e7e9      	b.n	800b6ea <__sflush_r+0xda>
 800b716:	bf00      	nop
 800b718:	20400001 	.word	0x20400001

0800b71c <_fflush_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	690b      	ldr	r3, [r1, #16]
 800b720:	4605      	mov	r5, r0
 800b722:	460c      	mov	r4, r1
 800b724:	b1db      	cbz	r3, 800b75e <_fflush_r+0x42>
 800b726:	b118      	cbz	r0, 800b730 <_fflush_r+0x14>
 800b728:	6983      	ldr	r3, [r0, #24]
 800b72a:	b90b      	cbnz	r3, 800b730 <_fflush_r+0x14>
 800b72c:	f000 f860 	bl	800b7f0 <__sinit>
 800b730:	4b0c      	ldr	r3, [pc, #48]	; (800b764 <_fflush_r+0x48>)
 800b732:	429c      	cmp	r4, r3
 800b734:	d109      	bne.n	800b74a <_fflush_r+0x2e>
 800b736:	686c      	ldr	r4, [r5, #4]
 800b738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b73c:	b17b      	cbz	r3, 800b75e <_fflush_r+0x42>
 800b73e:	4621      	mov	r1, r4
 800b740:	4628      	mov	r0, r5
 800b742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b746:	f7ff bf63 	b.w	800b610 <__sflush_r>
 800b74a:	4b07      	ldr	r3, [pc, #28]	; (800b768 <_fflush_r+0x4c>)
 800b74c:	429c      	cmp	r4, r3
 800b74e:	d101      	bne.n	800b754 <_fflush_r+0x38>
 800b750:	68ac      	ldr	r4, [r5, #8]
 800b752:	e7f1      	b.n	800b738 <_fflush_r+0x1c>
 800b754:	4b05      	ldr	r3, [pc, #20]	; (800b76c <_fflush_r+0x50>)
 800b756:	429c      	cmp	r4, r3
 800b758:	bf08      	it	eq
 800b75a:	68ec      	ldreq	r4, [r5, #12]
 800b75c:	e7ec      	b.n	800b738 <_fflush_r+0x1c>
 800b75e:	2000      	movs	r0, #0
 800b760:	bd38      	pop	{r3, r4, r5, pc}
 800b762:	bf00      	nop
 800b764:	0800c67c 	.word	0x0800c67c
 800b768:	0800c69c 	.word	0x0800c69c
 800b76c:	0800c65c 	.word	0x0800c65c

0800b770 <std>:
 800b770:	2300      	movs	r3, #0
 800b772:	b510      	push	{r4, lr}
 800b774:	4604      	mov	r4, r0
 800b776:	e9c0 3300 	strd	r3, r3, [r0]
 800b77a:	6083      	str	r3, [r0, #8]
 800b77c:	8181      	strh	r1, [r0, #12]
 800b77e:	6643      	str	r3, [r0, #100]	; 0x64
 800b780:	81c2      	strh	r2, [r0, #14]
 800b782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b786:	6183      	str	r3, [r0, #24]
 800b788:	4619      	mov	r1, r3
 800b78a:	2208      	movs	r2, #8
 800b78c:	305c      	adds	r0, #92	; 0x5c
 800b78e:	f7fe faa2 	bl	8009cd6 <memset>
 800b792:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <std+0x38>)
 800b794:	6263      	str	r3, [r4, #36]	; 0x24
 800b796:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <std+0x3c>)
 800b798:	62a3      	str	r3, [r4, #40]	; 0x28
 800b79a:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <std+0x40>)
 800b79c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b79e:	4b05      	ldr	r3, [pc, #20]	; (800b7b4 <std+0x44>)
 800b7a0:	6224      	str	r4, [r4, #32]
 800b7a2:	6323      	str	r3, [r4, #48]	; 0x30
 800b7a4:	bd10      	pop	{r4, pc}
 800b7a6:	bf00      	nop
 800b7a8:	0800c3bd 	.word	0x0800c3bd
 800b7ac:	0800c3df 	.word	0x0800c3df
 800b7b0:	0800c417 	.word	0x0800c417
 800b7b4:	0800c43b 	.word	0x0800c43b

0800b7b8 <_cleanup_r>:
 800b7b8:	4901      	ldr	r1, [pc, #4]	; (800b7c0 <_cleanup_r+0x8>)
 800b7ba:	f000 b885 	b.w	800b8c8 <_fwalk_reent>
 800b7be:	bf00      	nop
 800b7c0:	0800b71d 	.word	0x0800b71d

0800b7c4 <__sfmoreglue>:
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	1e4a      	subs	r2, r1, #1
 800b7c8:	2568      	movs	r5, #104	; 0x68
 800b7ca:	4355      	muls	r5, r2
 800b7cc:	460e      	mov	r6, r1
 800b7ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7d2:	f000 fc49 	bl	800c068 <_malloc_r>
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	b140      	cbz	r0, 800b7ec <__sfmoreglue+0x28>
 800b7da:	2100      	movs	r1, #0
 800b7dc:	e9c0 1600 	strd	r1, r6, [r0]
 800b7e0:	300c      	adds	r0, #12
 800b7e2:	60a0      	str	r0, [r4, #8]
 800b7e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7e8:	f7fe fa75 	bl	8009cd6 <memset>
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}

0800b7f0 <__sinit>:
 800b7f0:	6983      	ldr	r3, [r0, #24]
 800b7f2:	b510      	push	{r4, lr}
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	bb33      	cbnz	r3, 800b846 <__sinit+0x56>
 800b7f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b7fc:	6503      	str	r3, [r0, #80]	; 0x50
 800b7fe:	4b12      	ldr	r3, [pc, #72]	; (800b848 <__sinit+0x58>)
 800b800:	4a12      	ldr	r2, [pc, #72]	; (800b84c <__sinit+0x5c>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6282      	str	r2, [r0, #40]	; 0x28
 800b806:	4298      	cmp	r0, r3
 800b808:	bf04      	itt	eq
 800b80a:	2301      	moveq	r3, #1
 800b80c:	6183      	streq	r3, [r0, #24]
 800b80e:	f000 f81f 	bl	800b850 <__sfp>
 800b812:	6060      	str	r0, [r4, #4]
 800b814:	4620      	mov	r0, r4
 800b816:	f000 f81b 	bl	800b850 <__sfp>
 800b81a:	60a0      	str	r0, [r4, #8]
 800b81c:	4620      	mov	r0, r4
 800b81e:	f000 f817 	bl	800b850 <__sfp>
 800b822:	2200      	movs	r2, #0
 800b824:	60e0      	str	r0, [r4, #12]
 800b826:	2104      	movs	r1, #4
 800b828:	6860      	ldr	r0, [r4, #4]
 800b82a:	f7ff ffa1 	bl	800b770 <std>
 800b82e:	2201      	movs	r2, #1
 800b830:	2109      	movs	r1, #9
 800b832:	68a0      	ldr	r0, [r4, #8]
 800b834:	f7ff ff9c 	bl	800b770 <std>
 800b838:	2202      	movs	r2, #2
 800b83a:	2112      	movs	r1, #18
 800b83c:	68e0      	ldr	r0, [r4, #12]
 800b83e:	f7ff ff97 	bl	800b770 <std>
 800b842:	2301      	movs	r3, #1
 800b844:	61a3      	str	r3, [r4, #24]
 800b846:	bd10      	pop	{r4, pc}
 800b848:	0800c614 	.word	0x0800c614
 800b84c:	0800b7b9 	.word	0x0800b7b9

0800b850 <__sfp>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	4b1b      	ldr	r3, [pc, #108]	; (800b8c0 <__sfp+0x70>)
 800b854:	681e      	ldr	r6, [r3, #0]
 800b856:	69b3      	ldr	r3, [r6, #24]
 800b858:	4607      	mov	r7, r0
 800b85a:	b913      	cbnz	r3, 800b862 <__sfp+0x12>
 800b85c:	4630      	mov	r0, r6
 800b85e:	f7ff ffc7 	bl	800b7f0 <__sinit>
 800b862:	3648      	adds	r6, #72	; 0x48
 800b864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b868:	3b01      	subs	r3, #1
 800b86a:	d503      	bpl.n	800b874 <__sfp+0x24>
 800b86c:	6833      	ldr	r3, [r6, #0]
 800b86e:	b133      	cbz	r3, 800b87e <__sfp+0x2e>
 800b870:	6836      	ldr	r6, [r6, #0]
 800b872:	e7f7      	b.n	800b864 <__sfp+0x14>
 800b874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b878:	b16d      	cbz	r5, 800b896 <__sfp+0x46>
 800b87a:	3468      	adds	r4, #104	; 0x68
 800b87c:	e7f4      	b.n	800b868 <__sfp+0x18>
 800b87e:	2104      	movs	r1, #4
 800b880:	4638      	mov	r0, r7
 800b882:	f7ff ff9f 	bl	800b7c4 <__sfmoreglue>
 800b886:	6030      	str	r0, [r6, #0]
 800b888:	2800      	cmp	r0, #0
 800b88a:	d1f1      	bne.n	800b870 <__sfp+0x20>
 800b88c:	230c      	movs	r3, #12
 800b88e:	603b      	str	r3, [r7, #0]
 800b890:	4604      	mov	r4, r0
 800b892:	4620      	mov	r0, r4
 800b894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b896:	4b0b      	ldr	r3, [pc, #44]	; (800b8c4 <__sfp+0x74>)
 800b898:	6665      	str	r5, [r4, #100]	; 0x64
 800b89a:	e9c4 5500 	strd	r5, r5, [r4]
 800b89e:	60a5      	str	r5, [r4, #8]
 800b8a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b8a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b8a8:	2208      	movs	r2, #8
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8b0:	f7fe fa11 	bl	8009cd6 <memset>
 800b8b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8bc:	e7e9      	b.n	800b892 <__sfp+0x42>
 800b8be:	bf00      	nop
 800b8c0:	0800c614 	.word	0x0800c614
 800b8c4:	ffff0001 	.word	0xffff0001

0800b8c8 <_fwalk_reent>:
 800b8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8cc:	4680      	mov	r8, r0
 800b8ce:	4689      	mov	r9, r1
 800b8d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8d4:	2600      	movs	r6, #0
 800b8d6:	b914      	cbnz	r4, 800b8de <_fwalk_reent+0x16>
 800b8d8:	4630      	mov	r0, r6
 800b8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b8e2:	3f01      	subs	r7, #1
 800b8e4:	d501      	bpl.n	800b8ea <_fwalk_reent+0x22>
 800b8e6:	6824      	ldr	r4, [r4, #0]
 800b8e8:	e7f5      	b.n	800b8d6 <_fwalk_reent+0xe>
 800b8ea:	89ab      	ldrh	r3, [r5, #12]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d907      	bls.n	800b900 <_fwalk_reent+0x38>
 800b8f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	d003      	beq.n	800b900 <_fwalk_reent+0x38>
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	4640      	mov	r0, r8
 800b8fc:	47c8      	blx	r9
 800b8fe:	4306      	orrs	r6, r0
 800b900:	3568      	adds	r5, #104	; 0x68
 800b902:	e7ee      	b.n	800b8e2 <_fwalk_reent+0x1a>

0800b904 <_localeconv_r>:
 800b904:	4b04      	ldr	r3, [pc, #16]	; (800b918 <_localeconv_r+0x14>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6a18      	ldr	r0, [r3, #32]
 800b90a:	4b04      	ldr	r3, [pc, #16]	; (800b91c <_localeconv_r+0x18>)
 800b90c:	2800      	cmp	r0, #0
 800b90e:	bf08      	it	eq
 800b910:	4618      	moveq	r0, r3
 800b912:	30f0      	adds	r0, #240	; 0xf0
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	200002c8 	.word	0x200002c8
 800b91c:	2000032c 	.word	0x2000032c

0800b920 <__swhatbuf_r>:
 800b920:	b570      	push	{r4, r5, r6, lr}
 800b922:	460e      	mov	r6, r1
 800b924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b928:	2900      	cmp	r1, #0
 800b92a:	b096      	sub	sp, #88	; 0x58
 800b92c:	4614      	mov	r4, r2
 800b92e:	461d      	mov	r5, r3
 800b930:	da07      	bge.n	800b942 <__swhatbuf_r+0x22>
 800b932:	2300      	movs	r3, #0
 800b934:	602b      	str	r3, [r5, #0]
 800b936:	89b3      	ldrh	r3, [r6, #12]
 800b938:	061a      	lsls	r2, r3, #24
 800b93a:	d410      	bmi.n	800b95e <__swhatbuf_r+0x3e>
 800b93c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b940:	e00e      	b.n	800b960 <__swhatbuf_r+0x40>
 800b942:	466a      	mov	r2, sp
 800b944:	f000 fda0 	bl	800c488 <_fstat_r>
 800b948:	2800      	cmp	r0, #0
 800b94a:	dbf2      	blt.n	800b932 <__swhatbuf_r+0x12>
 800b94c:	9a01      	ldr	r2, [sp, #4]
 800b94e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b952:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b956:	425a      	negs	r2, r3
 800b958:	415a      	adcs	r2, r3
 800b95a:	602a      	str	r2, [r5, #0]
 800b95c:	e7ee      	b.n	800b93c <__swhatbuf_r+0x1c>
 800b95e:	2340      	movs	r3, #64	; 0x40
 800b960:	2000      	movs	r0, #0
 800b962:	6023      	str	r3, [r4, #0]
 800b964:	b016      	add	sp, #88	; 0x58
 800b966:	bd70      	pop	{r4, r5, r6, pc}

0800b968 <__smakebuf_r>:
 800b968:	898b      	ldrh	r3, [r1, #12]
 800b96a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b96c:	079d      	lsls	r5, r3, #30
 800b96e:	4606      	mov	r6, r0
 800b970:	460c      	mov	r4, r1
 800b972:	d507      	bpl.n	800b984 <__smakebuf_r+0x1c>
 800b974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	6123      	str	r3, [r4, #16]
 800b97c:	2301      	movs	r3, #1
 800b97e:	6163      	str	r3, [r4, #20]
 800b980:	b002      	add	sp, #8
 800b982:	bd70      	pop	{r4, r5, r6, pc}
 800b984:	ab01      	add	r3, sp, #4
 800b986:	466a      	mov	r2, sp
 800b988:	f7ff ffca 	bl	800b920 <__swhatbuf_r>
 800b98c:	9900      	ldr	r1, [sp, #0]
 800b98e:	4605      	mov	r5, r0
 800b990:	4630      	mov	r0, r6
 800b992:	f000 fb69 	bl	800c068 <_malloc_r>
 800b996:	b948      	cbnz	r0, 800b9ac <__smakebuf_r+0x44>
 800b998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b99c:	059a      	lsls	r2, r3, #22
 800b99e:	d4ef      	bmi.n	800b980 <__smakebuf_r+0x18>
 800b9a0:	f023 0303 	bic.w	r3, r3, #3
 800b9a4:	f043 0302 	orr.w	r3, r3, #2
 800b9a8:	81a3      	strh	r3, [r4, #12]
 800b9aa:	e7e3      	b.n	800b974 <__smakebuf_r+0xc>
 800b9ac:	4b0d      	ldr	r3, [pc, #52]	; (800b9e4 <__smakebuf_r+0x7c>)
 800b9ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9b0:	89a3      	ldrh	r3, [r4, #12]
 800b9b2:	6020      	str	r0, [r4, #0]
 800b9b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9b8:	81a3      	strh	r3, [r4, #12]
 800b9ba:	9b00      	ldr	r3, [sp, #0]
 800b9bc:	6163      	str	r3, [r4, #20]
 800b9be:	9b01      	ldr	r3, [sp, #4]
 800b9c0:	6120      	str	r0, [r4, #16]
 800b9c2:	b15b      	cbz	r3, 800b9dc <__smakebuf_r+0x74>
 800b9c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f000 fd6f 	bl	800c4ac <_isatty_r>
 800b9ce:	b128      	cbz	r0, 800b9dc <__smakebuf_r+0x74>
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	f023 0303 	bic.w	r3, r3, #3
 800b9d6:	f043 0301 	orr.w	r3, r3, #1
 800b9da:	81a3      	strh	r3, [r4, #12]
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	431d      	orrs	r5, r3
 800b9e0:	81a5      	strh	r5, [r4, #12]
 800b9e2:	e7cd      	b.n	800b980 <__smakebuf_r+0x18>
 800b9e4:	0800b7b9 	.word	0x0800b7b9

0800b9e8 <malloc>:
 800b9e8:	4b02      	ldr	r3, [pc, #8]	; (800b9f4 <malloc+0xc>)
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	6818      	ldr	r0, [r3, #0]
 800b9ee:	f000 bb3b 	b.w	800c068 <_malloc_r>
 800b9f2:	bf00      	nop
 800b9f4:	200002c8 	.word	0x200002c8

0800b9f8 <_Balloc>:
 800b9f8:	b570      	push	{r4, r5, r6, lr}
 800b9fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	460e      	mov	r6, r1
 800ba00:	b93d      	cbnz	r5, 800ba12 <_Balloc+0x1a>
 800ba02:	2010      	movs	r0, #16
 800ba04:	f7ff fff0 	bl	800b9e8 <malloc>
 800ba08:	6260      	str	r0, [r4, #36]	; 0x24
 800ba0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ba0e:	6005      	str	r5, [r0, #0]
 800ba10:	60c5      	str	r5, [r0, #12]
 800ba12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ba14:	68eb      	ldr	r3, [r5, #12]
 800ba16:	b183      	cbz	r3, 800ba3a <_Balloc+0x42>
 800ba18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ba20:	b9b8      	cbnz	r0, 800ba52 <_Balloc+0x5a>
 800ba22:	2101      	movs	r1, #1
 800ba24:	fa01 f506 	lsl.w	r5, r1, r6
 800ba28:	1d6a      	adds	r2, r5, #5
 800ba2a:	0092      	lsls	r2, r2, #2
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f000 fabf 	bl	800bfb0 <_calloc_r>
 800ba32:	b160      	cbz	r0, 800ba4e <_Balloc+0x56>
 800ba34:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ba38:	e00e      	b.n	800ba58 <_Balloc+0x60>
 800ba3a:	2221      	movs	r2, #33	; 0x21
 800ba3c:	2104      	movs	r1, #4
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 fab6 	bl	800bfb0 <_calloc_r>
 800ba44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba46:	60e8      	str	r0, [r5, #12]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1e4      	bne.n	800ba18 <_Balloc+0x20>
 800ba4e:	2000      	movs	r0, #0
 800ba50:	bd70      	pop	{r4, r5, r6, pc}
 800ba52:	6802      	ldr	r2, [r0, #0]
 800ba54:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba5e:	e7f7      	b.n	800ba50 <_Balloc+0x58>

0800ba60 <_Bfree>:
 800ba60:	b570      	push	{r4, r5, r6, lr}
 800ba62:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ba64:	4606      	mov	r6, r0
 800ba66:	460d      	mov	r5, r1
 800ba68:	b93c      	cbnz	r4, 800ba7a <_Bfree+0x1a>
 800ba6a:	2010      	movs	r0, #16
 800ba6c:	f7ff ffbc 	bl	800b9e8 <malloc>
 800ba70:	6270      	str	r0, [r6, #36]	; 0x24
 800ba72:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba76:	6004      	str	r4, [r0, #0]
 800ba78:	60c4      	str	r4, [r0, #12]
 800ba7a:	b13d      	cbz	r5, 800ba8c <_Bfree+0x2c>
 800ba7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ba7e:	686a      	ldr	r2, [r5, #4]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba86:	6029      	str	r1, [r5, #0]
 800ba88:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ba8c:	bd70      	pop	{r4, r5, r6, pc}

0800ba8e <__multadd>:
 800ba8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba92:	690d      	ldr	r5, [r1, #16]
 800ba94:	461f      	mov	r7, r3
 800ba96:	4606      	mov	r6, r0
 800ba98:	460c      	mov	r4, r1
 800ba9a:	f101 0c14 	add.w	ip, r1, #20
 800ba9e:	2300      	movs	r3, #0
 800baa0:	f8dc 0000 	ldr.w	r0, [ip]
 800baa4:	b281      	uxth	r1, r0
 800baa6:	fb02 7101 	mla	r1, r2, r1, r7
 800baaa:	0c0f      	lsrs	r7, r1, #16
 800baac:	0c00      	lsrs	r0, r0, #16
 800baae:	fb02 7000 	mla	r0, r2, r0, r7
 800bab2:	b289      	uxth	r1, r1
 800bab4:	3301      	adds	r3, #1
 800bab6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800baba:	429d      	cmp	r5, r3
 800babc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bac0:	f84c 1b04 	str.w	r1, [ip], #4
 800bac4:	dcec      	bgt.n	800baa0 <__multadd+0x12>
 800bac6:	b1d7      	cbz	r7, 800bafe <__multadd+0x70>
 800bac8:	68a3      	ldr	r3, [r4, #8]
 800baca:	42ab      	cmp	r3, r5
 800bacc:	dc12      	bgt.n	800baf4 <__multadd+0x66>
 800bace:	6861      	ldr	r1, [r4, #4]
 800bad0:	4630      	mov	r0, r6
 800bad2:	3101      	adds	r1, #1
 800bad4:	f7ff ff90 	bl	800b9f8 <_Balloc>
 800bad8:	6922      	ldr	r2, [r4, #16]
 800bada:	3202      	adds	r2, #2
 800badc:	f104 010c 	add.w	r1, r4, #12
 800bae0:	4680      	mov	r8, r0
 800bae2:	0092      	lsls	r2, r2, #2
 800bae4:	300c      	adds	r0, #12
 800bae6:	f7fe f8eb 	bl	8009cc0 <memcpy>
 800baea:	4621      	mov	r1, r4
 800baec:	4630      	mov	r0, r6
 800baee:	f7ff ffb7 	bl	800ba60 <_Bfree>
 800baf2:	4644      	mov	r4, r8
 800baf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800baf8:	3501      	adds	r5, #1
 800bafa:	615f      	str	r7, [r3, #20]
 800bafc:	6125      	str	r5, [r4, #16]
 800bafe:	4620      	mov	r0, r4
 800bb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bb04 <__hi0bits>:
 800bb04:	0c02      	lsrs	r2, r0, #16
 800bb06:	0412      	lsls	r2, r2, #16
 800bb08:	4603      	mov	r3, r0
 800bb0a:	b9b2      	cbnz	r2, 800bb3a <__hi0bits+0x36>
 800bb0c:	0403      	lsls	r3, r0, #16
 800bb0e:	2010      	movs	r0, #16
 800bb10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bb14:	bf04      	itt	eq
 800bb16:	021b      	lsleq	r3, r3, #8
 800bb18:	3008      	addeq	r0, #8
 800bb1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bb1e:	bf04      	itt	eq
 800bb20:	011b      	lsleq	r3, r3, #4
 800bb22:	3004      	addeq	r0, #4
 800bb24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bb28:	bf04      	itt	eq
 800bb2a:	009b      	lsleq	r3, r3, #2
 800bb2c:	3002      	addeq	r0, #2
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	db06      	blt.n	800bb40 <__hi0bits+0x3c>
 800bb32:	005b      	lsls	r3, r3, #1
 800bb34:	d503      	bpl.n	800bb3e <__hi0bits+0x3a>
 800bb36:	3001      	adds	r0, #1
 800bb38:	4770      	bx	lr
 800bb3a:	2000      	movs	r0, #0
 800bb3c:	e7e8      	b.n	800bb10 <__hi0bits+0xc>
 800bb3e:	2020      	movs	r0, #32
 800bb40:	4770      	bx	lr

0800bb42 <__lo0bits>:
 800bb42:	6803      	ldr	r3, [r0, #0]
 800bb44:	f013 0207 	ands.w	r2, r3, #7
 800bb48:	4601      	mov	r1, r0
 800bb4a:	d00b      	beq.n	800bb64 <__lo0bits+0x22>
 800bb4c:	07da      	lsls	r2, r3, #31
 800bb4e:	d423      	bmi.n	800bb98 <__lo0bits+0x56>
 800bb50:	0798      	lsls	r0, r3, #30
 800bb52:	bf49      	itett	mi
 800bb54:	085b      	lsrmi	r3, r3, #1
 800bb56:	089b      	lsrpl	r3, r3, #2
 800bb58:	2001      	movmi	r0, #1
 800bb5a:	600b      	strmi	r3, [r1, #0]
 800bb5c:	bf5c      	itt	pl
 800bb5e:	600b      	strpl	r3, [r1, #0]
 800bb60:	2002      	movpl	r0, #2
 800bb62:	4770      	bx	lr
 800bb64:	b298      	uxth	r0, r3
 800bb66:	b9a8      	cbnz	r0, 800bb94 <__lo0bits+0x52>
 800bb68:	0c1b      	lsrs	r3, r3, #16
 800bb6a:	2010      	movs	r0, #16
 800bb6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bb70:	bf04      	itt	eq
 800bb72:	0a1b      	lsreq	r3, r3, #8
 800bb74:	3008      	addeq	r0, #8
 800bb76:	071a      	lsls	r2, r3, #28
 800bb78:	bf04      	itt	eq
 800bb7a:	091b      	lsreq	r3, r3, #4
 800bb7c:	3004      	addeq	r0, #4
 800bb7e:	079a      	lsls	r2, r3, #30
 800bb80:	bf04      	itt	eq
 800bb82:	089b      	lsreq	r3, r3, #2
 800bb84:	3002      	addeq	r0, #2
 800bb86:	07da      	lsls	r2, r3, #31
 800bb88:	d402      	bmi.n	800bb90 <__lo0bits+0x4e>
 800bb8a:	085b      	lsrs	r3, r3, #1
 800bb8c:	d006      	beq.n	800bb9c <__lo0bits+0x5a>
 800bb8e:	3001      	adds	r0, #1
 800bb90:	600b      	str	r3, [r1, #0]
 800bb92:	4770      	bx	lr
 800bb94:	4610      	mov	r0, r2
 800bb96:	e7e9      	b.n	800bb6c <__lo0bits+0x2a>
 800bb98:	2000      	movs	r0, #0
 800bb9a:	4770      	bx	lr
 800bb9c:	2020      	movs	r0, #32
 800bb9e:	4770      	bx	lr

0800bba0 <__i2b>:
 800bba0:	b510      	push	{r4, lr}
 800bba2:	460c      	mov	r4, r1
 800bba4:	2101      	movs	r1, #1
 800bba6:	f7ff ff27 	bl	800b9f8 <_Balloc>
 800bbaa:	2201      	movs	r2, #1
 800bbac:	6144      	str	r4, [r0, #20]
 800bbae:	6102      	str	r2, [r0, #16]
 800bbb0:	bd10      	pop	{r4, pc}

0800bbb2 <__multiply>:
 800bbb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb6:	4614      	mov	r4, r2
 800bbb8:	690a      	ldr	r2, [r1, #16]
 800bbba:	6923      	ldr	r3, [r4, #16]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	bfb8      	it	lt
 800bbc0:	460b      	movlt	r3, r1
 800bbc2:	4688      	mov	r8, r1
 800bbc4:	bfbc      	itt	lt
 800bbc6:	46a0      	movlt	r8, r4
 800bbc8:	461c      	movlt	r4, r3
 800bbca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bbce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bbd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bbd6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bbda:	eb07 0609 	add.w	r6, r7, r9
 800bbde:	42b3      	cmp	r3, r6
 800bbe0:	bfb8      	it	lt
 800bbe2:	3101      	addlt	r1, #1
 800bbe4:	f7ff ff08 	bl	800b9f8 <_Balloc>
 800bbe8:	f100 0514 	add.w	r5, r0, #20
 800bbec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bbf0:	462b      	mov	r3, r5
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	4573      	cmp	r3, lr
 800bbf6:	d316      	bcc.n	800bc26 <__multiply+0x74>
 800bbf8:	f104 0214 	add.w	r2, r4, #20
 800bbfc:	f108 0114 	add.w	r1, r8, #20
 800bc00:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bc04:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	9b00      	ldr	r3, [sp, #0]
 800bc0c:	9201      	str	r2, [sp, #4]
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d80c      	bhi.n	800bc2c <__multiply+0x7a>
 800bc12:	2e00      	cmp	r6, #0
 800bc14:	dd03      	ble.n	800bc1e <__multiply+0x6c>
 800bc16:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d05d      	beq.n	800bcda <__multiply+0x128>
 800bc1e:	6106      	str	r6, [r0, #16]
 800bc20:	b003      	add	sp, #12
 800bc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc26:	f843 2b04 	str.w	r2, [r3], #4
 800bc2a:	e7e3      	b.n	800bbf4 <__multiply+0x42>
 800bc2c:	f8b2 b000 	ldrh.w	fp, [r2]
 800bc30:	f1bb 0f00 	cmp.w	fp, #0
 800bc34:	d023      	beq.n	800bc7e <__multiply+0xcc>
 800bc36:	4689      	mov	r9, r1
 800bc38:	46ac      	mov	ip, r5
 800bc3a:	f04f 0800 	mov.w	r8, #0
 800bc3e:	f859 4b04 	ldr.w	r4, [r9], #4
 800bc42:	f8dc a000 	ldr.w	sl, [ip]
 800bc46:	b2a3      	uxth	r3, r4
 800bc48:	fa1f fa8a 	uxth.w	sl, sl
 800bc4c:	fb0b a303 	mla	r3, fp, r3, sl
 800bc50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bc54:	f8dc 4000 	ldr.w	r4, [ip]
 800bc58:	4443      	add	r3, r8
 800bc5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bc5e:	fb0b 840a 	mla	r4, fp, sl, r8
 800bc62:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bc66:	46e2      	mov	sl, ip
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bc6e:	454f      	cmp	r7, r9
 800bc70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bc74:	f84a 3b04 	str.w	r3, [sl], #4
 800bc78:	d82b      	bhi.n	800bcd2 <__multiply+0x120>
 800bc7a:	f8cc 8004 	str.w	r8, [ip, #4]
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bc84:	3204      	adds	r2, #4
 800bc86:	f1ba 0f00 	cmp.w	sl, #0
 800bc8a:	d020      	beq.n	800bcce <__multiply+0x11c>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	4689      	mov	r9, r1
 800bc90:	46a8      	mov	r8, r5
 800bc92:	f04f 0b00 	mov.w	fp, #0
 800bc96:	f8b9 c000 	ldrh.w	ip, [r9]
 800bc9a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bc9e:	fb0a 440c 	mla	r4, sl, ip, r4
 800bca2:	445c      	add	r4, fp
 800bca4:	46c4      	mov	ip, r8
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bcac:	f84c 3b04 	str.w	r3, [ip], #4
 800bcb0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bcb4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bcb8:	0c1b      	lsrs	r3, r3, #16
 800bcba:	fb0a b303 	mla	r3, sl, r3, fp
 800bcbe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bcc2:	454f      	cmp	r7, r9
 800bcc4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bcc8:	d805      	bhi.n	800bcd6 <__multiply+0x124>
 800bcca:	f8c8 3004 	str.w	r3, [r8, #4]
 800bcce:	3504      	adds	r5, #4
 800bcd0:	e79b      	b.n	800bc0a <__multiply+0x58>
 800bcd2:	46d4      	mov	ip, sl
 800bcd4:	e7b3      	b.n	800bc3e <__multiply+0x8c>
 800bcd6:	46e0      	mov	r8, ip
 800bcd8:	e7dd      	b.n	800bc96 <__multiply+0xe4>
 800bcda:	3e01      	subs	r6, #1
 800bcdc:	e799      	b.n	800bc12 <__multiply+0x60>
	...

0800bce0 <__pow5mult>:
 800bce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce4:	4615      	mov	r5, r2
 800bce6:	f012 0203 	ands.w	r2, r2, #3
 800bcea:	4606      	mov	r6, r0
 800bcec:	460f      	mov	r7, r1
 800bcee:	d007      	beq.n	800bd00 <__pow5mult+0x20>
 800bcf0:	3a01      	subs	r2, #1
 800bcf2:	4c21      	ldr	r4, [pc, #132]	; (800bd78 <__pow5mult+0x98>)
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcfa:	f7ff fec8 	bl	800ba8e <__multadd>
 800bcfe:	4607      	mov	r7, r0
 800bd00:	10ad      	asrs	r5, r5, #2
 800bd02:	d035      	beq.n	800bd70 <__pow5mult+0x90>
 800bd04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd06:	b93c      	cbnz	r4, 800bd18 <__pow5mult+0x38>
 800bd08:	2010      	movs	r0, #16
 800bd0a:	f7ff fe6d 	bl	800b9e8 <malloc>
 800bd0e:	6270      	str	r0, [r6, #36]	; 0x24
 800bd10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd14:	6004      	str	r4, [r0, #0]
 800bd16:	60c4      	str	r4, [r0, #12]
 800bd18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd20:	b94c      	cbnz	r4, 800bd36 <__pow5mult+0x56>
 800bd22:	f240 2171 	movw	r1, #625	; 0x271
 800bd26:	4630      	mov	r0, r6
 800bd28:	f7ff ff3a 	bl	800bba0 <__i2b>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd32:	4604      	mov	r4, r0
 800bd34:	6003      	str	r3, [r0, #0]
 800bd36:	f04f 0800 	mov.w	r8, #0
 800bd3a:	07eb      	lsls	r3, r5, #31
 800bd3c:	d50a      	bpl.n	800bd54 <__pow5mult+0x74>
 800bd3e:	4639      	mov	r1, r7
 800bd40:	4622      	mov	r2, r4
 800bd42:	4630      	mov	r0, r6
 800bd44:	f7ff ff35 	bl	800bbb2 <__multiply>
 800bd48:	4639      	mov	r1, r7
 800bd4a:	4681      	mov	r9, r0
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f7ff fe87 	bl	800ba60 <_Bfree>
 800bd52:	464f      	mov	r7, r9
 800bd54:	106d      	asrs	r5, r5, #1
 800bd56:	d00b      	beq.n	800bd70 <__pow5mult+0x90>
 800bd58:	6820      	ldr	r0, [r4, #0]
 800bd5a:	b938      	cbnz	r0, 800bd6c <__pow5mult+0x8c>
 800bd5c:	4622      	mov	r2, r4
 800bd5e:	4621      	mov	r1, r4
 800bd60:	4630      	mov	r0, r6
 800bd62:	f7ff ff26 	bl	800bbb2 <__multiply>
 800bd66:	6020      	str	r0, [r4, #0]
 800bd68:	f8c0 8000 	str.w	r8, [r0]
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	e7e4      	b.n	800bd3a <__pow5mult+0x5a>
 800bd70:	4638      	mov	r0, r7
 800bd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd76:	bf00      	nop
 800bd78:	0800c7b0 	.word	0x0800c7b0

0800bd7c <__lshift>:
 800bd7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd80:	460c      	mov	r4, r1
 800bd82:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd86:	6923      	ldr	r3, [r4, #16]
 800bd88:	6849      	ldr	r1, [r1, #4]
 800bd8a:	eb0a 0903 	add.w	r9, sl, r3
 800bd8e:	68a3      	ldr	r3, [r4, #8]
 800bd90:	4607      	mov	r7, r0
 800bd92:	4616      	mov	r6, r2
 800bd94:	f109 0501 	add.w	r5, r9, #1
 800bd98:	42ab      	cmp	r3, r5
 800bd9a:	db32      	blt.n	800be02 <__lshift+0x86>
 800bd9c:	4638      	mov	r0, r7
 800bd9e:	f7ff fe2b 	bl	800b9f8 <_Balloc>
 800bda2:	2300      	movs	r3, #0
 800bda4:	4680      	mov	r8, r0
 800bda6:	f100 0114 	add.w	r1, r0, #20
 800bdaa:	461a      	mov	r2, r3
 800bdac:	4553      	cmp	r3, sl
 800bdae:	db2b      	blt.n	800be08 <__lshift+0x8c>
 800bdb0:	6920      	ldr	r0, [r4, #16]
 800bdb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdb6:	f104 0314 	add.w	r3, r4, #20
 800bdba:	f016 021f 	ands.w	r2, r6, #31
 800bdbe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdc2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bdc6:	d025      	beq.n	800be14 <__lshift+0x98>
 800bdc8:	f1c2 0e20 	rsb	lr, r2, #32
 800bdcc:	2000      	movs	r0, #0
 800bdce:	681e      	ldr	r6, [r3, #0]
 800bdd0:	468a      	mov	sl, r1
 800bdd2:	4096      	lsls	r6, r2
 800bdd4:	4330      	orrs	r0, r6
 800bdd6:	f84a 0b04 	str.w	r0, [sl], #4
 800bdda:	f853 0b04 	ldr.w	r0, [r3], #4
 800bdde:	459c      	cmp	ip, r3
 800bde0:	fa20 f00e 	lsr.w	r0, r0, lr
 800bde4:	d814      	bhi.n	800be10 <__lshift+0x94>
 800bde6:	6048      	str	r0, [r1, #4]
 800bde8:	b108      	cbz	r0, 800bdee <__lshift+0x72>
 800bdea:	f109 0502 	add.w	r5, r9, #2
 800bdee:	3d01      	subs	r5, #1
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	f8c8 5010 	str.w	r5, [r8, #16]
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	f7ff fe32 	bl	800ba60 <_Bfree>
 800bdfc:	4640      	mov	r0, r8
 800bdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be02:	3101      	adds	r1, #1
 800be04:	005b      	lsls	r3, r3, #1
 800be06:	e7c7      	b.n	800bd98 <__lshift+0x1c>
 800be08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800be0c:	3301      	adds	r3, #1
 800be0e:	e7cd      	b.n	800bdac <__lshift+0x30>
 800be10:	4651      	mov	r1, sl
 800be12:	e7dc      	b.n	800bdce <__lshift+0x52>
 800be14:	3904      	subs	r1, #4
 800be16:	f853 2b04 	ldr.w	r2, [r3], #4
 800be1a:	f841 2f04 	str.w	r2, [r1, #4]!
 800be1e:	459c      	cmp	ip, r3
 800be20:	d8f9      	bhi.n	800be16 <__lshift+0x9a>
 800be22:	e7e4      	b.n	800bdee <__lshift+0x72>

0800be24 <__mcmp>:
 800be24:	6903      	ldr	r3, [r0, #16]
 800be26:	690a      	ldr	r2, [r1, #16]
 800be28:	1a9b      	subs	r3, r3, r2
 800be2a:	b530      	push	{r4, r5, lr}
 800be2c:	d10c      	bne.n	800be48 <__mcmp+0x24>
 800be2e:	0092      	lsls	r2, r2, #2
 800be30:	3014      	adds	r0, #20
 800be32:	3114      	adds	r1, #20
 800be34:	1884      	adds	r4, r0, r2
 800be36:	4411      	add	r1, r2
 800be38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be40:	4295      	cmp	r5, r2
 800be42:	d003      	beq.n	800be4c <__mcmp+0x28>
 800be44:	d305      	bcc.n	800be52 <__mcmp+0x2e>
 800be46:	2301      	movs	r3, #1
 800be48:	4618      	mov	r0, r3
 800be4a:	bd30      	pop	{r4, r5, pc}
 800be4c:	42a0      	cmp	r0, r4
 800be4e:	d3f3      	bcc.n	800be38 <__mcmp+0x14>
 800be50:	e7fa      	b.n	800be48 <__mcmp+0x24>
 800be52:	f04f 33ff 	mov.w	r3, #4294967295
 800be56:	e7f7      	b.n	800be48 <__mcmp+0x24>

0800be58 <__mdiff>:
 800be58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be5c:	460d      	mov	r5, r1
 800be5e:	4607      	mov	r7, r0
 800be60:	4611      	mov	r1, r2
 800be62:	4628      	mov	r0, r5
 800be64:	4614      	mov	r4, r2
 800be66:	f7ff ffdd 	bl	800be24 <__mcmp>
 800be6a:	1e06      	subs	r6, r0, #0
 800be6c:	d108      	bne.n	800be80 <__mdiff+0x28>
 800be6e:	4631      	mov	r1, r6
 800be70:	4638      	mov	r0, r7
 800be72:	f7ff fdc1 	bl	800b9f8 <_Balloc>
 800be76:	2301      	movs	r3, #1
 800be78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800be7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be80:	bfa4      	itt	ge
 800be82:	4623      	movge	r3, r4
 800be84:	462c      	movge	r4, r5
 800be86:	4638      	mov	r0, r7
 800be88:	6861      	ldr	r1, [r4, #4]
 800be8a:	bfa6      	itte	ge
 800be8c:	461d      	movge	r5, r3
 800be8e:	2600      	movge	r6, #0
 800be90:	2601      	movlt	r6, #1
 800be92:	f7ff fdb1 	bl	800b9f8 <_Balloc>
 800be96:	692b      	ldr	r3, [r5, #16]
 800be98:	60c6      	str	r6, [r0, #12]
 800be9a:	6926      	ldr	r6, [r4, #16]
 800be9c:	f105 0914 	add.w	r9, r5, #20
 800bea0:	f104 0214 	add.w	r2, r4, #20
 800bea4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bea8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800beac:	f100 0514 	add.w	r5, r0, #20
 800beb0:	f04f 0e00 	mov.w	lr, #0
 800beb4:	f852 ab04 	ldr.w	sl, [r2], #4
 800beb8:	f859 4b04 	ldr.w	r4, [r9], #4
 800bebc:	fa1e f18a 	uxtah	r1, lr, sl
 800bec0:	b2a3      	uxth	r3, r4
 800bec2:	1ac9      	subs	r1, r1, r3
 800bec4:	0c23      	lsrs	r3, r4, #16
 800bec6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800beca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bece:	b289      	uxth	r1, r1
 800bed0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bed4:	45c8      	cmp	r8, r9
 800bed6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800beda:	4694      	mov	ip, r2
 800bedc:	f845 3b04 	str.w	r3, [r5], #4
 800bee0:	d8e8      	bhi.n	800beb4 <__mdiff+0x5c>
 800bee2:	45bc      	cmp	ip, r7
 800bee4:	d304      	bcc.n	800bef0 <__mdiff+0x98>
 800bee6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800beea:	b183      	cbz	r3, 800bf0e <__mdiff+0xb6>
 800beec:	6106      	str	r6, [r0, #16]
 800beee:	e7c5      	b.n	800be7c <__mdiff+0x24>
 800bef0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bef4:	fa1e f381 	uxtah	r3, lr, r1
 800bef8:	141a      	asrs	r2, r3, #16
 800befa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800befe:	b29b      	uxth	r3, r3
 800bf00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf04:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800bf08:	f845 3b04 	str.w	r3, [r5], #4
 800bf0c:	e7e9      	b.n	800bee2 <__mdiff+0x8a>
 800bf0e:	3e01      	subs	r6, #1
 800bf10:	e7e9      	b.n	800bee6 <__mdiff+0x8e>

0800bf12 <__d2b>:
 800bf12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf16:	460e      	mov	r6, r1
 800bf18:	2101      	movs	r1, #1
 800bf1a:	ec59 8b10 	vmov	r8, r9, d0
 800bf1e:	4615      	mov	r5, r2
 800bf20:	f7ff fd6a 	bl	800b9f8 <_Balloc>
 800bf24:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bf28:	4607      	mov	r7, r0
 800bf2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf2e:	bb34      	cbnz	r4, 800bf7e <__d2b+0x6c>
 800bf30:	9301      	str	r3, [sp, #4]
 800bf32:	f1b8 0300 	subs.w	r3, r8, #0
 800bf36:	d027      	beq.n	800bf88 <__d2b+0x76>
 800bf38:	a802      	add	r0, sp, #8
 800bf3a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bf3e:	f7ff fe00 	bl	800bb42 <__lo0bits>
 800bf42:	9900      	ldr	r1, [sp, #0]
 800bf44:	b1f0      	cbz	r0, 800bf84 <__d2b+0x72>
 800bf46:	9a01      	ldr	r2, [sp, #4]
 800bf48:	f1c0 0320 	rsb	r3, r0, #32
 800bf4c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf50:	430b      	orrs	r3, r1
 800bf52:	40c2      	lsrs	r2, r0
 800bf54:	617b      	str	r3, [r7, #20]
 800bf56:	9201      	str	r2, [sp, #4]
 800bf58:	9b01      	ldr	r3, [sp, #4]
 800bf5a:	61bb      	str	r3, [r7, #24]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	bf14      	ite	ne
 800bf60:	2102      	movne	r1, #2
 800bf62:	2101      	moveq	r1, #1
 800bf64:	6139      	str	r1, [r7, #16]
 800bf66:	b1c4      	cbz	r4, 800bf9a <__d2b+0x88>
 800bf68:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bf6c:	4404      	add	r4, r0
 800bf6e:	6034      	str	r4, [r6, #0]
 800bf70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf74:	6028      	str	r0, [r5, #0]
 800bf76:	4638      	mov	r0, r7
 800bf78:	b003      	add	sp, #12
 800bf7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf82:	e7d5      	b.n	800bf30 <__d2b+0x1e>
 800bf84:	6179      	str	r1, [r7, #20]
 800bf86:	e7e7      	b.n	800bf58 <__d2b+0x46>
 800bf88:	a801      	add	r0, sp, #4
 800bf8a:	f7ff fdda 	bl	800bb42 <__lo0bits>
 800bf8e:	9b01      	ldr	r3, [sp, #4]
 800bf90:	617b      	str	r3, [r7, #20]
 800bf92:	2101      	movs	r1, #1
 800bf94:	6139      	str	r1, [r7, #16]
 800bf96:	3020      	adds	r0, #32
 800bf98:	e7e5      	b.n	800bf66 <__d2b+0x54>
 800bf9a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bf9e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bfa2:	6030      	str	r0, [r6, #0]
 800bfa4:	6918      	ldr	r0, [r3, #16]
 800bfa6:	f7ff fdad 	bl	800bb04 <__hi0bits>
 800bfaa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bfae:	e7e1      	b.n	800bf74 <__d2b+0x62>

0800bfb0 <_calloc_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	fb02 f401 	mul.w	r4, r2, r1
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	f000 f856 	bl	800c068 <_malloc_r>
 800bfbc:	4605      	mov	r5, r0
 800bfbe:	b118      	cbz	r0, 800bfc8 <_calloc_r+0x18>
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	f7fd fe87 	bl	8009cd6 <memset>
 800bfc8:	4628      	mov	r0, r5
 800bfca:	bd38      	pop	{r3, r4, r5, pc}

0800bfcc <_free_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4605      	mov	r5, r0
 800bfd0:	2900      	cmp	r1, #0
 800bfd2:	d045      	beq.n	800c060 <_free_r+0x94>
 800bfd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfd8:	1f0c      	subs	r4, r1, #4
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	bfb8      	it	lt
 800bfde:	18e4      	addlt	r4, r4, r3
 800bfe0:	f000 fa98 	bl	800c514 <__malloc_lock>
 800bfe4:	4a1f      	ldr	r2, [pc, #124]	; (800c064 <_free_r+0x98>)
 800bfe6:	6813      	ldr	r3, [r2, #0]
 800bfe8:	4610      	mov	r0, r2
 800bfea:	b933      	cbnz	r3, 800bffa <_free_r+0x2e>
 800bfec:	6063      	str	r3, [r4, #4]
 800bfee:	6014      	str	r4, [r2, #0]
 800bff0:	4628      	mov	r0, r5
 800bff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bff6:	f000 ba8e 	b.w	800c516 <__malloc_unlock>
 800bffa:	42a3      	cmp	r3, r4
 800bffc:	d90c      	bls.n	800c018 <_free_r+0x4c>
 800bffe:	6821      	ldr	r1, [r4, #0]
 800c000:	1862      	adds	r2, r4, r1
 800c002:	4293      	cmp	r3, r2
 800c004:	bf04      	itt	eq
 800c006:	681a      	ldreq	r2, [r3, #0]
 800c008:	685b      	ldreq	r3, [r3, #4]
 800c00a:	6063      	str	r3, [r4, #4]
 800c00c:	bf04      	itt	eq
 800c00e:	1852      	addeq	r2, r2, r1
 800c010:	6022      	streq	r2, [r4, #0]
 800c012:	6004      	str	r4, [r0, #0]
 800c014:	e7ec      	b.n	800bff0 <_free_r+0x24>
 800c016:	4613      	mov	r3, r2
 800c018:	685a      	ldr	r2, [r3, #4]
 800c01a:	b10a      	cbz	r2, 800c020 <_free_r+0x54>
 800c01c:	42a2      	cmp	r2, r4
 800c01e:	d9fa      	bls.n	800c016 <_free_r+0x4a>
 800c020:	6819      	ldr	r1, [r3, #0]
 800c022:	1858      	adds	r0, r3, r1
 800c024:	42a0      	cmp	r0, r4
 800c026:	d10b      	bne.n	800c040 <_free_r+0x74>
 800c028:	6820      	ldr	r0, [r4, #0]
 800c02a:	4401      	add	r1, r0
 800c02c:	1858      	adds	r0, r3, r1
 800c02e:	4282      	cmp	r2, r0
 800c030:	6019      	str	r1, [r3, #0]
 800c032:	d1dd      	bne.n	800bff0 <_free_r+0x24>
 800c034:	6810      	ldr	r0, [r2, #0]
 800c036:	6852      	ldr	r2, [r2, #4]
 800c038:	605a      	str	r2, [r3, #4]
 800c03a:	4401      	add	r1, r0
 800c03c:	6019      	str	r1, [r3, #0]
 800c03e:	e7d7      	b.n	800bff0 <_free_r+0x24>
 800c040:	d902      	bls.n	800c048 <_free_r+0x7c>
 800c042:	230c      	movs	r3, #12
 800c044:	602b      	str	r3, [r5, #0]
 800c046:	e7d3      	b.n	800bff0 <_free_r+0x24>
 800c048:	6820      	ldr	r0, [r4, #0]
 800c04a:	1821      	adds	r1, r4, r0
 800c04c:	428a      	cmp	r2, r1
 800c04e:	bf04      	itt	eq
 800c050:	6811      	ldreq	r1, [r2, #0]
 800c052:	6852      	ldreq	r2, [r2, #4]
 800c054:	6062      	str	r2, [r4, #4]
 800c056:	bf04      	itt	eq
 800c058:	1809      	addeq	r1, r1, r0
 800c05a:	6021      	streq	r1, [r4, #0]
 800c05c:	605c      	str	r4, [r3, #4]
 800c05e:	e7c7      	b.n	800bff0 <_free_r+0x24>
 800c060:	bd38      	pop	{r3, r4, r5, pc}
 800c062:	bf00      	nop
 800c064:	200004b8 	.word	0x200004b8

0800c068 <_malloc_r>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	1ccd      	adds	r5, r1, #3
 800c06c:	f025 0503 	bic.w	r5, r5, #3
 800c070:	3508      	adds	r5, #8
 800c072:	2d0c      	cmp	r5, #12
 800c074:	bf38      	it	cc
 800c076:	250c      	movcc	r5, #12
 800c078:	2d00      	cmp	r5, #0
 800c07a:	4606      	mov	r6, r0
 800c07c:	db01      	blt.n	800c082 <_malloc_r+0x1a>
 800c07e:	42a9      	cmp	r1, r5
 800c080:	d903      	bls.n	800c08a <_malloc_r+0x22>
 800c082:	230c      	movs	r3, #12
 800c084:	6033      	str	r3, [r6, #0]
 800c086:	2000      	movs	r0, #0
 800c088:	bd70      	pop	{r4, r5, r6, pc}
 800c08a:	f000 fa43 	bl	800c514 <__malloc_lock>
 800c08e:	4a21      	ldr	r2, [pc, #132]	; (800c114 <_malloc_r+0xac>)
 800c090:	6814      	ldr	r4, [r2, #0]
 800c092:	4621      	mov	r1, r4
 800c094:	b991      	cbnz	r1, 800c0bc <_malloc_r+0x54>
 800c096:	4c20      	ldr	r4, [pc, #128]	; (800c118 <_malloc_r+0xb0>)
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	b91b      	cbnz	r3, 800c0a4 <_malloc_r+0x3c>
 800c09c:	4630      	mov	r0, r6
 800c09e:	f000 f97d 	bl	800c39c <_sbrk_r>
 800c0a2:	6020      	str	r0, [r4, #0]
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f000 f978 	bl	800c39c <_sbrk_r>
 800c0ac:	1c43      	adds	r3, r0, #1
 800c0ae:	d124      	bne.n	800c0fa <_malloc_r+0x92>
 800c0b0:	230c      	movs	r3, #12
 800c0b2:	6033      	str	r3, [r6, #0]
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	f000 fa2e 	bl	800c516 <__malloc_unlock>
 800c0ba:	e7e4      	b.n	800c086 <_malloc_r+0x1e>
 800c0bc:	680b      	ldr	r3, [r1, #0]
 800c0be:	1b5b      	subs	r3, r3, r5
 800c0c0:	d418      	bmi.n	800c0f4 <_malloc_r+0x8c>
 800c0c2:	2b0b      	cmp	r3, #11
 800c0c4:	d90f      	bls.n	800c0e6 <_malloc_r+0x7e>
 800c0c6:	600b      	str	r3, [r1, #0]
 800c0c8:	50cd      	str	r5, [r1, r3]
 800c0ca:	18cc      	adds	r4, r1, r3
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	f000 fa22 	bl	800c516 <__malloc_unlock>
 800c0d2:	f104 000b 	add.w	r0, r4, #11
 800c0d6:	1d23      	adds	r3, r4, #4
 800c0d8:	f020 0007 	bic.w	r0, r0, #7
 800c0dc:	1ac3      	subs	r3, r0, r3
 800c0de:	d0d3      	beq.n	800c088 <_malloc_r+0x20>
 800c0e0:	425a      	negs	r2, r3
 800c0e2:	50e2      	str	r2, [r4, r3]
 800c0e4:	e7d0      	b.n	800c088 <_malloc_r+0x20>
 800c0e6:	428c      	cmp	r4, r1
 800c0e8:	684b      	ldr	r3, [r1, #4]
 800c0ea:	bf16      	itet	ne
 800c0ec:	6063      	strne	r3, [r4, #4]
 800c0ee:	6013      	streq	r3, [r2, #0]
 800c0f0:	460c      	movne	r4, r1
 800c0f2:	e7eb      	b.n	800c0cc <_malloc_r+0x64>
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	6849      	ldr	r1, [r1, #4]
 800c0f8:	e7cc      	b.n	800c094 <_malloc_r+0x2c>
 800c0fa:	1cc4      	adds	r4, r0, #3
 800c0fc:	f024 0403 	bic.w	r4, r4, #3
 800c100:	42a0      	cmp	r0, r4
 800c102:	d005      	beq.n	800c110 <_malloc_r+0xa8>
 800c104:	1a21      	subs	r1, r4, r0
 800c106:	4630      	mov	r0, r6
 800c108:	f000 f948 	bl	800c39c <_sbrk_r>
 800c10c:	3001      	adds	r0, #1
 800c10e:	d0cf      	beq.n	800c0b0 <_malloc_r+0x48>
 800c110:	6025      	str	r5, [r4, #0]
 800c112:	e7db      	b.n	800c0cc <_malloc_r+0x64>
 800c114:	200004b8 	.word	0x200004b8
 800c118:	200004bc 	.word	0x200004bc

0800c11c <__sfputc_r>:
 800c11c:	6893      	ldr	r3, [r2, #8]
 800c11e:	3b01      	subs	r3, #1
 800c120:	2b00      	cmp	r3, #0
 800c122:	b410      	push	{r4}
 800c124:	6093      	str	r3, [r2, #8]
 800c126:	da08      	bge.n	800c13a <__sfputc_r+0x1e>
 800c128:	6994      	ldr	r4, [r2, #24]
 800c12a:	42a3      	cmp	r3, r4
 800c12c:	db01      	blt.n	800c132 <__sfputc_r+0x16>
 800c12e:	290a      	cmp	r1, #10
 800c130:	d103      	bne.n	800c13a <__sfputc_r+0x1e>
 800c132:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c136:	f7fe bb65 	b.w	800a804 <__swbuf_r>
 800c13a:	6813      	ldr	r3, [r2, #0]
 800c13c:	1c58      	adds	r0, r3, #1
 800c13e:	6010      	str	r0, [r2, #0]
 800c140:	7019      	strb	r1, [r3, #0]
 800c142:	4608      	mov	r0, r1
 800c144:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <__sfputs_r>:
 800c14a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14c:	4606      	mov	r6, r0
 800c14e:	460f      	mov	r7, r1
 800c150:	4614      	mov	r4, r2
 800c152:	18d5      	adds	r5, r2, r3
 800c154:	42ac      	cmp	r4, r5
 800c156:	d101      	bne.n	800c15c <__sfputs_r+0x12>
 800c158:	2000      	movs	r0, #0
 800c15a:	e007      	b.n	800c16c <__sfputs_r+0x22>
 800c15c:	463a      	mov	r2, r7
 800c15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c162:	4630      	mov	r0, r6
 800c164:	f7ff ffda 	bl	800c11c <__sfputc_r>
 800c168:	1c43      	adds	r3, r0, #1
 800c16a:	d1f3      	bne.n	800c154 <__sfputs_r+0xa>
 800c16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c170 <_vfiprintf_r>:
 800c170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c174:	460c      	mov	r4, r1
 800c176:	b09d      	sub	sp, #116	; 0x74
 800c178:	4617      	mov	r7, r2
 800c17a:	461d      	mov	r5, r3
 800c17c:	4606      	mov	r6, r0
 800c17e:	b118      	cbz	r0, 800c188 <_vfiprintf_r+0x18>
 800c180:	6983      	ldr	r3, [r0, #24]
 800c182:	b90b      	cbnz	r3, 800c188 <_vfiprintf_r+0x18>
 800c184:	f7ff fb34 	bl	800b7f0 <__sinit>
 800c188:	4b7c      	ldr	r3, [pc, #496]	; (800c37c <_vfiprintf_r+0x20c>)
 800c18a:	429c      	cmp	r4, r3
 800c18c:	d158      	bne.n	800c240 <_vfiprintf_r+0xd0>
 800c18e:	6874      	ldr	r4, [r6, #4]
 800c190:	89a3      	ldrh	r3, [r4, #12]
 800c192:	0718      	lsls	r0, r3, #28
 800c194:	d55e      	bpl.n	800c254 <_vfiprintf_r+0xe4>
 800c196:	6923      	ldr	r3, [r4, #16]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d05b      	beq.n	800c254 <_vfiprintf_r+0xe4>
 800c19c:	2300      	movs	r3, #0
 800c19e:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a0:	2320      	movs	r3, #32
 800c1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1a6:	2330      	movs	r3, #48	; 0x30
 800c1a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1ac:	9503      	str	r5, [sp, #12]
 800c1ae:	f04f 0b01 	mov.w	fp, #1
 800c1b2:	46b8      	mov	r8, r7
 800c1b4:	4645      	mov	r5, r8
 800c1b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c1ba:	b10b      	cbz	r3, 800c1c0 <_vfiprintf_r+0x50>
 800c1bc:	2b25      	cmp	r3, #37	; 0x25
 800c1be:	d154      	bne.n	800c26a <_vfiprintf_r+0xfa>
 800c1c0:	ebb8 0a07 	subs.w	sl, r8, r7
 800c1c4:	d00b      	beq.n	800c1de <_vfiprintf_r+0x6e>
 800c1c6:	4653      	mov	r3, sl
 800c1c8:	463a      	mov	r2, r7
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	f7ff ffbc 	bl	800c14a <__sfputs_r>
 800c1d2:	3001      	adds	r0, #1
 800c1d4:	f000 80c2 	beq.w	800c35c <_vfiprintf_r+0x1ec>
 800c1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1da:	4453      	add	r3, sl
 800c1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c1de:	f898 3000 	ldrb.w	r3, [r8]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 80ba 	beq.w	800c35c <_vfiprintf_r+0x1ec>
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1f2:	9304      	str	r3, [sp, #16]
 800c1f4:	9307      	str	r3, [sp, #28]
 800c1f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1fa:	931a      	str	r3, [sp, #104]	; 0x68
 800c1fc:	46a8      	mov	r8, r5
 800c1fe:	2205      	movs	r2, #5
 800c200:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c204:	485e      	ldr	r0, [pc, #376]	; (800c380 <_vfiprintf_r+0x210>)
 800c206:	f7f4 f80b 	bl	8000220 <memchr>
 800c20a:	9b04      	ldr	r3, [sp, #16]
 800c20c:	bb78      	cbnz	r0, 800c26e <_vfiprintf_r+0xfe>
 800c20e:	06d9      	lsls	r1, r3, #27
 800c210:	bf44      	itt	mi
 800c212:	2220      	movmi	r2, #32
 800c214:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c218:	071a      	lsls	r2, r3, #28
 800c21a:	bf44      	itt	mi
 800c21c:	222b      	movmi	r2, #43	; 0x2b
 800c21e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c222:	782a      	ldrb	r2, [r5, #0]
 800c224:	2a2a      	cmp	r2, #42	; 0x2a
 800c226:	d02a      	beq.n	800c27e <_vfiprintf_r+0x10e>
 800c228:	9a07      	ldr	r2, [sp, #28]
 800c22a:	46a8      	mov	r8, r5
 800c22c:	2000      	movs	r0, #0
 800c22e:	250a      	movs	r5, #10
 800c230:	4641      	mov	r1, r8
 800c232:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c236:	3b30      	subs	r3, #48	; 0x30
 800c238:	2b09      	cmp	r3, #9
 800c23a:	d969      	bls.n	800c310 <_vfiprintf_r+0x1a0>
 800c23c:	b360      	cbz	r0, 800c298 <_vfiprintf_r+0x128>
 800c23e:	e024      	b.n	800c28a <_vfiprintf_r+0x11a>
 800c240:	4b50      	ldr	r3, [pc, #320]	; (800c384 <_vfiprintf_r+0x214>)
 800c242:	429c      	cmp	r4, r3
 800c244:	d101      	bne.n	800c24a <_vfiprintf_r+0xda>
 800c246:	68b4      	ldr	r4, [r6, #8]
 800c248:	e7a2      	b.n	800c190 <_vfiprintf_r+0x20>
 800c24a:	4b4f      	ldr	r3, [pc, #316]	; (800c388 <_vfiprintf_r+0x218>)
 800c24c:	429c      	cmp	r4, r3
 800c24e:	bf08      	it	eq
 800c250:	68f4      	ldreq	r4, [r6, #12]
 800c252:	e79d      	b.n	800c190 <_vfiprintf_r+0x20>
 800c254:	4621      	mov	r1, r4
 800c256:	4630      	mov	r0, r6
 800c258:	f7fe fb26 	bl	800a8a8 <__swsetup_r>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d09d      	beq.n	800c19c <_vfiprintf_r+0x2c>
 800c260:	f04f 30ff 	mov.w	r0, #4294967295
 800c264:	b01d      	add	sp, #116	; 0x74
 800c266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c26a:	46a8      	mov	r8, r5
 800c26c:	e7a2      	b.n	800c1b4 <_vfiprintf_r+0x44>
 800c26e:	4a44      	ldr	r2, [pc, #272]	; (800c380 <_vfiprintf_r+0x210>)
 800c270:	1a80      	subs	r0, r0, r2
 800c272:	fa0b f000 	lsl.w	r0, fp, r0
 800c276:	4318      	orrs	r0, r3
 800c278:	9004      	str	r0, [sp, #16]
 800c27a:	4645      	mov	r5, r8
 800c27c:	e7be      	b.n	800c1fc <_vfiprintf_r+0x8c>
 800c27e:	9a03      	ldr	r2, [sp, #12]
 800c280:	1d11      	adds	r1, r2, #4
 800c282:	6812      	ldr	r2, [r2, #0]
 800c284:	9103      	str	r1, [sp, #12]
 800c286:	2a00      	cmp	r2, #0
 800c288:	db01      	blt.n	800c28e <_vfiprintf_r+0x11e>
 800c28a:	9207      	str	r2, [sp, #28]
 800c28c:	e004      	b.n	800c298 <_vfiprintf_r+0x128>
 800c28e:	4252      	negs	r2, r2
 800c290:	f043 0302 	orr.w	r3, r3, #2
 800c294:	9207      	str	r2, [sp, #28]
 800c296:	9304      	str	r3, [sp, #16]
 800c298:	f898 3000 	ldrb.w	r3, [r8]
 800c29c:	2b2e      	cmp	r3, #46	; 0x2e
 800c29e:	d10e      	bne.n	800c2be <_vfiprintf_r+0x14e>
 800c2a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c2a6:	d138      	bne.n	800c31a <_vfiprintf_r+0x1aa>
 800c2a8:	9b03      	ldr	r3, [sp, #12]
 800c2aa:	1d1a      	adds	r2, r3, #4
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	9203      	str	r2, [sp, #12]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	bfb8      	it	lt
 800c2b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2b8:	f108 0802 	add.w	r8, r8, #2
 800c2bc:	9305      	str	r3, [sp, #20]
 800c2be:	4d33      	ldr	r5, [pc, #204]	; (800c38c <_vfiprintf_r+0x21c>)
 800c2c0:	f898 1000 	ldrb.w	r1, [r8]
 800c2c4:	2203      	movs	r2, #3
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	f7f3 ffaa 	bl	8000220 <memchr>
 800c2cc:	b140      	cbz	r0, 800c2e0 <_vfiprintf_r+0x170>
 800c2ce:	2340      	movs	r3, #64	; 0x40
 800c2d0:	1b40      	subs	r0, r0, r5
 800c2d2:	fa03 f000 	lsl.w	r0, r3, r0
 800c2d6:	9b04      	ldr	r3, [sp, #16]
 800c2d8:	4303      	orrs	r3, r0
 800c2da:	f108 0801 	add.w	r8, r8, #1
 800c2de:	9304      	str	r3, [sp, #16]
 800c2e0:	f898 1000 	ldrb.w	r1, [r8]
 800c2e4:	482a      	ldr	r0, [pc, #168]	; (800c390 <_vfiprintf_r+0x220>)
 800c2e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2ea:	2206      	movs	r2, #6
 800c2ec:	f108 0701 	add.w	r7, r8, #1
 800c2f0:	f7f3 ff96 	bl	8000220 <memchr>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d037      	beq.n	800c368 <_vfiprintf_r+0x1f8>
 800c2f8:	4b26      	ldr	r3, [pc, #152]	; (800c394 <_vfiprintf_r+0x224>)
 800c2fa:	bb1b      	cbnz	r3, 800c344 <_vfiprintf_r+0x1d4>
 800c2fc:	9b03      	ldr	r3, [sp, #12]
 800c2fe:	3307      	adds	r3, #7
 800c300:	f023 0307 	bic.w	r3, r3, #7
 800c304:	3308      	adds	r3, #8
 800c306:	9303      	str	r3, [sp, #12]
 800c308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c30a:	444b      	add	r3, r9
 800c30c:	9309      	str	r3, [sp, #36]	; 0x24
 800c30e:	e750      	b.n	800c1b2 <_vfiprintf_r+0x42>
 800c310:	fb05 3202 	mla	r2, r5, r2, r3
 800c314:	2001      	movs	r0, #1
 800c316:	4688      	mov	r8, r1
 800c318:	e78a      	b.n	800c230 <_vfiprintf_r+0xc0>
 800c31a:	2300      	movs	r3, #0
 800c31c:	f108 0801 	add.w	r8, r8, #1
 800c320:	9305      	str	r3, [sp, #20]
 800c322:	4619      	mov	r1, r3
 800c324:	250a      	movs	r5, #10
 800c326:	4640      	mov	r0, r8
 800c328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c32c:	3a30      	subs	r2, #48	; 0x30
 800c32e:	2a09      	cmp	r2, #9
 800c330:	d903      	bls.n	800c33a <_vfiprintf_r+0x1ca>
 800c332:	2b00      	cmp	r3, #0
 800c334:	d0c3      	beq.n	800c2be <_vfiprintf_r+0x14e>
 800c336:	9105      	str	r1, [sp, #20]
 800c338:	e7c1      	b.n	800c2be <_vfiprintf_r+0x14e>
 800c33a:	fb05 2101 	mla	r1, r5, r1, r2
 800c33e:	2301      	movs	r3, #1
 800c340:	4680      	mov	r8, r0
 800c342:	e7f0      	b.n	800c326 <_vfiprintf_r+0x1b6>
 800c344:	ab03      	add	r3, sp, #12
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	4622      	mov	r2, r4
 800c34a:	4b13      	ldr	r3, [pc, #76]	; (800c398 <_vfiprintf_r+0x228>)
 800c34c:	a904      	add	r1, sp, #16
 800c34e:	4630      	mov	r0, r6
 800c350:	f7fd fd5e 	bl	8009e10 <_printf_float>
 800c354:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c358:	4681      	mov	r9, r0
 800c35a:	d1d5      	bne.n	800c308 <_vfiprintf_r+0x198>
 800c35c:	89a3      	ldrh	r3, [r4, #12]
 800c35e:	065b      	lsls	r3, r3, #25
 800c360:	f53f af7e 	bmi.w	800c260 <_vfiprintf_r+0xf0>
 800c364:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c366:	e77d      	b.n	800c264 <_vfiprintf_r+0xf4>
 800c368:	ab03      	add	r3, sp, #12
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	4622      	mov	r2, r4
 800c36e:	4b0a      	ldr	r3, [pc, #40]	; (800c398 <_vfiprintf_r+0x228>)
 800c370:	a904      	add	r1, sp, #16
 800c372:	4630      	mov	r0, r6
 800c374:	f7fe f802 	bl	800a37c <_printf_i>
 800c378:	e7ec      	b.n	800c354 <_vfiprintf_r+0x1e4>
 800c37a:	bf00      	nop
 800c37c:	0800c67c 	.word	0x0800c67c
 800c380:	0800c7bc 	.word	0x0800c7bc
 800c384:	0800c69c 	.word	0x0800c69c
 800c388:	0800c65c 	.word	0x0800c65c
 800c38c:	0800c7c2 	.word	0x0800c7c2
 800c390:	0800c7c6 	.word	0x0800c7c6
 800c394:	08009e11 	.word	0x08009e11
 800c398:	0800c14b 	.word	0x0800c14b

0800c39c <_sbrk_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4c06      	ldr	r4, [pc, #24]	; (800c3b8 <_sbrk_r+0x1c>)
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	4605      	mov	r5, r0
 800c3a4:	4608      	mov	r0, r1
 800c3a6:	6023      	str	r3, [r4, #0]
 800c3a8:	f7f5 fcc6 	bl	8001d38 <_sbrk>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	d102      	bne.n	800c3b6 <_sbrk_r+0x1a>
 800c3b0:	6823      	ldr	r3, [r4, #0]
 800c3b2:	b103      	cbz	r3, 800c3b6 <_sbrk_r+0x1a>
 800c3b4:	602b      	str	r3, [r5, #0]
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	2000076c 	.word	0x2000076c

0800c3bc <__sread>:
 800c3bc:	b510      	push	{r4, lr}
 800c3be:	460c      	mov	r4, r1
 800c3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c4:	f000 f8a8 	bl	800c518 <_read_r>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	bfab      	itete	ge
 800c3cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3ce:	89a3      	ldrhlt	r3, [r4, #12]
 800c3d0:	181b      	addge	r3, r3, r0
 800c3d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3d6:	bfac      	ite	ge
 800c3d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3da:	81a3      	strhlt	r3, [r4, #12]
 800c3dc:	bd10      	pop	{r4, pc}

0800c3de <__swrite>:
 800c3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e2:	461f      	mov	r7, r3
 800c3e4:	898b      	ldrh	r3, [r1, #12]
 800c3e6:	05db      	lsls	r3, r3, #23
 800c3e8:	4605      	mov	r5, r0
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	4616      	mov	r6, r2
 800c3ee:	d505      	bpl.n	800c3fc <__swrite+0x1e>
 800c3f0:	2302      	movs	r3, #2
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f8:	f000 f868 	bl	800c4cc <_lseek_r>
 800c3fc:	89a3      	ldrh	r3, [r4, #12]
 800c3fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c406:	81a3      	strh	r3, [r4, #12]
 800c408:	4632      	mov	r2, r6
 800c40a:	463b      	mov	r3, r7
 800c40c:	4628      	mov	r0, r5
 800c40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c412:	f000 b817 	b.w	800c444 <_write_r>

0800c416 <__sseek>:
 800c416:	b510      	push	{r4, lr}
 800c418:	460c      	mov	r4, r1
 800c41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c41e:	f000 f855 	bl	800c4cc <_lseek_r>
 800c422:	1c43      	adds	r3, r0, #1
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	bf15      	itete	ne
 800c428:	6560      	strne	r0, [r4, #84]	; 0x54
 800c42a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c42e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c432:	81a3      	strheq	r3, [r4, #12]
 800c434:	bf18      	it	ne
 800c436:	81a3      	strhne	r3, [r4, #12]
 800c438:	bd10      	pop	{r4, pc}

0800c43a <__sclose>:
 800c43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c43e:	f000 b813 	b.w	800c468 <_close_r>
	...

0800c444 <_write_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	4c07      	ldr	r4, [pc, #28]	; (800c464 <_write_r+0x20>)
 800c448:	4605      	mov	r5, r0
 800c44a:	4608      	mov	r0, r1
 800c44c:	4611      	mov	r1, r2
 800c44e:	2200      	movs	r2, #0
 800c450:	6022      	str	r2, [r4, #0]
 800c452:	461a      	mov	r2, r3
 800c454:	f7f5 f8f4 	bl	8001640 <_write>
 800c458:	1c43      	adds	r3, r0, #1
 800c45a:	d102      	bne.n	800c462 <_write_r+0x1e>
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	b103      	cbz	r3, 800c462 <_write_r+0x1e>
 800c460:	602b      	str	r3, [r5, #0]
 800c462:	bd38      	pop	{r3, r4, r5, pc}
 800c464:	2000076c 	.word	0x2000076c

0800c468 <_close_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4c06      	ldr	r4, [pc, #24]	; (800c484 <_close_r+0x1c>)
 800c46c:	2300      	movs	r3, #0
 800c46e:	4605      	mov	r5, r0
 800c470:	4608      	mov	r0, r1
 800c472:	6023      	str	r3, [r4, #0]
 800c474:	f7f5 f910 	bl	8001698 <_close>
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	d102      	bne.n	800c482 <_close_r+0x1a>
 800c47c:	6823      	ldr	r3, [r4, #0]
 800c47e:	b103      	cbz	r3, 800c482 <_close_r+0x1a>
 800c480:	602b      	str	r3, [r5, #0]
 800c482:	bd38      	pop	{r3, r4, r5, pc}
 800c484:	2000076c 	.word	0x2000076c

0800c488 <_fstat_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	4c07      	ldr	r4, [pc, #28]	; (800c4a8 <_fstat_r+0x20>)
 800c48c:	2300      	movs	r3, #0
 800c48e:	4605      	mov	r5, r0
 800c490:	4608      	mov	r0, r1
 800c492:	4611      	mov	r1, r2
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	f7f5 f94f 	bl	8001738 <_fstat>
 800c49a:	1c43      	adds	r3, r0, #1
 800c49c:	d102      	bne.n	800c4a4 <_fstat_r+0x1c>
 800c49e:	6823      	ldr	r3, [r4, #0]
 800c4a0:	b103      	cbz	r3, 800c4a4 <_fstat_r+0x1c>
 800c4a2:	602b      	str	r3, [r5, #0]
 800c4a4:	bd38      	pop	{r3, r4, r5, pc}
 800c4a6:	bf00      	nop
 800c4a8:	2000076c 	.word	0x2000076c

0800c4ac <_isatty_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	4c06      	ldr	r4, [pc, #24]	; (800c4c8 <_isatty_r+0x1c>)
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4605      	mov	r5, r0
 800c4b4:	4608      	mov	r0, r1
 800c4b6:	6023      	str	r3, [r4, #0]
 800c4b8:	f7f5 f8ac 	bl	8001614 <_isatty>
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	d102      	bne.n	800c4c6 <_isatty_r+0x1a>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	b103      	cbz	r3, 800c4c6 <_isatty_r+0x1a>
 800c4c4:	602b      	str	r3, [r5, #0]
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	2000076c 	.word	0x2000076c

0800c4cc <_lseek_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	4c07      	ldr	r4, [pc, #28]	; (800c4ec <_lseek_r+0x20>)
 800c4d0:	4605      	mov	r5, r0
 800c4d2:	4608      	mov	r0, r1
 800c4d4:	4611      	mov	r1, r2
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	6022      	str	r2, [r4, #0]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	f7f5 f8f3 	bl	80016c6 <_lseek>
 800c4e0:	1c43      	adds	r3, r0, #1
 800c4e2:	d102      	bne.n	800c4ea <_lseek_r+0x1e>
 800c4e4:	6823      	ldr	r3, [r4, #0]
 800c4e6:	b103      	cbz	r3, 800c4ea <_lseek_r+0x1e>
 800c4e8:	602b      	str	r3, [r5, #0]
 800c4ea:	bd38      	pop	{r3, r4, r5, pc}
 800c4ec:	2000076c 	.word	0x2000076c

0800c4f0 <__ascii_mbtowc>:
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	b901      	cbnz	r1, 800c4f6 <__ascii_mbtowc+0x6>
 800c4f4:	a901      	add	r1, sp, #4
 800c4f6:	b142      	cbz	r2, 800c50a <__ascii_mbtowc+0x1a>
 800c4f8:	b14b      	cbz	r3, 800c50e <__ascii_mbtowc+0x1e>
 800c4fa:	7813      	ldrb	r3, [r2, #0]
 800c4fc:	600b      	str	r3, [r1, #0]
 800c4fe:	7812      	ldrb	r2, [r2, #0]
 800c500:	1c10      	adds	r0, r2, #0
 800c502:	bf18      	it	ne
 800c504:	2001      	movne	r0, #1
 800c506:	b002      	add	sp, #8
 800c508:	4770      	bx	lr
 800c50a:	4610      	mov	r0, r2
 800c50c:	e7fb      	b.n	800c506 <__ascii_mbtowc+0x16>
 800c50e:	f06f 0001 	mvn.w	r0, #1
 800c512:	e7f8      	b.n	800c506 <__ascii_mbtowc+0x16>

0800c514 <__malloc_lock>:
 800c514:	4770      	bx	lr

0800c516 <__malloc_unlock>:
 800c516:	4770      	bx	lr

0800c518 <_read_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4c07      	ldr	r4, [pc, #28]	; (800c538 <_read_r+0x20>)
 800c51c:	4605      	mov	r5, r0
 800c51e:	4608      	mov	r0, r1
 800c520:	4611      	mov	r1, r2
 800c522:	2200      	movs	r2, #0
 800c524:	6022      	str	r2, [r4, #0]
 800c526:	461a      	mov	r2, r3
 800c528:	f7f5 f8de 	bl	80016e8 <_read>
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d102      	bne.n	800c536 <_read_r+0x1e>
 800c530:	6823      	ldr	r3, [r4, #0]
 800c532:	b103      	cbz	r3, 800c536 <_read_r+0x1e>
 800c534:	602b      	str	r3, [r5, #0]
 800c536:	bd38      	pop	{r3, r4, r5, pc}
 800c538:	2000076c 	.word	0x2000076c

0800c53c <__ascii_wctomb>:
 800c53c:	b149      	cbz	r1, 800c552 <__ascii_wctomb+0x16>
 800c53e:	2aff      	cmp	r2, #255	; 0xff
 800c540:	bf85      	ittet	hi
 800c542:	238a      	movhi	r3, #138	; 0x8a
 800c544:	6003      	strhi	r3, [r0, #0]
 800c546:	700a      	strbls	r2, [r1, #0]
 800c548:	f04f 30ff 	movhi.w	r0, #4294967295
 800c54c:	bf98      	it	ls
 800c54e:	2001      	movls	r0, #1
 800c550:	4770      	bx	lr
 800c552:	4608      	mov	r0, r1
 800c554:	4770      	bx	lr
	...

0800c558 <_init>:
 800c558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55a:	bf00      	nop
 800c55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c55e:	bc08      	pop	{r3}
 800c560:	469e      	mov	lr, r3
 800c562:	4770      	bx	lr

0800c564 <_fini>:
 800c564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c566:	bf00      	nop
 800c568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c56a:	bc08      	pop	{r3}
 800c56c:	469e      	mov	lr, r3
 800c56e:	4770      	bx	lr
