
lib_vl53l0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009944  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08009b14  08009b14  00019b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c44  08009c44  0002032c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c44  08009c44  00019c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c4c  08009c4c  0002032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c4c  08009c4c  00019c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c50  08009c50  00019c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  08009c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000032c  08009f80  0002032c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08009f80  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019045  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a89  00000000  00000000  000393a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  0003be30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e58  00000000  00000000  0003cdb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024be6  00000000  00000000  0003dc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000edba  00000000  00000000  000627f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2353  00000000  00000000  000715b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143903  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047bc  00000000  00000000  00143980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000032c 	.word	0x2000032c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009afc 	.word	0x08009afc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000330 	.word	0x20000330
 800020c:	08009afc 	.word	0x08009afc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b40      	ldr	r3, [pc, #256]	; (80006cc <MX_GPIO_Init+0x11c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a3f      	ldr	r2, [pc, #252]	; (80006cc <MX_GPIO_Init+0x11c>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b3d      	ldr	r3, [pc, #244]	; (80006cc <MX_GPIO_Init+0x11c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <MX_GPIO_Init+0x11c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a38      	ldr	r2, [pc, #224]	; (80006cc <MX_GPIO_Init+0x11c>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b36      	ldr	r3, [pc, #216]	; (80006cc <MX_GPIO_Init+0x11c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b32      	ldr	r3, [pc, #200]	; (80006cc <MX_GPIO_Init+0x11c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a31      	ldr	r2, [pc, #196]	; (80006cc <MX_GPIO_Init+0x11c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <MX_GPIO_Init+0x11c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_GPIO_Init+0x11c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <MX_GPIO_Init+0x11c>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_GPIO_Init+0x11c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2103      	movs	r1, #3
 800063a:	4825      	ldr	r0, [pc, #148]	; (80006d0 <MX_GPIO_Init+0x120>)
 800063c:	f000 ffbe 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2120      	movs	r1, #32
 8000644:	4823      	ldr	r0, [pc, #140]	; (80006d4 <MX_GPIO_Init+0x124>)
 8000646:	f000 ffb9 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_GPIO_Init+0x128>)
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	481c      	ldr	r0, [pc, #112]	; (80006d0 <MX_GPIO_Init+0x120>)
 8000660:	f000 fe1a 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000664:	2303      	movs	r3, #3
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	4815      	ldr	r0, [pc, #84]	; (80006d0 <MX_GPIO_Init+0x120>)
 800067c:	f000 fe0c 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000680:	2320      	movs	r3, #32
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	480f      	ldr	r0, [pc, #60]	; (80006d4 <MX_GPIO_Init+0x124>)
 8000698:	f000 fdfe 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069c:	2301      	movs	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_GPIO_Init+0x12c>)
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	480c      	ldr	r0, [pc, #48]	; (80006e0 <MX_GPIO_Init+0x130>)
 80006b0:	f000 fdf2 	bl	8001298 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2006      	movs	r0, #6
 80006ba:	f000 fdb6 	bl	800122a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006be:	2006      	movs	r0, #6
 80006c0:	f000 fdcf 	bl	8001262 <HAL_NVIC_EnableIRQ>

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	; 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020800 	.word	0x40020800
 80006d4:	40020000 	.word	0x40020000
 80006d8:	10210000 	.word	0x10210000
 80006dc:	10110000 	.word	0x10110000
 80006e0:	40020400 	.word	0x40020400

080006e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_I2C1_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_I2C1_Init+0x58>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2C1_Init+0x50>)
 8000702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_I2C1_Init+0x50>)
 8000722:	f000 ff89 	bl	8001638 <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 f9f2 	bl	8000b14 <Error_Handler>
  }

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000354 	.word	0x20000354
 8000738:	40005400 	.word	0x40005400
 800073c:	00061a80 	.word	0x00061a80

08000740 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <HAL_I2C_MspInit+0x84>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d12b      	bne.n	80007ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800077e:	23c0      	movs	r3, #192	; 0xc0
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000782:	2312      	movs	r3, #18
 8000784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000786:	2301      	movs	r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800078e:	2304      	movs	r3, #4
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <HAL_I2C_MspInit+0x8c>)
 800079a:	f000 fd7d 	bl	8001298 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 80007a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40005400 	.word	0x40005400
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020400 	.word	0x40020400

080007d0 <vl53l0x_Initialization_Flow>:
 *      Author: Arnaud CHOBERT
 */

#include "lib_vl53l0x.h"

uint8_t vl53l0x_Initialization_Flow(VL53L0X_Dev_t* dev){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	6078      	str	r0, [r7, #4]
	// Device initialization
	vl53l0x_Device_Initialization(dev);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 f817 	bl	800080c <vl53l0x_Device_Initialization>

	// Calibration data loading
	vl53l0x_Calibration_Data_Load(dev);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f842 	bl	8000868 <vl53l0x_Calibration_Data_Load>

	// System settings
	vl53l0x_System_Settings(dev);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f858 	bl	800089a <vl53l0x_System_Settings>

	// GPIOT IT
	VL53L0X_SetGpioConfig(dev, 0, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
 80007ea:	2301      	movs	r3, #1
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2304      	movs	r3, #4
 80007f0:	2201      	movs	r2, #1
 80007f2:	2100      	movs	r1, #0
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f004 fc21 	bl	800503c <VL53L0X_SetGpioConfig>
			VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, VL53L0X_INTERRUPTPOLARITY_HIGH);

	// Start Measurement
	VL53L0X_StartMeasurement(dev);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f004 f9c8 	bl	8004b90 <VL53L0X_StartMeasurement>

	return 0;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <vl53l0x_Device_Initialization>:

uint8_t vl53l0x_Device_Initialization(VL53L0X_Dev_t* dev){
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	73fb      	strb	r3, [r7, #15]

	// DataInit
	if(VL53L0X_ERROR_NONE != (status = VL53L0X_DataInit(dev))){
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f003 f929 	bl	8003a70 <VL53L0X_DataInit>
 800081e:	4603      	mov	r3, r0
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d006      	beq.n	8000836 <vl53l0x_Device_Initialization+0x2a>
		printf("Error DataInit() : %d\r\n",status);
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	4619      	mov	r1, r3
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <vl53l0x_Device_Initialization+0x54>)
 800082e:	f008 f95f 	bl	8008af0 <iprintf>
		return 1;
 8000832:	2301      	movs	r3, #1
 8000834:	e00f      	b.n	8000856 <vl53l0x_Device_Initialization+0x4a>
	}

	// StaticInit
	if(VL53L0X_ERROR_NONE != (status = VL53L0X_StaticInit(dev))){
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f003 fa7e 	bl	8003d38 <VL53L0X_StaticInit>
 800083c:	4603      	mov	r3, r0
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d006      	beq.n	8000854 <vl53l0x_Device_Initialization+0x48>
		printf("Error StaticInit() : %d\r\n",status);
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <vl53l0x_Device_Initialization+0x58>)
 800084c:	f008 f950 	bl	8008af0 <iprintf>
		return 1;
 8000850:	2301      	movs	r3, #1
 8000852:	e000      	b.n	8000856 <vl53l0x_Device_Initialization+0x4a>
	}

	return 0;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	08009b14 	.word	0x08009b14
 8000864:	08009b2c 	.word	0x08009b2c

08000868 <vl53l0x_Calibration_Data_Load>:

uint8_t vl53l0x_Calibration_Data_Load(VL53L0X_Dev_t* dev){
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	// Reference SPADs
	uint32_t count; uint8_t isApertureSpads;
	VL53L0X_PerformRefSpadManagement(dev, &count, &isApertureSpads);
 8000870:	f107 020b 	add.w	r2, r7, #11
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f004 fd9a 	bl	80053b4 <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_GetReferenceSpads(dev, &count, &isApertureSpads);


	// Ref calibration
    uint8_t VhvSettings, PhaseCal;
	VL53L0X_PerformRefCalibration(dev, &VhvSettings, &PhaseCal);
 8000880:	f107 0209 	add.w	r2, r7, #9
 8000884:	f107 030a 	add.w	r3, r7, #10
 8000888:	4619      	mov	r1, r3
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f004 f904 	bl	8004a98 <VL53L0X_PerformRefCalibration>

	// Offset calibration

	// Cross-talk correction

	return 0;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <vl53l0x_System_Settings>:

uint8_t vl53l0x_System_Settings(VL53L0X_Dev_t* dev){
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
	// Device Mode
	VL53L0X_SetDeviceMode(dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80008a2:	2101      	movs	r1, #1
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f003 fc59 	bl	800415c <VL53L0X_SetDeviceMode>

	// Polling and interrupt mode
	//VL53L0X_SetGpioConfig(dev, Pin, DeviceMode, Functionality, Polarity)

	// API range profiles
	vl53l0x_Range_Profiles(dev);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f000 f806 	bl	80008bc <vl53l0x_Range_Profiles>

	return 0;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <vl53l0x_Range_Profiles>:

uint8_t vl53l0x_Range_Profiles(VL53L0X_Dev_t* dev){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 80008c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008c8:	617b      	str	r3, [r7, #20]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 80008ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ce:	613b      	str	r3, [r7, #16]
	uint32_t timingBudget = 33000;
 80008d0:	f248 03e8 	movw	r3, #33000	; 0x80e8
 80008d4:	60fb      	str	r3, [r7, #12]
	uint8_t preRangeVcselPeriod = 14;
 80008d6:	230e      	movs	r3, #14
 80008d8:	72fb      	strb	r3, [r7, #11]
	uint8_t finalRangeVcselPeriod = 10;
 80008da:	230a      	movs	r3, #10
 80008dc:	72bb      	strb	r3, [r7, #10]
		timingBudget = 33000;
		preRangeVcselPeriod = 18;
		finalRangeVcselPeriod = 14;
		break;
	case HIGH_ACCURACY:
		signalLimit = (FixPoint1616_t)(0.25*65536);
 80008de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008e2:	617b      	str	r3, [r7, #20]
		sigmaLimit = (FixPoint1616_t)(18*65536);
 80008e4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008e8:	613b      	str	r3, [r7, #16]
		timingBudget = 200000;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <vl53l0x_Range_Profiles+0x7c>)
 80008ec:	60fb      	str	r3, [r7, #12]
		preRangeVcselPeriod = 14;
 80008ee:	230e      	movs	r3, #14
 80008f0:	72fb      	strb	r3, [r7, #11]
		finalRangeVcselPeriod = 10;
 80008f2:	230a      	movs	r3, #10
 80008f4:	72bb      	strb	r3, [r7, #10]
		break;
 80008f6:	bf00      	nop
		break;
	default:
		printf("Not Supported");
	}

	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	2101      	movs	r1, #1
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f003 ff75 	bl	80047ec <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	2100      	movs	r1, #0
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f003 ff70 	bl	80047ec <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(dev, timingBudget);
 800090c:	68f9      	ldr	r1, [r7, #12]
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f003 fc9e 	bl	8004250 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8000914:	7afb      	ldrb	r3, [r7, #11]
 8000916:	461a      	mov	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f003 fcbe 	bl	800429c <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8000920:	7abb      	ldrb	r3, [r7, #10]
 8000922:	461a      	mov	r2, r3
 8000924:	2101      	movs	r1, #1
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f003 fcb8 	bl	800429c <VL53L0X_SetVcselPulsePeriod>
}
 800092c:	bf00      	nop
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	00030d40 	.word	0x00030d40

0800093c <vl53l0x_PerformRangingMeasurement_IT>:
	vl53l0x_PerformMeasurement(dev, &VL53L0X_RangingMeasurementData);

	return VL53L0X_RangingMeasurementData.RangeMilliMeter;
}

uint16_t vl53l0x_PerformRangingMeasurement_IT(VL53L0X_Dev_t* dev){
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;

	if(VL53L0X_ERROR_NONE != (status = VL53L0X_GetRangingMeasurementData(dev, &VL53L0X_RangingMeasurementData))){
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4619      	mov	r1, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f004 fa1d 	bl	8004d90 <VL53L0X_GetRangingMeasurementData>
 8000956:	4603      	mov	r3, r0
 8000958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800095c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000960:	2b00      	cmp	r3, #0
 8000962:	d007      	beq.n	8000974 <vl53l0x_PerformRangingMeasurement_IT+0x38>
		printf("Error GetRangingMeasurementData() : %d\r\n",status);
 8000964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <vl53l0x_PerformRangingMeasurement_IT+0x44>)
 800096c:	f008 f8c0 	bl	8008af0 <iprintf>
		return 1;
 8000970:	2301      	movs	r3, #1
 8000972:	e000      	b.n	8000976 <vl53l0x_PerformRangingMeasurement_IT+0x3a>
	}

	return VL53L0X_RangingMeasurementData.RangeMilliMeter;
 8000974:	8a3b      	ldrh	r3, [r7, #16]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	08009b48 	.word	0x08009b48

08000984 <vl53l0x_SetDeviceAddress>:

uint8_t vl53l0x_SetDeviceAddress(VL53L0X_Dev_t* dev, uint8_t deviceAddress){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_SetDeviceAddress(dev, deviceAddress);
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	4619      	mov	r1, r3
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f003 f852 	bl	8003a3e <VL53L0X_SetDeviceAddress>
	dev->I2cDevAddr = deviceAddress;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	78fa      	ldrb	r2, [r7, #3]
 800099e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 facc 	bl	8000f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f840 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f7ff fdfa 	bl	80005b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009bc:	f000 fa2a 	bl	8000e14 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009c0:	f7ff fe90 	bl	80006e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80009c4:	4817      	ldr	r0, [pc, #92]	; (8000a24 <main+0x78>)
 80009c6:	f000 f8a9 	bl	8000b1c <RetargetInit>
  printf("lib_vl53l0x\r\n");
 80009ca:	4817      	ldr	r0, [pc, #92]	; (8000a28 <main+0x7c>)
 80009cc:	f008 f904 	bl	8008bd8 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2101      	movs	r1, #1
 80009d4:	4815      	ldr	r0, [pc, #84]	; (8000a2c <main+0x80>)
 80009d6:	f000 fdf1 	bl	80015bc <HAL_GPIO_WritePin>
  // PC_0 => XSHUT of sensor 1
  // PC_1 => XSHUT of sensor 2

 // VL53L0X_Dev_t dev;

  dev.I2cHandle = &hi2c1;
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <main+0x84>)
 80009dc:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <main+0x88>)
 80009de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  dev.I2cDevAddr = 0x52;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <main+0x84>)
 80009e4:	2252      	movs	r2, #82	; 0x52
 80009e6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  dev.comms_speed_khz = 400;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <main+0x84>)
 80009ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80009f0:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
  dev.comms_type = 1;
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <main+0x84>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2101      	movs	r1, #1
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <main+0x80>)
 8000a02:	f000 fddb 	bl	80015bc <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000a06:	20c8      	movs	r0, #200	; 0xc8
 8000a08:	f000 fb12 	bl	8001030 <HAL_Delay>
  vl53l0x_Initialization_Flow(&dev);
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <main+0x84>)
 8000a0e:	f7ff fedf 	bl	80007d0 <vl53l0x_Initialization_Flow>
  vl53l0x_SetDeviceAddress(&dev, 0x55);
 8000a12:	2155      	movs	r1, #85	; 0x55
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <main+0x84>)
 8000a16:	f7ff ffb5 	bl	8000984 <vl53l0x_SetDeviceAddress>
  HAL_Delay(200);
 8000a1a:	20c8      	movs	r0, #200	; 0xc8
 8000a1c:	f000 fb08 	bl	8001030 <HAL_Delay>
  vl53l0x_Initialization_Flow(&dev[1]);
  vl53l0x_SetDeviceAddress(&dev[1], 0x58);
  HAL_Delay(200);
  */

  while (1)
 8000a20:	e7fe      	b.n	8000a20 <main+0x74>
 8000a22:	bf00      	nop
 8000a24:	2000053c 	.word	0x2000053c
 8000a28:	08009b74 	.word	0x08009b74
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	200003a8 	.word	0x200003a8
 8000a34:	20000354 	.word	0x20000354

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2234      	movs	r2, #52	; 0x34
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f008 f849 	bl	8008ade <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a84:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aac:	2310      	movs	r3, #16
 8000aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ab4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fffa 	bl	8002ac0 <HAL_RCC_OscConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ad2:	f000 f81f 	bl	8000b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2302      	movs	r3, #2
 8000adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	2102      	movs	r1, #2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fd2a 	bl	800254c <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000afe:	f000 f809 	bl	8000b14 <Error_Handler>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3750      	adds	r7, #80	; 0x50
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <Error_Handler+0x6>

08000b1c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <RetargetInit+0x28>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <RetargetInit+0x2c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6898      	ldr	r0, [r3, #8]
 8000b30:	2300      	movs	r3, #0
 8000b32:	2202      	movs	r2, #2
 8000b34:	2100      	movs	r1, #0
 8000b36:	f008 f857 	bl	8008be8 <setvbuf>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000538 	.word	0x20000538
 8000b48:	200002c8 	.word	0x200002c8

08000b4c <_isatty>:

int _isatty(int fd) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	db04      	blt.n	8000b64 <_isatty+0x18>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	dc01      	bgt.n	8000b64 <_isatty+0x18>
    return 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e005      	b.n	8000b70 <_isatty+0x24>

  errno = EBADF;
 8000b64:	f007 ff86 	bl	8008a74 <__errno>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	2309      	movs	r3, #9
 8000b6c:	6013      	str	r3, [r2, #0]
  return 0;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_write>:

int _write(int fd, char* ptr, int len) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d002      	beq.n	8000b90 <_write+0x18>
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d111      	bne.n	8000bb4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <_write+0x54>)
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	f002 fa36 	bl	800300e <HAL_UART_Transmit>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d101      	bne.n	8000bb0 <_write+0x38>
      return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	e008      	b.n	8000bc2 <_write+0x4a>
    else
      return EIO;
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	e006      	b.n	8000bc2 <_write+0x4a>
  }
  errno = EBADF;
 8000bb4:	f007 ff5e 	bl	8008a74 <__errno>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	2309      	movs	r3, #9
 8000bbc:	6013      	str	r3, [r2, #0]
  return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000538 	.word	0x20000538

08000bd0 <_close>:

int _close(int fd) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db04      	blt.n	8000be8 <_close+0x18>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	dc01      	bgt.n	8000be8 <_close+0x18>
    return 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	e006      	b.n	8000bf6 <_close+0x26>

  errno = EBADF;
 8000be8:	f007 ff44 	bl	8008a74 <__errno>
 8000bec:	4602      	mov	r2, r0
 8000bee:	2309      	movs	r3, #9
 8000bf0:	6013      	str	r3, [r2, #0]
  return -1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000c0a:	f007 ff33 	bl	8008a74 <__errno>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	2309      	movs	r3, #9
 8000c12:	6013      	str	r3, [r2, #0]
  return -1;
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_read>:

int _read(int fd, char* ptr, int len) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d110      	bne.n	8000c54 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <_read+0x4c>)
 8000c34:	6818      	ldr	r0, [r3, #0]
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	f002 fa7f 	bl	8003140 <HAL_UART_Receive>
 8000c42:	4603      	mov	r3, r0
 8000c44:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c46:	7dfb      	ldrb	r3, [r7, #23]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <_read+0x30>
      return 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e008      	b.n	8000c62 <_read+0x42>
    else
      return EIO;
 8000c50:	2305      	movs	r3, #5
 8000c52:	e006      	b.n	8000c62 <_read+0x42>
  }
  errno = EBADF;
 8000c54:	f007 ff0e 	bl	8008a74 <__errno>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	2309      	movs	r3, #9
 8000c5c:	6013      	str	r3, [r2, #0]
  return -1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000538 	.word	0x20000538

08000c70 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db08      	blt.n	8000c92 <_fstat+0x22>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	dc05      	bgt.n	8000c92 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8c:	605a      	str	r2, [r3, #4]
    return 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e005      	b.n	8000c9e <_fstat+0x2e>
  }

  errno = EBADF;
 8000c92:	f007 feef 	bl	8008a74 <__errno>
 8000c96:	4602      	mov	r2, r0
 8000c98:	2309      	movs	r3, #9
 8000c9a:	6013      	str	r3, [r2, #0]
  return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ce6:	2007      	movs	r0, #7
 8000ce8:	f000 fa94 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f954 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	VL53L0X_ClearInterruptMask(&dev, 0);
 8000d50:	2100      	movs	r1, #0
 8000d52:	4808      	ldr	r0, [pc, #32]	; (8000d74 <EXTI0_IRQHandler+0x28>)
 8000d54:	f004 facc 	bl	80052f0 <VL53L0X_ClearInterruptMask>
	printf("Sensor : %d\r\n", vl53l0x_PerformRangingMeasurement_IT(&dev));
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <EXTI0_IRQHandler+0x28>)
 8000d5a:	f7ff fdef 	bl	800093c <vl53l0x_PerformRangingMeasurement_IT>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4619      	mov	r1, r3
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <EXTI0_IRQHandler+0x2c>)
 8000d64:	f007 fec4 	bl	8008af0 <iprintf>
	//VL53L0X_ClearInterruptMask(&dev, 0);
  /* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f000 fc41 	bl	80015f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200003a8 	.word	0x200003a8
 8000d78:	08009b84 	.word	0x08009b84

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f007 fe62 	bl	8008a74 <__errno>
 8000db0:	4602      	mov	r2, r0
 8000db2:	230c      	movs	r3, #12
 8000db4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20020000 	.word	0x20020000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	20000348 	.word	0x20000348
 8000de4:	200005c8 	.word	0x200005c8

08000de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <SystemInit+0x28>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <SystemInit+0x28>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SystemInit+0x28>)
 8000dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e02:	609a      	str	r2, [r3, #8]
#endif
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <MX_USART2_UART_Init+0x50>)
 8000e1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_USART2_UART_Init+0x4c>)
 8000e4c:	f002 f892 	bl	8002f74 <HAL_UART_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e56:	f7ff fe5d 	bl	8000b14 <Error_Handler>
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000053c 	.word	0x2000053c
 8000e64:	40004400 	.word	0x40004400

08000e68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_UART_MspInit+0x84>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d12b      	bne.n	8000ee2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ec2:	230c      	movs	r3, #12
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_UART_MspInit+0x8c>)
 8000ede:	f000 f9db 	bl	8001298 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40004400 	.word	0x40004400
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000efc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000efe:	e003      	b.n	8000f08 <LoopCopyDataInit>

08000f00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f06:	3104      	adds	r1, #4

08000f08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f10:	d3f6      	bcc.n	8000f00 <CopyDataInit>
  ldr  r2, =_sbss
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f14:	e002      	b.n	8000f1c <LoopFillZerobss>

08000f16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f18:	f842 3b04 	str.w	r3, [r2], #4

08000f1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f20:	d3f9      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f22:	f7ff ff61 	bl	8000de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f007 fdab 	bl	8008a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fd3f 	bl	80009ac <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f34:	08009c54 	.word	0x08009c54
  ldr  r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f3c:	2000032c 	.word	0x2000032c
  ldr  r2, =_sbss
 8000f40:	2000032c 	.word	0x2000032c
  ldr  r3, = _ebss
 8000f44:	200005c4 	.word	0x200005c4

08000f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC_IRQHandler>
	...

08000f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_Init+0x40>)
 8000f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_Init+0x40>)
 8000f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_Init+0x40>)
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f94d 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff fe92 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023c00 	.word	0x40023c00

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f965 	bl	800127e <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 f92d 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	2000057c 	.word	0x2000057c

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2000057c 	.word	0x2000057c

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff ffee 	bl	8001018 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_Delay+0x40>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001056:	bf00      	nop
 8001058:	f7ff ffde 	bl	8001018 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000008 	.word	0x20000008

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff29 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff3e 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff8e 	bl	8001168 <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5d 	bl	8001114 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff31 	bl	80010d8 <__NVIC_EnableIRQ>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffa2 	bl	80011d0 <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	e165      	b.n	8001580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b4:	2201      	movs	r2, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	f040 8154 	bne.w	800157a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d00b      	beq.n	80012f2 <HAL_GPIO_Init+0x5a>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d007      	beq.n	80012f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e6:	2b11      	cmp	r3, #17
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d130      	bne.n	8001354 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001328:	2201      	movs	r2, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 0201 	and.w	r2, r3, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0xfc>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b12      	cmp	r3, #18
 8001392:	d123      	bne.n	80013dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	69b9      	ldr	r1, [r7, #24]
 80013d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80ae 	beq.w	800157a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b5c      	ldr	r3, [pc, #368]	; (8001594 <HAL_GPIO_Init+0x2fc>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a5b      	ldr	r2, [pc, #364]	; (8001594 <HAL_GPIO_Init+0x2fc>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b59      	ldr	r3, [pc, #356]	; (8001594 <HAL_GPIO_Init+0x2fc>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800143a:	4a57      	ldr	r2, [pc, #348]	; (8001598 <HAL_GPIO_Init+0x300>)
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4e      	ldr	r2, [pc, #312]	; (800159c <HAL_GPIO_Init+0x304>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d025      	beq.n	80014b2 <HAL_GPIO_Init+0x21a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4d      	ldr	r2, [pc, #308]	; (80015a0 <HAL_GPIO_Init+0x308>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d01f      	beq.n	80014ae <HAL_GPIO_Init+0x216>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4c      	ldr	r2, [pc, #304]	; (80015a4 <HAL_GPIO_Init+0x30c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d019      	beq.n	80014aa <HAL_GPIO_Init+0x212>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4b      	ldr	r2, [pc, #300]	; (80015a8 <HAL_GPIO_Init+0x310>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d013      	beq.n	80014a6 <HAL_GPIO_Init+0x20e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4a      	ldr	r2, [pc, #296]	; (80015ac <HAL_GPIO_Init+0x314>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d00d      	beq.n	80014a2 <HAL_GPIO_Init+0x20a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a49      	ldr	r2, [pc, #292]	; (80015b0 <HAL_GPIO_Init+0x318>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d007      	beq.n	800149e <HAL_GPIO_Init+0x206>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a48      	ldr	r2, [pc, #288]	; (80015b4 <HAL_GPIO_Init+0x31c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d101      	bne.n	800149a <HAL_GPIO_Init+0x202>
 8001496:	2306      	movs	r3, #6
 8001498:	e00c      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 800149a:	2307      	movs	r3, #7
 800149c:	e00a      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 800149e:	2305      	movs	r3, #5
 80014a0:	e008      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 80014a2:	2304      	movs	r3, #4
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e004      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 80014b2:	2300      	movs	r3, #0
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	f002 0203 	and.w	r2, r2, #3
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4093      	lsls	r3, r2
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c4:	4934      	ldr	r1, [pc, #208]	; (8001598 <HAL_GPIO_Init+0x300>)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <HAL_GPIO_Init+0x320>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f6:	4a30      	ldr	r2, [pc, #192]	; (80015b8 <HAL_GPIO_Init+0x320>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_GPIO_Init+0x320>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001520:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <HAL_GPIO_Init+0x320>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_GPIO_Init+0x320>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800154a:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_GPIO_Init+0x320>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_GPIO_Init+0x320>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001574:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_GPIO_Init+0x320>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	f67f ae96 	bls.w	80012b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001588:	bf00      	nop
 800158a:	3724      	adds	r7, #36	; 0x24
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	40023800 	.word	0x40023800
 8001598:	40013800 	.word	0x40013800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40021400 	.word	0x40021400
 80015b4:	40021800 	.word	0x40021800
 80015b8:	40013c00 	.word	0x40013c00

080015bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
 80015c8:	4613      	mov	r3, r2
 80015ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d8:	e003      	b.n	80015e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	041a      	lsls	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	619a      	str	r2, [r3, #24]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f806 	bl	8001620 <HAL_GPIO_EXTI_Callback>
  }
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40013c00 	.word	0x40013c00

08001620 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e11f      	b.n	800188a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff f86e 	bl	8000740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2224      	movs	r2, #36	; 0x24
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800168a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800169a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800169c:	f001 f848 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 80016a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a7b      	ldr	r2, [pc, #492]	; (8001894 <HAL_I2C_Init+0x25c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d807      	bhi.n	80016bc <HAL_I2C_Init+0x84>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4a7a      	ldr	r2, [pc, #488]	; (8001898 <HAL_I2C_Init+0x260>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	bf94      	ite	ls
 80016b4:	2301      	movls	r3, #1
 80016b6:	2300      	movhi	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	e006      	b.n	80016ca <HAL_I2C_Init+0x92>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a77      	ldr	r2, [pc, #476]	; (800189c <HAL_I2C_Init+0x264>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bf94      	ite	ls
 80016c4:	2301      	movls	r3, #1
 80016c6:	2300      	movhi	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0db      	b.n	800188a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4a72      	ldr	r2, [pc, #456]	; (80018a0 <HAL_I2C_Init+0x268>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0c9b      	lsrs	r3, r3, #18
 80016dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a64      	ldr	r2, [pc, #400]	; (8001894 <HAL_I2C_Init+0x25c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d802      	bhi.n	800170c <HAL_I2C_Init+0xd4>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3301      	adds	r3, #1
 800170a:	e009      	b.n	8001720 <HAL_I2C_Init+0xe8>
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	4a63      	ldr	r2, [pc, #396]	; (80018a4 <HAL_I2C_Init+0x26c>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	3301      	adds	r3, #1
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	430b      	orrs	r3, r1
 8001726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001732:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4956      	ldr	r1, [pc, #344]	; (8001894 <HAL_I2C_Init+0x25c>)
 800173c:	428b      	cmp	r3, r1
 800173e:	d80d      	bhi.n	800175c <HAL_I2C_Init+0x124>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e59      	subs	r1, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fbb1 f3f3 	udiv	r3, r1, r3
 800174e:	3301      	adds	r3, #1
 8001750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001754:	2b04      	cmp	r3, #4
 8001756:	bf38      	it	cc
 8001758:	2304      	movcc	r3, #4
 800175a:	e04f      	b.n	80017fc <HAL_I2C_Init+0x1c4>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d111      	bne.n	8001788 <HAL_I2C_Init+0x150>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1e58      	subs	r0, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	440b      	add	r3, r1
 8001772:	fbb0 f3f3 	udiv	r3, r0, r3
 8001776:	3301      	adds	r3, #1
 8001778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	e012      	b.n	80017ae <HAL_I2C_Init+0x176>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1e58      	subs	r0, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	0099      	lsls	r1, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	fbb0 f3f3 	udiv	r3, r0, r3
 800179e:	3301      	adds	r3, #1
 80017a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_I2C_Init+0x17e>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e022      	b.n	80017fc <HAL_I2C_Init+0x1c4>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10e      	bne.n	80017dc <HAL_I2C_Init+0x1a4>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1e58      	subs	r0, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6859      	ldr	r1, [r3, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	440b      	add	r3, r1
 80017cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d0:	3301      	adds	r3, #1
 80017d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017da:	e00f      	b.n	80017fc <HAL_I2C_Init+0x1c4>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1e58      	subs	r0, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6859      	ldr	r1, [r3, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	0099      	lsls	r1, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	6809      	ldr	r1, [r1, #0]
 8001800:	4313      	orrs	r3, r2
 8001802:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69da      	ldr	r2, [r3, #28]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800182a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6911      	ldr	r1, [r2, #16]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68d2      	ldr	r2, [r2, #12]
 8001836:	4311      	orrs	r1, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	430b      	orrs	r3, r1
 800183e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2220      	movs	r2, #32
 8001876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	000186a0 	.word	0x000186a0
 8001898:	001e847f 	.word	0x001e847f
 800189c:	003d08ff 	.word	0x003d08ff
 80018a0:	431bde83 	.word	0x431bde83
 80018a4:	10624dd3 	.word	0x10624dd3

080018a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	461a      	mov	r2, r3
 80018b4:	460b      	mov	r3, r1
 80018b6:	817b      	strh	r3, [r7, #10]
 80018b8:	4613      	mov	r3, r2
 80018ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff fbac 	bl	8001018 <HAL_GetTick>
 80018c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	f040 80e0 	bne.w	8001a90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2319      	movs	r3, #25
 80018d6:	2201      	movs	r2, #1
 80018d8:	4970      	ldr	r1, [pc, #448]	; (8001a9c <HAL_I2C_Master_Transmit+0x1f4>)
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fc58 	bl	8002190 <I2C_WaitOnFlagUntilTimeout>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018e6:	2302      	movs	r3, #2
 80018e8:	e0d3      	b.n	8001a92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_I2C_Master_Transmit+0x50>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e0cc      	b.n	8001a92 <HAL_I2C_Master_Transmit+0x1ea>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	d007      	beq.n	800191e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0201 	orr.w	r2, r2, #1
 800191c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800192c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2221      	movs	r2, #33	; 0x21
 8001932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2210      	movs	r2, #16
 800193a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	893a      	ldrh	r2, [r7, #8]
 800194e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4a50      	ldr	r2, [pc, #320]	; (8001aa0 <HAL_I2C_Master_Transmit+0x1f8>)
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001960:	8979      	ldrh	r1, [r7, #10]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	6a3a      	ldr	r2, [r7, #32]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fac2 	bl	8001ef0 <I2C_MasterRequestWrite>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e08d      	b.n	8001a92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800198c:	e066      	b.n	8001a5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	6a39      	ldr	r1, [r7, #32]
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fcd2 	bl	800233c <I2C_WaitOnTXEFlagUntilTimeout>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00d      	beq.n	80019ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d107      	bne.n	80019b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e06b      	b.n	8001a92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d11b      	bne.n	8001a30 <HAL_I2C_Master_Transmit+0x188>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d017      	beq.n	8001a30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	781a      	ldrb	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	6a39      	ldr	r1, [r7, #32]
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 fcc2 	bl	80023be <I2C_WaitOnBTFFlagUntilTimeout>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00d      	beq.n	8001a5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d107      	bne.n	8001a58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e01a      	b.n	8001a92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d194      	bne.n	800198e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a90:	2302      	movs	r3, #2
  }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	00100002 	.word	0x00100002
 8001aa0:	ffff0000 	.word	0xffff0000

08001aa4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	817b      	strh	r3, [r7, #10]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff faae 	bl	8001018 <HAL_GetTick>
 8001abc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	f040 820b 	bne.w	8001ee2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2319      	movs	r3, #25
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	497c      	ldr	r1, [pc, #496]	; (8001cc8 <HAL_I2C_Master_Receive+0x224>)
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 fb5a 	bl	8002190 <I2C_WaitOnFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e1fe      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_I2C_Master_Receive+0x50>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e1f7      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x440>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d007      	beq.n	8001b1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 0201 	orr.w	r2, r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2222      	movs	r2, #34	; 0x22
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2210      	movs	r2, #16
 8001b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	893a      	ldrh	r2, [r7, #8]
 8001b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4a5c      	ldr	r2, [pc, #368]	; (8001ccc <HAL_I2C_Master_Receive+0x228>)
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b5c:	8979      	ldrh	r1, [r7, #10]
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 fa46 	bl	8001ff4 <I2C_MasterRequestRead>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e1b8      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d113      	bne.n	8001ba2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	623b      	str	r3, [r7, #32]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	623b      	str	r3, [r7, #32]
 8001b8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e18c      	b.n	8001ebc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d11b      	bne.n	8001be2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e16c      	b.n	8001ebc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d11b      	bne.n	8001c22 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bf8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	e14c      	b.n	8001ebc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c48:	e138      	b.n	8001ebc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	f200 80f1 	bhi.w	8001e36 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d123      	bne.n	8001ca4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fbed 	bl	8002440 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e139      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ca2:	e10b      	b.n	8001ebc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d14e      	bne.n	8001d4a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	4906      	ldr	r1, [pc, #24]	; (8001cd0 <HAL_I2C_Master_Receive+0x22c>)
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 fa6a 	bl	8002190 <I2C_WaitOnFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e10e      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x440>
 8001cc6:	bf00      	nop
 8001cc8:	00100002 	.word	0x00100002
 8001ccc:	ffff0000 	.word	0xffff0000
 8001cd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d48:	e0b8      	b.n	8001ebc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	2200      	movs	r2, #0
 8001d52:	4966      	ldr	r1, [pc, #408]	; (8001eec <HAL_I2C_Master_Receive+0x448>)
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 fa1b 	bl	8002190 <I2C_WaitOnFlagUntilTimeout>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0bf      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	2200      	movs	r2, #0
 8001dae:	494f      	ldr	r1, [pc, #316]	; (8001eec <HAL_I2C_Master_Receive+0x448>)
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f9ed 	bl	8002190 <I2C_WaitOnFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e091      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e34:	e042      	b.n	8001ebc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 fb00 	bl	8002440 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e04c      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d118      	bne.n	8001ebc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f47f aec2 	bne.w	8001c4a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e000      	b.n	8001ee4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
  }
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3728      	adds	r7, #40	; 0x28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	00010004 	.word	0x00010004

08001ef0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	460b      	mov	r3, r1
 8001efe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d006      	beq.n	8001f1a <I2C_MasterRequestWrite+0x2a>
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d003      	beq.n	8001f1a <I2C_MasterRequestWrite+0x2a>
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f18:	d108      	bne.n	8001f2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e00b      	b.n	8001f44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	2b12      	cmp	r3, #18
 8001f32:	d107      	bne.n	8001f44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f91d 	bl	8002190 <I2C_WaitOnFlagUntilTimeout>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00d      	beq.n	8001f78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f6a:	d103      	bne.n	8001f74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e035      	b.n	8001fe4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f80:	d108      	bne.n	8001f94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f82:	897b      	ldrh	r3, [r7, #10]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	e01b      	b.n	8001fcc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f94:	897b      	ldrh	r3, [r7, #10]
 8001f96:	11db      	asrs	r3, r3, #7
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f003 0306 	and.w	r3, r3, #6
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f063 030f 	orn	r3, r3, #15
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	490e      	ldr	r1, [pc, #56]	; (8001fec <I2C_MasterRequestWrite+0xfc>)
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f943 	bl	800223e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e010      	b.n	8001fe4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fc2:	897b      	ldrh	r3, [r7, #10]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4907      	ldr	r1, [pc, #28]	; (8001ff0 <I2C_MasterRequestWrite+0x100>)
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f933 	bl	800223e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	00010008 	.word	0x00010008
 8001ff0:	00010002 	.word	0x00010002

08001ff4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	460b      	mov	r3, r1
 8002002:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002018:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2b08      	cmp	r3, #8
 800201e:	d006      	beq.n	800202e <I2C_MasterRequestRead+0x3a>
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d003      	beq.n	800202e <I2C_MasterRequestRead+0x3a>
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800202c:	d108      	bne.n	8002040 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e00b      	b.n	8002058 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	2b11      	cmp	r3, #17
 8002046:	d107      	bne.n	8002058 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002056:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f893 	bl	8002190 <I2C_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00d      	beq.n	800208c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207e:	d103      	bne.n	8002088 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e079      	b.n	8002180 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002094:	d108      	bne.n	80020a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002096:	897b      	ldrh	r3, [r7, #10]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	611a      	str	r2, [r3, #16]
 80020a6:	e05f      	b.n	8002168 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020a8:	897b      	ldrh	r3, [r7, #10]
 80020aa:	11db      	asrs	r3, r3, #7
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f003 0306 	and.w	r3, r3, #6
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f063 030f 	orn	r3, r3, #15
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4930      	ldr	r1, [pc, #192]	; (8002188 <I2C_MasterRequestRead+0x194>)
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f8b9 	bl	800223e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e054      	b.n	8002180 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020d6:	897b      	ldrh	r3, [r7, #10]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4929      	ldr	r1, [pc, #164]	; (800218c <I2C_MasterRequestRead+0x198>)
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f8a9 	bl	800223e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e044      	b.n	8002180 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800211a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 f831 	bl	8002190 <I2C_WaitOnFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00d      	beq.n	8002150 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002142:	d103      	bne.n	800214c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e017      	b.n	8002180 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002150:	897b      	ldrh	r3, [r7, #10]
 8002152:	11db      	asrs	r3, r3, #7
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f003 0306 	and.w	r3, r3, #6
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f063 030e 	orn	r3, r3, #14
 8002160:	b2da      	uxtb	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4907      	ldr	r1, [pc, #28]	; (800218c <I2C_MasterRequestRead+0x198>)
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f865 	bl	800223e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	00010008 	.word	0x00010008
 800218c:	00010002 	.word	0x00010002

08002190 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a0:	e025      	b.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d021      	beq.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021aa:	f7fe ff35 	bl	8001018 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d302      	bcc.n	80021c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d116      	bne.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f043 0220 	orr.w	r2, r3, #32
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e023      	b.n	8002236 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10d      	bne.n	8002214 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	43da      	mvns	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4013      	ands	r3, r2
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	e00c      	b.n	800222e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4013      	ands	r3, r2
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf0c      	ite	eq
 8002226:	2301      	moveq	r3, #1
 8002228:	2300      	movne	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	429a      	cmp	r2, r3
 8002232:	d0b6      	beq.n	80021a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800224c:	e051      	b.n	80022f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225c:	d123      	bne.n	80022a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002276:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f043 0204 	orr.w	r2, r3, #4
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e046      	b.n	8002334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d021      	beq.n	80022f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ae:	f7fe feb3 	bl	8001018 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d116      	bne.n	80022f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f043 0220 	orr.w	r2, r3, #32
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e020      	b.n	8002334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10c      	bne.n	8002316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4013      	ands	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	e00b      	b.n	800232e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	43da      	mvns	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	4013      	ands	r3, r2
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d18d      	bne.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002348:	e02d      	b.n	80023a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f8ce 	bl	80024ec <I2C_IsAcknowledgeFailed>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e02d      	b.n	80023b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d021      	beq.n	80023a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002362:	f7fe fe59 	bl	8001018 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	429a      	cmp	r2, r3
 8002370:	d302      	bcc.n	8002378 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d116      	bne.n	80023a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f043 0220 	orr.w	r2, r3, #32
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e007      	b.n	80023b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d1ca      	bne.n	800234a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023ca:	e02d      	b.n	8002428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f88d 	bl	80024ec <I2C_IsAcknowledgeFailed>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e02d      	b.n	8002438 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e2:	d021      	beq.n	8002428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e4:	f7fe fe18 	bl	8001018 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d302      	bcc.n	80023fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f043 0220 	orr.w	r2, r3, #32
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e007      	b.n	8002438 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b04      	cmp	r3, #4
 8002434:	d1ca      	bne.n	80023cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800244c:	e042      	b.n	80024d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b10      	cmp	r3, #16
 800245a:	d119      	bne.n	8002490 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 0210 	mvn.w	r2, #16
 8002464:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e029      	b.n	80024e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002490:	f7fe fdc2 	bl	8001018 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	429a      	cmp	r2, r3
 800249e:	d302      	bcc.n	80024a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d116      	bne.n	80024d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e007      	b.n	80024e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b40      	cmp	r3, #64	; 0x40
 80024e0:	d1b5      	bne.n	800244e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002502:	d11b      	bne.n	800253c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800250c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f043 0204 	orr.w	r2, r3, #4
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0cc      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d90c      	bls.n	8002588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b65      	ldr	r3, [pc, #404]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0b8      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	494d      	ldr	r1, [pc, #308]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d044      	beq.n	800266c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d119      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d003      	beq.n	800260a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002606:	2b03      	cmp	r3, #3
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e06f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e067      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262a:	4b37      	ldr	r3, [pc, #220]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f023 0203 	bic.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4934      	ldr	r1, [pc, #208]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	4313      	orrs	r3, r2
 800263a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800263c:	f7fe fcec 	bl	8001018 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	e00a      	b.n	800265a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002644:	f7fe fce8 	bl	8001018 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e04f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 020c 	and.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d1eb      	bne.n	8002644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d20c      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e032      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4916      	ldr	r1, [pc, #88]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	490e      	ldr	r1, [pc, #56]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026d2:	f000 f855 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 80026d6:	4601      	mov	r1, r0
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	5cd3      	ldrb	r3, [r2, r3]
 80026e6:	fa21 f303 	lsr.w	r3, r1, r3
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fc4c 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40023c00 	.word	0x40023c00
 8002708:	40023800 	.word	0x40023800
 800270c:	08009b94 	.word	0x08009b94
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4601      	mov	r1, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4a03      	ldr	r2, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	08009ba4 	.word	0x08009ba4

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff ffdc 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002760:	4601      	mov	r1, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0b5b      	lsrs	r3, r3, #13
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4a03      	ldr	r2, [pc, #12]	; (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5cd3      	ldrb	r3, [r2, r3]
 8002770:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	08009ba4 	.word	0x08009ba4

08002780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800279a:	4bc6      	ldr	r3, [pc, #792]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	f200 817e 	bhi.w	8002aa4 <HAL_RCC_GetSysClockFreq+0x324>
 80027a8:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <HAL_RCC_GetSysClockFreq+0x30>)
 80027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ae:	bf00      	nop
 80027b0:	080027e5 	.word	0x080027e5
 80027b4:	08002aa5 	.word	0x08002aa5
 80027b8:	08002aa5 	.word	0x08002aa5
 80027bc:	08002aa5 	.word	0x08002aa5
 80027c0:	080027eb 	.word	0x080027eb
 80027c4:	08002aa5 	.word	0x08002aa5
 80027c8:	08002aa5 	.word	0x08002aa5
 80027cc:	08002aa5 	.word	0x08002aa5
 80027d0:	080027f1 	.word	0x080027f1
 80027d4:	08002aa5 	.word	0x08002aa5
 80027d8:	08002aa5 	.word	0x08002aa5
 80027dc:	08002aa5 	.word	0x08002aa5
 80027e0:	0800294d 	.word	0x0800294d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4bb4      	ldr	r3, [pc, #720]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x338>)
 80027e6:	613b      	str	r3, [r7, #16]
       break;
 80027e8:	e15f      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ea:	4bb4      	ldr	r3, [pc, #720]	; (8002abc <HAL_RCC_GetSysClockFreq+0x33c>)
 80027ec:	613b      	str	r3, [r7, #16]
      break;
 80027ee:	e15c      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f0:	4bb0      	ldr	r3, [pc, #704]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027fa:	4bae      	ldr	r3, [pc, #696]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d04a      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002806:	4bab      	ldr	r3, [pc, #684]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	099b      	lsrs	r3, r3, #6
 800280c:	f04f 0400 	mov.w	r4, #0
 8002810:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	ea03 0501 	and.w	r5, r3, r1
 800281c:	ea04 0602 	and.w	r6, r4, r2
 8002820:	4629      	mov	r1, r5
 8002822:	4632      	mov	r2, r6
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	f04f 0400 	mov.w	r4, #0
 800282c:	0154      	lsls	r4, r2, #5
 800282e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002832:	014b      	lsls	r3, r1, #5
 8002834:	4619      	mov	r1, r3
 8002836:	4622      	mov	r2, r4
 8002838:	1b49      	subs	r1, r1, r5
 800283a:	eb62 0206 	sbc.w	r2, r2, r6
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	f04f 0400 	mov.w	r4, #0
 8002846:	0194      	lsls	r4, r2, #6
 8002848:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800284c:	018b      	lsls	r3, r1, #6
 800284e:	1a5b      	subs	r3, r3, r1
 8002850:	eb64 0402 	sbc.w	r4, r4, r2
 8002854:	f04f 0100 	mov.w	r1, #0
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	00e2      	lsls	r2, r4, #3
 800285e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002862:	00d9      	lsls	r1, r3, #3
 8002864:	460b      	mov	r3, r1
 8002866:	4614      	mov	r4, r2
 8002868:	195b      	adds	r3, r3, r5
 800286a:	eb44 0406 	adc.w	r4, r4, r6
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	0262      	lsls	r2, r4, #9
 8002878:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800287c:	0259      	lsls	r1, r3, #9
 800287e:	460b      	mov	r3, r1
 8002880:	4614      	mov	r4, r2
 8002882:	4618      	mov	r0, r3
 8002884:	4621      	mov	r1, r4
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f04f 0400 	mov.w	r4, #0
 800288c:	461a      	mov	r2, r3
 800288e:	4623      	mov	r3, r4
 8002890:	f7fd fd0e 	bl	80002b0 <__aeabi_uldivmod>
 8002894:	4603      	mov	r3, r0
 8002896:	460c      	mov	r4, r1
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	e049      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289c:	4b85      	ldr	r3, [pc, #532]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	099b      	lsrs	r3, r3, #6
 80028a2:	f04f 0400 	mov.w	r4, #0
 80028a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	ea03 0501 	and.w	r5, r3, r1
 80028b2:	ea04 0602 	and.w	r6, r4, r2
 80028b6:	4629      	mov	r1, r5
 80028b8:	4632      	mov	r2, r6
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	f04f 0400 	mov.w	r4, #0
 80028c2:	0154      	lsls	r4, r2, #5
 80028c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028c8:	014b      	lsls	r3, r1, #5
 80028ca:	4619      	mov	r1, r3
 80028cc:	4622      	mov	r2, r4
 80028ce:	1b49      	subs	r1, r1, r5
 80028d0:	eb62 0206 	sbc.w	r2, r2, r6
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	f04f 0400 	mov.w	r4, #0
 80028dc:	0194      	lsls	r4, r2, #6
 80028de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028e2:	018b      	lsls	r3, r1, #6
 80028e4:	1a5b      	subs	r3, r3, r1
 80028e6:	eb64 0402 	sbc.w	r4, r4, r2
 80028ea:	f04f 0100 	mov.w	r1, #0
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	00e2      	lsls	r2, r4, #3
 80028f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028f8:	00d9      	lsls	r1, r3, #3
 80028fa:	460b      	mov	r3, r1
 80028fc:	4614      	mov	r4, r2
 80028fe:	195b      	adds	r3, r3, r5
 8002900:	eb44 0406 	adc.w	r4, r4, r6
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	02a2      	lsls	r2, r4, #10
 800290e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002912:	0299      	lsls	r1, r3, #10
 8002914:	460b      	mov	r3, r1
 8002916:	4614      	mov	r4, r2
 8002918:	4618      	mov	r0, r3
 800291a:	4621      	mov	r1, r4
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f04f 0400 	mov.w	r4, #0
 8002922:	461a      	mov	r2, r3
 8002924:	4623      	mov	r3, r4
 8002926:	f7fd fcc3 	bl	80002b0 <__aeabi_uldivmod>
 800292a:	4603      	mov	r3, r0
 800292c:	460c      	mov	r4, r1
 800292e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002930:	4b60      	ldr	r3, [pc, #384]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	0c1b      	lsrs	r3, r3, #16
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	3301      	adds	r3, #1
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	613b      	str	r3, [r7, #16]
      break;
 800294a:	e0ae      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002954:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002956:	4b57      	ldr	r3, [pc, #348]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d04a      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002962:	4b54      	ldr	r3, [pc, #336]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	f04f 0400 	mov.w	r4, #0
 800296c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	ea03 0501 	and.w	r5, r3, r1
 8002978:	ea04 0602 	and.w	r6, r4, r2
 800297c:	4629      	mov	r1, r5
 800297e:	4632      	mov	r2, r6
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	f04f 0400 	mov.w	r4, #0
 8002988:	0154      	lsls	r4, r2, #5
 800298a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800298e:	014b      	lsls	r3, r1, #5
 8002990:	4619      	mov	r1, r3
 8002992:	4622      	mov	r2, r4
 8002994:	1b49      	subs	r1, r1, r5
 8002996:	eb62 0206 	sbc.w	r2, r2, r6
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	f04f 0400 	mov.w	r4, #0
 80029a2:	0194      	lsls	r4, r2, #6
 80029a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029a8:	018b      	lsls	r3, r1, #6
 80029aa:	1a5b      	subs	r3, r3, r1
 80029ac:	eb64 0402 	sbc.w	r4, r4, r2
 80029b0:	f04f 0100 	mov.w	r1, #0
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	00e2      	lsls	r2, r4, #3
 80029ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029be:	00d9      	lsls	r1, r3, #3
 80029c0:	460b      	mov	r3, r1
 80029c2:	4614      	mov	r4, r2
 80029c4:	195b      	adds	r3, r3, r5
 80029c6:	eb44 0406 	adc.w	r4, r4, r6
 80029ca:	f04f 0100 	mov.w	r1, #0
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	0262      	lsls	r2, r4, #9
 80029d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029d8:	0259      	lsls	r1, r3, #9
 80029da:	460b      	mov	r3, r1
 80029dc:	4614      	mov	r4, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	4621      	mov	r1, r4
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f04f 0400 	mov.w	r4, #0
 80029e8:	461a      	mov	r2, r3
 80029ea:	4623      	mov	r3, r4
 80029ec:	f7fd fc60 	bl	80002b0 <__aeabi_uldivmod>
 80029f0:	4603      	mov	r3, r0
 80029f2:	460c      	mov	r4, r1
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	e049      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f8:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	f04f 0400 	mov.w	r4, #0
 8002a02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	ea03 0501 	and.w	r5, r3, r1
 8002a0e:	ea04 0602 	and.w	r6, r4, r2
 8002a12:	4629      	mov	r1, r5
 8002a14:	4632      	mov	r2, r6
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	f04f 0400 	mov.w	r4, #0
 8002a1e:	0154      	lsls	r4, r2, #5
 8002a20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a24:	014b      	lsls	r3, r1, #5
 8002a26:	4619      	mov	r1, r3
 8002a28:	4622      	mov	r2, r4
 8002a2a:	1b49      	subs	r1, r1, r5
 8002a2c:	eb62 0206 	sbc.w	r2, r2, r6
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	f04f 0400 	mov.w	r4, #0
 8002a38:	0194      	lsls	r4, r2, #6
 8002a3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a3e:	018b      	lsls	r3, r1, #6
 8002a40:	1a5b      	subs	r3, r3, r1
 8002a42:	eb64 0402 	sbc.w	r4, r4, r2
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	00e2      	lsls	r2, r4, #3
 8002a50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a54:	00d9      	lsls	r1, r3, #3
 8002a56:	460b      	mov	r3, r1
 8002a58:	4614      	mov	r4, r2
 8002a5a:	195b      	adds	r3, r3, r5
 8002a5c:	eb44 0406 	adc.w	r4, r4, r6
 8002a60:	f04f 0100 	mov.w	r1, #0
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	02a2      	lsls	r2, r4, #10
 8002a6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a6e:	0299      	lsls	r1, r3, #10
 8002a70:	460b      	mov	r3, r1
 8002a72:	4614      	mov	r4, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	4621      	mov	r1, r4
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f04f 0400 	mov.w	r4, #0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4623      	mov	r3, r4
 8002a82:	f7fd fc15 	bl	80002b0 <__aeabi_uldivmod>
 8002a86:	4603      	mov	r3, r0
 8002a88:	460c      	mov	r4, r1
 8002a8a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0f1b      	lsrs	r3, r3, #28
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa0:	613b      	str	r3, [r7, #16]
      break;
 8002aa2:	e002      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x338>)
 8002aa6:	613b      	str	r3, [r7, #16]
      break;
 8002aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aaa:	693b      	ldr	r3, [r7, #16]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	00f42400 	.word	0x00f42400
 8002abc:	007a1200 	.word	0x007a1200

08002ac0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8083 	beq.w	8002be0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ada:	4b95      	ldr	r3, [pc, #596]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d019      	beq.n	8002b1a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ae6:	4b92      	ldr	r3, [pc, #584]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d106      	bne.n	8002b00 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002af2:	4b8f      	ldr	r3, [pc, #572]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afe:	d00c      	beq.n	8002b1a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b00:	4b8b      	ldr	r3, [pc, #556]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b08:	2b0c      	cmp	r3, #12
 8002b0a:	d112      	bne.n	8002b32 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0c:	4b88      	ldr	r3, [pc, #544]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b18:	d10b      	bne.n	8002b32 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1a:	4b85      	ldr	r3, [pc, #532]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d05b      	beq.n	8002bde <HAL_RCC_OscConfig+0x11e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d157      	bne.n	8002bde <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e216      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x8a>
 8002b3c:	4b7c      	ldr	r3, [pc, #496]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a7b      	ldr	r2, [pc, #492]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	e01d      	b.n	8002b86 <HAL_RCC_OscConfig+0xc6>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b52:	d10c      	bne.n	8002b6e <HAL_RCC_OscConfig+0xae>
 8002b54:	4b76      	ldr	r3, [pc, #472]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a75      	ldr	r2, [pc, #468]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b73      	ldr	r3, [pc, #460]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a72      	ldr	r2, [pc, #456]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	e00b      	b.n	8002b86 <HAL_RCC_OscConfig+0xc6>
 8002b6e:	4b70      	ldr	r3, [pc, #448]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a6f      	ldr	r2, [pc, #444]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a6c      	ldr	r2, [pc, #432]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d013      	beq.n	8002bb6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fa43 	bl	8001018 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b96:	f7fe fa3f 	bl	8001018 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	; 0x64
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e1db      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba8:	4b61      	ldr	r3, [pc, #388]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0xd6>
 8002bb4:	e014      	b.n	8002be0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fa2f 	bl	8001018 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bbe:	f7fe fa2b 	bl	8001018 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b64      	cmp	r3, #100	; 0x64
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e1c7      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd0:	4b57      	ldr	r3, [pc, #348]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f0      	bne.n	8002bbe <HAL_RCC_OscConfig+0xfe>
 8002bdc:	e000      	b.n	8002be0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bde:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d06f      	beq.n	8002ccc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d017      	beq.n	8002c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bf8:	4b4d      	ldr	r3, [pc, #308]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d105      	bne.n	8002c10 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c04:	4b4a      	ldr	r3, [pc, #296]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00b      	beq.n	8002c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c10:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	d11c      	bne.n	8002c56 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1c:	4b44      	ldr	r3, [pc, #272]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d116      	bne.n	8002c56 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c28:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_OscConfig+0x180>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e18f      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c40:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4938      	ldr	r1, [pc, #224]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c54:	e03a      	b.n	8002ccc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d020      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c5e:	4b35      	ldr	r3, [pc, #212]	; (8002d34 <HAL_RCC_OscConfig+0x274>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe f9d8 	bl	8001018 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6c:	f7fe f9d4 	bl	8001018 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e170      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b29      	ldr	r3, [pc, #164]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4925      	ldr	r1, [pc, #148]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
 8002c9e:	e015      	b.n	8002ccc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca0:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <HAL_RCC_OscConfig+0x274>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe f9b7 	bl	8001018 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fe f9b3 	bl	8001018 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e14f      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f0      	bne.n	8002cae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d037      	beq.n	8002d48 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d016      	beq.n	8002d0e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce0:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_RCC_OscConfig+0x278>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fe f997 	bl	8001018 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cee:	f7fe f993 	bl	8001018 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e12f      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x22e>
 8002d0c:	e01c      	b.n	8002d48 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_RCC_OscConfig+0x278>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d14:	f7fe f980 	bl	8001018 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1a:	e00f      	b.n	8002d3c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7fe f97c 	bl	8001018 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d908      	bls.n	8002d3c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e118      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	42470000 	.word	0x42470000
 8002d38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3c:	4b8a      	ldr	r3, [pc, #552]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e9      	bne.n	8002d1c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8097 	beq.w	8002e84 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5a:	4b83      	ldr	r3, [pc, #524]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10f      	bne.n	8002d86 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b7f      	ldr	r3, [pc, #508]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a7e      	ldr	r2, [pc, #504]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b7c      	ldr	r3, [pc, #496]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d86:	4b79      	ldr	r3, [pc, #484]	; (8002f6c <HAL_RCC_OscConfig+0x4ac>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d118      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d92:	4b76      	ldr	r3, [pc, #472]	; (8002f6c <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a75      	ldr	r2, [pc, #468]	; (8002f6c <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9e:	f7fe f93b 	bl	8001018 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da6:	f7fe f937 	bl	8001018 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0d3      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db8:	4b6c      	ldr	r3, [pc, #432]	; (8002f6c <HAL_RCC_OscConfig+0x4ac>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x31a>
 8002dcc:	4b66      	ldr	r3, [pc, #408]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	4a65      	ldr	r2, [pc, #404]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd8:	e01c      	b.n	8002e14 <HAL_RCC_OscConfig+0x354>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b05      	cmp	r3, #5
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x33c>
 8002de2:	4b61      	ldr	r3, [pc, #388]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	4a60      	ldr	r2, [pc, #384]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002de8:	f043 0304 	orr.w	r3, r3, #4
 8002dec:	6713      	str	r3, [r2, #112]	; 0x70
 8002dee:	4b5e      	ldr	r3, [pc, #376]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	4a5d      	ldr	r2, [pc, #372]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_OscConfig+0x354>
 8002dfc:	4b5a      	ldr	r3, [pc, #360]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	4a59      	ldr	r2, [pc, #356]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002e02:	f023 0301 	bic.w	r3, r3, #1
 8002e06:	6713      	str	r3, [r2, #112]	; 0x70
 8002e08:	4b57      	ldr	r3, [pc, #348]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	4a56      	ldr	r2, [pc, #344]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002e0e:	f023 0304 	bic.w	r3, r3, #4
 8002e12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d015      	beq.n	8002e48 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe f8fc 	bl	8001018 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e24:	f7fe f8f8 	bl	8001018 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e092      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3a:	4b4b      	ldr	r3, [pc, #300]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0ee      	beq.n	8002e24 <HAL_RCC_OscConfig+0x364>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f7fe f8e6 	bl	8001018 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e50:	f7fe f8e2 	bl	8001018 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e07c      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e66:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1ee      	bne.n	8002e50 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e78:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	4a3a      	ldr	r2, [pc, #232]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d068      	beq.n	8002f5e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e8c:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d060      	beq.n	8002f5a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d145      	bne.n	8002f2c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea0:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <HAL_RCC_OscConfig+0x4b0>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7fe f8b7 	bl	8001018 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eae:	f7fe f8b3 	bl	8001018 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e04f      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec0:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f0      	bne.n	8002eae <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69da      	ldr	r2, [r3, #28]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	019b      	lsls	r3, r3, #6
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	041b      	lsls	r3, r3, #16
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	061b      	lsls	r3, r3, #24
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	071b      	lsls	r3, r3, #28
 8002ef8:	491b      	ldr	r1, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efe:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <HAL_RCC_OscConfig+0x4b0>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe f888 	bl	8001018 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe f884 	bl	8001018 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e020      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x44c>
 8002f2a:	e018      	b.n	8002f5e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2c:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_RCC_OscConfig+0x4b0>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe f871 	bl	8001018 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe f86d 	bl	8001018 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e009      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_RCC_OscConfig+0x4a8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x47a>
 8002f58:	e001      	b.n	8002f5e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	42470060 	.word	0x42470060

08002f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e03f      	b.n	8003006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fd ff64 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2224      	movs	r2, #36	; 0x24
 8002fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f9b1 	bl	8003320 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b088      	sub	sp, #32
 8003012:	af02      	add	r7, sp, #8
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	603b      	str	r3, [r7, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b20      	cmp	r3, #32
 800302c:	f040 8083 	bne.w	8003136 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_UART_Transmit+0x2e>
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e07b      	b.n	8003138 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_UART_Transmit+0x40>
 800304a:	2302      	movs	r3, #2
 800304c:	e074      	b.n	8003138 <HAL_UART_Transmit+0x12a>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2221      	movs	r2, #33	; 0x21
 8003060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003064:	f7fd ffd8 	bl	8001018 <HAL_GetTick>
 8003068:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800307e:	e042      	b.n	8003106 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	d122      	bne.n	80030de <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2200      	movs	r2, #0
 80030a0:	2180      	movs	r1, #128	; 0x80
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f8f2 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e042      	b.n	8003138 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d103      	bne.n	80030d6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3302      	adds	r3, #2
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	e017      	b.n	8003106 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	3301      	adds	r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	e013      	b.n	8003106 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f8cf 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e01f      	b.n	8003138 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	60ba      	str	r2, [r7, #8]
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1b7      	bne.n	8003080 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2200      	movs	r2, #0
 8003118:	2140      	movs	r1, #64	; 0x40
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f8b6 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e006      	b.n	8003138 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003136:	2302      	movs	r3, #2
  }
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b20      	cmp	r3, #32
 800315e:	f040 8090 	bne.w	8003282 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_UART_Receive+0x2e>
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e088      	b.n	8003284 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_UART_Receive+0x40>
 800317c:	2302      	movs	r3, #2
 800317e:	e081      	b.n	8003284 <HAL_UART_Receive+0x144>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2222      	movs	r2, #34	; 0x22
 8003192:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003196:	f7fd ff3f 	bl	8001018 <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	88fa      	ldrh	r2, [r7, #6]
 80031a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80031b0:	e05c      	b.n	800326c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c8:	d12b      	bne.n	8003222 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2120      	movs	r1, #32
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f859 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e04f      	b.n	8003284 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10c      	bne.n	800320a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3302      	adds	r3, #2
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	e030      	b.n	800326c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	b29b      	uxth	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	b29a      	uxth	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	3301      	adds	r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	e024      	b.n	800326c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	2120      	movs	r1, #32
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f82d 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e023      	b.n	8003284 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d108      	bne.n	8003256 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	60ba      	str	r2, [r7, #8]
 8003250:	b2ca      	uxtb	r2, r1
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e00a      	b.n	800326c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1c59      	adds	r1, r3, #1
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d19d      	bne.n	80031b2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e000      	b.n	8003284 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003282:	2302      	movs	r3, #2
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329c:	e02c      	b.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d028      	beq.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d007      	beq.n	80032bc <UART_WaitOnFlagUntilTimeout+0x30>
 80032ac:	f7fd feb4 	bl	8001018 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d21d      	bcs.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e00f      	b.n	8003318 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4013      	ands	r3, r2
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	429a      	cmp	r2, r3
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	429a      	cmp	r2, r3
 8003314:	d0c3      	beq.n	800329e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003362:	f023 030c 	bic.w	r3, r3, #12
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	68f9      	ldr	r1, [r7, #12]
 800336c:	430b      	orrs	r3, r1
 800336e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800338e:	f040 818b 	bne.w	80036a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4ac1      	ldr	r2, [pc, #772]	; (800369c <UART_SetConfig+0x37c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d005      	beq.n	80033a8 <UART_SetConfig+0x88>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4abf      	ldr	r2, [pc, #764]	; (80036a0 <UART_SetConfig+0x380>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	f040 80bd 	bne.w	8003522 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033a8:	f7ff f9d6 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 80033ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	461d      	mov	r5, r3
 80033b2:	f04f 0600 	mov.w	r6, #0
 80033b6:	46a8      	mov	r8, r5
 80033b8:	46b1      	mov	r9, r6
 80033ba:	eb18 0308 	adds.w	r3, r8, r8
 80033be:	eb49 0409 	adc.w	r4, r9, r9
 80033c2:	4698      	mov	r8, r3
 80033c4:	46a1      	mov	r9, r4
 80033c6:	eb18 0805 	adds.w	r8, r8, r5
 80033ca:	eb49 0906 	adc.w	r9, r9, r6
 80033ce:	f04f 0100 	mov.w	r1, #0
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033e2:	4688      	mov	r8, r1
 80033e4:	4691      	mov	r9, r2
 80033e6:	eb18 0005 	adds.w	r0, r8, r5
 80033ea:	eb49 0106 	adc.w	r1, r9, r6
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	461d      	mov	r5, r3
 80033f4:	f04f 0600 	mov.w	r6, #0
 80033f8:	196b      	adds	r3, r5, r5
 80033fa:	eb46 0406 	adc.w	r4, r6, r6
 80033fe:	461a      	mov	r2, r3
 8003400:	4623      	mov	r3, r4
 8003402:	f7fc ff55 	bl	80002b0 <__aeabi_uldivmod>
 8003406:	4603      	mov	r3, r0
 8003408:	460c      	mov	r4, r1
 800340a:	461a      	mov	r2, r3
 800340c:	4ba5      	ldr	r3, [pc, #660]	; (80036a4 <UART_SetConfig+0x384>)
 800340e:	fba3 2302 	umull	r2, r3, r3, r2
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	461d      	mov	r5, r3
 800341c:	f04f 0600 	mov.w	r6, #0
 8003420:	46a9      	mov	r9, r5
 8003422:	46b2      	mov	sl, r6
 8003424:	eb19 0309 	adds.w	r3, r9, r9
 8003428:	eb4a 040a 	adc.w	r4, sl, sl
 800342c:	4699      	mov	r9, r3
 800342e:	46a2      	mov	sl, r4
 8003430:	eb19 0905 	adds.w	r9, r9, r5
 8003434:	eb4a 0a06 	adc.w	sl, sl, r6
 8003438:	f04f 0100 	mov.w	r1, #0
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003444:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003448:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800344c:	4689      	mov	r9, r1
 800344e:	4692      	mov	sl, r2
 8003450:	eb19 0005 	adds.w	r0, r9, r5
 8003454:	eb4a 0106 	adc.w	r1, sl, r6
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	461d      	mov	r5, r3
 800345e:	f04f 0600 	mov.w	r6, #0
 8003462:	196b      	adds	r3, r5, r5
 8003464:	eb46 0406 	adc.w	r4, r6, r6
 8003468:	461a      	mov	r2, r3
 800346a:	4623      	mov	r3, r4
 800346c:	f7fc ff20 	bl	80002b0 <__aeabi_uldivmod>
 8003470:	4603      	mov	r3, r0
 8003472:	460c      	mov	r4, r1
 8003474:	461a      	mov	r2, r3
 8003476:	4b8b      	ldr	r3, [pc, #556]	; (80036a4 <UART_SetConfig+0x384>)
 8003478:	fba3 1302 	umull	r1, r3, r3, r2
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	2164      	movs	r1, #100	; 0x64
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	3332      	adds	r3, #50	; 0x32
 800348a:	4a86      	ldr	r2, [pc, #536]	; (80036a4 <UART_SetConfig+0x384>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003498:	4498      	add	r8, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	461d      	mov	r5, r3
 800349e:	f04f 0600 	mov.w	r6, #0
 80034a2:	46a9      	mov	r9, r5
 80034a4:	46b2      	mov	sl, r6
 80034a6:	eb19 0309 	adds.w	r3, r9, r9
 80034aa:	eb4a 040a 	adc.w	r4, sl, sl
 80034ae:	4699      	mov	r9, r3
 80034b0:	46a2      	mov	sl, r4
 80034b2:	eb19 0905 	adds.w	r9, r9, r5
 80034b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034ce:	4689      	mov	r9, r1
 80034d0:	4692      	mov	sl, r2
 80034d2:	eb19 0005 	adds.w	r0, r9, r5
 80034d6:	eb4a 0106 	adc.w	r1, sl, r6
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	461d      	mov	r5, r3
 80034e0:	f04f 0600 	mov.w	r6, #0
 80034e4:	196b      	adds	r3, r5, r5
 80034e6:	eb46 0406 	adc.w	r4, r6, r6
 80034ea:	461a      	mov	r2, r3
 80034ec:	4623      	mov	r3, r4
 80034ee:	f7fc fedf 	bl	80002b0 <__aeabi_uldivmod>
 80034f2:	4603      	mov	r3, r0
 80034f4:	460c      	mov	r4, r1
 80034f6:	461a      	mov	r2, r3
 80034f8:	4b6a      	ldr	r3, [pc, #424]	; (80036a4 <UART_SetConfig+0x384>)
 80034fa:	fba3 1302 	umull	r1, r3, r3, r2
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	2164      	movs	r1, #100	; 0x64
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	3332      	adds	r3, #50	; 0x32
 800350c:	4a65      	ldr	r2, [pc, #404]	; (80036a4 <UART_SetConfig+0x384>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	f003 0207 	and.w	r2, r3, #7
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4442      	add	r2, r8
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	e26f      	b.n	8003a02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003522:	f7ff f905 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8003526:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	461d      	mov	r5, r3
 800352c:	f04f 0600 	mov.w	r6, #0
 8003530:	46a8      	mov	r8, r5
 8003532:	46b1      	mov	r9, r6
 8003534:	eb18 0308 	adds.w	r3, r8, r8
 8003538:	eb49 0409 	adc.w	r4, r9, r9
 800353c:	4698      	mov	r8, r3
 800353e:	46a1      	mov	r9, r4
 8003540:	eb18 0805 	adds.w	r8, r8, r5
 8003544:	eb49 0906 	adc.w	r9, r9, r6
 8003548:	f04f 0100 	mov.w	r1, #0
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003554:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003558:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800355c:	4688      	mov	r8, r1
 800355e:	4691      	mov	r9, r2
 8003560:	eb18 0005 	adds.w	r0, r8, r5
 8003564:	eb49 0106 	adc.w	r1, r9, r6
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	461d      	mov	r5, r3
 800356e:	f04f 0600 	mov.w	r6, #0
 8003572:	196b      	adds	r3, r5, r5
 8003574:	eb46 0406 	adc.w	r4, r6, r6
 8003578:	461a      	mov	r2, r3
 800357a:	4623      	mov	r3, r4
 800357c:	f7fc fe98 	bl	80002b0 <__aeabi_uldivmod>
 8003580:	4603      	mov	r3, r0
 8003582:	460c      	mov	r4, r1
 8003584:	461a      	mov	r2, r3
 8003586:	4b47      	ldr	r3, [pc, #284]	; (80036a4 <UART_SetConfig+0x384>)
 8003588:	fba3 2302 	umull	r2, r3, r3, r2
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	461d      	mov	r5, r3
 8003596:	f04f 0600 	mov.w	r6, #0
 800359a:	46a9      	mov	r9, r5
 800359c:	46b2      	mov	sl, r6
 800359e:	eb19 0309 	adds.w	r3, r9, r9
 80035a2:	eb4a 040a 	adc.w	r4, sl, sl
 80035a6:	4699      	mov	r9, r3
 80035a8:	46a2      	mov	sl, r4
 80035aa:	eb19 0905 	adds.w	r9, r9, r5
 80035ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80035b2:	f04f 0100 	mov.w	r1, #0
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035c6:	4689      	mov	r9, r1
 80035c8:	4692      	mov	sl, r2
 80035ca:	eb19 0005 	adds.w	r0, r9, r5
 80035ce:	eb4a 0106 	adc.w	r1, sl, r6
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	461d      	mov	r5, r3
 80035d8:	f04f 0600 	mov.w	r6, #0
 80035dc:	196b      	adds	r3, r5, r5
 80035de:	eb46 0406 	adc.w	r4, r6, r6
 80035e2:	461a      	mov	r2, r3
 80035e4:	4623      	mov	r3, r4
 80035e6:	f7fc fe63 	bl	80002b0 <__aeabi_uldivmod>
 80035ea:	4603      	mov	r3, r0
 80035ec:	460c      	mov	r4, r1
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <UART_SetConfig+0x384>)
 80035f2:	fba3 1302 	umull	r1, r3, r3, r2
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2164      	movs	r1, #100	; 0x64
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	3332      	adds	r3, #50	; 0x32
 8003604:	4a27      	ldr	r2, [pc, #156]	; (80036a4 <UART_SetConfig+0x384>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003612:	4498      	add	r8, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	461d      	mov	r5, r3
 8003618:	f04f 0600 	mov.w	r6, #0
 800361c:	46a9      	mov	r9, r5
 800361e:	46b2      	mov	sl, r6
 8003620:	eb19 0309 	adds.w	r3, r9, r9
 8003624:	eb4a 040a 	adc.w	r4, sl, sl
 8003628:	4699      	mov	r9, r3
 800362a:	46a2      	mov	sl, r4
 800362c:	eb19 0905 	adds.w	r9, r9, r5
 8003630:	eb4a 0a06 	adc.w	sl, sl, r6
 8003634:	f04f 0100 	mov.w	r1, #0
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003640:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003644:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003648:	4689      	mov	r9, r1
 800364a:	4692      	mov	sl, r2
 800364c:	eb19 0005 	adds.w	r0, r9, r5
 8003650:	eb4a 0106 	adc.w	r1, sl, r6
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	461d      	mov	r5, r3
 800365a:	f04f 0600 	mov.w	r6, #0
 800365e:	196b      	adds	r3, r5, r5
 8003660:	eb46 0406 	adc.w	r4, r6, r6
 8003664:	461a      	mov	r2, r3
 8003666:	4623      	mov	r3, r4
 8003668:	f7fc fe22 	bl	80002b0 <__aeabi_uldivmod>
 800366c:	4603      	mov	r3, r0
 800366e:	460c      	mov	r4, r1
 8003670:	461a      	mov	r2, r3
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <UART_SetConfig+0x384>)
 8003674:	fba3 1302 	umull	r1, r3, r3, r2
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	2164      	movs	r1, #100	; 0x64
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	3332      	adds	r3, #50	; 0x32
 8003686:	4a07      	ldr	r2, [pc, #28]	; (80036a4 <UART_SetConfig+0x384>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	f003 0207 	and.w	r2, r3, #7
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4442      	add	r2, r8
 8003698:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800369a:	e1b2      	b.n	8003a02 <UART_SetConfig+0x6e2>
 800369c:	40011000 	.word	0x40011000
 80036a0:	40011400 	.word	0x40011400
 80036a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4ad7      	ldr	r2, [pc, #860]	; (8003a0c <UART_SetConfig+0x6ec>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d005      	beq.n	80036be <UART_SetConfig+0x39e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4ad6      	ldr	r2, [pc, #856]	; (8003a10 <UART_SetConfig+0x6f0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	f040 80d1 	bne.w	8003860 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80036be:	f7ff f84b 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 80036c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	469a      	mov	sl, r3
 80036c8:	f04f 0b00 	mov.w	fp, #0
 80036cc:	46d0      	mov	r8, sl
 80036ce:	46d9      	mov	r9, fp
 80036d0:	eb18 0308 	adds.w	r3, r8, r8
 80036d4:	eb49 0409 	adc.w	r4, r9, r9
 80036d8:	4698      	mov	r8, r3
 80036da:	46a1      	mov	r9, r4
 80036dc:	eb18 080a 	adds.w	r8, r8, sl
 80036e0:	eb49 090b 	adc.w	r9, r9, fp
 80036e4:	f04f 0100 	mov.w	r1, #0
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036f8:	4688      	mov	r8, r1
 80036fa:	4691      	mov	r9, r2
 80036fc:	eb1a 0508 	adds.w	r5, sl, r8
 8003700:	eb4b 0609 	adc.w	r6, fp, r9
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4619      	mov	r1, r3
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	f04f 0400 	mov.w	r4, #0
 8003716:	0094      	lsls	r4, r2, #2
 8003718:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800371c:	008b      	lsls	r3, r1, #2
 800371e:	461a      	mov	r2, r3
 8003720:	4623      	mov	r3, r4
 8003722:	4628      	mov	r0, r5
 8003724:	4631      	mov	r1, r6
 8003726:	f7fc fdc3 	bl	80002b0 <__aeabi_uldivmod>
 800372a:	4603      	mov	r3, r0
 800372c:	460c      	mov	r4, r1
 800372e:	461a      	mov	r2, r3
 8003730:	4bb8      	ldr	r3, [pc, #736]	; (8003a14 <UART_SetConfig+0x6f4>)
 8003732:	fba3 2302 	umull	r2, r3, r3, r2
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	469b      	mov	fp, r3
 8003740:	f04f 0c00 	mov.w	ip, #0
 8003744:	46d9      	mov	r9, fp
 8003746:	46e2      	mov	sl, ip
 8003748:	eb19 0309 	adds.w	r3, r9, r9
 800374c:	eb4a 040a 	adc.w	r4, sl, sl
 8003750:	4699      	mov	r9, r3
 8003752:	46a2      	mov	sl, r4
 8003754:	eb19 090b 	adds.w	r9, r9, fp
 8003758:	eb4a 0a0c 	adc.w	sl, sl, ip
 800375c:	f04f 0100 	mov.w	r1, #0
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003768:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800376c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003770:	4689      	mov	r9, r1
 8003772:	4692      	mov	sl, r2
 8003774:	eb1b 0509 	adds.w	r5, fp, r9
 8003778:	eb4c 060a 	adc.w	r6, ip, sl
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4619      	mov	r1, r3
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	f04f 0400 	mov.w	r4, #0
 800378e:	0094      	lsls	r4, r2, #2
 8003790:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003794:	008b      	lsls	r3, r1, #2
 8003796:	461a      	mov	r2, r3
 8003798:	4623      	mov	r3, r4
 800379a:	4628      	mov	r0, r5
 800379c:	4631      	mov	r1, r6
 800379e:	f7fc fd87 	bl	80002b0 <__aeabi_uldivmod>
 80037a2:	4603      	mov	r3, r0
 80037a4:	460c      	mov	r4, r1
 80037a6:	461a      	mov	r2, r3
 80037a8:	4b9a      	ldr	r3, [pc, #616]	; (8003a14 <UART_SetConfig+0x6f4>)
 80037aa:	fba3 1302 	umull	r1, r3, r3, r2
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2164      	movs	r1, #100	; 0x64
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	3332      	adds	r3, #50	; 0x32
 80037bc:	4a95      	ldr	r2, [pc, #596]	; (8003a14 <UART_SetConfig+0x6f4>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c8:	4498      	add	r8, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	469b      	mov	fp, r3
 80037ce:	f04f 0c00 	mov.w	ip, #0
 80037d2:	46d9      	mov	r9, fp
 80037d4:	46e2      	mov	sl, ip
 80037d6:	eb19 0309 	adds.w	r3, r9, r9
 80037da:	eb4a 040a 	adc.w	r4, sl, sl
 80037de:	4699      	mov	r9, r3
 80037e0:	46a2      	mov	sl, r4
 80037e2:	eb19 090b 	adds.w	r9, r9, fp
 80037e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037fe:	4689      	mov	r9, r1
 8003800:	4692      	mov	sl, r2
 8003802:	eb1b 0509 	adds.w	r5, fp, r9
 8003806:	eb4c 060a 	adc.w	r6, ip, sl
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4619      	mov	r1, r3
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	f04f 0400 	mov.w	r4, #0
 800381c:	0094      	lsls	r4, r2, #2
 800381e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003822:	008b      	lsls	r3, r1, #2
 8003824:	461a      	mov	r2, r3
 8003826:	4623      	mov	r3, r4
 8003828:	4628      	mov	r0, r5
 800382a:	4631      	mov	r1, r6
 800382c:	f7fc fd40 	bl	80002b0 <__aeabi_uldivmod>
 8003830:	4603      	mov	r3, r0
 8003832:	460c      	mov	r4, r1
 8003834:	461a      	mov	r2, r3
 8003836:	4b77      	ldr	r3, [pc, #476]	; (8003a14 <UART_SetConfig+0x6f4>)
 8003838:	fba3 1302 	umull	r1, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	2164      	movs	r1, #100	; 0x64
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	3332      	adds	r3, #50	; 0x32
 800384a:	4a72      	ldr	r2, [pc, #456]	; (8003a14 <UART_SetConfig+0x6f4>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	f003 020f 	and.w	r2, r3, #15
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4442      	add	r2, r8
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	e0d0      	b.n	8003a02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003860:	f7fe ff66 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8003864:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	469a      	mov	sl, r3
 800386a:	f04f 0b00 	mov.w	fp, #0
 800386e:	46d0      	mov	r8, sl
 8003870:	46d9      	mov	r9, fp
 8003872:	eb18 0308 	adds.w	r3, r8, r8
 8003876:	eb49 0409 	adc.w	r4, r9, r9
 800387a:	4698      	mov	r8, r3
 800387c:	46a1      	mov	r9, r4
 800387e:	eb18 080a 	adds.w	r8, r8, sl
 8003882:	eb49 090b 	adc.w	r9, r9, fp
 8003886:	f04f 0100 	mov.w	r1, #0
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003892:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003896:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800389a:	4688      	mov	r8, r1
 800389c:	4691      	mov	r9, r2
 800389e:	eb1a 0508 	adds.w	r5, sl, r8
 80038a2:	eb4b 0609 	adc.w	r6, fp, r9
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4619      	mov	r1, r3
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	f04f 0400 	mov.w	r4, #0
 80038b8:	0094      	lsls	r4, r2, #2
 80038ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038be:	008b      	lsls	r3, r1, #2
 80038c0:	461a      	mov	r2, r3
 80038c2:	4623      	mov	r3, r4
 80038c4:	4628      	mov	r0, r5
 80038c6:	4631      	mov	r1, r6
 80038c8:	f7fc fcf2 	bl	80002b0 <__aeabi_uldivmod>
 80038cc:	4603      	mov	r3, r0
 80038ce:	460c      	mov	r4, r1
 80038d0:	461a      	mov	r2, r3
 80038d2:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <UART_SetConfig+0x6f4>)
 80038d4:	fba3 2302 	umull	r2, r3, r3, r2
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	469b      	mov	fp, r3
 80038e2:	f04f 0c00 	mov.w	ip, #0
 80038e6:	46d9      	mov	r9, fp
 80038e8:	46e2      	mov	sl, ip
 80038ea:	eb19 0309 	adds.w	r3, r9, r9
 80038ee:	eb4a 040a 	adc.w	r4, sl, sl
 80038f2:	4699      	mov	r9, r3
 80038f4:	46a2      	mov	sl, r4
 80038f6:	eb19 090b 	adds.w	r9, r9, fp
 80038fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038fe:	f04f 0100 	mov.w	r1, #0
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800390a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800390e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003912:	4689      	mov	r9, r1
 8003914:	4692      	mov	sl, r2
 8003916:	eb1b 0509 	adds.w	r5, fp, r9
 800391a:	eb4c 060a 	adc.w	r6, ip, sl
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4619      	mov	r1, r3
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	f04f 0400 	mov.w	r4, #0
 8003930:	0094      	lsls	r4, r2, #2
 8003932:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003936:	008b      	lsls	r3, r1, #2
 8003938:	461a      	mov	r2, r3
 800393a:	4623      	mov	r3, r4
 800393c:	4628      	mov	r0, r5
 800393e:	4631      	mov	r1, r6
 8003940:	f7fc fcb6 	bl	80002b0 <__aeabi_uldivmod>
 8003944:	4603      	mov	r3, r0
 8003946:	460c      	mov	r4, r1
 8003948:	461a      	mov	r2, r3
 800394a:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <UART_SetConfig+0x6f4>)
 800394c:	fba3 1302 	umull	r1, r3, r3, r2
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	2164      	movs	r1, #100	; 0x64
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	3332      	adds	r3, #50	; 0x32
 800395e:	4a2d      	ldr	r2, [pc, #180]	; (8003a14 <UART_SetConfig+0x6f4>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396a:	4498      	add	r8, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	469b      	mov	fp, r3
 8003970:	f04f 0c00 	mov.w	ip, #0
 8003974:	46d9      	mov	r9, fp
 8003976:	46e2      	mov	sl, ip
 8003978:	eb19 0309 	adds.w	r3, r9, r9
 800397c:	eb4a 040a 	adc.w	r4, sl, sl
 8003980:	4699      	mov	r9, r3
 8003982:	46a2      	mov	sl, r4
 8003984:	eb19 090b 	adds.w	r9, r9, fp
 8003988:	eb4a 0a0c 	adc.w	sl, sl, ip
 800398c:	f04f 0100 	mov.w	r1, #0
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003998:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800399c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039a0:	4689      	mov	r9, r1
 80039a2:	4692      	mov	sl, r2
 80039a4:	eb1b 0509 	adds.w	r5, fp, r9
 80039a8:	eb4c 060a 	adc.w	r6, ip, sl
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4619      	mov	r1, r3
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	f04f 0400 	mov.w	r4, #0
 80039be:	0094      	lsls	r4, r2, #2
 80039c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039c4:	008b      	lsls	r3, r1, #2
 80039c6:	461a      	mov	r2, r3
 80039c8:	4623      	mov	r3, r4
 80039ca:	4628      	mov	r0, r5
 80039cc:	4631      	mov	r1, r6
 80039ce:	f7fc fc6f 	bl	80002b0 <__aeabi_uldivmod>
 80039d2:	4603      	mov	r3, r0
 80039d4:	460c      	mov	r4, r1
 80039d6:	461a      	mov	r2, r3
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <UART_SetConfig+0x6f4>)
 80039da:	fba3 1302 	umull	r1, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2164      	movs	r1, #100	; 0x64
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	3332      	adds	r3, #50	; 0x32
 80039ec:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <UART_SetConfig+0x6f4>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	f003 020f 	and.w	r2, r3, #15
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4442      	add	r2, r8
 80039fe:	609a      	str	r2, [r3, #8]
}
 8003a00:	e7ff      	b.n	8003a02 <UART_SetConfig+0x6e2>
 8003a02:	bf00      	nop
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0c:	40011000 	.word	0x40011000
 8003a10:	40011400 	.word	0x40011400
 8003a14:	51eb851f 	.word	0x51eb851f

08003a18 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8003a26:	6839      	ldr	r1, [r7, #0]
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f001 fcd8 	bl	80053de <VL53L0X_get_offset_calibration_data_micro_meter>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8003a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	218a      	movs	r1, #138	; 0x8a
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f004 fedb 	bl	8008814 <VL53L0X_WrByte>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8003a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b096      	sub	sp, #88	; 0x58
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8003a7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d107      	bne.n	8003a96 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8003a86:	2200      	movs	r2, #0
 8003a88:	2188      	movs	r1, #136	; 0x88
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f004 fec2 	bl	8008814 <VL53L0X_WrByte>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aa4:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003aae:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a9e      	ldr	r2, [pc, #632]	; (8003d30 <VL53L0X_DataInit+0x2c0>)
 8003ab6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a9d      	ldr	r2, [pc, #628]	; (8003d34 <VL53L0X_DataInit+0x2c4>)
 8003abe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fab4 	bl	800403c <VL53L0X_GetDeviceParameters>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8003ada:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d112      	bne.n	8003b08 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f103 0410 	add.w	r4, r3, #16
 8003af0:	f107 0510 	add.w	r5, r7, #16
 8003af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003b04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2264      	movs	r2, #100	; 0x64
 8003b0c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003b16:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b20:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003b2a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003b36:	2201      	movs	r2, #1
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f004 fe6a 	bl	8008814 <VL53L0X_WrByte>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b4e:	2201      	movs	r2, #1
 8003b50:	21ff      	movs	r1, #255	; 0xff
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f004 fe5e 	bl	8008814 <VL53L0X_WrByte>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003b66:	2200      	movs	r2, #0
 8003b68:	2100      	movs	r1, #0
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f004 fe52 	bl	8008814 <VL53L0X_WrByte>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461a      	mov	r2, r3
 8003b74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8003b7e:	f107 030f 	add.w	r3, r7, #15
 8003b82:	461a      	mov	r2, r3
 8003b84:	2191      	movs	r1, #145	; 0x91
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f004 fec6 	bl	8008918 <VL53L0X_RdByte>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f004 fe34 	bl	8008814 <VL53L0X_WrByte>
 8003bac:	4603      	mov	r3, r0
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	21ff      	movs	r1, #255	; 0xff
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f004 fe28 	bl	8008814 <VL53L0X_WrByte>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2180      	movs	r1, #128	; 0x80
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f004 fe1c 	bl	8008814 <VL53L0X_WrByte>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003bea:	2300      	movs	r3, #0
 8003bec:	653b      	str	r3, [r7, #80]	; 0x50
 8003bee:	e014      	b.n	8003c1a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8003bf0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d114      	bne.n	8003c22 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fd43 	bl	800468c <VL53L0X_SetLimitCheckEnable>
 8003c06:	4603      	mov	r3, r0
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c16:	3301      	adds	r3, #1
 8003c18:	653b      	str	r3, [r7, #80]	; 0x50
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1c:	2b05      	cmp	r3, #5
 8003c1e:	dde7      	ble.n	8003bf0 <VL53L0X_DataInit+0x180>
 8003c20:	e000      	b.n	8003c24 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8003c22:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8003c24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2102      	movs	r1, #2
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fd2b 	bl	800468c <VL53L0X_SetLimitCheckEnable>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003c3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d107      	bne.n	8003c54 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003c44:	2200      	movs	r2, #0
 8003c46:	2103      	movs	r1, #3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fd1f 	bl	800468c <VL53L0X_SetLimitCheckEnable>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003c54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d107      	bne.n	8003c6c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2104      	movs	r1, #4
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fd13 	bl	800468c <VL53L0X_SetLimitCheckEnable>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003c6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d107      	bne.n	8003c84 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003c74:	2200      	movs	r2, #0
 8003c76:	2105      	movs	r1, #5
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fd07 	bl	800468c <VL53L0X_SetLimitCheckEnable>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d108      	bne.n	8003c9e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003c8c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8003c90:	2100      	movs	r1, #0
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fdaa 	bl	80047ec <VL53L0X_SetLimitCheckValue>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003c9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d108      	bne.n	8003cb8 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003caa:	2101      	movs	r1, #1
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fd9d 	bl	80047ec <VL53L0X_SetLimitCheckValue>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d108      	bne.n	8003cd2 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003cc0:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fd90 	bl	80047ec <VL53L0X_SetLimitCheckValue>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2103      	movs	r1, #3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fd84 	bl	80047ec <VL53L0X_SetLimitCheckValue>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003cfa:	22ff      	movs	r2, #255	; 0xff
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f004 fd88 	bl	8008814 <VL53L0X_WrByte>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8003d12:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8003d22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3758      	adds	r7, #88	; 0x58
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	00016b85 	.word	0x00016b85
 8003d34:	000970a4 	.word	0x000970a4

08003d38 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8003d38:	b5b0      	push	{r4, r5, r7, lr}
 8003d3a:	b09e      	sub	sp, #120	; 0x78
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003d46:	f107 031c 	add.w	r3, r7, #28
 8003d4a:	2240      	movs	r2, #64	; 0x40
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f004 fec5 	bl	8008ade <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003d74:	2101      	movs	r1, #1
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f002 fa87 	bl	800628a <VL53L0X_get_info_from_device>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8003d88:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003d90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003d94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d80d      	bhi.n	8003db8 <VL53L0X_StaticInit+0x80>
 8003d9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d102      	bne.n	8003daa <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d806      	bhi.n	8003db8 <VL53L0X_StaticInit+0x80>
 8003daa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10e      	bne.n	8003dd0 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db4:	2b0c      	cmp	r3, #12
 8003db6:	d90b      	bls.n	8003dd0 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003db8:	f107 0218 	add.w	r2, r7, #24
 8003dbc:	f107 0314 	add.w	r3, r7, #20
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f001 fd06 	bl	80057d4 <VL53L0X_perform_ref_spad_management>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003dce:	e009      	b.n	8003de4 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f001 ff07 	bl	8005bec <VL53L0X_set_reference_spads>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003de4:	4b94      	ldr	r3, [pc, #592]	; (8004038 <VL53L0X_StaticInit+0x300>)
 8003de6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003de8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10f      	bne.n	8003e10 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003df6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003dfa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d104      	bne.n	8003e0c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e0a:	e001      	b.n	8003e10 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8003e0c:	4b8a      	ldr	r3, [pc, #552]	; (8004038 <VL53L0X_StaticInit+0x300>)
 8003e0e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003e10:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d106      	bne.n	8003e26 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003e18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f003 fdda 	bl	80079d4 <VL53L0X_load_tuning_settings>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e26:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2304      	movs	r3, #4
 8003e34:	2200      	movs	r2, #0
 8003e36:	2100      	movs	r1, #0
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f001 f8ff 	bl	800503c <VL53L0X_SetGpioConfig>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e44:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d121      	bne.n	8003e90 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	21ff      	movs	r1, #255	; 0xff
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f004 fcdf 	bl	8008814 <VL53L0X_WrByte>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003e5c:	f107 031a 	add.w	r3, r7, #26
 8003e60:	461a      	mov	r2, r3
 8003e62:	2184      	movs	r1, #132	; 0x84
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f004 fd81 	bl	800896c <VL53L0X_RdWord>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	21ff      	movs	r1, #255	; 0xff
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f004 fcc9 	bl	8008814 <VL53L0X_WrByte>
 8003e82:	4603      	mov	r3, r0
 8003e84:	461a      	mov	r2, r3
 8003e86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e90:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003e98:	8b7b      	ldrh	r3, [r7, #26]
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003ea4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d108      	bne.n	8003ebe <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003eac:	f107 031c 	add.w	r3, r7, #28
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f8c2 	bl	800403c <VL53L0X_GetDeviceParameters>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8003ebe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d110      	bne.n	8003ee8 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003ec6:	f107 0319 	add.w	r3, r7, #25
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f9a0 	bl	8004212 <VL53L0X_GetFractionEnable>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003ed8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003ee0:	7e7a      	ldrb	r2, [r7, #25]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003ee8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10e      	bne.n	8003f0e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f103 0410 	add.w	r4, r3, #16
 8003ef6:	f107 051c 	add.w	r5, r7, #28
 8003efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003f0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8003f0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d111      	bne.n	8003f3a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003f16:	f107 0319 	add.w	r3, r7, #25
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f004 fcfa 	bl	8008918 <VL53L0X_RdByte>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003f2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d103      	bne.n	8003f3a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003f32:	7e7a      	ldrb	r2, [r7, #25]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003f3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003f42:	2200      	movs	r2, #0
 8003f44:	2100      	movs	r1, #0
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f9d8 	bl	80042fc <VL53L0X_SetSequenceStepEnable>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003f52:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d107      	bne.n	8003f6a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f9cc 	bl	80042fc <VL53L0X_SetSequenceStepEnable>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003f6a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2203      	movs	r2, #3
 8003f76:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003f7a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003f82:	f107 0313 	add.w	r3, r7, #19
 8003f86:	461a      	mov	r2, r3
 8003f88:	2100      	movs	r1, #0
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f99e 	bl	80042cc <VL53L0X_GetVcselPulsePeriod>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003f96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d103      	bne.n	8003fa6 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003f9e:	7cfa      	ldrb	r2, [r7, #19]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003fa6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003fae:	f107 0313 	add.w	r3, r7, #19
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f988 	bl	80042cc <VL53L0X_GetVcselPulsePeriod>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003fc2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003fca:	7cfa      	ldrb	r2, [r7, #19]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003fd2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8003fda:	f107 030c 	add.w	r3, r7, #12
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2103      	movs	r1, #3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f002 fed2 	bl	8006d8c <get_sequence_step_timeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003fee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003ffe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8004006:	f107 030c 	add.w	r3, r7, #12
 800400a:	461a      	mov	r2, r3
 800400c:	2104      	movs	r1, #4
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f002 febc 	bl	8006d8c <get_sequence_step_timeout>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800401a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800401e:	2b00      	cmp	r3, #0
 8004020:	d103      	bne.n	800402a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800402a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800402e:	4618      	mov	r0, r3
 8004030:	3770      	adds	r7, #112	; 0x70
 8004032:	46bd      	mov	sp, r7
 8004034:	bdb0      	pop	{r4, r5, r7, pc}
 8004036:	bf00      	nop
 8004038:	2000000c 	.word	0x2000000c

0800403c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f8cc 	bl	80041ec <VL53L0X_GetDeviceMode>
 8004054:	4603      	mov	r3, r0
 8004056:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d107      	bne.n	8004070 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	3308      	adds	r3, #8
 8004064:	4619      	mov	r1, r3
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fa94 	bl	8004594 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800406c:	4603      	mov	r3, r0
 800406e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8004070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2200      	movs	r2, #0
 800407c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800407e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d107      	bne.n	8004096 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	3310      	adds	r3, #16
 800408a:	4619      	mov	r1, r3
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 faca 	bl	8004626 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8004092:	4603      	mov	r3, r0
 8004094:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8004096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d107      	bne.n	80040ae <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	3314      	adds	r3, #20
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fcb7 	bl	8003a18 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80040aa:	4603      	mov	r3, r0
 80040ac:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80040ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d134      	bne.n	8004120 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	e02a      	b.n	8004112 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80040bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d12a      	bne.n	800411a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	b299      	uxth	r1, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	3308      	adds	r3, #8
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	4413      	add	r3, r2
 80040d2:	3304      	adds	r3, #4
 80040d4:	461a      	mov	r2, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fbea 	bl	80048b0 <VL53L0X_GetLimitCheckValue>
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80040e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d117      	bne.n	800411e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	b299      	uxth	r1, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3318      	adds	r3, #24
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	4413      	add	r3, r2
 80040fa:	461a      	mov	r2, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fb51 	bl	80047a4 <VL53L0X_GetLimitCheckEnable>
 8004102:	4603      	mov	r3, r0
 8004104:	461a      	mov	r2, r3
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	4313      	orrs	r3, r2
 800410a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3301      	adds	r3, #1
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b05      	cmp	r3, #5
 8004116:	ddd1      	ble.n	80040bc <VL53L0X_GetDeviceParameters+0x80>
 8004118:	e002      	b.n	8004120 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800411e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d107      	bne.n	8004138 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	333c      	adds	r3, #60	; 0x3c
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fc4c 	bl	80049cc <VL53L0X_GetWrapAroundCheckEnable>
 8004134:	4603      	mov	r3, r0
 8004136:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8004138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d107      	bne.n	8004150 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f895 	bl	8004276 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004168:	2300      	movs	r3, #0
 800416a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	2b15      	cmp	r3, #21
 8004170:	d832      	bhi.n	80041d8 <VL53L0X_SetDeviceMode+0x7c>
 8004172:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <VL53L0X_SetDeviceMode+0x1c>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	080041d1 	.word	0x080041d1
 800417c:	080041d1 	.word	0x080041d1
 8004180:	080041d9 	.word	0x080041d9
 8004184:	080041d1 	.word	0x080041d1
 8004188:	080041d9 	.word	0x080041d9
 800418c:	080041d9 	.word	0x080041d9
 8004190:	080041d9 	.word	0x080041d9
 8004194:	080041d9 	.word	0x080041d9
 8004198:	080041d9 	.word	0x080041d9
 800419c:	080041d9 	.word	0x080041d9
 80041a0:	080041d9 	.word	0x080041d9
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080041d9 	.word	0x080041d9
 80041ac:	080041d9 	.word	0x080041d9
 80041b0:	080041d9 	.word	0x080041d9
 80041b4:	080041d9 	.word	0x080041d9
 80041b8:	080041d9 	.word	0x080041d9
 80041bc:	080041d9 	.word	0x080041d9
 80041c0:	080041d9 	.word	0x080041d9
 80041c4:	080041d9 	.word	0x080041d9
 80041c8:	080041d1 	.word	0x080041d1
 80041cc:	080041d1 	.word	0x080041d1
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	741a      	strb	r2, [r3, #16]
		break;
 80041d6:	e001      	b.n	80041dc <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80041d8:	23f8      	movs	r3, #248	; 0xf8
 80041da:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80041dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7c1a      	ldrb	r2, [r3, #16]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004202:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800421c:	2300      	movs	r3, #0
 800421e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	2109      	movs	r1, #9
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f004 fb77 	bl	8008918 <VL53L0X_RdByte>
 800422a:	4603      	mov	r3, r0
 800422c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800422e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	b2da      	uxtb	r2, r3
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004244:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800425e:	6839      	ldr	r1, [r7, #0]
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f003 fa26 	bl	80076b2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8004266:	4603      	mov	r3, r0
 8004268:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800426a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004280:	2300      	movs	r3, #0
 8004282:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004284:	6839      	ldr	r1, [r7, #0]
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f003 faf3 	bl	8007872 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800428c:	4603      	mov	r3, r0
 800428e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8004290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
 80042a8:	4613      	mov	r3, r2
 80042aa:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80042b0:	78ba      	ldrb	r2, [r7, #2]
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	4619      	mov	r1, r3
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f002 ff3b 	bl	8007132 <VL53L0X_set_vcsel_pulse_period>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80042c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	460b      	mov	r3, r1
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042da:	2300      	movs	r3, #0
 80042dc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80042de:	7afb      	ldrb	r3, [r7, #11]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4619      	mov	r1, r3
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f003 f9ad 	bl	8007644 <VL53L0X_get_vcsel_pulse_period>
 80042ea:	4603      	mov	r3, r0
 80042ec:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80042ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
 8004308:	4613      	mov	r3, r2
 800430a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800430c:	2300      	movs	r3, #0
 800430e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004318:	f107 030f 	add.w	r3, r7, #15
 800431c:	461a      	mov	r2, r3
 800431e:	2101      	movs	r1, #1
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f004 faf9 	bl	8008918 <VL53L0X_RdByte>
 8004326:	4603      	mov	r3, r0
 8004328:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800432e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d15a      	bne.n	80043ec <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8004336:	78bb      	ldrb	r3, [r7, #2]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d12b      	bne.n	8004394 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	2b04      	cmp	r3, #4
 8004340:	d825      	bhi.n	800438e <VL53L0X_SetSequenceStepEnable+0x92>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	0800435d 	.word	0x0800435d
 800434c:	08004367 	.word	0x08004367
 8004350:	08004371 	.word	0x08004371
 8004354:	0800437b 	.word	0x0800437b
 8004358:	08004385 	.word	0x08004385
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800435c:	7dbb      	ldrb	r3, [r7, #22]
 800435e:	f043 0310 	orr.w	r3, r3, #16
 8004362:	75bb      	strb	r3, [r7, #22]
				break;
 8004364:	e043      	b.n	80043ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8004366:	7dbb      	ldrb	r3, [r7, #22]
 8004368:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800436c:	75bb      	strb	r3, [r7, #22]
				break;
 800436e:	e03e      	b.n	80043ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8004370:	7dbb      	ldrb	r3, [r7, #22]
 8004372:	f043 0304 	orr.w	r3, r3, #4
 8004376:	75bb      	strb	r3, [r7, #22]
				break;
 8004378:	e039      	b.n	80043ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800437a:	7dbb      	ldrb	r3, [r7, #22]
 800437c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004380:	75bb      	strb	r3, [r7, #22]
				break;
 8004382:	e034      	b.n	80043ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8004384:	7dbb      	ldrb	r3, [r7, #22]
 8004386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800438a:	75bb      	strb	r3, [r7, #22]
				break;
 800438c:	e02f      	b.n	80043ee <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800438e:	23fc      	movs	r3, #252	; 0xfc
 8004390:	75fb      	strb	r3, [r7, #23]
 8004392:	e02c      	b.n	80043ee <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	2b04      	cmp	r3, #4
 8004398:	d825      	bhi.n	80043e6 <VL53L0X_SetSequenceStepEnable+0xea>
 800439a:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043b5 	.word	0x080043b5
 80043a4:	080043bf 	.word	0x080043bf
 80043a8:	080043c9 	.word	0x080043c9
 80043ac:	080043d3 	.word	0x080043d3
 80043b0:	080043dd 	.word	0x080043dd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80043b4:	7dbb      	ldrb	r3, [r7, #22]
 80043b6:	f023 0310 	bic.w	r3, r3, #16
 80043ba:	75bb      	strb	r3, [r7, #22]
				break;
 80043bc:	e017      	b.n	80043ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80043be:	7dbb      	ldrb	r3, [r7, #22]
 80043c0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80043c4:	75bb      	strb	r3, [r7, #22]
				break;
 80043c6:	e012      	b.n	80043ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80043c8:	7dbb      	ldrb	r3, [r7, #22]
 80043ca:	f023 0304 	bic.w	r3, r3, #4
 80043ce:	75bb      	strb	r3, [r7, #22]
				break;
 80043d0:	e00d      	b.n	80043ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80043d2:	7dbb      	ldrb	r3, [r7, #22]
 80043d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d8:	75bb      	strb	r3, [r7, #22]
				break;
 80043da:	e008      	b.n	80043ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80043dc:	7dbb      	ldrb	r3, [r7, #22]
 80043de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e2:	75bb      	strb	r3, [r7, #22]
				break;
 80043e4:	e003      	b.n	80043ee <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80043e6:	23fc      	movs	r3, #252	; 0xfc
 80043e8:	75fb      	strb	r3, [r7, #23]
 80043ea:	e000      	b.n	80043ee <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80043ec:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	7dba      	ldrb	r2, [r7, #22]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d01e      	beq.n	8004434 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80043f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d107      	bne.n	800440e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80043fe:	7dbb      	ldrb	r3, [r7, #22]
 8004400:	461a      	mov	r2, r3
 8004402:	2101      	movs	r1, #1
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f004 fa05 	bl	8008814 <VL53L0X_WrByte>
 800440a:	4603      	mov	r3, r0
 800440c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800440e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d103      	bne.n	800441e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7dba      	ldrb	r2, [r7, #22]
 800441a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800441e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800442c:	6939      	ldr	r1, [r7, #16]
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff ff0e 	bl	8004250 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	72fb      	strb	r3, [r7, #11]
 800444e:	4613      	mov	r3, r2
 8004450:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004452:	2300      	movs	r3, #0
 8004454:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800445c:	7afb      	ldrb	r3, [r7, #11]
 800445e:	2b04      	cmp	r3, #4
 8004460:	d836      	bhi.n	80044d0 <sequence_step_enabled+0x90>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <sequence_step_enabled+0x28>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	0800447d 	.word	0x0800447d
 800446c:	0800448f 	.word	0x0800448f
 8004470:	080044a1 	.word	0x080044a1
 8004474:	080044b3 	.word	0x080044b3
 8004478:	080044c5 	.word	0x080044c5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800447c:	7abb      	ldrb	r3, [r7, #10]
 800447e:	111b      	asrs	r3, r3, #4
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	b2da      	uxtb	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	701a      	strb	r2, [r3, #0]
		break;
 800448c:	e022      	b.n	80044d4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800448e:	7abb      	ldrb	r3, [r7, #10]
 8004490:	10db      	asrs	r3, r3, #3
 8004492:	b2db      	uxtb	r3, r3
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	b2da      	uxtb	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	701a      	strb	r2, [r3, #0]
		break;
 800449e:	e019      	b.n	80044d4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80044a0:	7abb      	ldrb	r3, [r7, #10]
 80044a2:	109b      	asrs	r3, r3, #2
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	701a      	strb	r2, [r3, #0]
		break;
 80044b0:	e010      	b.n	80044d4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80044b2:	7abb      	ldrb	r3, [r7, #10]
 80044b4:	119b      	asrs	r3, r3, #6
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	701a      	strb	r2, [r3, #0]
		break;
 80044c2:	e007      	b.n	80044d4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80044c4:	7abb      	ldrb	r3, [r7, #10]
 80044c6:	09db      	lsrs	r3, r3, #7
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	701a      	strb	r2, [r3, #0]
		break;
 80044ce:	e001      	b.n	80044d4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80044d0:	23fc      	movs	r3, #252	; 0xfc
 80044d2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80044d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80044f6:	f107 030e 	add.w	r3, r7, #14
 80044fa:	461a      	mov	r2, r3
 80044fc:	2101      	movs	r1, #1
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f004 fa0a 	bl	8008918 <VL53L0X_RdByte>
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d107      	bne.n	8004520 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004510:	7bba      	ldrb	r2, [r7, #14]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2100      	movs	r1, #0
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff ff92 	bl	8004440 <sequence_step_enabled>
 800451c:	4603      	mov	r3, r0
 800451e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d108      	bne.n	800453a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004528:	7bba      	ldrb	r2, [r7, #14]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	3302      	adds	r3, #2
 800452e:	2101      	movs	r1, #1
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff ff85 	bl	8004440 <sequence_step_enabled>
 8004536:	4603      	mov	r3, r0
 8004538:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800453a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d108      	bne.n	8004554 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8004542:	7bba      	ldrb	r2, [r7, #14]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	2102      	movs	r1, #2
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ff78 	bl	8004440 <sequence_step_enabled>
 8004550:	4603      	mov	r3, r0
 8004552:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d108      	bne.n	800456e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800455c:	7bba      	ldrb	r2, [r7, #14]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	3303      	adds	r3, #3
 8004562:	2103      	movs	r1, #3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff ff6b 	bl	8004440 <sequence_step_enabled>
 800456a:	4603      	mov	r3, r0
 800456c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800456e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d108      	bne.n	8004588 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8004576:	7bba      	ldrb	r2, [r7, #14]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	3304      	adds	r3, #4
 800457c:	2104      	movs	r1, #4
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ff5e 	bl	8004440 <sequence_step_enabled>
 8004584:	4603      	mov	r3, r0
 8004586:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004588:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800459e:	2300      	movs	r3, #0
 80045a0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	461a      	mov	r2, r3
 80045a8:	21f8      	movs	r1, #248	; 0xf8
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f004 f9de 	bl	800896c <VL53L0X_RdWord>
 80045b0:	4603      	mov	r3, r0
 80045b2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80045b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d108      	bne.n	80045ce <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80045bc:	f107 0308 	add.w	r3, r7, #8
 80045c0:	461a      	mov	r2, r3
 80045c2:	2104      	movs	r1, #4
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f004 fa09 	bl	80089dc <VL53L0X_RdDWord>
 80045ca:	4603      	mov	r3, r0
 80045cc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80045ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10c      	bne.n	80045f0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80045d6:	89bb      	ldrh	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	89ba      	ldrh	r2, [r7, #12]
 80045e0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80045f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	7f1b      	ldrb	r3, [r3, #28]
 800460e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	7bba      	ldrb	r2, [r7, #14]
 8004614:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004616:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004630:	2300      	movs	r3, #0
 8004632:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004634:	f107 030e 	add.w	r3, r7, #14
 8004638:	461a      	mov	r2, r3
 800463a:	2120      	movs	r1, #32
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f004 f995 	bl	800896c <VL53L0X_RdWord>
 8004642:	4603      	mov	r3, r0
 8004644:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004646:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d118      	bne.n	8004680 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800464e:	89fb      	ldrh	r3, [r7, #14]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d109      	bne.n	8004668 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	771a      	strb	r2, [r3, #28]
 8004666:	e00b      	b.n	8004680 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004668:	89fb      	ldrh	r3, [r7, #14]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004680:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	807b      	strh	r3, [r7, #2]
 8004698:	4613      	mov	r3, r2
 800469a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800469c:	2300      	movs	r3, #0
 800469e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80046ac:	887b      	ldrh	r3, [r7, #2]
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d902      	bls.n	80046b8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80046b2:	23fc      	movs	r3, #252	; 0xfc
 80046b4:	75fb      	strb	r3, [r7, #23]
 80046b6:	e05b      	b.n	8004770 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80046b8:	787b      	ldrb	r3, [r7, #1]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80046c6:	2301      	movs	r3, #1
 80046c8:	73bb      	strb	r3, [r7, #14]
 80046ca:	e00a      	b.n	80046e2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80046cc:	887b      	ldrh	r3, [r7, #2]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	330c      	adds	r3, #12
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80046e2:	887b      	ldrh	r3, [r7, #2]
 80046e4:	2b05      	cmp	r3, #5
 80046e6:	d841      	bhi.n	800476c <VL53L0X_SetLimitCheckEnable+0xe0>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <VL53L0X_SetLimitCheckEnable+0x64>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004709 	.word	0x08004709
 80046f4:	08004713 	.word	0x08004713
 80046f8:	08004729 	.word	0x08004729
 80046fc:	08004733 	.word	0x08004733
 8004700:	0800473d 	.word	0x0800473d
 8004704:	08004755 	.word	0x08004755

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	7bfa      	ldrb	r2, [r7, #15]
 800470c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004710:	e02e      	b.n	8004770 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004716:	b29b      	uxth	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	2144      	movs	r1, #68	; 0x44
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f004 f89d 	bl	800885c <VL53L0X_WrWord>
 8004722:	4603      	mov	r3, r0
 8004724:	75fb      	strb	r3, [r7, #23]

			break;
 8004726:	e023      	b.n	8004770 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004730:	e01e      	b.n	8004770 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800473a:	e019      	b.n	8004770 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800473c:	7bbb      	ldrb	r3, [r7, #14]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004742:	7b7b      	ldrb	r3, [r7, #13]
 8004744:	22fe      	movs	r2, #254	; 0xfe
 8004746:	2160      	movs	r1, #96	; 0x60
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f004 f8b1 	bl	80088b0 <VL53L0X_UpdateByte>
 800474e:	4603      	mov	r3, r0
 8004750:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8004752:	e00d      	b.n	8004770 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004754:	7bbb      	ldrb	r3, [r7, #14]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800475a:	7b7b      	ldrb	r3, [r7, #13]
 800475c:	22ef      	movs	r2, #239	; 0xef
 800475e:	2160      	movs	r1, #96	; 0x60
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f004 f8a5 	bl	80088b0 <VL53L0X_UpdateByte>
 8004766:	4603      	mov	r3, r0
 8004768:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800476a:	e001      	b.n	8004770 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800476c:	23fc      	movs	r3, #252	; 0xfc
 800476e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004770:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10f      	bne.n	8004798 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004778:	787b      	ldrb	r3, [r7, #1]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800477e:	887b      	ldrh	r3, [r7, #2]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4413      	add	r3, r2
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800478a:	e005      	b.n	8004798 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800478c:	887b      	ldrh	r3, [r7, #2]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004798:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	460b      	mov	r3, r1
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80047b6:	897b      	ldrh	r3, [r7, #10]
 80047b8:	2b05      	cmp	r3, #5
 80047ba:	d905      	bls.n	80047c8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80047bc:	23fc      	movs	r3, #252	; 0xfc
 80047be:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e008      	b.n	80047da <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80047c8:	897b      	ldrh	r3, [r7, #10]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047d2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	7dba      	ldrb	r2, [r7, #22]
 80047d8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80047da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	460b      	mov	r3, r1
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80047fe:	897b      	ldrh	r3, [r7, #10]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004808:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800480a:	7dbb      	ldrb	r3, [r7, #22]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d107      	bne.n	8004820 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004810:	897b      	ldrh	r3, [r7, #10]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	330c      	adds	r3, #12
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	605a      	str	r2, [r3, #4]
 800481e:	e040      	b.n	80048a2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004820:	897b      	ldrh	r3, [r7, #10]
 8004822:	2b05      	cmp	r3, #5
 8004824:	d830      	bhi.n	8004888 <VL53L0X_SetLimitCheckValue+0x9c>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <VL53L0X_SetLimitCheckValue+0x40>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004845 	.word	0x08004845
 8004830:	0800484d 	.word	0x0800484d
 8004834:	08004863 	.word	0x08004863
 8004838:	0800486b 	.word	0x0800486b
 800483c:	08004873 	.word	0x08004873
 8004840:	08004873 	.word	0x08004873

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800484a:	e01f      	b.n	800488c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004850:	b29b      	uxth	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	2144      	movs	r1, #68	; 0x44
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f004 f800 	bl	800885c <VL53L0X_WrWord>
 800485c:	4603      	mov	r3, r0
 800485e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004860:	e014      	b.n	800488c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004868:	e010      	b.n	800488c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004870:	e00c      	b.n	800488c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004876:	b29b      	uxth	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	2164      	movs	r1, #100	; 0x64
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f003 ffed 	bl	800885c <VL53L0X_WrWord>
 8004882:	4603      	mov	r3, r0
 8004884:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004886:	e001      	b.n	800488c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004888:	23fc      	movs	r3, #252	; 0xfc
 800488a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800488c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d106      	bne.n	80048a2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004894:	897b      	ldrh	r3, [r7, #10]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	330c      	adds	r3, #12
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80048a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop

080048b0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	460b      	mov	r3, r1
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048be:	2300      	movs	r3, #0
 80048c0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80048c6:	897b      	ldrh	r3, [r7, #10]
 80048c8:	2b05      	cmp	r3, #5
 80048ca:	d847      	bhi.n	800495c <VL53L0X_GetLimitCheckValue+0xac>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <VL53L0X_GetLimitCheckValue+0x24>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048ed 	.word	0x080048ed
 80048d8:	080048f9 	.word	0x080048f9
 80048dc:	0800491f 	.word	0x0800491f
 80048e0:	0800492b 	.word	0x0800492b
 80048e4:	08004937 	.word	0x08004937
 80048e8:	08004937 	.word	0x08004937

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	77bb      	strb	r3, [r7, #30]
		break;
 80048f6:	e033      	b.n	8004960 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80048f8:	f107 0316 	add.w	r3, r7, #22
 80048fc:	461a      	mov	r2, r3
 80048fe:	2144      	movs	r1, #68	; 0x44
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f004 f833 	bl	800896c <VL53L0X_RdWord>
 8004906:	4603      	mov	r3, r0
 8004908:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800490a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004912:	8afb      	ldrh	r3, [r7, #22]
 8004914:	025b      	lsls	r3, r3, #9
 8004916:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8004918:	2301      	movs	r3, #1
 800491a:	77bb      	strb	r3, [r7, #30]
		break;
 800491c:	e020      	b.n	8004960 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004922:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	77bb      	strb	r3, [r7, #30]
		break;
 8004928:	e01a      	b.n	8004960 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	77bb      	strb	r3, [r7, #30]
		break;
 8004934:	e014      	b.n	8004960 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004936:	f107 0316 	add.w	r3, r7, #22
 800493a:	461a      	mov	r2, r3
 800493c:	2164      	movs	r1, #100	; 0x64
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f004 f814 	bl	800896c <VL53L0X_RdWord>
 8004944:	4603      	mov	r3, r0
 8004946:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004948:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d102      	bne.n	8004956 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004950:	8afb      	ldrh	r3, [r7, #22]
 8004952:	025b      	lsls	r3, r3, #9
 8004954:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	77bb      	strb	r3, [r7, #30]
		break;
 800495a:	e001      	b.n	8004960 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800495c:	23fc      	movs	r3, #252	; 0xfc
 800495e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004960:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d12a      	bne.n	80049be <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004968:	7fbb      	ldrb	r3, [r7, #30]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d124      	bne.n	80049b8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d110      	bne.n	8004996 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004974:	897b      	ldrh	r3, [r7, #10]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	330c      	adds	r3, #12
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004988:	897b      	ldrh	r3, [r7, #10]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4413      	add	r3, r2
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004994:	e013      	b.n	80049be <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800499c:	897b      	ldrh	r3, [r7, #10]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	330c      	adds	r3, #12
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80049aa:	897b      	ldrh	r3, [r7, #10]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80049b6:	e002      	b.n	80049be <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80049be:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop

080049cc <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80049da:	f107 030e 	add.w	r3, r7, #14
 80049de:	461a      	mov	r2, r3
 80049e0:	2101      	movs	r1, #1
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f003 ff98 	bl	8008918 <VL53L0X_RdByte>
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80049ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10e      	bne.n	8004a12 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80049f4:	7bba      	ldrb	r2, [r7, #14]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80049fc:	7bbb      	ldrb	r3, [r7, #14]
 80049fe:	b25b      	sxtb	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da03      	bge.n	8004a0c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	e002      	b.n	8004a12 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781a      	ldrb	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004a3c:	f107 030e 	add.w	r3, r7, #14
 8004a40:	4619      	mov	r1, r3
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7ff fbd2 	bl	80041ec <VL53L0X_GetDeviceMode>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d107      	bne.n	8004a64 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004a54:	7bbb      	ldrb	r3, [r7, #14]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d104      	bne.n	8004a64 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f898 	bl	8004b90 <VL53L0X_StartMeasurement>
 8004a60:	4603      	mov	r3, r0
 8004a62:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d104      	bne.n	8004a76 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f001 fb3f 	bl	80060f0 <VL53L0X_measurement_poll_for_completion>
 8004a72:	4603      	mov	r3, r0
 8004a74:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004a7e:	7bbb      	ldrb	r3, [r7, #14]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d103      	bne.n	8004a8c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2203      	movs	r2, #3
 8004a88:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f001 fae1 	bl	8006076 <VL53L0X_perform_ref_calibration>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8004ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004ada:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8004adc:	7dbb      	ldrb	r3, [r7, #22]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d005      	beq.n	8004aee <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8004ae2:	7dbb      	ldrb	r3, [r7, #22]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d002      	beq.n	8004aee <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8004ae8:	7dbb      	ldrb	r3, [r7, #22]
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d147      	bne.n	8004b7e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8004aee:	f107 030c 	add.w	r3, r7, #12
 8004af2:	f107 0210 	add.w	r2, r7, #16
 8004af6:	2101      	movs	r1, #1
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fbc3 	bl	8005284 <VL53L0X_GetInterruptThresholds>
 8004afe:	4603      	mov	r3, r0
 8004b00:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004b08:	d803      	bhi.n	8004b12 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8004b0a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8004b0c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004b10:	d935      	bls.n	8004b7e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8004b12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d131      	bne.n	8004b7e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d006      	beq.n	8004b2e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8004b20:	491a      	ldr	r1, [pc, #104]	; (8004b8c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f002 ff56 	bl	80079d4 <VL53L0X_load_tuning_settings>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	75fb      	strb	r3, [r7, #23]
 8004b2c:	e027      	b.n	8004b7e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8004b2e:	2204      	movs	r2, #4
 8004b30:	21ff      	movs	r1, #255	; 0xff
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f003 fe6e 	bl	8008814 <VL53L0X_WrByte>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8004b42:	2200      	movs	r2, #0
 8004b44:	2170      	movs	r1, #112	; 0x70
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f003 fe64 	bl	8008814 <VL53L0X_WrByte>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004b56:	2200      	movs	r2, #0
 8004b58:	21ff      	movs	r1, #255	; 0xff
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f003 fe5a 	bl	8008814 <VL53L0X_WrByte>
 8004b60:	4603      	mov	r3, r0
 8004b62:	461a      	mov	r2, r3
 8004b64:	7dfb      	ldrb	r3, [r7, #23]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2180      	movs	r1, #128	; 0x80
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f003 fe50 	bl	8008814 <VL53L0X_WrByte>
 8004b74:	4603      	mov	r3, r0
 8004b76:	461a      	mov	r2, r3
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000100 	.word	0x20000100

08004b90 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004ba0:	f107 030e 	add.w	r3, r7, #14
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff fb20 	bl	80041ec <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004bac:	2201      	movs	r2, #1
 8004bae:	2180      	movs	r1, #128	; 0x80
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f003 fe2f 	bl	8008814 <VL53L0X_WrByte>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004bba:	2201      	movs	r2, #1
 8004bbc:	21ff      	movs	r1, #255	; 0xff
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f003 fe28 	bl	8008814 <VL53L0X_WrByte>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2100      	movs	r1, #0
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f003 fe21 	bl	8008814 <VL53L0X_WrByte>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2191      	movs	r1, #145	; 0x91
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f003 fe17 	bl	8008814 <VL53L0X_WrByte>
 8004be6:	4603      	mov	r3, r0
 8004be8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004bea:	2201      	movs	r2, #1
 8004bec:	2100      	movs	r1, #0
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f003 fe10 	bl	8008814 <VL53L0X_WrByte>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	21ff      	movs	r1, #255	; 0xff
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f003 fe09 	bl	8008814 <VL53L0X_WrByte>
 8004c02:	4603      	mov	r3, r0
 8004c04:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004c06:	2200      	movs	r2, #0
 8004c08:	2180      	movs	r1, #128	; 0x80
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f003 fe02 	bl	8008814 <VL53L0X_WrByte>
 8004c10:	4603      	mov	r3, r0
 8004c12:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8004c14:	7bbb      	ldrb	r3, [r7, #14]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d037      	beq.n	8004c8a <VL53L0X_StartMeasurement+0xfa>
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d04f      	beq.n	8004cbe <VL53L0X_StartMeasurement+0x12e>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d167      	bne.n	8004cf2 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8004c22:	2201      	movs	r2, #1
 8004c24:	2100      	movs	r1, #0
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f003 fdf4 	bl	8008814 <VL53L0X_WrByte>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8004c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d15d      	bne.n	8004cf8 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8004c46:	f107 030d 	add.w	r3, r7, #13
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f003 fe62 	bl	8008918 <VL53L0X_RdByte>
 8004c54:	4603      	mov	r3, r0
 8004c56:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8004c5e:	7b7a      	ldrb	r2, [r7, #13]
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	4013      	ands	r3, r2
 8004c64:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004c66:	7bfa      	ldrb	r2, [r7, #15]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d107      	bne.n	8004c7c <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8004c6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d103      	bne.n	8004c7c <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004c7a:	d3e1      	bcc.n	8004c40 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004c82:	d339      	bcc.n	8004cf8 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8004c84:	23f9      	movs	r3, #249	; 0xf9
 8004c86:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8004c88:	e036      	b.n	8004cf8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d105      	bne.n	8004c9e <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004c92:	2101      	movs	r1, #1
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff ff15 	bl	8004ac4 <VL53L0X_CheckAndLoadInterruptSettings>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f003 fdb6 	bl	8008814 <VL53L0X_WrByte>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8004cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d123      	bne.n	8004cfc <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004cbc:	e01e      	b.n	8004cfc <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d105      	bne.n	8004cd2 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff fefb 	bl	8004ac4 <VL53L0X_CheckAndLoadInterruptSettings>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f003 fd9c 	bl	8008814 <VL53L0X_WrByte>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8004ce0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2204      	movs	r2, #4
 8004cec:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004cf0:	e006      	b.n	8004d00 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004cf2:	23f8      	movs	r3, #248	; 0xf8
 8004cf4:	75fb      	strb	r3, [r7, #23]
 8004cf6:	e004      	b.n	8004d02 <VL53L0X_StartMeasurement+0x172>
		break;
 8004cf8:	bf00      	nop
 8004cfa:	e002      	b.n	8004d02 <VL53L0X_StartMeasurement+0x172>
		break;
 8004cfc:	bf00      	nop
 8004cfe:	e000      	b.n	8004d02 <VL53L0X_StartMeasurement+0x172>
		break;
 8004d00:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004d02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004d22:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8004d24:	7bbb      	ldrb	r3, [r7, #14]
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d112      	bne.n	8004d50 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fb1d 	bl	8005370 <VL53L0X_GetInterruptMaskStatus>
 8004d36:	4603      	mov	r3, r0
 8004d38:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d103      	bne.n	8004d48 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2201      	movs	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e01c      	b.n	8004d82 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e018      	b.n	8004d82 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8004d50:	f107 030d 	add.w	r3, r7, #13
 8004d54:	461a      	mov	r2, r3
 8004d56:	2114      	movs	r1, #20
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f003 fddd 	bl	8008918 <VL53L0X_RdByte>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8004d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8004d6a:	7b7b      	ldrb	r3, [r7, #13]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2201      	movs	r2, #1
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e002      	b.n	8004d82 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004d90:	b5b0      	push	{r4, r5, r7, lr}
 8004d92:	b096      	sub	sp, #88	; 0x58
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004da0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004da4:	230c      	movs	r3, #12
 8004da6:	2114      	movs	r1, #20
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f003 fd07 	bl	80087bc <VL53L0X_ReadMulti>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004db4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 80d2 	bne.w	8004f62 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8004dca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	4413      	add	r3, r2
 8004ddc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8004de6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	4413      	add	r3, r2
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	025b      	lsls	r3, r3, #9
 8004dfc:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e02:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004e04:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	4413      	add	r3, r2
 8004e16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004e1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004e1e:	025b      	lsls	r3, r3, #9
 8004e20:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8004e26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	4413      	add	r3, r2
 8004e38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004e42:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004e44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8004e52:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004e5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e64:	d047      	beq.n	8004ef6 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8004e66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e68:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004e6c:	fb02 f303 	mul.w	r3, r2, r3
 8004e70:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004e74:	4a58      	ldr	r2, [pc, #352]	; (8004fd8 <VL53L0X_GetRangingMeasurementData+0x248>)
 8004e76:	fb82 1203 	smull	r1, r2, r2, r3
 8004e7a:	1192      	asrs	r2, r2, #6
 8004e7c:	17db      	asrs	r3, r3, #31
 8004e7e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004e80:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	7f1b      	ldrb	r3, [r3, #28]
 8004e8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004e92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d02d      	beq.n	8004ef6 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004e9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e9c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004ea0:	fb02 f303 	mul.w	r3, r2, r3
 8004ea4:	121b      	asrs	r3, r3, #8
 8004ea6:	461a      	mov	r2, r3
				if ((SignalRate
 8004ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d10d      	bne.n	8004eca <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8004eae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d004      	beq.n	8004ec0 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8004eb6:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8004eba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ebe:	e016      	b.n	8004eee <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8004ec0:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004ec4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ec8:	e011      	b.n	8004eee <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004eca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed0:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004ed4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ed6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004ede:	121b      	asrs	r3, r3, #8
 8004ee0:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee4:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004eea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004eee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ef2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004ef6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004efe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004f02:	089b      	lsrs	r3, r3, #2
 8004f04:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004f0a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	019b      	lsls	r3, r3, #6
 8004f12:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	75da      	strb	r2, [r3, #23]
 8004f18:	e006      	b.n	8004f28 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004f20:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2200      	movs	r2, #0
 8004f26:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004f28:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004f2c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004f30:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f003 f9f0 	bl	8008324 <VL53L0X_get_pal_range_status>
 8004f44:	4603      	mov	r3, r0
 8004f46:	461a      	mov	r2, r3
 8004f48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004f52:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d103      	bne.n	8004f62 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004f5a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004f62:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d12f      	bne.n	8004fca <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f107 040c 	add.w	r4, r7, #12
 8004f70:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004f84:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004f92:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004f98:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004f9e:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004fa4:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004faa:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004fb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004fba:	f107 050c 	add.w	r5, r7, #12
 8004fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004fca:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3750      	adds	r7, #80	; 0x50
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	10624dd3 	.word	0x10624dd3

08004fdc <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004fea:	2100      	movs	r1, #0
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff f8b5 	bl	800415c <VL53L0X_SetDeviceMode>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fd16 	bl	8004a30 <VL53L0X_PerformSingleMeasurement>
 8005004:	4603      	mov	r3, r0
 8005006:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d105      	bne.n	800501c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff febc 	bl	8004d90 <VL53L0X_GetRangingMeasurementData>
 8005018:	4603      	mov	r3, r0
 800501a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800501c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005024:	2100      	movs	r1, #0
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f962 	bl	80052f0 <VL53L0X_ClearInterruptMask>
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8005030:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	4608      	mov	r0, r1
 8005046:	4611      	mov	r1, r2
 8005048:	461a      	mov	r2, r3
 800504a:	4603      	mov	r3, r0
 800504c:	70fb      	strb	r3, [r7, #3]
 800504e:	460b      	mov	r3, r1
 8005050:	70bb      	strb	r3, [r7, #2]
 8005052:	4613      	mov	r3, r2
 8005054:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800505a:	78fb      	ldrb	r3, [r7, #3]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8005060:	23f6      	movs	r3, #246	; 0xf6
 8005062:	73fb      	strb	r3, [r7, #15]
 8005064:	e107      	b.n	8005276 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8005066:	78bb      	ldrb	r3, [r7, #2]
 8005068:	2b14      	cmp	r3, #20
 800506a:	d110      	bne.n	800508e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800506c:	7e3b      	ldrb	r3, [r7, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8005072:	2310      	movs	r3, #16
 8005074:	73bb      	strb	r3, [r7, #14]
 8005076:	e001      	b.n	800507c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8005078:	2301      	movs	r3, #1
 800507a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800507c:	7bbb      	ldrb	r3, [r7, #14]
 800507e:	461a      	mov	r2, r3
 8005080:	2184      	movs	r1, #132	; 0x84
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f003 fbc6 	bl	8008814 <VL53L0X_WrByte>
 8005088:	4603      	mov	r3, r0
 800508a:	73fb      	strb	r3, [r7, #15]
 800508c:	e0f3      	b.n	8005276 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800508e:	78bb      	ldrb	r3, [r7, #2]
 8005090:	2b15      	cmp	r3, #21
 8005092:	f040 8097 	bne.w	80051c4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005096:	2201      	movs	r2, #1
 8005098:	21ff      	movs	r1, #255	; 0xff
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f003 fbba 	bl	8008814 <VL53L0X_WrByte>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80050aa:	2200      	movs	r2, #0
 80050ac:	2100      	movs	r1, #0
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f003 fbb0 	bl	8008814 <VL53L0X_WrByte>
 80050b4:	4603      	mov	r3, r0
 80050b6:	461a      	mov	r2, r3
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80050be:	2200      	movs	r2, #0
 80050c0:	21ff      	movs	r1, #255	; 0xff
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f003 fba6 	bl	8008814 <VL53L0X_WrByte>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80050d2:	2201      	movs	r2, #1
 80050d4:	2180      	movs	r1, #128	; 0x80
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f003 fb9c 	bl	8008814 <VL53L0X_WrByte>
 80050dc:	4603      	mov	r3, r0
 80050de:	461a      	mov	r2, r3
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80050e6:	2202      	movs	r2, #2
 80050e8:	2185      	movs	r1, #133	; 0x85
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f003 fb92 	bl	8008814 <VL53L0X_WrByte>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461a      	mov	r2, r3
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80050fa:	2204      	movs	r2, #4
 80050fc:	21ff      	movs	r1, #255	; 0xff
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f003 fb88 	bl	8008814 <VL53L0X_WrByte>
 8005104:	4603      	mov	r3, r0
 8005106:	461a      	mov	r2, r3
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	4313      	orrs	r3, r2
 800510c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800510e:	2200      	movs	r2, #0
 8005110:	21cd      	movs	r1, #205	; 0xcd
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f003 fb7e 	bl	8008814 <VL53L0X_WrByte>
 8005118:	4603      	mov	r3, r0
 800511a:	461a      	mov	r2, r3
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	4313      	orrs	r3, r2
 8005120:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005122:	2211      	movs	r2, #17
 8005124:	21cc      	movs	r1, #204	; 0xcc
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f003 fb74 	bl	8008814 <VL53L0X_WrByte>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	4313      	orrs	r3, r2
 8005134:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005136:	2207      	movs	r2, #7
 8005138:	21ff      	movs	r1, #255	; 0xff
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f003 fb6a 	bl	8008814 <VL53L0X_WrByte>
 8005140:	4603      	mov	r3, r0
 8005142:	461a      	mov	r2, r3
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	4313      	orrs	r3, r2
 8005148:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800514a:	2200      	movs	r2, #0
 800514c:	21be      	movs	r1, #190	; 0xbe
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f003 fb60 	bl	8008814 <VL53L0X_WrByte>
 8005154:	4603      	mov	r3, r0
 8005156:	461a      	mov	r2, r3
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	4313      	orrs	r3, r2
 800515c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800515e:	2206      	movs	r2, #6
 8005160:	21ff      	movs	r1, #255	; 0xff
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f003 fb56 	bl	8008814 <VL53L0X_WrByte>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	4313      	orrs	r3, r2
 8005170:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8005172:	2209      	movs	r2, #9
 8005174:	21cc      	movs	r1, #204	; 0xcc
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f003 fb4c 	bl	8008814 <VL53L0X_WrByte>
 800517c:	4603      	mov	r3, r0
 800517e:	461a      	mov	r2, r3
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	4313      	orrs	r3, r2
 8005184:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005186:	2200      	movs	r2, #0
 8005188:	21ff      	movs	r1, #255	; 0xff
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f003 fb42 	bl	8008814 <VL53L0X_WrByte>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	4313      	orrs	r3, r2
 8005198:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800519a:	2201      	movs	r2, #1
 800519c:	21ff      	movs	r1, #255	; 0xff
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f003 fb38 	bl	8008814 <VL53L0X_WrByte>
 80051a4:	4603      	mov	r3, r0
 80051a6:	461a      	mov	r2, r3
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80051ae:	2200      	movs	r2, #0
 80051b0:	2100      	movs	r1, #0
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f003 fb2e 	bl	8008814 <VL53L0X_WrByte>
 80051b8:	4603      	mov	r3, r0
 80051ba:	461a      	mov	r2, r3
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	4313      	orrs	r3, r2
 80051c0:	73fb      	strb	r3, [r7, #15]
 80051c2:	e058      	b.n	8005276 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80051c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d121      	bne.n	8005210 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80051cc:	787b      	ldrb	r3, [r7, #1]
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d81b      	bhi.n	800520a <VL53L0X_SetGpioConfig+0x1ce>
 80051d2:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <VL53L0X_SetGpioConfig+0x19c>)
 80051d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d8:	080051ed 	.word	0x080051ed
 80051dc:	080051f3 	.word	0x080051f3
 80051e0:	080051f9 	.word	0x080051f9
 80051e4:	080051ff 	.word	0x080051ff
 80051e8:	08005205 	.word	0x08005205
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80051ec:	2300      	movs	r3, #0
 80051ee:	73bb      	strb	r3, [r7, #14]
				break;
 80051f0:	e00f      	b.n	8005212 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73bb      	strb	r3, [r7, #14]
				break;
 80051f6:	e00c      	b.n	8005212 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80051f8:	2302      	movs	r3, #2
 80051fa:	73bb      	strb	r3, [r7, #14]
				break;
 80051fc:	e009      	b.n	8005212 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80051fe:	2303      	movs	r3, #3
 8005200:	73bb      	strb	r3, [r7, #14]
				break;
 8005202:	e006      	b.n	8005212 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8005204:	2304      	movs	r3, #4
 8005206:	73bb      	strb	r3, [r7, #14]
				break;
 8005208:	e003      	b.n	8005212 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800520a:	23f5      	movs	r3, #245	; 0xf5
 800520c:	73fb      	strb	r3, [r7, #15]
 800520e:	e000      	b.n	8005212 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8005210:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8005212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d107      	bne.n	800522a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800521a:	7bbb      	ldrb	r3, [r7, #14]
 800521c:	461a      	mov	r2, r3
 800521e:	210a      	movs	r1, #10
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f003 faf7 	bl	8008814 <VL53L0X_WrByte>
 8005226:	4603      	mov	r3, r0
 8005228:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800522a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10f      	bne.n	8005252 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005232:	7e3b      	ldrb	r3, [r7, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	73bb      	strb	r3, [r7, #14]
 800523c:	e001      	b.n	8005242 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800523e:	2310      	movs	r3, #16
 8005240:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8005242:	7bbb      	ldrb	r3, [r7, #14]
 8005244:	22ef      	movs	r2, #239	; 0xef
 8005246:	2184      	movs	r1, #132	; 0x84
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f003 fb31 	bl	80088b0 <VL53L0X_UpdateByte>
 800524e:	4603      	mov	r3, r0
 8005250:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8005252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d103      	bne.n	8005262 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	787a      	ldrb	r2, [r7, #1]
 800525e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8005262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d105      	bne.n	8005276 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800526a:	2100      	movs	r1, #0
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f83f 	bl	80052f0 <VL53L0X_ClearInterruptMask>
 8005272:	4603      	mov	r3, r0
 8005274:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005276:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop

08005284 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	460b      	mov	r3, r1
 8005292:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005294:	2300      	movs	r3, #0
 8005296:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005298:	f107 0314 	add.w	r3, r7, #20
 800529c:	461a      	mov	r2, r3
 800529e:	210e      	movs	r1, #14
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f003 fb63 	bl	800896c <VL53L0X_RdWord>
 80052a6:	4603      	mov	r3, r0
 80052a8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80052aa:	8abb      	ldrh	r3, [r7, #20]
 80052ac:	045b      	lsls	r3, r3, #17
 80052ae:	461a      	mov	r2, r3
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <VL53L0X_GetInterruptThresholds+0x68>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80052b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10f      	bne.n	80052e0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80052c0:	f107 0314 	add.w	r3, r7, #20
 80052c4:	461a      	mov	r2, r3
 80052c6:	210c      	movs	r1, #12
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f003 fb4f 	bl	800896c <VL53L0X_RdWord>
 80052ce:	4603      	mov	r3, r0
 80052d0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80052d2:	8abb      	ldrh	r3, [r7, #20]
 80052d4:	045b      	lsls	r3, r3, #17
 80052d6:	461a      	mov	r2, r3
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <VL53L0X_GetInterruptThresholds+0x68>)
 80052da:	4013      	ands	r3, r2
		*pThresholdHigh =
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80052e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	1ffe0000 	.word	0x1ffe0000

080052f0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8005302:	2201      	movs	r2, #1
 8005304:	210b      	movs	r1, #11
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f003 fa84 	bl	8008814 <VL53L0X_WrByte>
 800530c:	4603      	mov	r3, r0
 800530e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005310:	2200      	movs	r2, #0
 8005312:	210b      	movs	r1, #11
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f003 fa7d 	bl	8008814 <VL53L0X_WrByte>
 800531a:	4603      	mov	r3, r0
 800531c:	461a      	mov	r2, r3
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	4313      	orrs	r3, r2
 8005322:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005324:	f107 030d 	add.w	r3, r7, #13
 8005328:	461a      	mov	r2, r3
 800532a:	2113      	movs	r1, #19
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f003 faf3 	bl	8008918 <VL53L0X_RdByte>
 8005332:	4603      	mov	r3, r0
 8005334:	461a      	mov	r2, r3
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	4313      	orrs	r3, r2
 800533a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800533c:	7bbb      	ldrb	r3, [r7, #14]
 800533e:	3301      	adds	r3, #1
 8005340:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8005342:	7b7b      	ldrb	r3, [r7, #13]
 8005344:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005348:	2b00      	cmp	r3, #0
 800534a:	d006      	beq.n	800535a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800534c:	7bbb      	ldrb	r3, [r7, #14]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d803      	bhi.n	800535a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8005352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0d3      	beq.n	8005302 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800535a:	7bbb      	ldrb	r3, [r7, #14]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005360:	23f4      	movs	r3, #244	; 0xf4
 8005362:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800537a:	2300      	movs	r3, #0
 800537c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800537e:	f107 030e 	add.w	r3, r7, #14
 8005382:	461a      	mov	r2, r3
 8005384:	2113      	movs	r1, #19
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f003 fac6 	bl	8008918 <VL53L0X_RdByte>
 800538c:	4603      	mov	r3, r0
 800538e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005390:	7bbb      	ldrb	r3, [r7, #14]
 8005392:	f003 0207 	and.w	r2, r3, #7
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800539a:	7bbb      	ldrb	r3, [r7, #14]
 800539c:	f003 0318 	and.w	r3, r3, #24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80053a4:	23fa      	movs	r3, #250	; 0xfa
 80053a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80053a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fa03 	bl	80057d4 <VL53L0X_perform_ref_spad_management>
 80053ce:	4603      	mov	r3, r0
 80053d0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80053d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80053ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80053f0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80053f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80053f8:	f107 0308 	add.w	r3, r7, #8
 80053fc:	461a      	mov	r2, r3
 80053fe:	2128      	movs	r1, #40	; 0x28
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f003 fab3 	bl	800896c <VL53L0X_RdWord>
 8005406:	4603      	mov	r3, r0
 8005408:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800540a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d11e      	bne.n	8005450 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8005412:	893b      	ldrh	r3, [r7, #8]
 8005414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005418:	b29b      	uxth	r3, r3
 800541a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800541c:	893b      	ldrh	r3, [r7, #8]
 800541e:	461a      	mov	r2, r3
 8005420:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005424:	429a      	cmp	r2, r3
 8005426:	dd0b      	ble.n	8005440 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8005428:	893a      	ldrh	r2, [r7, #8]
 800542a:	897b      	ldrh	r3, [r7, #10]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	b29b      	uxth	r3, r3
 8005430:	b21b      	sxth	r3, r3
 8005432:	461a      	mov	r2, r3
					* 250;
 8005434:	23fa      	movs	r3, #250	; 0xfa
 8005436:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	e007      	b.n	8005450 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005440:	893b      	ldrh	r3, [r7, #8]
 8005442:	b21b      	sxth	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	23fa      	movs	r3, #250	; 0xfa
 8005448:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8005450:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800545c:	b480      	push	{r7}
 800545e:	b08b      	sub	sp, #44	; 0x2c
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800546a:	2308      	movs	r3, #8
 800546c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	f04f 32ff 	mov.w	r2, #4294967295
 8005478:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005482:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	fbb3 f2f2 	udiv	r2, r3, r2
 800548c:	69b9      	ldr	r1, [r7, #24]
 800548e:	fb01 f202 	mul.w	r2, r1, r2
 8005492:	1a9b      	subs	r3, r3, r2
 8005494:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
 800549a:	e030      	b.n	80054fe <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	4413      	add	r3, r2
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80054aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d11e      	bne.n	80054f0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80054b2:	7ffa      	ldrb	r2, [r7, #31]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	fa42 f303 	asr.w	r3, r2, r3
 80054ba:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80054c0:	e016      	b.n	80054f0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80054c2:	7ffb      	ldrb	r3, [r7, #31]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <get_next_good_spad+0x88>
				success = 1;
 80054cc:	2301      	movs	r3, #1
 80054ce:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	fb02 f203 	mul.w	r2, r2, r3
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	4413      	add	r3, r2
 80054dc:	461a      	mov	r2, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	601a      	str	r2, [r3, #0]
				break;
 80054e2:	e009      	b.n	80054f8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80054e4:	7ffb      	ldrb	r3, [r7, #31]
 80054e6:	085b      	lsrs	r3, r3, #1
 80054e8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	3301      	adds	r3, #1
 80054ee:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80054f0:	6a3a      	ldr	r2, [r7, #32]
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d3e4      	bcc.n	80054c2 <get_next_good_spad+0x66>
				coarseIndex++) {
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	3301      	adds	r3, #1
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80054fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	429a      	cmp	r2, r3
 8005504:	d202      	bcs.n	800550c <get_next_good_spad+0xb0>
 8005506:	7fbb      	ldrb	r3, [r7, #30]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0c7      	beq.n	800549c <get_next_good_spad+0x40>
		}
	}
}
 800550c:	bf00      	nop
 800550e:	372c      	adds	r7, #44	; 0x2c
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	099b      	lsrs	r3, r3, #6
 8005528:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800552a:	4a07      	ldr	r2, [pc, #28]	; (8005548 <is_aperture+0x30>)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <is_aperture+0x22>
		isAperture = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800553a:	7bfb      	ldrb	r3, [r7, #15]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	200002b8 	.word	0x200002b8

0800554c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	; 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005558:	2300      	movs	r3, #0
 800555a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800555c:	2308      	movs	r3, #8
 800555e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005572:	69b9      	ldr	r1, [r7, #24]
 8005574:	fb01 f202 	mul.w	r2, r1, r2
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	429a      	cmp	r2, r3
 8005582:	d302      	bcc.n	800558a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005584:	23ce      	movs	r3, #206	; 0xce
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e010      	b.n	80055ac <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4413      	add	r3, r2
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	b25a      	sxtb	r2, r3
 8005594:	2101      	movs	r1, #1
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	fa01 f303 	lsl.w	r3, r1, r3
 800559c:	b25b      	sxtb	r3, r3
 800559e:	4313      	orrs	r3, r2
 80055a0:	b259      	sxtb	r1, r3
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	4413      	add	r3, r2
 80055a8:	b2ca      	uxtb	r2, r1
 80055aa:	701a      	strb	r2, [r3, #0]

	return status;
 80055ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3724      	adds	r7, #36	; 0x24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80055c6:	2306      	movs	r3, #6
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	21b0      	movs	r1, #176	; 0xb0
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f003 f8c5 	bl	800875c <VL53L0X_WriteMulti>
 80055d2:	4603      	mov	r3, r0
 80055d4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80055d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80055ec:	2306      	movs	r3, #6
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	21b0      	movs	r1, #176	; 0xb0
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f003 f8e2 	bl	80087bc <VL53L0X_ReadMulti>
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80055fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	; 0x30
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	607a      	str	r2, [r7, #4]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	460b      	mov	r3, r1
 8005616:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005618:	2300      	movs	r3, #0
 800561a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800561e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005620:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005624:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005626:	2300      	movs	r3, #0
 8005628:	62bb      	str	r3, [r7, #40]	; 0x28
 800562a:	e02b      	b.n	8005684 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800562c:	f107 031c 	add.w	r3, r7, #28
 8005630:	6a3a      	ldr	r2, [r7, #32]
 8005632:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff ff11 	bl	800545c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d103      	bne.n	800564a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005642:	23ce      	movs	r3, #206	; 0xce
 8005644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005648:	e020      	b.n	800568c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	461a      	mov	r2, r3
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	4413      	add	r3, r2
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff ff60 	bl	8005518 <is_aperture>
 8005658:	4603      	mov	r3, r0
 800565a:	461a      	mov	r2, r3
 800565c:	7afb      	ldrb	r3, [r7, #11]
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005662:	23ce      	movs	r3, #206	; 0xce
 8005664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005668:	e010      	b.n	800568c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800566e:	6a3a      	ldr	r2, [r7, #32]
 8005670:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005672:	6838      	ldr	r0, [r7, #0]
 8005674:	f7ff ff6a 	bl	800554c <enable_spad_bit>
		currentSpad++;
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	3301      	adds	r3, #1
 800567c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	3301      	adds	r3, #1
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
 8005684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005688:	429a      	cmp	r2, r3
 800568a:	d3cf      	bcc.n	800562c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800568c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800568e:	6a3a      	ldr	r2, [r7, #32]
 8005690:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005692:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff ff8d 	bl	80055bc <set_ref_spad_map>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80056a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d121      	bne.n	80056f4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80056b0:	f107 0314 	add.w	r3, r7, #20
 80056b4:	4619      	mov	r1, r3
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f7ff ff93 	bl	80055e2 <get_ref_spad_map>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80056c6:	e011      	b.n	80056ec <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	4413      	add	r3, r2
 80056ce:	781a      	ldrb	r2, [r3, #0]
 80056d0:	f107 0114 	add.w	r1, r7, #20
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	440b      	add	r3, r1
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d003      	beq.n	80056e6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80056de:	23ce      	movs	r3, #206	; 0xce
 80056e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80056e4:	e006      	b.n	80056f4 <enable_ref_spads+0xec>
			}
			i++;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	3301      	adds	r3, #1
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80056ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d3e9      	bcc.n	80056c8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80056f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3730      	adds	r7, #48	; 0x30
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	; 0x28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800570a:	2300      	movs	r3, #0
 800570c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800571c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005720:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005724:	2b00      	cmp	r3, #0
 8005726:	d107      	bne.n	8005738 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8005728:	22c0      	movs	r2, #192	; 0xc0
 800572a:	2101      	movs	r1, #1
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f003 f871 	bl	8008814 <VL53L0X_WrByte>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005738:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800573c:	2b00      	cmp	r3, #0
 800573e:	d108      	bne.n	8005752 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005740:	f107 0308 	add.w	r3, r7, #8
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff fc48 	bl	8004fdc <VL53L0X_PerformSingleRangingMeasurement>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8005752:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005756:	2b00      	cmp	r3, #0
 8005758:	d107      	bne.n	800576a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800575a:	2201      	movs	r2, #1
 800575c:	21ff      	movs	r1, #255	; 0xff
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f003 f858 	bl	8008814 <VL53L0X_WrByte>
 8005764:	4603      	mov	r3, r0
 8005766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800576a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800576e:	2b00      	cmp	r3, #0
 8005770:	d107      	bne.n	8005782 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	21b6      	movs	r1, #182	; 0xb6
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f003 f8f8 	bl	800896c <VL53L0X_RdWord>
 800577c:	4603      	mov	r3, r0
 800577e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005782:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005786:	2b00      	cmp	r3, #0
 8005788:	d107      	bne.n	800579a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800578a:	2200      	movs	r2, #0
 800578c:	21ff      	movs	r1, #255	; 0xff
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f003 f840 	bl	8008814 <VL53L0X_WrByte>
 8005794:	4603      	mov	r3, r0
 8005796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800579a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d112      	bne.n	80057c8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80057a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057a6:	461a      	mov	r2, r3
 80057a8:	2101      	movs	r1, #1
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f003 f832 	bl	8008814 <VL53L0X_WrByte>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80057b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80057c4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80057c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3728      	adds	r7, #40	; 0x28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80057d4:	b590      	push	{r4, r7, lr}
 80057d6:	b09d      	sub	sp, #116	; 0x74
 80057d8:	af06      	add	r7, sp, #24
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80057e6:	23b4      	movs	r3, #180	; 0xb4
 80057e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80057ec:	2303      	movs	r3, #3
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80057f0:	232c      	movs	r3, #44	; 0x2c
 80057f2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8005800:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005804:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800580a:	2300      	movs	r3, #0
 800580c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800580e:	2306      	movs	r3, #6
 8005810:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8005838:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800583a:	2300      	movs	r3, #0
 800583c:	64bb      	str	r3, [r7, #72]	; 0x48
 800583e:	e009      	b.n	8005854 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005844:	4413      	add	r3, r2
 8005846:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800584e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005850:	3301      	adds	r3, #1
 8005852:	64bb      	str	r3, [r7, #72]	; 0x48
 8005854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	429a      	cmp	r2, r3
 800585a:	d3f1      	bcc.n	8005840 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800585c:	2201      	movs	r2, #1
 800585e:	21ff      	movs	r1, #255	; 0xff
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f002 ffd7 	bl	8008814 <VL53L0X_WrByte>
 8005866:	4603      	mov	r3, r0
 8005868:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800586c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005870:	2b00      	cmp	r3, #0
 8005872:	d107      	bne.n	8005884 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005874:	2200      	movs	r2, #0
 8005876:	214f      	movs	r1, #79	; 0x4f
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f002 ffcb 	bl	8008814 <VL53L0X_WrByte>
 800587e:	4603      	mov	r3, r0
 8005880:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005884:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005888:	2b00      	cmp	r3, #0
 800588a:	d107      	bne.n	800589c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800588c:	222c      	movs	r2, #44	; 0x2c
 800588e:	214e      	movs	r1, #78	; 0x4e
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f002 ffbf 	bl	8008814 <VL53L0X_WrByte>
 8005896:	4603      	mov	r3, r0
 8005898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800589c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d107      	bne.n	80058b4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80058a4:	2200      	movs	r2, #0
 80058a6:	21ff      	movs	r1, #255	; 0xff
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f002 ffb3 	bl	8008814 <VL53L0X_WrByte>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80058b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d109      	bne.n	80058d0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80058bc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80058c0:	461a      	mov	r2, r3
 80058c2:	21b6      	movs	r1, #182	; 0xb6
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f002 ffa5 	bl	8008814 <VL53L0X_WrByte>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80058d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d107      	bne.n	80058e8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80058d8:	2200      	movs	r2, #0
 80058da:	2180      	movs	r1, #128	; 0x80
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f002 ff99 	bl	8008814 <VL53L0X_WrByte>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80058e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80058f0:	f107 0210 	add.w	r2, r7, #16
 80058f4:	f107 0111 	add.w	r1, r7, #17
 80058f8:	2300      	movs	r3, #0
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 fbbb 	bl	8006076 <VL53L0X_perform_ref_calibration>
 8005900:	4603      	mov	r3, r0
 8005902:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8005906:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800590a:	2b00      	cmp	r3, #0
 800590c:	d121      	bne.n	8005952 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8005912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005914:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800591a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800592a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800592e:	f107 0218 	add.w	r2, r7, #24
 8005932:	9204      	str	r2, [sp, #16]
 8005934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005936:	9203      	str	r2, [sp, #12]
 8005938:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800593a:	9202      	str	r2, [sp, #8]
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	4623      	mov	r3, r4
 8005944:	4602      	mov	r2, r0
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7ff fe5e 	bl	8005608 <enable_ref_spads>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005952:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005956:	2b00      	cmp	r3, #0
 8005958:	d174      	bne.n	8005a44 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800595e:	f107 0312 	add.w	r3, r7, #18
 8005962:	4619      	mov	r1, r3
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff fecb 	bl	8005700 <perform_ref_signal_measurement>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005970:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005974:	2b00      	cmp	r3, #0
 8005976:	d161      	bne.n	8005a3c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8005978:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800597a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800597c:	429a      	cmp	r2, r3
 800597e:	d25d      	bcs.n	8005a3c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8005980:	2300      	movs	r3, #0
 8005982:	64bb      	str	r3, [r7, #72]	; 0x48
 8005984:	e009      	b.n	800599a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800598a:	4413      	add	r3, r2
 800598c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005996:	3301      	adds	r3, #1
 8005998:	64bb      	str	r3, [r7, #72]	; 0x48
 800599a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3f1      	bcc.n	8005986 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80059a2:	e002      	b.n	80059aa <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80059a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a6:	3301      	adds	r3, #1
 80059a8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80059aa:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80059ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b0:	4413      	add	r3, r2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fdb0 	bl	8005518 <is_aperture>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80059be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d3ee      	bcc.n	80059a4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80059c6:	2301      	movs	r3, #1
 80059c8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80059ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059cc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80059da:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80059de:	f107 0218 	add.w	r2, r7, #24
 80059e2:	9204      	str	r2, [sp, #16]
 80059e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059e6:	9203      	str	r2, [sp, #12]
 80059e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059ea:	9202      	str	r2, [sp, #8]
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	4623      	mov	r3, r4
 80059f4:	4602      	mov	r2, r0
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff fe06 	bl	8005608 <enable_ref_spads>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005a02:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d11b      	bne.n	8005a42 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8005a0e:	f107 0312 	add.w	r3, r7, #18
 8005a12:	4619      	mov	r1, r3
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f7ff fe73 	bl	8005700 <perform_ref_signal_measurement>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8005a20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10c      	bne.n	8005a42 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8005a28:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8005a2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d208      	bcs.n	8005a42 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8005a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a38:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8005a3a:	e002      	b.n	8005a42 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a40:	e000      	b.n	8005a44 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8005a42:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005a44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f040 80af 	bne.w	8005bac <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8005a4e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8005a50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a52:	429a      	cmp	r2, r3
 8005a54:	f240 80aa 	bls.w	8005bac <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8005a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a60:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8005a68:	f107 031c 	add.w	r3, r7, #28
 8005a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f003 f82a 	bl	8008ac8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8005a74:	8a7b      	ldrh	r3, [r7, #18]
 8005a76:	461a      	mov	r2, r3
 8005a78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bfb8      	it	lt
 8005a80:	425b      	neglt	r3, r3
 8005a82:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8005a8a:	e086      	b.n	8005b9a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8005a92:	f107 0314 	add.w	r3, r7, #20
 8005a96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a9a:	f7ff fcdf 	bl	800545c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d103      	bne.n	8005aae <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005aa6:	23ce      	movs	r3, #206	; 0xce
 8005aa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8005aac:	e07e      	b.n	8005bac <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8005aae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fd2e 	bl	8005518 <is_aperture>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8005acc:	e06e      	b.n	8005bac <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8005ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8005ade:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fd32 	bl	800554c <enable_spad_bit>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005aee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10c      	bne.n	8005b10 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8005af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af8:	3301      	adds	r3, #1
 8005afa:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8005b02:	4619      	mov	r1, r3
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff fd59 	bl	80055bc <set_ref_spad_map>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8005b10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d146      	bne.n	8005ba6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8005b18:	f107 0312 	add.w	r3, r7, #18
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff fdee 	bl	8005700 <perform_ref_signal_measurement>
 8005b24:	4603      	mov	r3, r0
 8005b26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8005b2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d13b      	bne.n	8005baa <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8005b32:	8a7b      	ldrh	r3, [r7, #18]
 8005b34:	461a      	mov	r2, r3
 8005b36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bfb8      	it	lt
 8005b3e:	425b      	neglt	r3, r3
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8005b42:	8a7b      	ldrh	r3, [r7, #18]
 8005b44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d21c      	bcs.n	8005b84 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d914      	bls.n	8005b7c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8005b52:	f107 031c 	add.w	r3, r7, #28
 8005b56:	4619      	mov	r1, r3
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff fd2f 	bl	80055bc <set_ref_spad_map>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8005b6a:	f107 011c 	add.w	r1, r7, #28
 8005b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b70:	4618      	mov	r0, r3
 8005b72:	f002 ffa9 	bl	8008ac8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8005b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b82:	e00a      	b.n	8005b9a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8005b8e:	f107 031c 	add.w	r3, r7, #28
 8005b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b94:	4618      	mov	r0, r3
 8005b96:	f002 ff97 	bl	8008ac8 <memcpy>
		while (!complete) {
 8005b9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f43f af74 	beq.w	8005a8c <VL53L0X_perform_ref_spad_management+0x2b8>
 8005ba4:	e002      	b.n	8005bac <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005baa:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005bac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d115      	bne.n	8005be0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bb8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005bc0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	781a      	ldrb	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8005be0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	375c      	adds	r7, #92	; 0x5c
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd90      	pop	{r4, r7, pc}

08005bec <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b093      	sub	sp, #76	; 0x4c
 8005bf0:	af06      	add	r7, sp, #24
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8005c04:	23b4      	movs	r3, #180	; 0xb4
 8005c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8005c0a:	2306      	movs	r3, #6
 8005c0c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8005c0e:	232c      	movs	r3, #44	; 0x2c
 8005c10:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005c12:	2201      	movs	r2, #1
 8005c14:	21ff      	movs	r1, #255	; 0xff
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f002 fdfc 	bl	8008814 <VL53L0X_WrByte>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005c22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d107      	bne.n	8005c3a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	214f      	movs	r1, #79	; 0x4f
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f002 fdf0 	bl	8008814 <VL53L0X_WrByte>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005c3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d107      	bne.n	8005c52 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8005c42:	222c      	movs	r2, #44	; 0x2c
 8005c44:	214e      	movs	r1, #78	; 0x4e
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f002 fde4 	bl	8008814 <VL53L0X_WrByte>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005c52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d107      	bne.n	8005c6a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	21ff      	movs	r1, #255	; 0xff
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f002 fdd8 	bl	8008814 <VL53L0X_WrByte>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005c6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d109      	bne.n	8005c86 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8005c72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c76:	461a      	mov	r2, r3
 8005c78:	21b6      	movs	r1, #182	; 0xb6
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f002 fdca 	bl	8008814 <VL53L0X_WrByte>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8005c86:	2300      	movs	r3, #0
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
 8005c8a:	e009      	b.n	8005ca0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005c96:	2200      	movs	r2, #0
 8005c98:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d3f1      	bcc.n	8005c8c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d011      	beq.n	8005cd2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005cae:	e002      	b.n	8005cb6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005cb6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	4413      	add	r3, r2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fc2a 	bl	8005518 <is_aperture>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d103      	bne.n	8005cd2 <VL53L0X_set_reference_spads+0xe6>
 8005cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d3ee      	bcc.n	8005cb0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8005cde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ce2:	79f9      	ldrb	r1, [r7, #7]
 8005ce4:	f107 0214 	add.w	r2, r7, #20
 8005ce8:	9204      	str	r2, [sp, #16]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	9203      	str	r2, [sp, #12]
 8005cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf0:	9202      	str	r2, [sp, #8]
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f7ff fc83 	bl	8005608 <enable_ref_spads>
 8005d02:	4603      	mov	r3, r0
 8005d04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8005d08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10c      	bne.n	8005d2a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	79fa      	ldrb	r2, [r7, #7]
 8005d26:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8005d2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3734      	adds	r7, #52	; 0x34
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd90      	pop	{r4, r7, pc}

08005d36 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	f043 0301 	orr.w	r3, r3, #1
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	461a      	mov	r2, r3
 8005d58:	2100      	movs	r1, #0
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f002 fd5a 	bl	8008814 <VL53L0X_WrByte>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d104      	bne.n	8005d76 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f9bf 	bl	80060f0 <VL53L0X_measurement_poll_for_completion>
 8005d72:	4603      	mov	r3, r0
 8005d74:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d105      	bne.n	8005d8a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005d7e:	2100      	movs	r1, #0
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff fab5 	bl	80052f0 <VL53L0X_ClearInterruptMask>
 8005d86:	4603      	mov	r3, r0
 8005d88:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005d92:	2200      	movs	r2, #0
 8005d94:	2100      	movs	r1, #0
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f002 fd3c 	bl	8008814 <VL53L0X_WrByte>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	4608      	mov	r0, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	4603      	mov	r3, r0
 8005dbc:	70fb      	strb	r3, [r7, #3]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	70bb      	strb	r3, [r7, #2]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005dce:	2201      	movs	r2, #1
 8005dd0:	21ff      	movs	r1, #255	; 0xff
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f002 fd1e 	bl	8008814 <VL53L0X_WrByte>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	461a      	mov	r2, r3
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005de2:	2200      	movs	r2, #0
 8005de4:	2100      	movs	r1, #0
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f002 fd14 	bl	8008814 <VL53L0X_WrByte>
 8005dec:	4603      	mov	r3, r0
 8005dee:	461a      	mov	r2, r3
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005df6:	2200      	movs	r2, #0
 8005df8:	21ff      	movs	r1, #255	; 0xff
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f002 fd0a 	bl	8008814 <VL53L0X_WrByte>
 8005e00:	4603      	mov	r3, r0
 8005e02:	461a      	mov	r2, r3
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01e      	beq.n	8005e4e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005e10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d009      	beq.n	8005e2c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	21cb      	movs	r1, #203	; 0xcb
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f002 fd7b 	bl	8008918 <VL53L0X_RdByte>
 8005e22:	4603      	mov	r3, r0
 8005e24:	461a      	mov	r2, r3
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005e2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d02a      	beq.n	8005e8a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005e34:	f107 030e 	add.w	r3, r7, #14
 8005e38:	461a      	mov	r2, r3
 8005e3a:	21ee      	movs	r1, #238	; 0xee
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f002 fd6b 	bl	8008918 <VL53L0X_RdByte>
 8005e42:	4603      	mov	r3, r0
 8005e44:	461a      	mov	r2, r3
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	73fb      	strb	r3, [r7, #15]
 8005e4c:	e01d      	b.n	8005e8a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005e56:	78bb      	ldrb	r3, [r7, #2]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	21cb      	movs	r1, #203	; 0xcb
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f002 fcd9 	bl	8008814 <VL53L0X_WrByte>
 8005e62:	4603      	mov	r3, r0
 8005e64:	461a      	mov	r2, r3
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005e6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005e74:	787b      	ldrb	r3, [r7, #1]
 8005e76:	2280      	movs	r2, #128	; 0x80
 8005e78:	21ee      	movs	r1, #238	; 0xee
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f002 fd18 	bl	80088b0 <VL53L0X_UpdateByte>
 8005e80:	4603      	mov	r3, r0
 8005e82:	461a      	mov	r2, r3
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	21ff      	movs	r1, #255	; 0xff
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f002 fcc0 	bl	8008814 <VL53L0X_WrByte>
 8005e94:	4603      	mov	r3, r0
 8005e96:	461a      	mov	r2, r3
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f002 fcb6 	bl	8008814 <VL53L0X_WrByte>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	461a      	mov	r2, r3
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	21ff      	movs	r1, #255	; 0xff
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f002 fcac 	bl	8008814 <VL53L0X_WrByte>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005ec6:	7bbb      	ldrb	r3, [r7, #14]
 8005ec8:	f023 0310 	bic.w	r3, r3, #16
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	701a      	strb	r2, [r3, #0]

	return Status;
 8005ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b08a      	sub	sp, #40	; 0x28
 8005ee2:	af04      	add	r7, sp, #16
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	4611      	mov	r1, r2
 8005eea:	461a      	mov	r2, r3
 8005eec:	460b      	mov	r3, r1
 8005eee:	71fb      	strb	r3, [r7, #7]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005f08:	79bb      	ldrb	r3, [r7, #6]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005f14:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005f16:	2201      	movs	r2, #1
 8005f18:	2101      	movs	r1, #1
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f002 fc7a 	bl	8008814 <VL53L0X_WrByte>
 8005f20:	4603      	mov	r3, r0
 8005f22:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005f24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d105      	bne.n	8005f38 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005f2c:	2140      	movs	r1, #64	; 0x40
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f7ff ff01 	bl	8005d36 <VL53L0X_perform_single_ref_calibration>
 8005f34:	4603      	mov	r3, r0
 8005f36:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005f38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d115      	bne.n	8005f6c <VL53L0X_perform_vhv_calibration+0x8e>
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d112      	bne.n	8005f6c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005f46:	7d39      	ldrb	r1, [r7, #20]
 8005f48:	7d7a      	ldrb	r2, [r7, #21]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9303      	str	r3, [sp, #12]
 8005f4e:	2301      	movs	r3, #1
 8005f50:	9302      	str	r3, [sp, #8]
 8005f52:	f107 0313 	add.w	r3, r7, #19
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	2101      	movs	r1, #1
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7ff ff23 	bl	8005dac <VL53L0X_ref_calibration_io>
 8005f66:	4603      	mov	r3, r0
 8005f68:	75fb      	strb	r3, [r7, #23]
 8005f6a:	e002      	b.n	8005f72 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d112      	bne.n	8005fa0 <VL53L0X_perform_vhv_calibration+0xc2>
 8005f7a:	79bb      	ldrb	r3, [r7, #6]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00f      	beq.n	8005fa0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005f80:	7dbb      	ldrb	r3, [r7, #22]
 8005f82:	461a      	mov	r2, r3
 8005f84:	2101      	movs	r1, #1
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f002 fc44 	bl	8008814 <VL53L0X_WrByte>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d103      	bne.n	8005fa0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	7dba      	ldrb	r2, [r7, #22]
 8005f9c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	; 0x28
 8005fb0:	af04      	add	r7, sp, #16
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	460b      	mov	r3, r1
 8005fbc:	71fb      	strb	r3, [r7, #7]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005fd2:	79bb      	ldrb	r3, [r7, #6]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005fde:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f002 fc15 	bl	8008814 <VL53L0X_WrByte>
 8005fea:	4603      	mov	r3, r0
 8005fec:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d105      	bne.n	8006002 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f7ff fe9c 	bl	8005d36 <VL53L0X_perform_single_ref_calibration>
 8005ffe:	4603      	mov	r3, r0
 8006000:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006002:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d115      	bne.n	8006036 <VL53L0X_perform_phase_calibration+0x8a>
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d112      	bne.n	8006036 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006010:	7d39      	ldrb	r1, [r7, #20]
 8006012:	7d7a      	ldrb	r2, [r7, #21]
 8006014:	2301      	movs	r3, #1
 8006016:	9303      	str	r3, [sp, #12]
 8006018:	2300      	movs	r3, #0
 800601a:	9302      	str	r3, [sp, #8]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	f107 0313 	add.w	r3, r7, #19
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	460b      	mov	r3, r1
 8006028:	2101      	movs	r1, #1
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff febe 	bl	8005dac <VL53L0X_ref_calibration_io>
 8006030:	4603      	mov	r3, r0
 8006032:	75fb      	strb	r3, [r7, #23]
 8006034:	e002      	b.n	800603c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800603c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d112      	bne.n	800606a <VL53L0X_perform_phase_calibration+0xbe>
 8006044:	79bb      	ldrb	r3, [r7, #6]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00f      	beq.n	800606a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800604a:	7dbb      	ldrb	r3, [r7, #22]
 800604c:	461a      	mov	r2, r3
 800604e:	2101      	movs	r1, #1
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f002 fbdf 	bl	8008814 <VL53L0X_WrByte>
 8006056:	4603      	mov	r3, r0
 8006058:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800605a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d103      	bne.n	800606a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	7dba      	ldrb	r2, [r7, #22]
 8006066:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800606a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b086      	sub	sp, #24
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	607a      	str	r2, [r7, #4]
 8006082:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006084:	2300      	movs	r3, #0
 8006086:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006092:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006094:	78fa      	ldrb	r2, [r7, #3]
 8006096:	2300      	movs	r3, #0
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f7ff ff1f 	bl	8005ede <VL53L0X_perform_vhv_calibration>
 80060a0:	4603      	mov	r3, r0
 80060a2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80060a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d107      	bne.n	80060bc <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	2300      	movs	r3, #0
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff ff7a 	bl	8005fac <VL53L0X_perform_phase_calibration>
 80060b8:	4603      	mov	r3, r0
 80060ba:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80060bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10f      	bne.n	80060e4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80060c4:	7dbb      	ldrb	r3, [r7, #22]
 80060c6:	461a      	mov	r2, r3
 80060c8:	2101      	movs	r1, #1
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f002 fba2 	bl	8008814 <VL53L0X_WrByte>
 80060d0:	4603      	mov	r3, r0
 80060d2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80060d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	7dba      	ldrb	r2, [r7, #22]
 80060e0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80060e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006104:	f107 030f 	add.w	r3, r7, #15
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fe fdff 	bl	8004d0e <VL53L0X_GetMeasurementDataReady>
 8006110:	4603      	mov	r3, r0
 8006112:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8006114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d110      	bne.n	800613e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d00f      	beq.n	8006142 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	3301      	adds	r3, #1
 8006126:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800612e:	d302      	bcc.n	8006136 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006130:	23f9      	movs	r3, #249	; 0xf9
 8006132:	75fb      	strb	r3, [r7, #23]
			break;
 8006134:	e006      	b.n	8006144 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f002 fc8c 	bl	8008a54 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800613c:	e7e2      	b.n	8006104 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800613e:	bf00      	nop
 8006140:	e000      	b.n	8006144 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8006142:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8006144:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	3301      	adds	r3, #1
 8006162:	b2db      	uxtb	r3, r3
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006168:	7bfb      	ldrb	r3, [r7, #15]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	4603      	mov	r3, r0
 800617e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8006180:	2300      	movs	r3, #0
 8006182:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	b2db      	uxtb	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800618e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80061a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061ac:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80061ae:	e002      	b.n	80061b6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d8f8      	bhi.n	80061b0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80061be:	e017      	b.n	80061f0 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4413      	add	r3, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d30b      	bcc.n	80061e4 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4413      	add	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	4413      	add	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	e002      	b.n	80061ea <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	089b      	lsrs	r3, r3, #2
 80061ee:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e4      	bne.n	80061c0 <VL53L0X_isqrt+0x24>
	}

	return res;
 80061f6:	68fb      	ldr	r3, [r7, #12]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800620c:	2300      	movs	r3, #0
 800620e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006210:	2200      	movs	r2, #0
 8006212:	2183      	movs	r1, #131	; 0x83
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f002 fafd 	bl	8008814 <VL53L0X_WrByte>
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	4313      	orrs	r3, r2
 8006222:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8006224:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d11e      	bne.n	800626a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006230:	f107 030f 	add.w	r3, r7, #15
 8006234:	461a      	mov	r2, r3
 8006236:	2183      	movs	r1, #131	; 0x83
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f002 fb6d 	bl	8008918 <VL53L0X_RdByte>
 800623e:	4603      	mov	r3, r0
 8006240:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <VL53L0X_device_read_strobe+0x5a>
 8006248:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d106      	bne.n	800625e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	3301      	adds	r3, #1
 8006254:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800625c:	d3e8      	bcc.n	8006230 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006264:	d301      	bcc.n	800626a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006266:	23f9      	movs	r3, #249	; 0xf9
 8006268:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800626a:	2201      	movs	r2, #1
 800626c:	2183      	movs	r1, #131	; 0x83
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f002 fad0 	bl	8008814 <VL53L0X_WrByte>
 8006274:	4603      	mov	r3, r0
 8006276:	461a      	mov	r2, r3
 8006278:	7dfb      	ldrb	r3, [r7, #23]
 800627a:	4313      	orrs	r3, r2
 800627c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800627e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b098      	sub	sp, #96	; 0x60
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	460b      	mov	r3, r1
 8006294:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006296:	2300      	movs	r3, #0
 8006298:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80062ba:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80062be:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80062c8:	2300      	movs	r3, #0
 80062ca:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80062d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80062d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80062da:	2b07      	cmp	r3, #7
 80062dc:	f000 8408 	beq.w	8006af0 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80062e0:	2201      	movs	r2, #1
 80062e2:	2180      	movs	r1, #128	; 0x80
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f002 fa95 	bl	8008814 <VL53L0X_WrByte>
 80062ea:	4603      	mov	r3, r0
 80062ec:	461a      	mov	r2, r3
 80062ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80062f8:	2201      	movs	r2, #1
 80062fa:	21ff      	movs	r1, #255	; 0xff
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f002 fa89 	bl	8008814 <VL53L0X_WrByte>
 8006302:	4603      	mov	r3, r0
 8006304:	461a      	mov	r2, r3
 8006306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800630a:	4313      	orrs	r3, r2
 800630c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006310:	2200      	movs	r2, #0
 8006312:	2100      	movs	r1, #0
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f002 fa7d 	bl	8008814 <VL53L0X_WrByte>
 800631a:	4603      	mov	r3, r0
 800631c:	461a      	mov	r2, r3
 800631e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006322:	4313      	orrs	r3, r2
 8006324:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006328:	2206      	movs	r2, #6
 800632a:	21ff      	movs	r1, #255	; 0xff
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f002 fa71 	bl	8008814 <VL53L0X_WrByte>
 8006332:	4603      	mov	r3, r0
 8006334:	461a      	mov	r2, r3
 8006336:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800633a:	4313      	orrs	r3, r2
 800633c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006340:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006344:	461a      	mov	r2, r3
 8006346:	2183      	movs	r1, #131	; 0x83
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f002 fae5 	bl	8008918 <VL53L0X_RdByte>
 800634e:	4603      	mov	r3, r0
 8006350:	461a      	mov	r2, r3
 8006352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006356:	4313      	orrs	r3, r2
 8006358:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800635c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006360:	f043 0304 	orr.w	r3, r3, #4
 8006364:	b2db      	uxtb	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	2183      	movs	r1, #131	; 0x83
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f002 fa52 	bl	8008814 <VL53L0X_WrByte>
 8006370:	4603      	mov	r3, r0
 8006372:	461a      	mov	r2, r3
 8006374:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006378:	4313      	orrs	r3, r2
 800637a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800637e:	2207      	movs	r2, #7
 8006380:	21ff      	movs	r1, #255	; 0xff
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f002 fa46 	bl	8008814 <VL53L0X_WrByte>
 8006388:	4603      	mov	r3, r0
 800638a:	461a      	mov	r2, r3
 800638c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006390:	4313      	orrs	r3, r2
 8006392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006396:	2201      	movs	r2, #1
 8006398:	2181      	movs	r1, #129	; 0x81
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f002 fa3a 	bl	8008814 <VL53L0X_WrByte>
 80063a0:	4603      	mov	r3, r0
 80063a2:	461a      	mov	r2, r3
 80063a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f002 fb50 	bl	8008a54 <VL53L0X_PollingDelay>
 80063b4:	4603      	mov	r3, r0
 80063b6:	461a      	mov	r2, r3
 80063b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063bc:	4313      	orrs	r3, r2
 80063be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80063c2:	2201      	movs	r2, #1
 80063c4:	2180      	movs	r1, #128	; 0x80
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f002 fa24 	bl	8008814 <VL53L0X_WrByte>
 80063cc:	4603      	mov	r3, r0
 80063ce:	461a      	mov	r2, r3
 80063d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8098 	beq.w	8006516 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80063e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063ea:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 8091 	bne.w	8006516 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80063f4:	226b      	movs	r2, #107	; 0x6b
 80063f6:	2194      	movs	r1, #148	; 0x94
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f002 fa0b 	bl	8008814 <VL53L0X_WrByte>
 80063fe:	4603      	mov	r3, r0
 8006400:	461a      	mov	r2, r3
 8006402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006406:	4313      	orrs	r3, r2
 8006408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff fef9 	bl	8006204 <VL53L0X_device_read_strobe>
 8006412:	4603      	mov	r3, r0
 8006414:	461a      	mov	r2, r3
 8006416:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800641a:	4313      	orrs	r3, r2
 800641c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006420:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006424:	461a      	mov	r2, r3
 8006426:	2190      	movs	r1, #144	; 0x90
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f002 fad7 	bl	80089dc <VL53L0X_RdDWord>
 800642e:	4603      	mov	r3, r0
 8006430:	461a      	mov	r2, r3
 8006432:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006436:	4313      	orrs	r3, r2
 8006438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	0a1b      	lsrs	r3, r3, #8
 8006440:	b2db      	uxtb	r3, r3
 8006442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006446:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	0bdb      	lsrs	r3, r3, #15
 800644e:	b2db      	uxtb	r3, r3
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006458:	2224      	movs	r2, #36	; 0x24
 800645a:	2194      	movs	r1, #148	; 0x94
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f002 f9d9 	bl	8008814 <VL53L0X_WrByte>
 8006462:	4603      	mov	r3, r0
 8006464:	461a      	mov	r2, r3
 8006466:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800646a:	4313      	orrs	r3, r2
 800646c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff fec7 	bl	8006204 <VL53L0X_device_read_strobe>
 8006476:	4603      	mov	r3, r0
 8006478:	461a      	mov	r2, r3
 800647a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800647e:	4313      	orrs	r3, r2
 8006480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006488:	461a      	mov	r2, r3
 800648a:	2190      	movs	r1, #144	; 0x90
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f002 faa5 	bl	80089dc <VL53L0X_RdDWord>
 8006492:	4603      	mov	r3, r0
 8006494:	461a      	mov	r2, r3
 8006496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800649a:	4313      	orrs	r3, r2
 800649c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	0e1b      	lsrs	r3, r3, #24
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	0c1b      	lsrs	r3, r3, #16
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80064be:	2225      	movs	r2, #37	; 0x25
 80064c0:	2194      	movs	r1, #148	; 0x94
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f002 f9a6 	bl	8008814 <VL53L0X_WrByte>
 80064c8:	4603      	mov	r3, r0
 80064ca:	461a      	mov	r2, r3
 80064cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff fe94 	bl	8006204 <VL53L0X_device_read_strobe>
 80064dc:	4603      	mov	r3, r0
 80064de:	461a      	mov	r2, r3
 80064e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80064ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064ee:	461a      	mov	r2, r3
 80064f0:	2190      	movs	r1, #144	; 0x90
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f002 fa72 	bl	80089dc <VL53L0X_RdDWord>
 80064f8:	4603      	mov	r3, r0
 80064fa:	461a      	mov	r2, r3
 80064fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006500:	4313      	orrs	r3, r2
 8006502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	0e1b      	lsrs	r3, r3, #24
 800650a:	b2db      	uxtb	r3, r3
 800650c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	b2db      	uxtb	r3, r3
 8006514:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006516:	78fb      	ldrb	r3, [r7, #3]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8189 	beq.w	8006834 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006522:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006526:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800652a:	2b00      	cmp	r3, #0
 800652c:	f040 8182 	bne.w	8006834 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006530:	2202      	movs	r2, #2
 8006532:	2194      	movs	r1, #148	; 0x94
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f002 f96d 	bl	8008814 <VL53L0X_WrByte>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
 800653e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006542:	4313      	orrs	r3, r2
 8006544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fe5b 	bl	8006204 <VL53L0X_device_read_strobe>
 800654e:	4603      	mov	r3, r0
 8006550:	461a      	mov	r2, r3
 8006552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006556:	4313      	orrs	r3, r2
 8006558:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800655c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8006560:	461a      	mov	r2, r3
 8006562:	2190      	movs	r1, #144	; 0x90
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f002 f9d7 	bl	8008918 <VL53L0X_RdByte>
 800656a:	4603      	mov	r3, r0
 800656c:	461a      	mov	r2, r3
 800656e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006572:	4313      	orrs	r3, r2
 8006574:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006578:	227b      	movs	r2, #123	; 0x7b
 800657a:	2194      	movs	r1, #148	; 0x94
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f002 f949 	bl	8008814 <VL53L0X_WrByte>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800658a:	4313      	orrs	r3, r2
 800658c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fe37 	bl	8006204 <VL53L0X_device_read_strobe>
 8006596:	4603      	mov	r3, r0
 8006598:	461a      	mov	r2, r3
 800659a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800659e:	4313      	orrs	r3, r2
 80065a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80065a4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80065a8:	461a      	mov	r2, r3
 80065aa:	2190      	movs	r1, #144	; 0x90
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f002 f9b3 	bl	8008918 <VL53L0X_RdByte>
 80065b2:	4603      	mov	r3, r0
 80065b4:	461a      	mov	r2, r3
 80065b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80065c0:	2277      	movs	r2, #119	; 0x77
 80065c2:	2194      	movs	r1, #148	; 0x94
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f002 f925 	bl	8008814 <VL53L0X_WrByte>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461a      	mov	r2, r3
 80065ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff fe13 	bl	8006204 <VL53L0X_device_read_strobe>
 80065de:	4603      	mov	r3, r0
 80065e0:	461a      	mov	r2, r3
 80065e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80065ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065f0:	461a      	mov	r2, r3
 80065f2:	2190      	movs	r1, #144	; 0x90
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f002 f9f1 	bl	80089dc <VL53L0X_RdDWord>
 80065fa:	4603      	mov	r3, r0
 80065fc:	461a      	mov	r2, r3
 80065fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006602:	4313      	orrs	r3, r2
 8006604:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	0e5b      	lsrs	r3, r3, #25
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006612:	b2db      	uxtb	r3, r3
 8006614:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	0c9b      	lsrs	r3, r3, #18
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006620:	b2db      	uxtb	r3, r3
 8006622:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	0adb      	lsrs	r3, r3, #11
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800662e:	b2db      	uxtb	r3, r3
 8006630:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	091b      	lsrs	r3, r3, #4
 8006636:	b2db      	uxtb	r3, r3
 8006638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800663c:	b2db      	uxtb	r3, r3
 800663e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	b2db      	uxtb	r3, r3
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006652:	2278      	movs	r2, #120	; 0x78
 8006654:	2194      	movs	r1, #148	; 0x94
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f002 f8dc 	bl	8008814 <VL53L0X_WrByte>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006664:	4313      	orrs	r3, r2
 8006666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff fdca 	bl	8006204 <VL53L0X_device_read_strobe>
 8006670:	4603      	mov	r3, r0
 8006672:	461a      	mov	r2, r3
 8006674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006678:	4313      	orrs	r3, r2
 800667a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800667e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006682:	461a      	mov	r2, r3
 8006684:	2190      	movs	r1, #144	; 0x90
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f002 f9a8 	bl	80089dc <VL53L0X_RdDWord>
 800668c:	4603      	mov	r3, r0
 800668e:	461a      	mov	r2, r3
 8006690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006694:	4313      	orrs	r3, r2
 8006696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	0f5b      	lsrs	r3, r3, #29
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066a4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80066a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066aa:	4413      	add	r3, r2
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	0d9b      	lsrs	r3, r3, #22
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	0bdb      	lsrs	r3, r3, #15
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	085b      	lsrs	r3, r3, #1
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	019b      	lsls	r3, r3, #6
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80066fa:	2279      	movs	r2, #121	; 0x79
 80066fc:	2194      	movs	r1, #148	; 0x94
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f002 f888 	bl	8008814 <VL53L0X_WrByte>
 8006704:	4603      	mov	r3, r0
 8006706:	461a      	mov	r2, r3
 8006708:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800670c:	4313      	orrs	r3, r2
 800670e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff fd76 	bl	8006204 <VL53L0X_device_read_strobe>
 8006718:	4603      	mov	r3, r0
 800671a:	461a      	mov	r2, r3
 800671c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006720:	4313      	orrs	r3, r2
 8006722:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006726:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800672a:	461a      	mov	r2, r3
 800672c:	2190      	movs	r1, #144	; 0x90
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f002 f954 	bl	80089dc <VL53L0X_RdDWord>
 8006734:	4603      	mov	r3, r0
 8006736:	461a      	mov	r2, r3
 8006738:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800673c:	4313      	orrs	r3, r2
 800673e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	0e9b      	lsrs	r3, r3, #26
 8006746:	b2db      	uxtb	r3, r3
 8006748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800674c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800674e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006752:	4413      	add	r3, r2
 8006754:	b2db      	uxtb	r3, r3
 8006756:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675a:	0cdb      	lsrs	r3, r3, #19
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006762:	b2db      	uxtb	r3, r3
 8006764:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	0b1b      	lsrs	r3, r3, #12
 800676a:	b2db      	uxtb	r3, r3
 800676c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006770:	b2db      	uxtb	r3, r3
 8006772:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800677e:	b2db      	uxtb	r3, r3
 8006780:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	b2db      	uxtb	r3, r3
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800678e:	b2db      	uxtb	r3, r3
 8006790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006794:	227a      	movs	r2, #122	; 0x7a
 8006796:	2194      	movs	r1, #148	; 0x94
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f002 f83b 	bl	8008814 <VL53L0X_WrByte>
 800679e:	4603      	mov	r3, r0
 80067a0:	461a      	mov	r2, r3
 80067a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067a6:	4313      	orrs	r3, r2
 80067a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff fd29 	bl	8006204 <VL53L0X_device_read_strobe>
 80067b2:	4603      	mov	r3, r0
 80067b4:	461a      	mov	r2, r3
 80067b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80067c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067c4:	461a      	mov	r2, r3
 80067c6:	2190      	movs	r1, #144	; 0x90
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f002 f907 	bl	80089dc <VL53L0X_RdDWord>
 80067ce:	4603      	mov	r3, r0
 80067d0:	461a      	mov	r2, r3
 80067d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067d6:	4313      	orrs	r3, r2
 80067d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	0f9b      	lsrs	r3, r3, #30
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e6:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80067e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067ec:	4413      	add	r3, r2
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	0ddb      	lsrs	r3, r3, #23
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	0c1b      	lsrs	r3, r3, #16
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800680a:	b2db      	uxtb	r3, r3
 800680c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	0a5b      	lsrs	r3, r3, #9
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	089b      	lsrs	r3, r3, #2
 8006822:	b2db      	uxtb	r3, r3
 8006824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800682e:	2300      	movs	r3, #0
 8006830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 80f1 	beq.w	8006a22 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006840:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006844:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006848:	2b00      	cmp	r3, #0
 800684a:	f040 80ea 	bne.w	8006a22 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800684e:	227b      	movs	r2, #123	; 0x7b
 8006850:	2194      	movs	r1, #148	; 0x94
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 ffde 	bl	8008814 <VL53L0X_WrByte>
 8006858:	4603      	mov	r3, r0
 800685a:	461a      	mov	r2, r3
 800685c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006860:	4313      	orrs	r3, r2
 8006862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff fccc 	bl	8006204 <VL53L0X_device_read_strobe>
 800686c:	4603      	mov	r3, r0
 800686e:	461a      	mov	r2, r3
 8006870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006874:	4313      	orrs	r3, r2
 8006876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800687a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800687e:	461a      	mov	r2, r3
 8006880:	2190      	movs	r1, #144	; 0x90
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f002 f8aa 	bl	80089dc <VL53L0X_RdDWord>
 8006888:	4603      	mov	r3, r0
 800688a:	461a      	mov	r2, r3
 800688c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006890:	4313      	orrs	r3, r2
 8006892:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006896:	227c      	movs	r2, #124	; 0x7c
 8006898:	2194      	movs	r1, #148	; 0x94
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 ffba 	bl	8008814 <VL53L0X_WrByte>
 80068a0:	4603      	mov	r3, r0
 80068a2:	461a      	mov	r2, r3
 80068a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff fca8 	bl	8006204 <VL53L0X_device_read_strobe>
 80068b4:	4603      	mov	r3, r0
 80068b6:	461a      	mov	r2, r3
 80068b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068bc:	4313      	orrs	r3, r2
 80068be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80068c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068c6:	461a      	mov	r2, r3
 80068c8:	2190      	movs	r1, #144	; 0x90
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f002 f886 	bl	80089dc <VL53L0X_RdDWord>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068d8:	4313      	orrs	r3, r2
 80068da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80068de:	2273      	movs	r2, #115	; 0x73
 80068e0:	2194      	movs	r1, #148	; 0x94
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 ff96 	bl	8008814 <VL53L0X_WrByte>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff fc84 	bl	8006204 <VL53L0X_device_read_strobe>
 80068fc:	4603      	mov	r3, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006904:	4313      	orrs	r3, r2
 8006906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800690a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800690e:	461a      	mov	r2, r3
 8006910:	2190      	movs	r1, #144	; 0x90
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f002 f862 	bl	80089dc <VL53L0X_RdDWord>
 8006918:	4603      	mov	r3, r0
 800691a:	461a      	mov	r2, r3
 800691c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006920:	4313      	orrs	r3, r2
 8006922:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800692a:	b29b      	uxth	r3, r3
 800692c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800692e:	2274      	movs	r2, #116	; 0x74
 8006930:	2194      	movs	r1, #148	; 0x94
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 ff6e 	bl	8008814 <VL53L0X_WrByte>
 8006938:	4603      	mov	r3, r0
 800693a:	461a      	mov	r2, r3
 800693c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006940:	4313      	orrs	r3, r2
 8006942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff fc5c 	bl	8006204 <VL53L0X_device_read_strobe>
 800694c:	4603      	mov	r3, r0
 800694e:	461a      	mov	r2, r3
 8006950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006954:	4313      	orrs	r3, r2
 8006956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800695a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800695e:	461a      	mov	r2, r3
 8006960:	2190      	movs	r1, #144	; 0x90
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f002 f83a 	bl	80089dc <VL53L0X_RdDWord>
 8006968:	4603      	mov	r3, r0
 800696a:	461a      	mov	r2, r3
 800696c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006970:	4313      	orrs	r3, r2
 8006972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800697a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800697c:	4313      	orrs	r3, r2
 800697e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006980:	2275      	movs	r2, #117	; 0x75
 8006982:	2194      	movs	r1, #148	; 0x94
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 ff45 	bl	8008814 <VL53L0X_WrByte>
 800698a:	4603      	mov	r3, r0
 800698c:	461a      	mov	r2, r3
 800698e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006992:	4313      	orrs	r3, r2
 8006994:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff fc33 	bl	8006204 <VL53L0X_device_read_strobe>
 800699e:	4603      	mov	r3, r0
 80069a0:	461a      	mov	r2, r3
 80069a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80069ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069b0:	461a      	mov	r2, r3
 80069b2:	2190      	movs	r1, #144	; 0x90
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f002 f811 	bl	80089dc <VL53L0X_RdDWord>
 80069ba:	4603      	mov	r3, r0
 80069bc:	461a      	mov	r2, r3
 80069be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80069d0:	2276      	movs	r2, #118	; 0x76
 80069d2:	2194      	movs	r1, #148	; 0x94
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 ff1d 	bl	8008814 <VL53L0X_WrByte>
 80069da:	4603      	mov	r3, r0
 80069dc:	461a      	mov	r2, r3
 80069de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff fc0b 	bl	8006204 <VL53L0X_device_read_strobe>
 80069ee:	4603      	mov	r3, r0
 80069f0:	461a      	mov	r2, r3
 80069f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80069fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a00:	461a      	mov	r2, r3
 8006a02:	2190      	movs	r1, #144	; 0x90
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 ffe9 	bl	80089dc <VL53L0X_RdDWord>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006a1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006a22:	2200      	movs	r2, #0
 8006a24:	2181      	movs	r1, #129	; 0x81
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 fef4 	bl	8008814 <VL53L0X_WrByte>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a34:	4313      	orrs	r3, r2
 8006a36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006a3a:	2206      	movs	r2, #6
 8006a3c:	21ff      	movs	r1, #255	; 0xff
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fee8 	bl	8008814 <VL53L0X_WrByte>
 8006a44:	4603      	mov	r3, r0
 8006a46:	461a      	mov	r2, r3
 8006a48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006a52:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006a56:	461a      	mov	r2, r3
 8006a58:	2183      	movs	r1, #131	; 0x83
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f001 ff5c 	bl	8008918 <VL53L0X_RdByte>
 8006a60:	4603      	mov	r3, r0
 8006a62:	461a      	mov	r2, r3
 8006a64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006a6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a72:	f023 0304 	bic.w	r3, r3, #4
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	2183      	movs	r1, #131	; 0x83
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 fec9 	bl	8008814 <VL53L0X_WrByte>
 8006a82:	4603      	mov	r3, r0
 8006a84:	461a      	mov	r2, r3
 8006a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006a90:	2201      	movs	r2, #1
 8006a92:	21ff      	movs	r1, #255	; 0xff
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 febd 	bl	8008814 <VL53L0X_WrByte>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	2100      	movs	r1, #0
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 feb1 	bl	8008814 <VL53L0X_WrByte>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	21ff      	movs	r1, #255	; 0xff
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 fea5 	bl	8008814 <VL53L0X_WrByte>
 8006aca:	4603      	mov	r3, r0
 8006acc:	461a      	mov	r2, r3
 8006ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2180      	movs	r1, #128	; 0x80
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fe99 	bl	8008814 <VL53L0X_WrByte>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006af0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f040 808f 	bne.w	8006c18 <VL53L0X_get_info_from_device+0x98e>
 8006afa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006afe:	2b07      	cmp	r3, #7
 8006b00:	f000 808a 	beq.w	8006c18 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d024      	beq.n	8006b58 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006b0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b12:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d11e      	bne.n	8006b58 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006b20:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8006b2a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006b2e:	2300      	movs	r3, #0
 8006b30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b32:	e00e      	b.n	8006b52 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8006b34:	f107 0208 	add.w	r2, r7, #8
 8006b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3a:	4413      	add	r3, r2
 8006b3c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006b48:	460a      	mov	r2, r1
 8006b4a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4e:	3301      	adds	r3, #1
 8006b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b54:	2b05      	cmp	r3, #5
 8006b56:	dded      	ble.n	8006b34 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d018      	beq.n	8006b94 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006b62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b66:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d112      	bne.n	8006b94 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b6e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b78:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	33f3      	adds	r3, #243	; 0xf3
 8006b86:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006b88:	f107 0310 	add.w	r3, r7, #16
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b90:	f002 f8d8 	bl	8008d44 <strcpy>

		}

		if (((option & 4) == 4) &&
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d030      	beq.n	8006c00 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006b9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ba2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d12a      	bne.n	8006c00 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bbc:	025b      	lsls	r3, r3, #9
 8006bbe:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bc4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8006bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d011      	beq.n	8006bf8 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8006bd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8006be8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8006bec:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006bf0:	425b      	negs	r3, r3
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8006bf8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006c00:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8006c0e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c18:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3760      	adds	r7, #96	; 0x60
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006c24:	b490      	push	{r4, r7}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006c30:	f240 6377 	movw	r3, #1655	; 0x677
 8006c34:	f04f 0400 	mov.w	r4, #0
 8006c38:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8006c3c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006c40:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	fb02 f303 	mul.w	r3, r2, r3
 8006c50:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8006c52:	68bb      	ldr	r3, [r7, #8]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc90      	pop	{r4, r7}
 8006c5c:	4770      	bx	lr

08006c5e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b087      	sub	sp, #28
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006c66:	2300      	movs	r3, #0
 8006c68:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d017      	beq.n	8006ca8 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006c7e:	e005      	b.n	8006c8c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006c86:	89fb      	ldrh	r3, [r7, #14]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f4      	bne.n	8006c80 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006c96:	89fb      	ldrh	r3, [r7, #14]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8006ca4:	4413      	add	r3, r2
 8006ca6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8006ca8:	8afb      	ldrh	r3, [r7, #22]

}
 8006caa:	4618      	mov	r0, r3
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b085      	sub	sp, #20
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006cc8:	88fa      	ldrh	r2, [r7, #6]
 8006cca:	0a12      	lsrs	r2, r2, #8
 8006ccc:	b292      	uxth	r2, r2
 8006cce:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
	...

08006ce4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006cf6:	79fb      	ldrb	r3, [r7, #7]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7ff ff92 	bl	8006c24 <VL53L0X_calc_macro_period_ps>
 8006d00:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006d08:	4a0a      	ldr	r2, [pc, #40]	; (8006d34 <VL53L0X_calc_timeout_mclks+0x50>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	099b      	lsrs	r3, r3, #6
 8006d10:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d18:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	441a      	add	r2, r3
	timeout_period_mclks =
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d28:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8006d2a:	69fb      	ldr	r3, [r7, #28]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3720      	adds	r7, #32
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	10624dd3 	.word	0x10624dd3

08006d38 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	807b      	strh	r3, [r7, #2]
 8006d44:	4613      	mov	r3, r2
 8006d46:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006d4c:	787b      	ldrb	r3, [r7, #1]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff ff67 	bl	8006c24 <VL53L0X_calc_macro_period_ps>
 8006d56:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006d5e:	4a0a      	ldr	r2, [pc, #40]	; (8006d88 <VL53L0X_calc_timeout_us+0x50>)
 8006d60:	fba2 2303 	umull	r2, r3, r2, r3
 8006d64:	099b      	lsrs	r3, r3, #6
 8006d66:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006d68:	887b      	ldrh	r3, [r7, #2]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	fb02 f303 	mul.w	r3, r2, r3
 8006d70:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8006d74:	4a04      	ldr	r2, [pc, #16]	; (8006d88 <VL53L0X_calc_timeout_us+0x50>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	099b      	lsrs	r3, r3, #6
 8006d7c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006d7e:	697b      	ldr	r3, [r7, #20]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	10624dd3 	.word	0x10624dd3

08006d8c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08c      	sub	sp, #48	; 0x30
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	460b      	mov	r3, r1
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8006da6:	2300      	movs	r3, #0
 8006da8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006db2:	7afb      	ldrb	r3, [r7, #11]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <get_sequence_step_timeout+0x38>
 8006db8:	7afb      	ldrb	r3, [r7, #11]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d002      	beq.n	8006dc4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006dbe:	7afb      	ldrb	r3, [r7, #11]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d128      	bne.n	8006e16 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006dc4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006dc8:	461a      	mov	r2, r3
 8006dca:	2100      	movs	r1, #0
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7fd fa7d 	bl	80042cc <VL53L0X_GetVcselPulsePeriod>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006dd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006de0:	f107 0320 	add.w	r3, r7, #32
 8006de4:	461a      	mov	r2, r3
 8006de6:	2146      	movs	r1, #70	; 0x46
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f001 fd95 	bl	8008918 <VL53L0X_RdByte>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006df4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff ff5b 	bl	8006cb6 <VL53L0X_decode_timeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006e04:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006e08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff ff93 	bl	8006d38 <VL53L0X_calc_timeout_us>
 8006e12:	62b8      	str	r0, [r7, #40]	; 0x28
 8006e14:	e092      	b.n	8006f3c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d135      	bne.n	8006e88 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e1c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006e20:	461a      	mov	r2, r3
 8006e22:	2100      	movs	r1, #0
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f7fd fa51 	bl	80042cc <VL53L0X_GetVcselPulsePeriod>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006e30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f040 8081 	bne.w	8006f3c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e3a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2100      	movs	r1, #0
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7fd fa42 	bl	80042cc <VL53L0X_GetVcselPulsePeriod>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006e4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006e56:	f107 031e 	add.w	r3, r7, #30
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	2151      	movs	r1, #81	; 0x51
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f001 fd84 	bl	800896c <VL53L0X_RdWord>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006e6a:	8bfb      	ldrh	r3, [r7, #30]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7ff ff22 	bl	8006cb6 <VL53L0X_decode_timeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006e76:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006e7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7ff ff5a 	bl	8006d38 <VL53L0X_calc_timeout_us>
 8006e84:	62b8      	str	r0, [r7, #40]	; 0x28
 8006e86:	e059      	b.n	8006f3c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006e88:	7afb      	ldrb	r3, [r7, #11]
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d156      	bne.n	8006f3c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006e8e:	f107 0314 	add.w	r3, r7, #20
 8006e92:	4619      	mov	r1, r3
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7fd fb25 	bl	80044e4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01d      	beq.n	8006ee0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ea4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	2100      	movs	r1, #0
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f7fd fa0d 	bl	80042cc <VL53L0X_GetVcselPulsePeriod>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006eb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10f      	bne.n	8006ee0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006ec0:	f107 031e 	add.w	r3, r7, #30
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	2151      	movs	r1, #81	; 0x51
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f001 fd4f 	bl	800896c <VL53L0X_RdWord>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006ed4:	8bfb      	ldrh	r3, [r7, #30]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff feed 	bl	8006cb6 <VL53L0X_decode_timeout>
 8006edc:	4603      	mov	r3, r0
 8006ede:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006ee0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d109      	bne.n	8006efc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ee8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006eec:	461a      	mov	r2, r3
 8006eee:	2101      	movs	r1, #1
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f7fd f9eb 	bl	80042cc <VL53L0X_GetVcselPulsePeriod>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006efc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10f      	bne.n	8006f24 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006f04:	f107 031c 	add.w	r3, r7, #28
 8006f08:	461a      	mov	r2, r3
 8006f0a:	2171      	movs	r1, #113	; 0x71
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f001 fd2d 	bl	800896c <VL53L0X_RdWord>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006f18:	8bbb      	ldrh	r3, [r7, #28]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff fecb 	bl	8006cb6 <VL53L0X_decode_timeout>
 8006f20:	4603      	mov	r3, r0
 8006f22:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006f24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006f2c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006f30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f32:	4619      	mov	r1, r3
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f7ff feff 	bl	8006d38 <VL53L0X_calc_timeout_us>
 8006f3a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f40:	601a      	str	r2, [r3, #0]

	return Status;
 8006f42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3730      	adds	r7, #48	; 0x30
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b08a      	sub	sp, #40	; 0x28
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	460b      	mov	r3, r1
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006f62:	7afb      	ldrb	r3, [r7, #11]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <set_sequence_step_timeout+0x26>
 8006f68:	7afb      	ldrb	r3, [r7, #11]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d002      	beq.n	8006f74 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006f6e:	7afb      	ldrb	r3, [r7, #11]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d138      	bne.n	8006fe6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f74:	f107 031b 	add.w	r3, r7, #27
 8006f78:	461a      	mov	r2, r3
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f7fd f9a5 	bl	80042cc <VL53L0X_GetVcselPulsePeriod>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006f88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d11a      	bne.n	8006fc6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006f90:	7efb      	ldrb	r3, [r7, #27]
 8006f92:	461a      	mov	r2, r3
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff fea4 	bl	8006ce4 <VL53L0X_calc_timeout_mclks>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006fa0:	8bbb      	ldrh	r3, [r7, #28]
 8006fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa6:	d903      	bls.n	8006fb0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006fa8:	23ff      	movs	r3, #255	; 0xff
 8006faa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006fae:	e004      	b.n	8006fba <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006fb0:	8bbb      	ldrh	r3, [r7, #28]
 8006fb2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006fba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006fc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f040 80ab 	bne.w	8007126 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006fd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	2146      	movs	r1, #70	; 0x46
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f001 fc1b 	bl	8008814 <VL53L0X_WrByte>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006fe4:	e09f      	b.n	8007126 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006fe6:	7afb      	ldrb	r3, [r7, #11]
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d135      	bne.n	8007058 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006fec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11b      	bne.n	800702c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ff4:	f107 031b 	add.w	r3, r7, #27
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7fd f965 	bl	80042cc <VL53L0X_GetVcselPulsePeriod>
 8007002:	4603      	mov	r3, r0
 8007004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007008:	7efb      	ldrb	r3, [r7, #27]
 800700a:	461a      	mov	r2, r3
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f7ff fe68 	bl	8006ce4 <VL53L0X_calc_timeout_mclks>
 8007014:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007016:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff fe1f 	bl	8006c5e <VL53L0X_encode_timeout>
 8007020:	4603      	mov	r3, r0
 8007022:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007024:	8b3a      	ldrh	r2, [r7, #24]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800702c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007030:	2b00      	cmp	r3, #0
 8007032:	d108      	bne.n	8007046 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8007034:	8b3b      	ldrh	r3, [r7, #24]
 8007036:	461a      	mov	r2, r3
 8007038:	2151      	movs	r1, #81	; 0x51
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f001 fc0e 	bl	800885c <VL53L0X_WrWord>
 8007040:	4603      	mov	r3, r0
 8007042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007046:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800704a:	2b00      	cmp	r3, #0
 800704c:	d16b      	bne.n	8007126 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8007056:	e066      	b.n	8007126 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007058:	7afb      	ldrb	r3, [r7, #11]
 800705a:	2b04      	cmp	r3, #4
 800705c:	d160      	bne.n	8007120 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800705e:	f107 0310 	add.w	r3, r7, #16
 8007062:	4619      	mov	r1, r3
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f7fd fa3d 	bl	80044e4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800706e:	7cfb      	ldrb	r3, [r7, #19]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01d      	beq.n	80070b0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007074:	f107 031b 	add.w	r3, r7, #27
 8007078:	461a      	mov	r2, r3
 800707a:	2100      	movs	r1, #0
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7fd f925 	bl	80042cc <VL53L0X_GetVcselPulsePeriod>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8007088:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10f      	bne.n	80070b0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8007090:	f107 0318 	add.w	r3, r7, #24
 8007094:	461a      	mov	r2, r3
 8007096:	2151      	movs	r1, #81	; 0x51
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f001 fc67 	bl	800896c <VL53L0X_RdWord>
 800709e:	4603      	mov	r3, r0
 80070a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80070a4:	8b3b      	ldrh	r3, [r7, #24]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7ff fe05 	bl	8006cb6 <VL53L0X_decode_timeout>
 80070ac:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80070ae:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80070b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d109      	bne.n	80070cc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80070b8:	f107 031b 	add.w	r3, r7, #27
 80070bc:	461a      	mov	r2, r3
 80070be:	2101      	movs	r1, #1
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f7fd f903 	bl	80042cc <VL53L0X_GetVcselPulsePeriod>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80070cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d128      	bne.n	8007126 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80070d4:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 80070d6:	461a      	mov	r2, r3
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f7ff fe02 	bl	8006ce4 <VL53L0X_calc_timeout_mclks>
 80070e0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80070e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070e4:	6a3a      	ldr	r2, [r7, #32]
 80070e6:	4413      	add	r3, r2
 80070e8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 80070ea:	6a38      	ldr	r0, [r7, #32]
 80070ec:	f7ff fdb7 	bl	8006c5e <VL53L0X_encode_timeout>
 80070f0:	4603      	mov	r3, r0
 80070f2:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 80070f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d108      	bne.n	800710e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80070fc:	8bfb      	ldrh	r3, [r7, #30]
 80070fe:	461a      	mov	r2, r3
 8007100:	2171      	movs	r1, #113	; 0x71
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f001 fbaa 	bl	800885c <VL53L0X_WrWord>
 8007108:	4603      	mov	r3, r0
 800710a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800710e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007112:	2b00      	cmp	r3, #0
 8007114:	d107      	bne.n	8007126 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800711e:	e002      	b.n	8007126 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007120:	23fc      	movs	r3, #252	; 0xfc
 8007122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8007126:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800712a:	4618      	mov	r0, r3
 800712c:	3728      	adds	r7, #40	; 0x28
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b08a      	sub	sp, #40	; 0x28
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
 800713e:	4613      	mov	r3, r2
 8007140:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007142:	2300      	movs	r3, #0
 8007144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8007148:	230c      	movs	r3, #12
 800714a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800714e:	2312      	movs	r3, #18
 8007150:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8007154:	2308      	movs	r3, #8
 8007156:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800715a:	230e      	movs	r3, #14
 800715c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8007164:	78bb      	ldrb	r3, [r7, #2]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007170:	23fc      	movs	r3, #252	; 0xfc
 8007172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007176:	e020      	b.n	80071ba <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8007178:	78fb      	ldrb	r3, [r7, #3]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10d      	bne.n	800719a <VL53L0X_set_vcsel_pulse_period+0x68>
 800717e:	78ba      	ldrb	r2, [r7, #2]
 8007180:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007184:	429a      	cmp	r2, r3
 8007186:	d304      	bcc.n	8007192 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8007188:	78ba      	ldrb	r2, [r7, #2]
 800718a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800718e:	429a      	cmp	r2, r3
 8007190:	d903      	bls.n	800719a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007192:	23fc      	movs	r3, #252	; 0xfc
 8007194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007198:	e00f      	b.n	80071ba <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800719a:	78fb      	ldrb	r3, [r7, #3]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d10c      	bne.n	80071ba <VL53L0X_set_vcsel_pulse_period+0x88>
 80071a0:	78ba      	ldrb	r2, [r7, #2]
 80071a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d304      	bcc.n	80071b4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80071aa:	78ba      	ldrb	r2, [r7, #2]
 80071ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d902      	bls.n	80071ba <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071b4:	23fc      	movs	r3, #252	; 0xfc
 80071b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80071ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80071c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071c6:	e239      	b.n	800763c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80071c8:	78fb      	ldrb	r3, [r7, #3]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d150      	bne.n	8007270 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80071ce:	78bb      	ldrb	r3, [r7, #2]
 80071d0:	2b0c      	cmp	r3, #12
 80071d2:	d110      	bne.n	80071f6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80071d4:	2218      	movs	r2, #24
 80071d6:	2157      	movs	r1, #87	; 0x57
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 fb1b 	bl	8008814 <VL53L0X_WrByte>
 80071de:	4603      	mov	r3, r0
 80071e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80071e4:	2208      	movs	r2, #8
 80071e6:	2156      	movs	r1, #86	; 0x56
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fb13 	bl	8008814 <VL53L0X_WrByte>
 80071ee:	4603      	mov	r3, r0
 80071f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071f4:	e17f      	b.n	80074f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80071f6:	78bb      	ldrb	r3, [r7, #2]
 80071f8:	2b0e      	cmp	r3, #14
 80071fa:	d110      	bne.n	800721e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80071fc:	2230      	movs	r2, #48	; 0x30
 80071fe:	2157      	movs	r1, #87	; 0x57
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 fb07 	bl	8008814 <VL53L0X_WrByte>
 8007206:	4603      	mov	r3, r0
 8007208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800720c:	2208      	movs	r2, #8
 800720e:	2156      	movs	r1, #86	; 0x56
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 faff 	bl	8008814 <VL53L0X_WrByte>
 8007216:	4603      	mov	r3, r0
 8007218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800721c:	e16b      	b.n	80074f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800721e:	78bb      	ldrb	r3, [r7, #2]
 8007220:	2b10      	cmp	r3, #16
 8007222:	d110      	bne.n	8007246 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8007224:	2240      	movs	r2, #64	; 0x40
 8007226:	2157      	movs	r1, #87	; 0x57
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 faf3 	bl	8008814 <VL53L0X_WrByte>
 800722e:	4603      	mov	r3, r0
 8007230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8007234:	2208      	movs	r2, #8
 8007236:	2156      	movs	r1, #86	; 0x56
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 faeb 	bl	8008814 <VL53L0X_WrByte>
 800723e:	4603      	mov	r3, r0
 8007240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007244:	e157      	b.n	80074f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8007246:	78bb      	ldrb	r3, [r7, #2]
 8007248:	2b12      	cmp	r3, #18
 800724a:	f040 8154 	bne.w	80074f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800724e:	2250      	movs	r2, #80	; 0x50
 8007250:	2157      	movs	r1, #87	; 0x57
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 fade 	bl	8008814 <VL53L0X_WrByte>
 8007258:	4603      	mov	r3, r0
 800725a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800725e:	2208      	movs	r2, #8
 8007260:	2156      	movs	r1, #86	; 0x56
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 fad6 	bl	8008814 <VL53L0X_WrByte>
 8007268:	4603      	mov	r3, r0
 800726a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800726e:	e142      	b.n	80074f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	2b01      	cmp	r3, #1
 8007274:	f040 813f 	bne.w	80074f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8007278:	78bb      	ldrb	r3, [r7, #2]
 800727a:	2b08      	cmp	r3, #8
 800727c:	d14c      	bne.n	8007318 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800727e:	2210      	movs	r2, #16
 8007280:	2148      	movs	r1, #72	; 0x48
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 fac6 	bl	8008814 <VL53L0X_WrByte>
 8007288:	4603      	mov	r3, r0
 800728a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800728e:	2208      	movs	r2, #8
 8007290:	2147      	movs	r1, #71	; 0x47
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fabe 	bl	8008814 <VL53L0X_WrByte>
 8007298:	4603      	mov	r3, r0
 800729a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800729e:	2202      	movs	r2, #2
 80072a0:	2132      	movs	r1, #50	; 0x32
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 fab6 	bl	8008814 <VL53L0X_WrByte>
 80072a8:	4603      	mov	r3, r0
 80072aa:	461a      	mov	r2, r3
 80072ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072b0:	4313      	orrs	r3, r2
 80072b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80072b6:	220c      	movs	r2, #12
 80072b8:	2130      	movs	r1, #48	; 0x30
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 faaa 	bl	8008814 <VL53L0X_WrByte>
 80072c0:	4603      	mov	r3, r0
 80072c2:	461a      	mov	r2, r3
 80072c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80072ce:	2201      	movs	r2, #1
 80072d0:	21ff      	movs	r1, #255	; 0xff
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fa9e 	bl	8008814 <VL53L0X_WrByte>
 80072d8:	4603      	mov	r3, r0
 80072da:	461a      	mov	r2, r3
 80072dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80072e6:	2230      	movs	r2, #48	; 0x30
 80072e8:	2130      	movs	r1, #48	; 0x30
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 fa92 	bl	8008814 <VL53L0X_WrByte>
 80072f0:	4603      	mov	r3, r0
 80072f2:	461a      	mov	r2, r3
 80072f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072f8:	4313      	orrs	r3, r2
 80072fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80072fe:	2200      	movs	r2, #0
 8007300:	21ff      	movs	r1, #255	; 0xff
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f001 fa86 	bl	8008814 <VL53L0X_WrByte>
 8007308:	4603      	mov	r3, r0
 800730a:	461a      	mov	r2, r3
 800730c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007310:	4313      	orrs	r3, r2
 8007312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007316:	e0ee      	b.n	80074f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8007318:	78bb      	ldrb	r3, [r7, #2]
 800731a:	2b0a      	cmp	r3, #10
 800731c:	d14c      	bne.n	80073b8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800731e:	2228      	movs	r2, #40	; 0x28
 8007320:	2148      	movs	r1, #72	; 0x48
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 fa76 	bl	8008814 <VL53L0X_WrByte>
 8007328:	4603      	mov	r3, r0
 800732a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800732e:	2208      	movs	r2, #8
 8007330:	2147      	movs	r1, #71	; 0x47
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 fa6e 	bl	8008814 <VL53L0X_WrByte>
 8007338:	4603      	mov	r3, r0
 800733a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800733e:	2203      	movs	r2, #3
 8007340:	2132      	movs	r1, #50	; 0x32
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fa66 	bl	8008814 <VL53L0X_WrByte>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007350:	4313      	orrs	r3, r2
 8007352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007356:	2209      	movs	r2, #9
 8007358:	2130      	movs	r1, #48	; 0x30
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 fa5a 	bl	8008814 <VL53L0X_WrByte>
 8007360:	4603      	mov	r3, r0
 8007362:	461a      	mov	r2, r3
 8007364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007368:	4313      	orrs	r3, r2
 800736a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800736e:	2201      	movs	r2, #1
 8007370:	21ff      	movs	r1, #255	; 0xff
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 fa4e 	bl	8008814 <VL53L0X_WrByte>
 8007378:	4603      	mov	r3, r0
 800737a:	461a      	mov	r2, r3
 800737c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007380:	4313      	orrs	r3, r2
 8007382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007386:	2220      	movs	r2, #32
 8007388:	2130      	movs	r1, #48	; 0x30
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fa42 	bl	8008814 <VL53L0X_WrByte>
 8007390:	4603      	mov	r3, r0
 8007392:	461a      	mov	r2, r3
 8007394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007398:	4313      	orrs	r3, r2
 800739a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800739e:	2200      	movs	r2, #0
 80073a0:	21ff      	movs	r1, #255	; 0xff
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 fa36 	bl	8008814 <VL53L0X_WrByte>
 80073a8:	4603      	mov	r3, r0
 80073aa:	461a      	mov	r2, r3
 80073ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073b6:	e09e      	b.n	80074f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80073b8:	78bb      	ldrb	r3, [r7, #2]
 80073ba:	2b0c      	cmp	r3, #12
 80073bc:	d14c      	bne.n	8007458 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80073be:	2238      	movs	r2, #56	; 0x38
 80073c0:	2148      	movs	r1, #72	; 0x48
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f001 fa26 	bl	8008814 <VL53L0X_WrByte>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80073ce:	2208      	movs	r2, #8
 80073d0:	2147      	movs	r1, #71	; 0x47
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 fa1e 	bl	8008814 <VL53L0X_WrByte>
 80073d8:	4603      	mov	r3, r0
 80073da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80073de:	2203      	movs	r2, #3
 80073e0:	2132      	movs	r1, #50	; 0x32
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fa16 	bl	8008814 <VL53L0X_WrByte>
 80073e8:	4603      	mov	r3, r0
 80073ea:	461a      	mov	r2, r3
 80073ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80073f6:	2208      	movs	r2, #8
 80073f8:	2130      	movs	r1, #48	; 0x30
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 fa0a 	bl	8008814 <VL53L0X_WrByte>
 8007400:	4603      	mov	r3, r0
 8007402:	461a      	mov	r2, r3
 8007404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007408:	4313      	orrs	r3, r2
 800740a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800740e:	2201      	movs	r2, #1
 8007410:	21ff      	movs	r1, #255	; 0xff
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 f9fe 	bl	8008814 <VL53L0X_WrByte>
 8007418:	4603      	mov	r3, r0
 800741a:	461a      	mov	r2, r3
 800741c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007420:	4313      	orrs	r3, r2
 8007422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007426:	2220      	movs	r2, #32
 8007428:	2130      	movs	r1, #48	; 0x30
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 f9f2 	bl	8008814 <VL53L0X_WrByte>
 8007430:	4603      	mov	r3, r0
 8007432:	461a      	mov	r2, r3
 8007434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007438:	4313      	orrs	r3, r2
 800743a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800743e:	2200      	movs	r2, #0
 8007440:	21ff      	movs	r1, #255	; 0xff
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 f9e6 	bl	8008814 <VL53L0X_WrByte>
 8007448:	4603      	mov	r3, r0
 800744a:	461a      	mov	r2, r3
 800744c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007450:	4313      	orrs	r3, r2
 8007452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007456:	e04e      	b.n	80074f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007458:	78bb      	ldrb	r3, [r7, #2]
 800745a:	2b0e      	cmp	r3, #14
 800745c:	d14b      	bne.n	80074f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800745e:	2248      	movs	r2, #72	; 0x48
 8007460:	2148      	movs	r1, #72	; 0x48
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 f9d6 	bl	8008814 <VL53L0X_WrByte>
 8007468:	4603      	mov	r3, r0
 800746a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800746e:	2208      	movs	r2, #8
 8007470:	2147      	movs	r1, #71	; 0x47
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 f9ce 	bl	8008814 <VL53L0X_WrByte>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800747e:	2203      	movs	r2, #3
 8007480:	2132      	movs	r1, #50	; 0x32
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 f9c6 	bl	8008814 <VL53L0X_WrByte>
 8007488:	4603      	mov	r3, r0
 800748a:	461a      	mov	r2, r3
 800748c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007490:	4313      	orrs	r3, r2
 8007492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007496:	2207      	movs	r2, #7
 8007498:	2130      	movs	r1, #48	; 0x30
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f001 f9ba 	bl	8008814 <VL53L0X_WrByte>
 80074a0:	4603      	mov	r3, r0
 80074a2:	461a      	mov	r2, r3
 80074a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074a8:	4313      	orrs	r3, r2
 80074aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80074ae:	2201      	movs	r2, #1
 80074b0:	21ff      	movs	r1, #255	; 0xff
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 f9ae 	bl	8008814 <VL53L0X_WrByte>
 80074b8:	4603      	mov	r3, r0
 80074ba:	461a      	mov	r2, r3
 80074bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80074c6:	2220      	movs	r2, #32
 80074c8:	2130      	movs	r1, #48	; 0x30
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 f9a2 	bl	8008814 <VL53L0X_WrByte>
 80074d0:	4603      	mov	r3, r0
 80074d2:	461a      	mov	r2, r3
 80074d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074d8:	4313      	orrs	r3, r2
 80074da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80074de:	2200      	movs	r2, #0
 80074e0:	21ff      	movs	r1, #255	; 0xff
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 f996 	bl	8008814 <VL53L0X_WrByte>
 80074e8:	4603      	mov	r3, r0
 80074ea:	461a      	mov	r2, r3
 80074ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80074f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d17f      	bne.n	80075fe <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80074fe:	78bb      	ldrb	r3, [r7, #2]
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe fe38 	bl	8006176 <VL53L0X_encode_vcsel_period>
 8007506:	4603      	mov	r3, r0
 8007508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800750c:	78fb      	ldrb	r3, [r7, #3]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8007512:	2b01      	cmp	r3, #1
 8007514:	d045      	beq.n	80075a2 <VL53L0X_set_vcsel_pulse_period+0x470>
 8007516:	e06e      	b.n	80075f6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007518:	f107 0314 	add.w	r3, r7, #20
 800751c:	461a      	mov	r2, r3
 800751e:	2103      	movs	r1, #3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff fc33 	bl	8006d8c <get_sequence_step_timeout>
 8007526:	4603      	mov	r3, r0
 8007528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800752c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007530:	2b00      	cmp	r3, #0
 8007532:	d109      	bne.n	8007548 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8007534:	f107 0310 	add.w	r3, r7, #16
 8007538:	461a      	mov	r2, r3
 800753a:	2102      	movs	r1, #2
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff fc25 	bl	8006d8c <get_sequence_step_timeout>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007548:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800754c:	2b00      	cmp	r3, #0
 800754e:	d109      	bne.n	8007564 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8007550:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007554:	461a      	mov	r2, r3
 8007556:	2150      	movs	r1, #80	; 0x50
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f95b 	bl	8008814 <VL53L0X_WrByte>
 800755e:	4603      	mov	r3, r0
 8007560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007564:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007568:	2b00      	cmp	r3, #0
 800756a:	d108      	bne.n	800757e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	461a      	mov	r2, r3
 8007570:	2103      	movs	r1, #3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fceb 	bl	8006f4e <set_sequence_step_timeout>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800757e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007582:	2b00      	cmp	r3, #0
 8007584:	d108      	bne.n	8007598 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	461a      	mov	r2, r3
 800758a:	2102      	movs	r1, #2
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff fcde 	bl	8006f4e <set_sequence_step_timeout>
 8007592:	4603      	mov	r3, r0
 8007594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	78ba      	ldrb	r2, [r7, #2]
 800759c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80075a0:	e02e      	b.n	8007600 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80075a2:	f107 0318 	add.w	r3, r7, #24
 80075a6:	461a      	mov	r2, r3
 80075a8:	2104      	movs	r1, #4
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff fbee 	bl	8006d8c <get_sequence_step_timeout>
 80075b0:	4603      	mov	r3, r0
 80075b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80075b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d109      	bne.n	80075d2 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80075be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80075c2:	461a      	mov	r2, r3
 80075c4:	2170      	movs	r1, #112	; 0x70
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 f924 	bl	8008814 <VL53L0X_WrByte>
 80075cc:	4603      	mov	r3, r0
 80075ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80075d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d108      	bne.n	80075ec <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	461a      	mov	r2, r3
 80075de:	2104      	movs	r1, #4
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff fcb4 	bl	8006f4e <set_sequence_step_timeout>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	78ba      	ldrb	r2, [r7, #2]
 80075f0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80075f4:	e004      	b.n	8007600 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075f6:	23fc      	movs	r3, #252	; 0xfc
 80075f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075fc:	e000      	b.n	8007600 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80075fe:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8007600:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007604:	2b00      	cmp	r3, #0
 8007606:	d109      	bne.n	800761c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800760e:	69f9      	ldr	r1, [r7, #28]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7fc fe1d 	bl	8004250 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007616:	4603      	mov	r3, r0
 8007618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800761c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007620:	2b00      	cmp	r3, #0
 8007622:	d109      	bne.n	8007638 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8007624:	f107 010f 	add.w	r1, r7, #15
 8007628:	2301      	movs	r3, #1
 800762a:	2200      	movs	r2, #0
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7fe fcbd 	bl	8005fac <VL53L0X_perform_phase_calibration>
 8007632:	4603      	mov	r3, r0
 8007634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007638:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800763c:	4618      	mov	r0, r3
 800763e:	3728      	adds	r7, #40	; 0x28
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	460b      	mov	r3, r1
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007652:	2300      	movs	r3, #0
 8007654:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007656:	7afb      	ldrb	r3, [r7, #11]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800765c:	2b01      	cmp	r3, #1
 800765e:	d00a      	beq.n	8007676 <VL53L0X_get_vcsel_pulse_period+0x32>
 8007660:	e013      	b.n	800768a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007662:	f107 0316 	add.w	r3, r7, #22
 8007666:	461a      	mov	r2, r3
 8007668:	2150      	movs	r1, #80	; 0x50
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f001 f954 	bl	8008918 <VL53L0X_RdByte>
 8007670:	4603      	mov	r3, r0
 8007672:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007674:	e00b      	b.n	800768e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007676:	f107 0316 	add.w	r3, r7, #22
 800767a:	461a      	mov	r2, r3
 800767c:	2170      	movs	r1, #112	; 0x70
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f001 f94a 	bl	8008918 <VL53L0X_RdByte>
 8007684:	4603      	mov	r3, r0
 8007686:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007688:	e001      	b.n	800768e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800768a:	23fc      	movs	r3, #252	; 0xfc
 800768c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800768e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d107      	bne.n	80076a6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007696:	7dbb      	ldrb	r3, [r7, #22]
 8007698:	4618      	mov	r0, r3
 800769a:	f7fe fd59 	bl	8006150 <VL53L0X_decode_vcsel_period>
 800769e:	4603      	mov	r3, r0
 80076a0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	701a      	strb	r2, [r3, #0]

	return Status;
 80076a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b092      	sub	sp, #72	; 0x48
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076bc:	2300      	movs	r3, #0
 80076be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80076c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80076c6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80076c8:	f240 7376 	movw	r3, #1910	; 0x776
 80076cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80076ce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80076d2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80076d4:	f44f 7325 	mov.w	r3, #660	; 0x294
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80076da:	f240 234e 	movw	r3, #590	; 0x24e
 80076de:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80076e0:	f240 23b2 	movw	r3, #690	; 0x2b2
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80076e6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80076ea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80076ec:	f240 2326 	movw	r3, #550	; 0x226
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80076f6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80076fa:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	429a      	cmp	r2, r3
 8007706:	d205      	bcs.n	8007714 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007708:	23fc      	movs	r3, #252	; 0xfc
 800770a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800770e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007712:	e0aa      	b.n	800786a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8007714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007720:	f107 0314 	add.w	r3, r7, #20
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fc fedc 	bl	80044e4 <VL53L0X_GetSequenceStepEnables>
 800772c:	4603      	mov	r3, r0
 800772e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8007732:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007736:	2b00      	cmp	r3, #0
 8007738:	d15b      	bne.n	80077f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800773a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800773c:	2b00      	cmp	r3, #0
 800773e:	d105      	bne.n	800774c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8007740:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8007742:	2b00      	cmp	r3, #0
 8007744:	d102      	bne.n	800774c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8007746:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007748:	2b00      	cmp	r3, #0
 800774a:	d052      	beq.n	80077f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800774c:	f107 0310 	add.w	r3, r7, #16
 8007750:	461a      	mov	r2, r3
 8007752:	2102      	movs	r1, #2
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff fb19 	bl	8006d8c <get_sequence_step_timeout>
 800775a:	4603      	mov	r3, r0
 800775c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8007760:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8007768:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800776c:	e07d      	b.n	800786a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800776e:	7d3b      	ldrb	r3, [r7, #20]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00f      	beq.n	8007794 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8007774:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007778:	4413      	add	r3, r2
 800777a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800777c:	69fa      	ldr	r2, [r7, #28]
 800777e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007780:	429a      	cmp	r2, r3
 8007782:	d204      	bcs.n	800778e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8007784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	643b      	str	r3, [r7, #64]	; 0x40
 800778c:	e002      	b.n	8007794 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800778e:	23fc      	movs	r3, #252	; 0xfc
 8007790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8007794:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800779c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80077a0:	e063      	b.n	800786a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80077a2:	7dbb      	ldrb	r3, [r7, #22]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d011      	beq.n	80077cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ac:	4413      	add	r3, r2
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80077b2:	69fa      	ldr	r2, [r7, #28]
 80077b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d204      	bcs.n	80077c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80077ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	643b      	str	r3, [r7, #64]	; 0x40
 80077c2:	e016      	b.n	80077f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077c4:	23fc      	movs	r3, #252	; 0xfc
 80077c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80077ca:	e012      	b.n	80077f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80077cc:	7d7b      	ldrb	r3, [r7, #21]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00f      	beq.n	80077f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077d6:	4413      	add	r3, r2
 80077d8:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077de:	429a      	cmp	r2, r3
 80077e0:	d204      	bcs.n	80077ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80077e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	643b      	str	r3, [r7, #64]	; 0x40
 80077ea:	e002      	b.n	80077f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077ec:	23fc      	movs	r3, #252	; 0xfc
 80077ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80077f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80077fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80077fe:	e034      	b.n	800786a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d019      	beq.n	800783a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8007806:	f107 030c 	add.w	r3, r7, #12
 800780a:	461a      	mov	r2, r3
 800780c:	2103      	movs	r1, #3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff fabc 	bl	8006d8c <get_sequence_step_timeout>
 8007814:	4603      	mov	r3, r0
 8007816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800781e:	4413      	add	r3, r2
 8007820:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007826:	429a      	cmp	r2, r3
 8007828:	d204      	bcs.n	8007834 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800782a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	643b      	str	r3, [r7, #64]	; 0x40
 8007832:	e002      	b.n	800783a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007834:	23fc      	movs	r3, #252	; 0xfc
 8007836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800783a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800783e:	2b00      	cmp	r3, #0
 8007840:	d111      	bne.n	8007866 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8007842:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00e      	beq.n	8007866 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8007850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007852:	2104      	movs	r1, #4
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff fb7a 	bl	8006f4e <set_sequence_step_timeout>
 800785a:	4603      	mov	r3, r0
 800785c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007866:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800786a:	4618      	mov	r0, r3
 800786c:	3748      	adds	r7, #72	; 0x48
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b090      	sub	sp, #64	; 0x40
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800787c:	2300      	movs	r3, #0
 800787e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007882:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007886:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007888:	f240 7376 	movw	r3, #1910	; 0x776
 800788c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800788e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007892:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007894:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007898:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800789a:	f240 234e 	movw	r3, #590	; 0x24e
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80078a0:	f240 23b2 	movw	r3, #690	; 0x2b2
 80078a4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80078a6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80078ac:	f240 2326 	movw	r3, #550	; 0x226
 80078b0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80078b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ba:	441a      	add	r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80078c0:	f107 0318 	add.w	r3, r7, #24
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fc fe0c 	bl	80044e4 <VL53L0X_GetSequenceStepEnables>
 80078cc:	4603      	mov	r3, r0
 80078ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80078d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80078da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80078de:	e075      	b.n	80079cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80078e0:	7e3b      	ldrb	r3, [r7, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d105      	bne.n	80078f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80078e6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80078ec:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d030      	beq.n	8007954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80078f2:	f107 0310 	add.w	r3, r7, #16
 80078f6:	461a      	mov	r2, r3
 80078f8:	2102      	movs	r1, #2
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff fa46 	bl	8006d8c <get_sequence_step_timeout>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8007906:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800790a:	2b00      	cmp	r3, #0
 800790c:	d122      	bne.n	8007954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800790e:	7e3b      	ldrb	r3, [r7, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007918:	6939      	ldr	r1, [r7, #16]
 800791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800791e:	441a      	add	r2, r3
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007924:	7ebb      	ldrb	r3, [r7, #26]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800792e:	6939      	ldr	r1, [r7, #16]
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	440b      	add	r3, r1
 8007934:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007936:	441a      	add	r2, r3
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	e00a      	b.n	8007954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800793e:	7e7b      	ldrb	r3, [r7, #25]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d007      	beq.n	8007954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007948:	6939      	ldr	r1, [r7, #16]
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800794e:	441a      	add	r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007954:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007958:	2b00      	cmp	r3, #0
 800795a:	d114      	bne.n	8007986 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800795c:	7efb      	ldrb	r3, [r7, #27]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d011      	beq.n	8007986 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8007962:	f107 030c 	add.w	r3, r7, #12
 8007966:	461a      	mov	r2, r3
 8007968:	2103      	movs	r1, #3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7ff fa0e 	bl	8006d8c <get_sequence_step_timeout>
 8007970:	4603      	mov	r3, r0
 8007972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800797a:	68f9      	ldr	r1, [r7, #12]
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007980:	441a      	add	r2, r3
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007986:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800798a:	2b00      	cmp	r3, #0
 800798c:	d114      	bne.n	80079b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800798e:	7f3b      	ldrb	r3, [r7, #28]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d011      	beq.n	80079b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	461a      	mov	r2, r3
 800799a:	2104      	movs	r1, #4
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff f9f5 	bl	8006d8c <get_sequence_step_timeout>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80079ac:	6979      	ldr	r1, [r7, #20]
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80079b2:	441a      	add	r2, r3
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80079b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d103      	bne.n	80079c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3740      	adds	r7, #64	; 0x40
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079de:	2300      	movs	r3, #0
 80079e0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80079e6:	e0c6      	b.n	8007b76 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	4413      	add	r3, r2
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	74fb      	strb	r3, [r7, #19]
		Index++;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	3301      	adds	r3, #1
 80079f6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80079f8:	7cfb      	ldrb	r3, [r7, #19]
 80079fa:	2bff      	cmp	r3, #255	; 0xff
 80079fc:	f040 808d 	bne.w	8007b1a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	747b      	strb	r3, [r7, #17]
			Index++;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8007a10:	7c7b      	ldrb	r3, [r7, #17]
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d87e      	bhi.n	8007b14 <VL53L0X_load_tuning_settings+0x140>
 8007a16:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <VL53L0X_load_tuning_settings+0x48>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a2d 	.word	0x08007a2d
 8007a20:	08007a67 	.word	0x08007a67
 8007a24:	08007aa1 	.word	0x08007aa1
 8007a28:	08007adb 	.word	0x08007adb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	4413      	add	r3, r2
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	743b      	strb	r3, [r7, #16]
				Index++;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	4413      	add	r3, r2
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007a4c:	7c3b      	ldrb	r3, [r7, #16]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4413      	add	r3, r2
 8007a5a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	89ba      	ldrh	r2, [r7, #12]
 8007a60:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8007a64:	e087      	b.n	8007b76 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	743b      	strb	r3, [r7, #16]
				Index++;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	3301      	adds	r3, #1
 8007a74:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	3301      	adds	r3, #1
 8007a84:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007a86:	7c3b      	ldrb	r3, [r7, #16]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	4413      	add	r3, r2
 8007a94:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	89ba      	ldrh	r2, [r7, #12]
 8007a9a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8007a9e:	e06a      	b.n	8007b76 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	743b      	strb	r3, [r7, #16]
				Index++;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	3301      	adds	r3, #1
 8007aae:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	3301      	adds	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007ac0:	7c3b      	ldrb	r3, [r7, #16]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	4413      	add	r3, r2
 8007ace:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	89ba      	ldrh	r2, [r7, #12]
 8007ad4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8007ad8:	e04d      	b.n	8007b76 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	4413      	add	r3, r2
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	743b      	strb	r3, [r7, #16]
				Index++;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	4413      	add	r3, r2
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	3301      	adds	r3, #1
 8007af8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007afa:	7c3b      	ldrb	r3, [r7, #16]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	021b      	lsls	r3, r3, #8
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	4413      	add	r3, r2
 8007b08:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	89ba      	ldrh	r2, [r7, #12]
 8007b0e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8007b12:	e030      	b.n	8007b76 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b14:	23fc      	movs	r3, #252	; 0xfc
 8007b16:	77fb      	strb	r3, [r7, #31]
 8007b18:	e02d      	b.n	8007b76 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8007b1a:	7cfb      	ldrb	r3, [r7, #19]
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d828      	bhi.n	8007b72 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	4413      	add	r3, r2
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007b30:	2300      	movs	r3, #0
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	e00f      	b.n	8007b56 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	7819      	ldrb	r1, [r3, #0]
 8007b3e:	f107 0208 	add.w	r2, r7, #8
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	4413      	add	r3, r2
 8007b46:	460a      	mov	r2, r1
 8007b48:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	3301      	adds	r3, #1
 8007b54:	61bb      	str	r3, [r7, #24]
 8007b56:	7cfb      	ldrb	r3, [r7, #19]
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	dbeb      	blt.n	8007b36 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007b5e:	7cfb      	ldrb	r3, [r7, #19]
 8007b60:	f107 0208 	add.w	r2, r7, #8
 8007b64:	7cb9      	ldrb	r1, [r7, #18]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fdf8 	bl	800875c <VL53L0X_WriteMulti>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	77fb      	strb	r3, [r7, #31]
 8007b70:	e001      	b.n	8007b76 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b72:	23fc      	movs	r3, #252	; 0xfc
 8007b74:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <VL53L0X_load_tuning_settings+0x1b8>
 8007b82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f43f af2e 	beq.w	80079e8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3720      	adds	r7, #32
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b088      	sub	sp, #32
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007bae:	f107 0313 	add.w	r3, r7, #19
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f7fc fd21 	bl	80045fc <VL53L0X_GetXTalkCompensationEnable>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8007bbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d111      	bne.n	8007bea <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007bc6:	7cfb      	ldrb	r3, [r7, #19]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00e      	beq.n	8007bea <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	8a9b      	ldrh	r3, [r3, #20]
 8007bd6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
 8007bde:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	3380      	adds	r3, #128	; 0x80
 8007be4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007bea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3720      	adds	r7, #32
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b086      	sub	sp, #24
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c02:	2300      	movs	r3, #0
 8007c04:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8007c0e:	f107 0310 	add.w	r3, r7, #16
 8007c12:	461a      	mov	r2, r3
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff ffbe 	bl	8007b98 <VL53L0X_get_total_xtalk_rate>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d105      	bne.n	8007c34 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	441a      	add	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]

	return Status;
 8007c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b09a      	sub	sp, #104	; 0x68
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007c4e:	2312      	movs	r3, #18
 8007c50:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8007c52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c56:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007c58:	2342      	movs	r3, #66	; 0x42
 8007c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007c5c:	2306      	movs	r3, #6
 8007c5e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007c60:	2307      	movs	r3, #7
 8007c62:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c64:	2300      	movs	r3, #0
 8007c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8007c70:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007c78:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c7e:	fb02 f303 	mul.w	r3, r2, r3
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8007c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c86:	3380      	adds	r3, #128	; 0x80
 8007c88:	0a1b      	lsrs	r3, r3, #8
 8007c8a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8007c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c90:	fb02 f303 	mul.w	r3, r2, r3
 8007c94:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d01b      	beq.n	8007cd8 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	029b      	lsls	r3, r3, #10
 8007ca4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cac:	4413      	add	r3, r2
 8007cae:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007cb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007cba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	4413      	add	r3, r2
 8007cc2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cc8:	fb02 f303 	mul.w	r3, r2, r3
 8007ccc:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8007cce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007cd4:	0c1b      	lsrs	r3, r3, #16
 8007cd6:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007cdc:	fb02 f303 	mul.w	r3, r2, r3
 8007ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007ce8:	0c1b      	lsrs	r3, r3, #16
 8007cea:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf0:	fb02 f303 	mul.w	r3, r2, r3
 8007cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cf8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007cfc:	0c1b      	lsrs	r3, r3, #16
 8007cfe:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d02:	085a      	lsrs	r2, r3, #1
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	441a      	add	r2, r3
 8007d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d14:	fb02 f303 	mul.w	r3, r2, r3
 8007d18:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d20:	d302      	bcc.n	8007d28 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8007d22:	4b55      	ldr	r3, [pc, #340]	; (8007e78 <VL53L0X_calc_dmax+0x238>)
 8007d24:	663b      	str	r3, [r7, #96]	; 0x60
 8007d26:	e016      	b.n	8007d56 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d2a:	085a      	lsrs	r2, r3, #1
 8007d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d2e:	441a      	add	r2, r3
 8007d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d36:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d3c:	fb02 f303 	mul.w	r3, r2, r3
 8007d40:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007d48:	0c1b      	lsrs	r3, r3, #16
 8007d4a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d50:	fb02 f303 	mul.w	r3, r2, r3
 8007d54:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d58:	039b      	lsls	r3, r3, #14
 8007d5a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d5e:	4a47      	ldr	r2, [pc, #284]	; (8007e7c <VL53L0X_calc_dmax+0x23c>)
 8007d60:	fba2 2303 	umull	r2, r3, r2, r3
 8007d64:	099b      	lsrs	r3, r3, #6
 8007d66:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6c:	fb02 f303 	mul.w	r3, r2, r3
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d76:	fb02 f303 	mul.w	r3, r2, r3
 8007d7a:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	3308      	adds	r3, #8
 8007d80:	091b      	lsrs	r3, r3, #4
 8007d82:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8007d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8007d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d8e:	4613      	mov	r3, r2
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	4413      	add	r3, r2
 8007d94:	011b      	lsls	r3, r3, #4
 8007d96:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007d9e:	0b9b      	lsrs	r3, r3, #14
 8007da0:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007da6:	4413      	add	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	4413      	add	r3, r2
 8007db2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dbc:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	039b      	lsls	r3, r3, #14
 8007dc2:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	085b      	lsrs	r3, r3, #1
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	4413      	add	r3, r2
 8007dcc:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd6:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ddc:	fb02 f303 	mul.w	r3, r2, r3
 8007de0:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007de8:	4a24      	ldr	r2, [pc, #144]	; (8007e7c <VL53L0X_calc_dmax+0x23c>)
 8007dea:	fba2 2303 	umull	r2, r3, r2, r3
 8007dee:	099b      	lsrs	r3, r3, #6
 8007df0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	011b      	lsls	r3, r3, #4
 8007df6:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007dfe:	4a1f      	ldr	r2, [pc, #124]	; (8007e7c <VL53L0X_calc_dmax+0x23c>)
 8007e00:	fba2 2303 	umull	r2, r3, r2, r3
 8007e04:	099b      	lsrs	r3, r3, #6
 8007e06:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e0a:	3380      	adds	r3, #128	; 0x80
 8007e0c:	0a1b      	lsrs	r3, r3, #8
 8007e0e:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d008      	beq.n	8007e28 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	085a      	lsrs	r2, r3, #1
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1c:	441a      	add	r2, r3
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e24:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e26:	e001      	b.n	8007e2c <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007e2c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007e2e:	f7fe f9b5 	bl	800619c <VL53L0X_isqrt>
 8007e32:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d008      	beq.n	8007e4c <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	085a      	lsrs	r2, r3, #1
 8007e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e40:	441a      	add	r2, r3
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e4a:	e001      	b.n	8007e50 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007e50:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007e52:	f7fe f9a3 	bl	800619c <VL53L0X_isqrt>
 8007e56:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8007e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d902      	bls.n	8007e6c <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8007e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e6a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007e6c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3768      	adds	r7, #104	; 0x68
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	fff00000 	.word	0xfff00000
 8007e7c:	10624dd3 	.word	0x10624dd3

08007e80 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b0b4      	sub	sp, #208	; 0xd0
 8007e84:	af04      	add	r7, sp, #16
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007e8e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8007e96:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8007e9e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8007ea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8007ea6:	f241 235c 	movw	r3, #4700	; 0x125c
 8007eaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007eae:	4b9e      	ldr	r3, [pc, #632]	; (8008128 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007eb4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007eba:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007ec8:	4b98      	ldr	r3, [pc, #608]	; (800812c <VL53L0X_calc_sigma_estimate+0x2ac>)
 8007eca:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ed0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007ed2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8007ed8:	f240 6377 	movw	r3, #1655	; 0x677
 8007edc:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
 8007ee8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ef2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007ef6:	0c1b      	lsrs	r3, r3, #16
 8007ef8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007f00:	f107 0310 	add.w	r3, r7, #16
 8007f04:	461a      	mov	r2, r3
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f7ff fe74 	bl	8007bf6 <VL53L0X_get_total_signal_rate>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007f14:	f107 0314 	add.w	r3, r7, #20
 8007f18:	461a      	mov	r2, r3
 8007f1a:	68b9      	ldr	r1, [r7, #8]
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f7ff fe3b 	bl	8007b98 <VL53L0X_get_total_xtalk_rate>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f2e:	fb02 f303 	mul.w	r3, r2, r3
 8007f32:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f36:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007f3a:	0c1b      	lsrs	r3, r3, #16
 8007f3c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f44:	fb02 f303 	mul.w	r3, r2, r3
 8007f48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007f4c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d902      	bls.n	8007f5c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007f5c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d168      	bne.n	8008036 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007f74:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007f78:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7fe feae 	bl	8006ce4 <VL53L0X_calc_timeout_mclks>
 8007f88:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8007f9a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007f9e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7fe fe9b 	bl	8006ce4 <VL53L0X_calc_timeout_mclks>
 8007fae:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8007fb6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d102      	bne.n	8007fc4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007fc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fc8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007fca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007fce:	fb02 f303 	mul.w	r3, r2, r3
 8007fd2:	02db      	lsls	r3, r3, #11
 8007fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007fd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fdc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007fe0:	4a53      	ldr	r2, [pc, #332]	; (8008130 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe6:	099b      	lsrs	r3, r3, #6
 8007fe8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007fec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ff0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ff2:	fb02 f303 	mul.w	r3, r2, r3
 8007ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007ffa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ffe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008002:	4a4b      	ldr	r2, [pc, #300]	; (8008130 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008004:	fba2 2303 	umull	r2, r3, r2, r3
 8008008:	099b      	lsrs	r3, r3, #6
 800800a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3380      	adds	r3, #128	; 0x80
 8008012:	0a1b      	lsrs	r3, r3, #8
 8008014:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800801c:	fb02 f303 	mul.w	r3, r2, r3
 8008020:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8008024:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008028:	3380      	adds	r3, #128	; 0x80
 800802a:	0a1b      	lsrs	r3, r3, #8
 800802c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008036:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800803e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008042:	e165      	b.n	8008310 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8008044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10c      	bne.n	8008064 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008050:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008058:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	e153      	b.n	800830c <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8008064:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008068:	2b00      	cmp	r3, #0
 800806a:	d102      	bne.n	8008072 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800806c:	2301      	movs	r3, #1
 800806e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8008072:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008076:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800807a:	041a      	lsls	r2, r3, #16
 800807c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800807e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8008086:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800808a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800808c:	429a      	cmp	r2, r3
 800808e:	d902      	bls.n	8008096 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8008096:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800809a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800809e:	fb02 f303 	mul.w	r3, r2, r3
 80080a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80080a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80080aa:	4613      	mov	r3, r2
 80080ac:	005b      	lsls	r3, r3, #1
 80080ae:	4413      	add	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe f872 	bl	800619c <VL53L0X_isqrt>
 80080b8:	4603      	mov	r3, r0
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	891b      	ldrh	r3, [r3, #8]
 80080c2:	461a      	mov	r2, r3
 80080c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080c6:	fb02 f303 	mul.w	r3, r2, r3
 80080ca:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80080cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080ce:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80080d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080d4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80080d6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80080d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80080dc:	4a14      	ldr	r2, [pc, #80]	; (8008130 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80080de:	fba2 2303 	umull	r2, r3, r2, r3
 80080e2:	099b      	lsrs	r3, r3, #6
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80080e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080e8:	041b      	lsls	r3, r3, #16
 80080ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80080ee:	4a10      	ldr	r2, [pc, #64]	; (8008130 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80080f0:	fba2 2303 	umull	r2, r3, r2, r3
 80080f4:	099b      	lsrs	r3, r3, #6
 80080f6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80080f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fa:	021b      	lsls	r3, r3, #8
 80080fc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80080fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	fbb2 f3f3 	udiv	r3, r2, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	bfb8      	it	lt
 800810a:	425b      	neglt	r3, r3
 800810c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800810e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008110:	021b      	lsls	r3, r3, #8
 8008112:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	7e1b      	ldrb	r3, [r3, #24]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00b      	beq.n	8008134 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800811c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008124:	e035      	b.n	8008192 <VL53L0X_calc_sigma_estimate+0x312>
 8008126:	bf00      	nop
 8008128:	028f87ae 	.word	0x028f87ae
 800812c:	0006999a 	.word	0x0006999a
 8008130:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8008134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008136:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800813a:	fbb2 f3f3 	udiv	r3, r2, r3
 800813e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8008142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008144:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800814c:	fb02 f303 	mul.w	r3, r2, r3
 8008150:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008154:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800815a:	4413      	add	r3, r2
 800815c:	0c1b      	lsrs	r3, r3, #16
 800815e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008166:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800816a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800816e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008172:	085b      	lsrs	r3, r3, #1
 8008174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800817c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008180:	fb02 f303 	mul.w	r3, r2, r3
 8008184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8008188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800818c:	0b9b      	lsrs	r3, r3, #14
 800818e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008198:	fb02 f303 	mul.w	r3, r2, r3
 800819c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80081a4:	0c1b      	lsrs	r3, r3, #16
 80081a6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80081a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ac:	fb02 f303 	mul.w	r3, r2, r3
 80081b0:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80081b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80081b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80081be:	0c1b      	lsrs	r3, r3, #16
 80081c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081c6:	fb02 f303 	mul.w	r3, r2, r3
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80081cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	4413      	add	r3, r2
 80081d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80081d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081d6:	f7fd ffe1 	bl	800619c <VL53L0X_isqrt>
 80081da:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	041b      	lsls	r3, r3, #16
 80081e0:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	3332      	adds	r3, #50	; 0x32
 80081e6:	4a4c      	ldr	r2, [pc, #304]	; (8008318 <VL53L0X_calc_sigma_estimate+0x498>)
 80081e8:	fba2 2303 	umull	r2, r3, r2, r3
 80081ec:	095a      	lsrs	r2, r3, #5
 80081ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80081f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80081fc:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8008200:	fb02 f303 	mul.w	r3, r2, r3
 8008204:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800820c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008210:	3308      	adds	r3, #8
 8008212:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8008216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800821a:	4a40      	ldr	r2, [pc, #256]	; (800831c <VL53L0X_calc_sigma_estimate+0x49c>)
 800821c:	fba2 2303 	umull	r2, r3, r2, r3
 8008220:	0b5b      	lsrs	r3, r3, #13
 8008222:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800822a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800822c:	429a      	cmp	r2, r3
 800822e:	d902      	bls.n	8008236 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008232:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8008236:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800823a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800823e:	4413      	add	r3, r2
 8008240:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008244:	4a36      	ldr	r2, [pc, #216]	; (8008320 <VL53L0X_calc_sigma_estimate+0x4a0>)
 8008246:	fba2 2303 	umull	r2, r3, r2, r3
 800824a:	099b      	lsrs	r3, r3, #6
 800824c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8008252:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008256:	441a      	add	r2, r3
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800825e:	4618      	mov	r0, r3
 8008260:	f7fd ff9c 	bl	800619c <VL53L0X_isqrt>
 8008264:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008272:	4a2b      	ldr	r2, [pc, #172]	; (8008320 <VL53L0X_calc_sigma_estimate+0x4a0>)
 8008274:	fba2 2303 	umull	r2, r3, r2, r3
 8008278:	099b      	lsrs	r3, r3, #6
 800827a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800827c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008280:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008284:	fb02 f303 	mul.w	r3, r2, r3
 8008288:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	fb02 f303 	mul.w	r3, r2, r3
 8008292:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	4413      	add	r3, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f7fd ff7e 	bl	800619c <VL53L0X_isqrt>
 80082a0:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082a8:	fb02 f303 	mul.w	r3, r2, r3
 80082ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80082b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <VL53L0X_calc_sigma_estimate+0x44a>
 80082b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d005      	beq.n	80082ca <VL53L0X_calc_sigma_estimate+0x44a>
 80082be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80082c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d903      	bls.n	80082d2 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80082ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80082d8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80082e4:	6939      	ldr	r1, [r7, #16]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	9303      	str	r3, [sp, #12]
 80082ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80082ee:	9302      	str	r3, [sp, #8]
 80082f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff fc9d 	bl	8007c40 <VL53L0X_calc_dmax>
 8008306:	4603      	mov	r3, r0
 8008308:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800830c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8008310:	4618      	mov	r0, r3
 8008312:	37c0      	adds	r7, #192	; 0xc0
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	51eb851f 	.word	0x51eb851f
 800831c:	d1b71759 	.word	0xd1b71759
 8008320:	10624dd3 	.word	0x10624dd3

08008324 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b090      	sub	sp, #64	; 0x40
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	607a      	str	r2, [r7, #4]
 800832e:	461a      	mov	r2, r3
 8008330:	460b      	mov	r3, r1
 8008332:	72fb      	strb	r3, [r7, #11]
 8008334:	4613      	mov	r3, r2
 8008336:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008338:	2300      	movs	r3, #0
 800833a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008344:	2300      	movs	r3, #0
 8008346:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008356:	2300      	movs	r3, #0
 8008358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800835c:	2300      	movs	r3, #0
 800835e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008368:	2300      	movs	r3, #0
 800836a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008376:	7afb      	ldrb	r3, [r7, #11]
 8008378:	10db      	asrs	r3, r3, #3
 800837a:	b2db      	uxtb	r3, r3
 800837c:	f003 030f 	and.w	r3, r3, #15
 8008380:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008384:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008388:	2b00      	cmp	r3, #0
 800838a:	d017      	beq.n	80083bc <VL53L0X_get_pal_range_status+0x98>
 800838c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008390:	2b05      	cmp	r3, #5
 8008392:	d013      	beq.n	80083bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008394:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008398:	2b07      	cmp	r3, #7
 800839a:	d00f      	beq.n	80083bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800839c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80083a0:	2b0c      	cmp	r3, #12
 80083a2:	d00b      	beq.n	80083bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 80083a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80083a8:	2b0d      	cmp	r3, #13
 80083aa:	d007      	beq.n	80083bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80083ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80083b0:	2b0e      	cmp	r3, #14
 80083b2:	d003      	beq.n	80083bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80083b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80083b8:	2b0f      	cmp	r3, #15
 80083ba:	d103      	bne.n	80083c4 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80083bc:	2301      	movs	r3, #1
 80083be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80083c2:	e002      	b.n	80083ca <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80083ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d109      	bne.n	80083e6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80083d2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80083d6:	461a      	mov	r2, r3
 80083d8:	2100      	movs	r1, #0
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f7fc f9e2 	bl	80047a4 <VL53L0X_GetLimitCheckEnable>
 80083e0:	4603      	mov	r3, r0
 80083e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80083e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d02e      	beq.n	800844c <VL53L0X_get_pal_range_status+0x128>
 80083ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d12a      	bne.n	800844c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80083f6:	f107 0310 	add.w	r3, r7, #16
 80083fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80083fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f7ff fd3d 	bl	8007e80 <VL53L0X_calc_sigma_estimate>
 8008406:	4603      	mov	r3, r0
 8008408:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800840c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008410:	2b00      	cmp	r3, #0
 8008412:	d103      	bne.n	800841c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	b29a      	uxth	r2, r3
 8008418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800841a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800841c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008420:	2b00      	cmp	r3, #0
 8008422:	d113      	bne.n	800844c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008424:	f107 0320 	add.w	r3, r7, #32
 8008428:	461a      	mov	r2, r3
 800842a:	2100      	movs	r1, #0
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f7fc fa3f 	bl	80048b0 <VL53L0X_GetLimitCheckValue>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d006      	beq.n	800844c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800843e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008440:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008442:	429a      	cmp	r2, r3
 8008444:	d902      	bls.n	800844c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800844c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008450:	2b00      	cmp	r3, #0
 8008452:	d109      	bne.n	8008468 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008454:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008458:	461a      	mov	r2, r3
 800845a:	2102      	movs	r1, #2
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7fc f9a1 	bl	80047a4 <VL53L0X_GetLimitCheckEnable>
 8008462:	4603      	mov	r3, r0
 8008464:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008468:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800846c:	2b00      	cmp	r3, #0
 800846e:	d044      	beq.n	80084fa <VL53L0X_get_pal_range_status+0x1d6>
 8008470:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008474:	2b00      	cmp	r3, #0
 8008476:	d140      	bne.n	80084fa <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008478:	f107 031c 	add.w	r3, r7, #28
 800847c:	461a      	mov	r2, r3
 800847e:	2102      	movs	r1, #2
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7fc fa15 	bl	80048b0 <VL53L0X_GetLimitCheckValue>
 8008486:	4603      	mov	r3, r0
 8008488:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800848c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008490:	2b00      	cmp	r3, #0
 8008492:	d107      	bne.n	80084a4 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008494:	2201      	movs	r2, #1
 8008496:	21ff      	movs	r1, #255	; 0xff
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 f9bb 	bl	8008814 <VL53L0X_WrByte>
 800849e:	4603      	mov	r3, r0
 80084a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 80084a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d109      	bne.n	80084c0 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 80084ac:	f107 0316 	add.w	r3, r7, #22
 80084b0:	461a      	mov	r2, r3
 80084b2:	21b6      	movs	r1, #182	; 0xb6
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 fa59 	bl	800896c <VL53L0X_RdWord>
 80084ba:	4603      	mov	r3, r0
 80084bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80084c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d107      	bne.n	80084d8 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80084c8:	2200      	movs	r2, #0
 80084ca:	21ff      	movs	r1, #255	; 0xff
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f9a1 	bl	8008814 <VL53L0X_WrByte>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80084d8:	8afb      	ldrh	r3, [r7, #22]
 80084da:	025b      	lsls	r3, r3, #9
 80084dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d006      	beq.n	80084fa <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80084ec:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80084ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d902      	bls.n	80084fa <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80084fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d109      	bne.n	8008516 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008506:	461a      	mov	r2, r3
 8008508:	2103      	movs	r1, #3
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f7fc f94a 	bl	80047a4 <VL53L0X_GetLimitCheckEnable>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008516:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800851a:	2b00      	cmp	r3, #0
 800851c:	d023      	beq.n	8008566 <VL53L0X_get_pal_range_status+0x242>
 800851e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008522:	2b00      	cmp	r3, #0
 8008524:	d11f      	bne.n	8008566 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008526:	893b      	ldrh	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d102      	bne.n	8008532 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	637b      	str	r3, [r7, #52]	; 0x34
 8008530:	e005      	b.n	800853e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	021a      	lsls	r2, r3, #8
 8008536:	893b      	ldrh	r3, [r7, #8]
 8008538:	fbb2 f3f3 	udiv	r3, r2, r3
 800853c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800853e:	f107 0318 	add.w	r3, r7, #24
 8008542:	461a      	mov	r2, r3
 8008544:	2103      	movs	r1, #3
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f7fc f9b2 	bl	80048b0 <VL53L0X_GetLimitCheckValue>
 800854c:	4603      	mov	r3, r0
 800854e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d006      	beq.n	8008566 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008558:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800855a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800855c:	429a      	cmp	r2, r3
 800855e:	d202      	bcs.n	8008566 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008560:	2301      	movs	r3, #1
 8008562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008566:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800856a:	2b00      	cmp	r3, #0
 800856c:	d14a      	bne.n	8008604 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800856e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008572:	2b01      	cmp	r3, #1
 8008574:	d103      	bne.n	800857e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8008576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008578:	22ff      	movs	r2, #255	; 0xff
 800857a:	701a      	strb	r2, [r3, #0]
 800857c:	e042      	b.n	8008604 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800857e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008582:	2b01      	cmp	r3, #1
 8008584:	d007      	beq.n	8008596 <VL53L0X_get_pal_range_status+0x272>
 8008586:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800858a:	2b02      	cmp	r3, #2
 800858c:	d003      	beq.n	8008596 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800858e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008592:	2b03      	cmp	r3, #3
 8008594:	d103      	bne.n	800859e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008598:	2205      	movs	r2, #5
 800859a:	701a      	strb	r2, [r3, #0]
 800859c:	e032      	b.n	8008604 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800859e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80085a2:	2b06      	cmp	r3, #6
 80085a4:	d003      	beq.n	80085ae <VL53L0X_get_pal_range_status+0x28a>
 80085a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80085aa:	2b09      	cmp	r3, #9
 80085ac:	d103      	bne.n	80085b6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80085ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b0:	2204      	movs	r2, #4
 80085b2:	701a      	strb	r2, [r3, #0]
 80085b4:	e026      	b.n	8008604 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80085b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80085ba:	2b08      	cmp	r3, #8
 80085bc:	d007      	beq.n	80085ce <VL53L0X_get_pal_range_status+0x2aa>
 80085be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80085c2:	2b0a      	cmp	r3, #10
 80085c4:	d003      	beq.n	80085ce <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80085c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d103      	bne.n	80085d6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80085ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d0:	2203      	movs	r2, #3
 80085d2:	701a      	strb	r2, [r3, #0]
 80085d4:	e016      	b.n	8008604 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80085d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d003      	beq.n	80085e6 <VL53L0X_get_pal_range_status+0x2c2>
 80085de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d103      	bne.n	80085ee <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80085e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e8:	2202      	movs	r2, #2
 80085ea:	701a      	strb	r2, [r3, #0]
 80085ec:	e00a      	b.n	8008604 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80085ee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d103      	bne.n	80085fe <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80085f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f8:	2201      	movs	r2, #1
 80085fa:	701a      	strb	r2, [r3, #0]
 80085fc:	e002      	b.n	8008604 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80085fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8008604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800860c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860e:	2200      	movs	r2, #0
 8008610:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008612:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8008616:	461a      	mov	r2, r3
 8008618:	2101      	movs	r1, #1
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f7fc f8c2 	bl	80047a4 <VL53L0X_GetLimitCheckEnable>
 8008620:	4603      	mov	r3, r0
 8008622:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008626:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800862a:	2b00      	cmp	r3, #0
 800862c:	d14f      	bne.n	80086ce <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800862e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <VL53L0X_get_pal_range_status+0x31a>
 8008636:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800863a:	2b01      	cmp	r3, #1
 800863c:	d103      	bne.n	8008646 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800863e:	2301      	movs	r3, #1
 8008640:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008644:	e002      	b.n	800864c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008652:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008656:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800865a:	2b04      	cmp	r3, #4
 800865c:	d003      	beq.n	8008666 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800865e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008662:	2b00      	cmp	r3, #0
 8008664:	d103      	bne.n	800866e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8008666:	2301      	movs	r3, #1
 8008668:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800866c:	e002      	b.n	8008674 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800867a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800867e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <VL53L0X_get_pal_range_status+0x36a>
 8008686:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800868a:	2b01      	cmp	r3, #1
 800868c:	d103      	bne.n	8008696 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800868e:	2301      	movs	r3, #1
 8008690:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008694:	e002      	b.n	800869c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80086a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80086a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <VL53L0X_get_pal_range_status+0x392>
 80086ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d103      	bne.n	80086be <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80086b6:	2301      	movs	r3, #1
 80086b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086bc:	e002      	b.n	80086c4 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80086ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80086ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3740      	adds	r7, #64	; 0x40
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80086da:	b580      	push	{r7, lr}
 80086dc:	b088      	sub	sp, #32
 80086de:	af02      	add	r7, sp, #8
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	60b9      	str	r1, [r7, #8]
 80086e4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	330a      	adds	r3, #10
 80086ea:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80086f8:	b299      	uxth	r1, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	4613      	mov	r3, r2
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	f7f9 f8cf 	bl	80018a8 <HAL_I2C_Master_Transmit>
 800870a:	4603      	mov	r3, r0
 800870c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800870e:	693b      	ldr	r3, [r7, #16]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af02      	add	r7, sp, #8
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	330a      	adds	r3, #10
 8008728:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8008736:	f043 0301 	orr.w	r3, r3, #1
 800873a:	b2db      	uxtb	r3, r3
 800873c:	b299      	uxth	r1, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	b29a      	uxth	r2, r3
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	4613      	mov	r3, r2
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	f7f9 f9ab 	bl	8001aa4 <HAL_I2C_Master_Receive>
 800874e:	4603      	mov	r3, r0
 8008750:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008752:	693b      	ldr	r3, [r7, #16]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	603b      	str	r3, [r7, #0]
 8008768:	460b      	mov	r3, r1
 800876a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800876c:	2300      	movs	r3, #0
 800876e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2b3f      	cmp	r3, #63	; 0x3f
 8008774:	d902      	bls.n	800877c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8008776:	f06f 0303 	mvn.w	r3, #3
 800877a:	e016      	b.n	80087aa <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800877c:	4a0d      	ldr	r2, [pc, #52]	; (80087b4 <VL53L0X_WriteMulti+0x58>)
 800877e:	7afb      	ldrb	r3, [r7, #11]
 8008780:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	480c      	ldr	r0, [pc, #48]	; (80087b8 <VL53L0X_WriteMulti+0x5c>)
 8008788:	f000 f99e 	bl	8008ac8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	3301      	adds	r3, #1
 8008790:	461a      	mov	r2, r3
 8008792:	4908      	ldr	r1, [pc, #32]	; (80087b4 <VL53L0X_WriteMulti+0x58>)
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f7ff ffa0 	bl	80086da <_I2CWrite>
 800879a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80087a2:	23ec      	movs	r3, #236	; 0xec
 80087a4:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80087a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000580 	.word	0x20000580
 80087b8:	20000581 	.word	0x20000581

080087bc <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	607a      	str	r2, [r7, #4]
 80087c6:	603b      	str	r3, [r7, #0]
 80087c8:	460b      	mov	r3, r1
 80087ca:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087cc:	2300      	movs	r3, #0
 80087ce:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80087d0:	f107 030b 	add.w	r3, r7, #11
 80087d4:	2201      	movs	r2, #1
 80087d6:	4619      	mov	r1, r3
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f7ff ff7e 	bl	80086da <_I2CWrite>
 80087de:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80087e6:	23ec      	movs	r3, #236	; 0xec
 80087e8:	75fb      	strb	r3, [r7, #23]
        goto done;
 80087ea:	e00c      	b.n	8008806 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f7ff ff91 	bl	8008718 <_I2CRead>
 80087f6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d002      	beq.n	8008804 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80087fe:	23ec      	movs	r3, #236	; 0xec
 8008800:	75fb      	strb	r3, [r7, #23]
 8008802:	e000      	b.n	8008806 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008804:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
 8008820:	4613      	mov	r3, r2
 8008822:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008828:	4a0b      	ldr	r2, [pc, #44]	; (8008858 <VL53L0X_WrByte+0x44>)
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800882e:	4a0a      	ldr	r2, [pc, #40]	; (8008858 <VL53L0X_WrByte+0x44>)
 8008830:	78bb      	ldrb	r3, [r7, #2]
 8008832:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008834:	2202      	movs	r2, #2
 8008836:	4908      	ldr	r1, [pc, #32]	; (8008858 <VL53L0X_WrByte+0x44>)
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff ff4e 	bl	80086da <_I2CWrite>
 800883e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008846:	23ec      	movs	r3, #236	; 0xec
 8008848:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800884a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	20000580 	.word	0x20000580

0800885c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
 8008868:	4613      	mov	r3, r2
 800886a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008870:	4a0e      	ldr	r2, [pc, #56]	; (80088ac <VL53L0X_WrWord+0x50>)
 8008872:	78fb      	ldrb	r3, [r7, #3]
 8008874:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8008876:	883b      	ldrh	r3, [r7, #0]
 8008878:	0a1b      	lsrs	r3, r3, #8
 800887a:	b29b      	uxth	r3, r3
 800887c:	b2da      	uxtb	r2, r3
 800887e:	4b0b      	ldr	r3, [pc, #44]	; (80088ac <VL53L0X_WrWord+0x50>)
 8008880:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8008882:	883b      	ldrh	r3, [r7, #0]
 8008884:	b2da      	uxtb	r2, r3
 8008886:	4b09      	ldr	r3, [pc, #36]	; (80088ac <VL53L0X_WrWord+0x50>)
 8008888:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800888a:	2203      	movs	r2, #3
 800888c:	4907      	ldr	r1, [pc, #28]	; (80088ac <VL53L0X_WrWord+0x50>)
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff ff23 	bl	80086da <_I2CWrite>
 8008894:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800889c:	23ec      	movs	r3, #236	; 0xec
 800889e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80088a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20000580 	.word	0x20000580

080088b0 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	4608      	mov	r0, r1
 80088ba:	4611      	mov	r1, r2
 80088bc:	461a      	mov	r2, r3
 80088be:	4603      	mov	r3, r0
 80088c0:	70fb      	strb	r3, [r7, #3]
 80088c2:	460b      	mov	r3, r1
 80088c4:	70bb      	strb	r3, [r7, #2]
 80088c6:	4613      	mov	r3, r2
 80088c8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088ca:	2300      	movs	r3, #0
 80088cc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80088ce:	f107 020e 	add.w	r2, r7, #14
 80088d2:	78fb      	ldrb	r3, [r7, #3]
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f81e 	bl	8008918 <VL53L0X_RdByte>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80088e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d110      	bne.n	800890a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80088e8:	7bba      	ldrb	r2, [r7, #14]
 80088ea:	78bb      	ldrb	r3, [r7, #2]
 80088ec:	4013      	ands	r3, r2
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	787b      	ldrb	r3, [r7, #1]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80088f8:	7bba      	ldrb	r2, [r7, #14]
 80088fa:	78fb      	ldrb	r3, [r7, #3]
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff ff88 	bl	8008814 <VL53L0X_WrByte>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]
 8008908:	e000      	b.n	800890c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800890a:	bf00      	nop
done:
    return Status;
 800890c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	460b      	mov	r3, r1
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008926:	2300      	movs	r3, #0
 8008928:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800892a:	f107 030b 	add.w	r3, r7, #11
 800892e:	2201      	movs	r2, #1
 8008930:	4619      	mov	r1, r3
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f7ff fed1 	bl	80086da <_I2CWrite>
 8008938:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008940:	23ec      	movs	r3, #236	; 0xec
 8008942:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008944:	e00c      	b.n	8008960 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008946:	2201      	movs	r2, #1
 8008948:	6879      	ldr	r1, [r7, #4]
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f7ff fee4 	bl	8008718 <_I2CRead>
 8008950:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008958:	23ec      	movs	r3, #236	; 0xec
 800895a:	75fb      	strb	r3, [r7, #23]
 800895c:	e000      	b.n	8008960 <VL53L0X_RdByte+0x48>
    }
done:
 800895e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008960:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	460b      	mov	r3, r1
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800897a:	2300      	movs	r3, #0
 800897c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800897e:	f107 030b 	add.w	r3, r7, #11
 8008982:	2201      	movs	r2, #1
 8008984:	4619      	mov	r1, r3
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f7ff fea7 	bl	80086da <_I2CWrite>
 800898c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008994:	23ec      	movs	r3, #236	; 0xec
 8008996:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008998:	e017      	b.n	80089ca <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800899a:	2202      	movs	r2, #2
 800899c:	490e      	ldr	r1, [pc, #56]	; (80089d8 <VL53L0X_RdWord+0x6c>)
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f7ff feba 	bl	8008718 <_I2CRead>
 80089a4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80089ac:	23ec      	movs	r3, #236	; 0xec
 80089ae:	75fb      	strb	r3, [r7, #23]
        goto done;
 80089b0:	e00b      	b.n	80089ca <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80089b2:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <VL53L0X_RdWord+0x6c>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	021b      	lsls	r3, r3, #8
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <VL53L0X_RdWord+0x6c>)
 80089be:	785b      	ldrb	r3, [r3, #1]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	4413      	add	r3, r2
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80089ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	20000580 	.word	0x20000580

080089dc <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	460b      	mov	r3, r1
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089ea:	2300      	movs	r3, #0
 80089ec:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80089ee:	f107 030b 	add.w	r3, r7, #11
 80089f2:	2201      	movs	r2, #1
 80089f4:	4619      	mov	r1, r3
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f7ff fe6f 	bl	80086da <_I2CWrite>
 80089fc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008a04:	23ec      	movs	r3, #236	; 0xec
 8008a06:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008a08:	e01b      	b.n	8008a42 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8008a0a:	2204      	movs	r2, #4
 8008a0c:	4910      	ldr	r1, [pc, #64]	; (8008a50 <VL53L0X_RdDWord+0x74>)
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f7ff fe82 	bl	8008718 <_I2CRead>
 8008a14:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008a1c:	23ec      	movs	r3, #236	; 0xec
 8008a1e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008a20:	e00f      	b.n	8008a42 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8008a22:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <VL53L0X_RdDWord+0x74>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	061a      	lsls	r2, r3, #24
 8008a28:	4b09      	ldr	r3, [pc, #36]	; (8008a50 <VL53L0X_RdDWord+0x74>)
 8008a2a:	785b      	ldrb	r3, [r3, #1]
 8008a2c:	041b      	lsls	r3, r3, #16
 8008a2e:	441a      	add	r2, r3
 8008a30:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <VL53L0X_RdDWord+0x74>)
 8008a32:	789b      	ldrb	r3, [r3, #2]
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	4413      	add	r3, r2
 8008a38:	4a05      	ldr	r2, [pc, #20]	; (8008a50 <VL53L0X_RdDWord+0x74>)
 8008a3a:	78d2      	ldrb	r2, [r2, #3]
 8008a3c:	441a      	add	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8008a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20000580 	.word	0x20000580

08008a54 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8008a60:	2002      	movs	r0, #2
 8008a62:	f7f8 fae5 	bl	8001030 <HAL_Delay>
    return status;
 8008a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <__errno>:
 8008a74:	4b01      	ldr	r3, [pc, #4]	; (8008a7c <__errno+0x8>)
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	200002c8 	.word	0x200002c8

08008a80 <__libc_init_array>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	4e0d      	ldr	r6, [pc, #52]	; (8008ab8 <__libc_init_array+0x38>)
 8008a84:	4c0d      	ldr	r4, [pc, #52]	; (8008abc <__libc_init_array+0x3c>)
 8008a86:	1ba4      	subs	r4, r4, r6
 8008a88:	10a4      	asrs	r4, r4, #2
 8008a8a:	2500      	movs	r5, #0
 8008a8c:	42a5      	cmp	r5, r4
 8008a8e:	d109      	bne.n	8008aa4 <__libc_init_array+0x24>
 8008a90:	4e0b      	ldr	r6, [pc, #44]	; (8008ac0 <__libc_init_array+0x40>)
 8008a92:	4c0c      	ldr	r4, [pc, #48]	; (8008ac4 <__libc_init_array+0x44>)
 8008a94:	f001 f832 	bl	8009afc <_init>
 8008a98:	1ba4      	subs	r4, r4, r6
 8008a9a:	10a4      	asrs	r4, r4, #2
 8008a9c:	2500      	movs	r5, #0
 8008a9e:	42a5      	cmp	r5, r4
 8008aa0:	d105      	bne.n	8008aae <__libc_init_array+0x2e>
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008aa8:	4798      	blx	r3
 8008aaa:	3501      	adds	r5, #1
 8008aac:	e7ee      	b.n	8008a8c <__libc_init_array+0xc>
 8008aae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ab2:	4798      	blx	r3
 8008ab4:	3501      	adds	r5, #1
 8008ab6:	e7f2      	b.n	8008a9e <__libc_init_array+0x1e>
 8008ab8:	08009c4c 	.word	0x08009c4c
 8008abc:	08009c4c 	.word	0x08009c4c
 8008ac0:	08009c4c 	.word	0x08009c4c
 8008ac4:	08009c50 	.word	0x08009c50

08008ac8 <memcpy>:
 8008ac8:	b510      	push	{r4, lr}
 8008aca:	1e43      	subs	r3, r0, #1
 8008acc:	440a      	add	r2, r1
 8008ace:	4291      	cmp	r1, r2
 8008ad0:	d100      	bne.n	8008ad4 <memcpy+0xc>
 8008ad2:	bd10      	pop	{r4, pc}
 8008ad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008adc:	e7f7      	b.n	8008ace <memcpy+0x6>

08008ade <memset>:
 8008ade:	4402      	add	r2, r0
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d100      	bne.n	8008ae8 <memset+0xa>
 8008ae6:	4770      	bx	lr
 8008ae8:	f803 1b01 	strb.w	r1, [r3], #1
 8008aec:	e7f9      	b.n	8008ae2 <memset+0x4>
	...

08008af0 <iprintf>:
 8008af0:	b40f      	push	{r0, r1, r2, r3}
 8008af2:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <iprintf+0x2c>)
 8008af4:	b513      	push	{r0, r1, r4, lr}
 8008af6:	681c      	ldr	r4, [r3, #0]
 8008af8:	b124      	cbz	r4, 8008b04 <iprintf+0x14>
 8008afa:	69a3      	ldr	r3, [r4, #24]
 8008afc:	b913      	cbnz	r3, 8008b04 <iprintf+0x14>
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 fad8 	bl	80090b4 <__sinit>
 8008b04:	ab05      	add	r3, sp, #20
 8008b06:	9a04      	ldr	r2, [sp, #16]
 8008b08:	68a1      	ldr	r1, [r4, #8]
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f000 fc99 	bl	8009444 <_vfiprintf_r>
 8008b12:	b002      	add	sp, #8
 8008b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b18:	b004      	add	sp, #16
 8008b1a:	4770      	bx	lr
 8008b1c:	200002c8 	.word	0x200002c8

08008b20 <_puts_r>:
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	460e      	mov	r6, r1
 8008b24:	4605      	mov	r5, r0
 8008b26:	b118      	cbz	r0, 8008b30 <_puts_r+0x10>
 8008b28:	6983      	ldr	r3, [r0, #24]
 8008b2a:	b90b      	cbnz	r3, 8008b30 <_puts_r+0x10>
 8008b2c:	f000 fac2 	bl	80090b4 <__sinit>
 8008b30:	69ab      	ldr	r3, [r5, #24]
 8008b32:	68ac      	ldr	r4, [r5, #8]
 8008b34:	b913      	cbnz	r3, 8008b3c <_puts_r+0x1c>
 8008b36:	4628      	mov	r0, r5
 8008b38:	f000 fabc 	bl	80090b4 <__sinit>
 8008b3c:	4b23      	ldr	r3, [pc, #140]	; (8008bcc <_puts_r+0xac>)
 8008b3e:	429c      	cmp	r4, r3
 8008b40:	d117      	bne.n	8008b72 <_puts_r+0x52>
 8008b42:	686c      	ldr	r4, [r5, #4]
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	071b      	lsls	r3, r3, #28
 8008b48:	d51d      	bpl.n	8008b86 <_puts_r+0x66>
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	b1db      	cbz	r3, 8008b86 <_puts_r+0x66>
 8008b4e:	3e01      	subs	r6, #1
 8008b50:	68a3      	ldr	r3, [r4, #8]
 8008b52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b56:	3b01      	subs	r3, #1
 8008b58:	60a3      	str	r3, [r4, #8]
 8008b5a:	b9e9      	cbnz	r1, 8008b98 <_puts_r+0x78>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	da2e      	bge.n	8008bbe <_puts_r+0x9e>
 8008b60:	4622      	mov	r2, r4
 8008b62:	210a      	movs	r1, #10
 8008b64:	4628      	mov	r0, r5
 8008b66:	f000 f8f5 	bl	8008d54 <__swbuf_r>
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	d011      	beq.n	8008b92 <_puts_r+0x72>
 8008b6e:	200a      	movs	r0, #10
 8008b70:	e011      	b.n	8008b96 <_puts_r+0x76>
 8008b72:	4b17      	ldr	r3, [pc, #92]	; (8008bd0 <_puts_r+0xb0>)
 8008b74:	429c      	cmp	r4, r3
 8008b76:	d101      	bne.n	8008b7c <_puts_r+0x5c>
 8008b78:	68ac      	ldr	r4, [r5, #8]
 8008b7a:	e7e3      	b.n	8008b44 <_puts_r+0x24>
 8008b7c:	4b15      	ldr	r3, [pc, #84]	; (8008bd4 <_puts_r+0xb4>)
 8008b7e:	429c      	cmp	r4, r3
 8008b80:	bf08      	it	eq
 8008b82:	68ec      	ldreq	r4, [r5, #12]
 8008b84:	e7de      	b.n	8008b44 <_puts_r+0x24>
 8008b86:	4621      	mov	r1, r4
 8008b88:	4628      	mov	r0, r5
 8008b8a:	f000 f935 	bl	8008df8 <__swsetup_r>
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d0dd      	beq.n	8008b4e <_puts_r+0x2e>
 8008b92:	f04f 30ff 	mov.w	r0, #4294967295
 8008b96:	bd70      	pop	{r4, r5, r6, pc}
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	da04      	bge.n	8008ba6 <_puts_r+0x86>
 8008b9c:	69a2      	ldr	r2, [r4, #24]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	dc06      	bgt.n	8008bb0 <_puts_r+0x90>
 8008ba2:	290a      	cmp	r1, #10
 8008ba4:	d004      	beq.n	8008bb0 <_puts_r+0x90>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	6022      	str	r2, [r4, #0]
 8008bac:	7019      	strb	r1, [r3, #0]
 8008bae:	e7cf      	b.n	8008b50 <_puts_r+0x30>
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 f8ce 	bl	8008d54 <__swbuf_r>
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d1c9      	bne.n	8008b50 <_puts_r+0x30>
 8008bbc:	e7e9      	b.n	8008b92 <_puts_r+0x72>
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	200a      	movs	r0, #10
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	6022      	str	r2, [r4, #0]
 8008bc6:	7018      	strb	r0, [r3, #0]
 8008bc8:	e7e5      	b.n	8008b96 <_puts_r+0x76>
 8008bca:	bf00      	nop
 8008bcc:	08009bd0 	.word	0x08009bd0
 8008bd0:	08009bf0 	.word	0x08009bf0
 8008bd4:	08009bb0 	.word	0x08009bb0

08008bd8 <puts>:
 8008bd8:	4b02      	ldr	r3, [pc, #8]	; (8008be4 <puts+0xc>)
 8008bda:	4601      	mov	r1, r0
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	f7ff bf9f 	b.w	8008b20 <_puts_r>
 8008be2:	bf00      	nop
 8008be4:	200002c8 	.word	0x200002c8

08008be8 <setvbuf>:
 8008be8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bec:	461d      	mov	r5, r3
 8008bee:	4b51      	ldr	r3, [pc, #324]	; (8008d34 <setvbuf+0x14c>)
 8008bf0:	681e      	ldr	r6, [r3, #0]
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	460f      	mov	r7, r1
 8008bf6:	4690      	mov	r8, r2
 8008bf8:	b126      	cbz	r6, 8008c04 <setvbuf+0x1c>
 8008bfa:	69b3      	ldr	r3, [r6, #24]
 8008bfc:	b913      	cbnz	r3, 8008c04 <setvbuf+0x1c>
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f000 fa58 	bl	80090b4 <__sinit>
 8008c04:	4b4c      	ldr	r3, [pc, #304]	; (8008d38 <setvbuf+0x150>)
 8008c06:	429c      	cmp	r4, r3
 8008c08:	d152      	bne.n	8008cb0 <setvbuf+0xc8>
 8008c0a:	6874      	ldr	r4, [r6, #4]
 8008c0c:	f1b8 0f02 	cmp.w	r8, #2
 8008c10:	d006      	beq.n	8008c20 <setvbuf+0x38>
 8008c12:	f1b8 0f01 	cmp.w	r8, #1
 8008c16:	f200 8089 	bhi.w	8008d2c <setvbuf+0x144>
 8008c1a:	2d00      	cmp	r5, #0
 8008c1c:	f2c0 8086 	blt.w	8008d2c <setvbuf+0x144>
 8008c20:	4621      	mov	r1, r4
 8008c22:	4630      	mov	r0, r6
 8008c24:	f000 f9dc 	bl	8008fe0 <_fflush_r>
 8008c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c2a:	b141      	cbz	r1, 8008c3e <setvbuf+0x56>
 8008c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c30:	4299      	cmp	r1, r3
 8008c32:	d002      	beq.n	8008c3a <setvbuf+0x52>
 8008c34:	4630      	mov	r0, r6
 8008c36:	f000 fb33 	bl	80092a0 <_free_r>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c3e:	2300      	movs	r3, #0
 8008c40:	61a3      	str	r3, [r4, #24]
 8008c42:	6063      	str	r3, [r4, #4]
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	061b      	lsls	r3, r3, #24
 8008c48:	d503      	bpl.n	8008c52 <setvbuf+0x6a>
 8008c4a:	6921      	ldr	r1, [r4, #16]
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f000 fb27 	bl	80092a0 <_free_r>
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008c58:	f023 0303 	bic.w	r3, r3, #3
 8008c5c:	f1b8 0f02 	cmp.w	r8, #2
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	d05d      	beq.n	8008d20 <setvbuf+0x138>
 8008c64:	ab01      	add	r3, sp, #4
 8008c66:	466a      	mov	r2, sp
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f000 faac 	bl	80091c8 <__swhatbuf_r>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	4318      	orrs	r0, r3
 8008c74:	81a0      	strh	r0, [r4, #12]
 8008c76:	bb2d      	cbnz	r5, 8008cc4 <setvbuf+0xdc>
 8008c78:	9d00      	ldr	r5, [sp, #0]
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f000 fb08 	bl	8009290 <malloc>
 8008c80:	4607      	mov	r7, r0
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d14e      	bne.n	8008d24 <setvbuf+0x13c>
 8008c86:	f8dd 9000 	ldr.w	r9, [sp]
 8008c8a:	45a9      	cmp	r9, r5
 8008c8c:	d13c      	bne.n	8008d08 <setvbuf+0x120>
 8008c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	f043 0302 	orr.w	r3, r3, #2
 8008c98:	81a3      	strh	r3, [r4, #12]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60a3      	str	r3, [r4, #8]
 8008c9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ca2:	6023      	str	r3, [r4, #0]
 8008ca4:	6123      	str	r3, [r4, #16]
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	6163      	str	r3, [r4, #20]
 8008caa:	b003      	add	sp, #12
 8008cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cb0:	4b22      	ldr	r3, [pc, #136]	; (8008d3c <setvbuf+0x154>)
 8008cb2:	429c      	cmp	r4, r3
 8008cb4:	d101      	bne.n	8008cba <setvbuf+0xd2>
 8008cb6:	68b4      	ldr	r4, [r6, #8]
 8008cb8:	e7a8      	b.n	8008c0c <setvbuf+0x24>
 8008cba:	4b21      	ldr	r3, [pc, #132]	; (8008d40 <setvbuf+0x158>)
 8008cbc:	429c      	cmp	r4, r3
 8008cbe:	bf08      	it	eq
 8008cc0:	68f4      	ldreq	r4, [r6, #12]
 8008cc2:	e7a3      	b.n	8008c0c <setvbuf+0x24>
 8008cc4:	2f00      	cmp	r7, #0
 8008cc6:	d0d8      	beq.n	8008c7a <setvbuf+0x92>
 8008cc8:	69b3      	ldr	r3, [r6, #24]
 8008cca:	b913      	cbnz	r3, 8008cd2 <setvbuf+0xea>
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f000 f9f1 	bl	80090b4 <__sinit>
 8008cd2:	f1b8 0f01 	cmp.w	r8, #1
 8008cd6:	bf08      	it	eq
 8008cd8:	89a3      	ldrheq	r3, [r4, #12]
 8008cda:	6027      	str	r7, [r4, #0]
 8008cdc:	bf04      	itt	eq
 8008cde:	f043 0301 	orreq.w	r3, r3, #1
 8008ce2:	81a3      	strheq	r3, [r4, #12]
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	f013 0008 	ands.w	r0, r3, #8
 8008cea:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8008cee:	d01b      	beq.n	8008d28 <setvbuf+0x140>
 8008cf0:	f013 0001 	ands.w	r0, r3, #1
 8008cf4:	bf18      	it	ne
 8008cf6:	426d      	negne	r5, r5
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	bf1d      	ittte	ne
 8008cfe:	60a3      	strne	r3, [r4, #8]
 8008d00:	61a5      	strne	r5, [r4, #24]
 8008d02:	4618      	movne	r0, r3
 8008d04:	60a5      	streq	r5, [r4, #8]
 8008d06:	e7d0      	b.n	8008caa <setvbuf+0xc2>
 8008d08:	4648      	mov	r0, r9
 8008d0a:	f000 fac1 	bl	8009290 <malloc>
 8008d0e:	4607      	mov	r7, r0
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d0bc      	beq.n	8008c8e <setvbuf+0xa6>
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	464d      	mov	r5, r9
 8008d1e:	e7d3      	b.n	8008cc8 <setvbuf+0xe0>
 8008d20:	2000      	movs	r0, #0
 8008d22:	e7b6      	b.n	8008c92 <setvbuf+0xaa>
 8008d24:	46a9      	mov	r9, r5
 8008d26:	e7f5      	b.n	8008d14 <setvbuf+0x12c>
 8008d28:	60a0      	str	r0, [r4, #8]
 8008d2a:	e7be      	b.n	8008caa <setvbuf+0xc2>
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	e7bb      	b.n	8008caa <setvbuf+0xc2>
 8008d32:	bf00      	nop
 8008d34:	200002c8 	.word	0x200002c8
 8008d38:	08009bd0 	.word	0x08009bd0
 8008d3c:	08009bf0 	.word	0x08009bf0
 8008d40:	08009bb0 	.word	0x08009bb0

08008d44 <strcpy>:
 8008d44:	4603      	mov	r3, r0
 8008d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d4a:	f803 2b01 	strb.w	r2, [r3], #1
 8008d4e:	2a00      	cmp	r2, #0
 8008d50:	d1f9      	bne.n	8008d46 <strcpy+0x2>
 8008d52:	4770      	bx	lr

08008d54 <__swbuf_r>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	460e      	mov	r6, r1
 8008d58:	4614      	mov	r4, r2
 8008d5a:	4605      	mov	r5, r0
 8008d5c:	b118      	cbz	r0, 8008d66 <__swbuf_r+0x12>
 8008d5e:	6983      	ldr	r3, [r0, #24]
 8008d60:	b90b      	cbnz	r3, 8008d66 <__swbuf_r+0x12>
 8008d62:	f000 f9a7 	bl	80090b4 <__sinit>
 8008d66:	4b21      	ldr	r3, [pc, #132]	; (8008dec <__swbuf_r+0x98>)
 8008d68:	429c      	cmp	r4, r3
 8008d6a:	d12a      	bne.n	8008dc2 <__swbuf_r+0x6e>
 8008d6c:	686c      	ldr	r4, [r5, #4]
 8008d6e:	69a3      	ldr	r3, [r4, #24]
 8008d70:	60a3      	str	r3, [r4, #8]
 8008d72:	89a3      	ldrh	r3, [r4, #12]
 8008d74:	071a      	lsls	r2, r3, #28
 8008d76:	d52e      	bpl.n	8008dd6 <__swbuf_r+0x82>
 8008d78:	6923      	ldr	r3, [r4, #16]
 8008d7a:	b363      	cbz	r3, 8008dd6 <__swbuf_r+0x82>
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	6820      	ldr	r0, [r4, #0]
 8008d80:	1ac0      	subs	r0, r0, r3
 8008d82:	6963      	ldr	r3, [r4, #20]
 8008d84:	b2f6      	uxtb	r6, r6
 8008d86:	4283      	cmp	r3, r0
 8008d88:	4637      	mov	r7, r6
 8008d8a:	dc04      	bgt.n	8008d96 <__swbuf_r+0x42>
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f000 f926 	bl	8008fe0 <_fflush_r>
 8008d94:	bb28      	cbnz	r0, 8008de2 <__swbuf_r+0x8e>
 8008d96:	68a3      	ldr	r3, [r4, #8]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	60a3      	str	r3, [r4, #8]
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	6022      	str	r2, [r4, #0]
 8008da2:	701e      	strb	r6, [r3, #0]
 8008da4:	6963      	ldr	r3, [r4, #20]
 8008da6:	3001      	adds	r0, #1
 8008da8:	4283      	cmp	r3, r0
 8008daa:	d004      	beq.n	8008db6 <__swbuf_r+0x62>
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	07db      	lsls	r3, r3, #31
 8008db0:	d519      	bpl.n	8008de6 <__swbuf_r+0x92>
 8008db2:	2e0a      	cmp	r6, #10
 8008db4:	d117      	bne.n	8008de6 <__swbuf_r+0x92>
 8008db6:	4621      	mov	r1, r4
 8008db8:	4628      	mov	r0, r5
 8008dba:	f000 f911 	bl	8008fe0 <_fflush_r>
 8008dbe:	b190      	cbz	r0, 8008de6 <__swbuf_r+0x92>
 8008dc0:	e00f      	b.n	8008de2 <__swbuf_r+0x8e>
 8008dc2:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <__swbuf_r+0x9c>)
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	d101      	bne.n	8008dcc <__swbuf_r+0x78>
 8008dc8:	68ac      	ldr	r4, [r5, #8]
 8008dca:	e7d0      	b.n	8008d6e <__swbuf_r+0x1a>
 8008dcc:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <__swbuf_r+0xa0>)
 8008dce:	429c      	cmp	r4, r3
 8008dd0:	bf08      	it	eq
 8008dd2:	68ec      	ldreq	r4, [r5, #12]
 8008dd4:	e7cb      	b.n	8008d6e <__swbuf_r+0x1a>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f000 f80d 	bl	8008df8 <__swsetup_r>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d0cc      	beq.n	8008d7c <__swbuf_r+0x28>
 8008de2:	f04f 37ff 	mov.w	r7, #4294967295
 8008de6:	4638      	mov	r0, r7
 8008de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dea:	bf00      	nop
 8008dec:	08009bd0 	.word	0x08009bd0
 8008df0:	08009bf0 	.word	0x08009bf0
 8008df4:	08009bb0 	.word	0x08009bb0

08008df8 <__swsetup_r>:
 8008df8:	4b32      	ldr	r3, [pc, #200]	; (8008ec4 <__swsetup_r+0xcc>)
 8008dfa:	b570      	push	{r4, r5, r6, lr}
 8008dfc:	681d      	ldr	r5, [r3, #0]
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460c      	mov	r4, r1
 8008e02:	b125      	cbz	r5, 8008e0e <__swsetup_r+0x16>
 8008e04:	69ab      	ldr	r3, [r5, #24]
 8008e06:	b913      	cbnz	r3, 8008e0e <__swsetup_r+0x16>
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f000 f953 	bl	80090b4 <__sinit>
 8008e0e:	4b2e      	ldr	r3, [pc, #184]	; (8008ec8 <__swsetup_r+0xd0>)
 8008e10:	429c      	cmp	r4, r3
 8008e12:	d10f      	bne.n	8008e34 <__swsetup_r+0x3c>
 8008e14:	686c      	ldr	r4, [r5, #4]
 8008e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	0715      	lsls	r5, r2, #28
 8008e1e:	d42c      	bmi.n	8008e7a <__swsetup_r+0x82>
 8008e20:	06d0      	lsls	r0, r2, #27
 8008e22:	d411      	bmi.n	8008e48 <__swsetup_r+0x50>
 8008e24:	2209      	movs	r2, #9
 8008e26:	6032      	str	r2, [r6, #0]
 8008e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e2c:	81a3      	strh	r3, [r4, #12]
 8008e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e32:	e03e      	b.n	8008eb2 <__swsetup_r+0xba>
 8008e34:	4b25      	ldr	r3, [pc, #148]	; (8008ecc <__swsetup_r+0xd4>)
 8008e36:	429c      	cmp	r4, r3
 8008e38:	d101      	bne.n	8008e3e <__swsetup_r+0x46>
 8008e3a:	68ac      	ldr	r4, [r5, #8]
 8008e3c:	e7eb      	b.n	8008e16 <__swsetup_r+0x1e>
 8008e3e:	4b24      	ldr	r3, [pc, #144]	; (8008ed0 <__swsetup_r+0xd8>)
 8008e40:	429c      	cmp	r4, r3
 8008e42:	bf08      	it	eq
 8008e44:	68ec      	ldreq	r4, [r5, #12]
 8008e46:	e7e6      	b.n	8008e16 <__swsetup_r+0x1e>
 8008e48:	0751      	lsls	r1, r2, #29
 8008e4a:	d512      	bpl.n	8008e72 <__swsetup_r+0x7a>
 8008e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e4e:	b141      	cbz	r1, 8008e62 <__swsetup_r+0x6a>
 8008e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e54:	4299      	cmp	r1, r3
 8008e56:	d002      	beq.n	8008e5e <__swsetup_r+0x66>
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f000 fa21 	bl	80092a0 <_free_r>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6363      	str	r3, [r4, #52]	; 0x34
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6063      	str	r3, [r4, #4]
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	f043 0308 	orr.w	r3, r3, #8
 8008e78:	81a3      	strh	r3, [r4, #12]
 8008e7a:	6923      	ldr	r3, [r4, #16]
 8008e7c:	b94b      	cbnz	r3, 8008e92 <__swsetup_r+0x9a>
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e88:	d003      	beq.n	8008e92 <__swsetup_r+0x9a>
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f000 f9bf 	bl	8009210 <__smakebuf_r>
 8008e92:	89a2      	ldrh	r2, [r4, #12]
 8008e94:	f012 0301 	ands.w	r3, r2, #1
 8008e98:	d00c      	beq.n	8008eb4 <__swsetup_r+0xbc>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	60a3      	str	r3, [r4, #8]
 8008e9e:	6963      	ldr	r3, [r4, #20]
 8008ea0:	425b      	negs	r3, r3
 8008ea2:	61a3      	str	r3, [r4, #24]
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	b953      	cbnz	r3, 8008ebe <__swsetup_r+0xc6>
 8008ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008eb0:	d1ba      	bne.n	8008e28 <__swsetup_r+0x30>
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	0792      	lsls	r2, r2, #30
 8008eb6:	bf58      	it	pl
 8008eb8:	6963      	ldrpl	r3, [r4, #20]
 8008eba:	60a3      	str	r3, [r4, #8]
 8008ebc:	e7f2      	b.n	8008ea4 <__swsetup_r+0xac>
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	e7f7      	b.n	8008eb2 <__swsetup_r+0xba>
 8008ec2:	bf00      	nop
 8008ec4:	200002c8 	.word	0x200002c8
 8008ec8:	08009bd0 	.word	0x08009bd0
 8008ecc:	08009bf0 	.word	0x08009bf0
 8008ed0:	08009bb0 	.word	0x08009bb0

08008ed4 <__sflush_r>:
 8008ed4:	898a      	ldrh	r2, [r1, #12]
 8008ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eda:	4605      	mov	r5, r0
 8008edc:	0710      	lsls	r0, r2, #28
 8008ede:	460c      	mov	r4, r1
 8008ee0:	d458      	bmi.n	8008f94 <__sflush_r+0xc0>
 8008ee2:	684b      	ldr	r3, [r1, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	dc05      	bgt.n	8008ef4 <__sflush_r+0x20>
 8008ee8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dc02      	bgt.n	8008ef4 <__sflush_r+0x20>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ef6:	2e00      	cmp	r6, #0
 8008ef8:	d0f9      	beq.n	8008eee <__sflush_r+0x1a>
 8008efa:	2300      	movs	r3, #0
 8008efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f00:	682f      	ldr	r7, [r5, #0]
 8008f02:	6a21      	ldr	r1, [r4, #32]
 8008f04:	602b      	str	r3, [r5, #0]
 8008f06:	d032      	beq.n	8008f6e <__sflush_r+0x9a>
 8008f08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	075a      	lsls	r2, r3, #29
 8008f0e:	d505      	bpl.n	8008f1c <__sflush_r+0x48>
 8008f10:	6863      	ldr	r3, [r4, #4]
 8008f12:	1ac0      	subs	r0, r0, r3
 8008f14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f16:	b10b      	cbz	r3, 8008f1c <__sflush_r+0x48>
 8008f18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f1a:	1ac0      	subs	r0, r0, r3
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4602      	mov	r2, r0
 8008f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f22:	6a21      	ldr	r1, [r4, #32]
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b0      	blx	r6
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	d106      	bne.n	8008f3c <__sflush_r+0x68>
 8008f2e:	6829      	ldr	r1, [r5, #0]
 8008f30:	291d      	cmp	r1, #29
 8008f32:	d848      	bhi.n	8008fc6 <__sflush_r+0xf2>
 8008f34:	4a29      	ldr	r2, [pc, #164]	; (8008fdc <__sflush_r+0x108>)
 8008f36:	40ca      	lsrs	r2, r1
 8008f38:	07d6      	lsls	r6, r2, #31
 8008f3a:	d544      	bpl.n	8008fc6 <__sflush_r+0xf2>
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	6062      	str	r2, [r4, #4]
 8008f40:	04d9      	lsls	r1, r3, #19
 8008f42:	6922      	ldr	r2, [r4, #16]
 8008f44:	6022      	str	r2, [r4, #0]
 8008f46:	d504      	bpl.n	8008f52 <__sflush_r+0x7e>
 8008f48:	1c42      	adds	r2, r0, #1
 8008f4a:	d101      	bne.n	8008f50 <__sflush_r+0x7c>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b903      	cbnz	r3, 8008f52 <__sflush_r+0x7e>
 8008f50:	6560      	str	r0, [r4, #84]	; 0x54
 8008f52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f54:	602f      	str	r7, [r5, #0]
 8008f56:	2900      	cmp	r1, #0
 8008f58:	d0c9      	beq.n	8008eee <__sflush_r+0x1a>
 8008f5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f5e:	4299      	cmp	r1, r3
 8008f60:	d002      	beq.n	8008f68 <__sflush_r+0x94>
 8008f62:	4628      	mov	r0, r5
 8008f64:	f000 f99c 	bl	80092a0 <_free_r>
 8008f68:	2000      	movs	r0, #0
 8008f6a:	6360      	str	r0, [r4, #52]	; 0x34
 8008f6c:	e7c0      	b.n	8008ef0 <__sflush_r+0x1c>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b0      	blx	r6
 8008f74:	1c41      	adds	r1, r0, #1
 8008f76:	d1c8      	bne.n	8008f0a <__sflush_r+0x36>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0c5      	beq.n	8008f0a <__sflush_r+0x36>
 8008f7e:	2b1d      	cmp	r3, #29
 8008f80:	d001      	beq.n	8008f86 <__sflush_r+0xb2>
 8008f82:	2b16      	cmp	r3, #22
 8008f84:	d101      	bne.n	8008f8a <__sflush_r+0xb6>
 8008f86:	602f      	str	r7, [r5, #0]
 8008f88:	e7b1      	b.n	8008eee <__sflush_r+0x1a>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f90:	81a3      	strh	r3, [r4, #12]
 8008f92:	e7ad      	b.n	8008ef0 <__sflush_r+0x1c>
 8008f94:	690f      	ldr	r7, [r1, #16]
 8008f96:	2f00      	cmp	r7, #0
 8008f98:	d0a9      	beq.n	8008eee <__sflush_r+0x1a>
 8008f9a:	0793      	lsls	r3, r2, #30
 8008f9c:	680e      	ldr	r6, [r1, #0]
 8008f9e:	bf08      	it	eq
 8008fa0:	694b      	ldreq	r3, [r1, #20]
 8008fa2:	600f      	str	r7, [r1, #0]
 8008fa4:	bf18      	it	ne
 8008fa6:	2300      	movne	r3, #0
 8008fa8:	eba6 0807 	sub.w	r8, r6, r7
 8008fac:	608b      	str	r3, [r1, #8]
 8008fae:	f1b8 0f00 	cmp.w	r8, #0
 8008fb2:	dd9c      	ble.n	8008eee <__sflush_r+0x1a>
 8008fb4:	4643      	mov	r3, r8
 8008fb6:	463a      	mov	r2, r7
 8008fb8:	6a21      	ldr	r1, [r4, #32]
 8008fba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	47b0      	blx	r6
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	dc06      	bgt.n	8008fd2 <__sflush_r+0xfe>
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fca:	81a3      	strh	r3, [r4, #12]
 8008fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd0:	e78e      	b.n	8008ef0 <__sflush_r+0x1c>
 8008fd2:	4407      	add	r7, r0
 8008fd4:	eba8 0800 	sub.w	r8, r8, r0
 8008fd8:	e7e9      	b.n	8008fae <__sflush_r+0xda>
 8008fda:	bf00      	nop
 8008fdc:	20400001 	.word	0x20400001

08008fe0 <_fflush_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	690b      	ldr	r3, [r1, #16]
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	b1db      	cbz	r3, 8009022 <_fflush_r+0x42>
 8008fea:	b118      	cbz	r0, 8008ff4 <_fflush_r+0x14>
 8008fec:	6983      	ldr	r3, [r0, #24]
 8008fee:	b90b      	cbnz	r3, 8008ff4 <_fflush_r+0x14>
 8008ff0:	f000 f860 	bl	80090b4 <__sinit>
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	; (8009028 <_fflush_r+0x48>)
 8008ff6:	429c      	cmp	r4, r3
 8008ff8:	d109      	bne.n	800900e <_fflush_r+0x2e>
 8008ffa:	686c      	ldr	r4, [r5, #4]
 8008ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009000:	b17b      	cbz	r3, 8009022 <_fflush_r+0x42>
 8009002:	4621      	mov	r1, r4
 8009004:	4628      	mov	r0, r5
 8009006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800900a:	f7ff bf63 	b.w	8008ed4 <__sflush_r>
 800900e:	4b07      	ldr	r3, [pc, #28]	; (800902c <_fflush_r+0x4c>)
 8009010:	429c      	cmp	r4, r3
 8009012:	d101      	bne.n	8009018 <_fflush_r+0x38>
 8009014:	68ac      	ldr	r4, [r5, #8]
 8009016:	e7f1      	b.n	8008ffc <_fflush_r+0x1c>
 8009018:	4b05      	ldr	r3, [pc, #20]	; (8009030 <_fflush_r+0x50>)
 800901a:	429c      	cmp	r4, r3
 800901c:	bf08      	it	eq
 800901e:	68ec      	ldreq	r4, [r5, #12]
 8009020:	e7ec      	b.n	8008ffc <_fflush_r+0x1c>
 8009022:	2000      	movs	r0, #0
 8009024:	bd38      	pop	{r3, r4, r5, pc}
 8009026:	bf00      	nop
 8009028:	08009bd0 	.word	0x08009bd0
 800902c:	08009bf0 	.word	0x08009bf0
 8009030:	08009bb0 	.word	0x08009bb0

08009034 <std>:
 8009034:	2300      	movs	r3, #0
 8009036:	b510      	push	{r4, lr}
 8009038:	4604      	mov	r4, r0
 800903a:	e9c0 3300 	strd	r3, r3, [r0]
 800903e:	6083      	str	r3, [r0, #8]
 8009040:	8181      	strh	r1, [r0, #12]
 8009042:	6643      	str	r3, [r0, #100]	; 0x64
 8009044:	81c2      	strh	r2, [r0, #14]
 8009046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800904a:	6183      	str	r3, [r0, #24]
 800904c:	4619      	mov	r1, r3
 800904e:	2208      	movs	r2, #8
 8009050:	305c      	adds	r0, #92	; 0x5c
 8009052:	f7ff fd44 	bl	8008ade <memset>
 8009056:	4b05      	ldr	r3, [pc, #20]	; (800906c <std+0x38>)
 8009058:	6263      	str	r3, [r4, #36]	; 0x24
 800905a:	4b05      	ldr	r3, [pc, #20]	; (8009070 <std+0x3c>)
 800905c:	62a3      	str	r3, [r4, #40]	; 0x28
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <std+0x40>)
 8009060:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009062:	4b05      	ldr	r3, [pc, #20]	; (8009078 <std+0x44>)
 8009064:	6224      	str	r4, [r4, #32]
 8009066:	6323      	str	r3, [r4, #48]	; 0x30
 8009068:	bd10      	pop	{r4, pc}
 800906a:	bf00      	nop
 800906c:	080099a1 	.word	0x080099a1
 8009070:	080099c3 	.word	0x080099c3
 8009074:	080099fb 	.word	0x080099fb
 8009078:	08009a1f 	.word	0x08009a1f

0800907c <_cleanup_r>:
 800907c:	4901      	ldr	r1, [pc, #4]	; (8009084 <_cleanup_r+0x8>)
 800907e:	f000 b885 	b.w	800918c <_fwalk_reent>
 8009082:	bf00      	nop
 8009084:	08008fe1 	.word	0x08008fe1

08009088 <__sfmoreglue>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	1e4a      	subs	r2, r1, #1
 800908c:	2568      	movs	r5, #104	; 0x68
 800908e:	4355      	muls	r5, r2
 8009090:	460e      	mov	r6, r1
 8009092:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009096:	f000 f951 	bl	800933c <_malloc_r>
 800909a:	4604      	mov	r4, r0
 800909c:	b140      	cbz	r0, 80090b0 <__sfmoreglue+0x28>
 800909e:	2100      	movs	r1, #0
 80090a0:	e9c0 1600 	strd	r1, r6, [r0]
 80090a4:	300c      	adds	r0, #12
 80090a6:	60a0      	str	r0, [r4, #8]
 80090a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090ac:	f7ff fd17 	bl	8008ade <memset>
 80090b0:	4620      	mov	r0, r4
 80090b2:	bd70      	pop	{r4, r5, r6, pc}

080090b4 <__sinit>:
 80090b4:	6983      	ldr	r3, [r0, #24]
 80090b6:	b510      	push	{r4, lr}
 80090b8:	4604      	mov	r4, r0
 80090ba:	bb33      	cbnz	r3, 800910a <__sinit+0x56>
 80090bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80090c0:	6503      	str	r3, [r0, #80]	; 0x50
 80090c2:	4b12      	ldr	r3, [pc, #72]	; (800910c <__sinit+0x58>)
 80090c4:	4a12      	ldr	r2, [pc, #72]	; (8009110 <__sinit+0x5c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6282      	str	r2, [r0, #40]	; 0x28
 80090ca:	4298      	cmp	r0, r3
 80090cc:	bf04      	itt	eq
 80090ce:	2301      	moveq	r3, #1
 80090d0:	6183      	streq	r3, [r0, #24]
 80090d2:	f000 f81f 	bl	8009114 <__sfp>
 80090d6:	6060      	str	r0, [r4, #4]
 80090d8:	4620      	mov	r0, r4
 80090da:	f000 f81b 	bl	8009114 <__sfp>
 80090de:	60a0      	str	r0, [r4, #8]
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 f817 	bl	8009114 <__sfp>
 80090e6:	2200      	movs	r2, #0
 80090e8:	60e0      	str	r0, [r4, #12]
 80090ea:	2104      	movs	r1, #4
 80090ec:	6860      	ldr	r0, [r4, #4]
 80090ee:	f7ff ffa1 	bl	8009034 <std>
 80090f2:	2201      	movs	r2, #1
 80090f4:	2109      	movs	r1, #9
 80090f6:	68a0      	ldr	r0, [r4, #8]
 80090f8:	f7ff ff9c 	bl	8009034 <std>
 80090fc:	2202      	movs	r2, #2
 80090fe:	2112      	movs	r1, #18
 8009100:	68e0      	ldr	r0, [r4, #12]
 8009102:	f7ff ff97 	bl	8009034 <std>
 8009106:	2301      	movs	r3, #1
 8009108:	61a3      	str	r3, [r4, #24]
 800910a:	bd10      	pop	{r4, pc}
 800910c:	08009bac 	.word	0x08009bac
 8009110:	0800907d 	.word	0x0800907d

08009114 <__sfp>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	4b1b      	ldr	r3, [pc, #108]	; (8009184 <__sfp+0x70>)
 8009118:	681e      	ldr	r6, [r3, #0]
 800911a:	69b3      	ldr	r3, [r6, #24]
 800911c:	4607      	mov	r7, r0
 800911e:	b913      	cbnz	r3, 8009126 <__sfp+0x12>
 8009120:	4630      	mov	r0, r6
 8009122:	f7ff ffc7 	bl	80090b4 <__sinit>
 8009126:	3648      	adds	r6, #72	; 0x48
 8009128:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800912c:	3b01      	subs	r3, #1
 800912e:	d503      	bpl.n	8009138 <__sfp+0x24>
 8009130:	6833      	ldr	r3, [r6, #0]
 8009132:	b133      	cbz	r3, 8009142 <__sfp+0x2e>
 8009134:	6836      	ldr	r6, [r6, #0]
 8009136:	e7f7      	b.n	8009128 <__sfp+0x14>
 8009138:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800913c:	b16d      	cbz	r5, 800915a <__sfp+0x46>
 800913e:	3468      	adds	r4, #104	; 0x68
 8009140:	e7f4      	b.n	800912c <__sfp+0x18>
 8009142:	2104      	movs	r1, #4
 8009144:	4638      	mov	r0, r7
 8009146:	f7ff ff9f 	bl	8009088 <__sfmoreglue>
 800914a:	6030      	str	r0, [r6, #0]
 800914c:	2800      	cmp	r0, #0
 800914e:	d1f1      	bne.n	8009134 <__sfp+0x20>
 8009150:	230c      	movs	r3, #12
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	4604      	mov	r4, r0
 8009156:	4620      	mov	r0, r4
 8009158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800915a:	4b0b      	ldr	r3, [pc, #44]	; (8009188 <__sfp+0x74>)
 800915c:	6665      	str	r5, [r4, #100]	; 0x64
 800915e:	e9c4 5500 	strd	r5, r5, [r4]
 8009162:	60a5      	str	r5, [r4, #8]
 8009164:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009168:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800916c:	2208      	movs	r2, #8
 800916e:	4629      	mov	r1, r5
 8009170:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009174:	f7ff fcb3 	bl	8008ade <memset>
 8009178:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800917c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009180:	e7e9      	b.n	8009156 <__sfp+0x42>
 8009182:	bf00      	nop
 8009184:	08009bac 	.word	0x08009bac
 8009188:	ffff0001 	.word	0xffff0001

0800918c <_fwalk_reent>:
 800918c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009190:	4680      	mov	r8, r0
 8009192:	4689      	mov	r9, r1
 8009194:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009198:	2600      	movs	r6, #0
 800919a:	b914      	cbnz	r4, 80091a2 <_fwalk_reent+0x16>
 800919c:	4630      	mov	r0, r6
 800919e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091a2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80091a6:	3f01      	subs	r7, #1
 80091a8:	d501      	bpl.n	80091ae <_fwalk_reent+0x22>
 80091aa:	6824      	ldr	r4, [r4, #0]
 80091ac:	e7f5      	b.n	800919a <_fwalk_reent+0xe>
 80091ae:	89ab      	ldrh	r3, [r5, #12]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d907      	bls.n	80091c4 <_fwalk_reent+0x38>
 80091b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091b8:	3301      	adds	r3, #1
 80091ba:	d003      	beq.n	80091c4 <_fwalk_reent+0x38>
 80091bc:	4629      	mov	r1, r5
 80091be:	4640      	mov	r0, r8
 80091c0:	47c8      	blx	r9
 80091c2:	4306      	orrs	r6, r0
 80091c4:	3568      	adds	r5, #104	; 0x68
 80091c6:	e7ee      	b.n	80091a6 <_fwalk_reent+0x1a>

080091c8 <__swhatbuf_r>:
 80091c8:	b570      	push	{r4, r5, r6, lr}
 80091ca:	460e      	mov	r6, r1
 80091cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d0:	2900      	cmp	r1, #0
 80091d2:	b096      	sub	sp, #88	; 0x58
 80091d4:	4614      	mov	r4, r2
 80091d6:	461d      	mov	r5, r3
 80091d8:	da07      	bge.n	80091ea <__swhatbuf_r+0x22>
 80091da:	2300      	movs	r3, #0
 80091dc:	602b      	str	r3, [r5, #0]
 80091de:	89b3      	ldrh	r3, [r6, #12]
 80091e0:	061a      	lsls	r2, r3, #24
 80091e2:	d410      	bmi.n	8009206 <__swhatbuf_r+0x3e>
 80091e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091e8:	e00e      	b.n	8009208 <__swhatbuf_r+0x40>
 80091ea:	466a      	mov	r2, sp
 80091ec:	f000 fc3e 	bl	8009a6c <_fstat_r>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	dbf2      	blt.n	80091da <__swhatbuf_r+0x12>
 80091f4:	9a01      	ldr	r2, [sp, #4]
 80091f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091fe:	425a      	negs	r2, r3
 8009200:	415a      	adcs	r2, r3
 8009202:	602a      	str	r2, [r5, #0]
 8009204:	e7ee      	b.n	80091e4 <__swhatbuf_r+0x1c>
 8009206:	2340      	movs	r3, #64	; 0x40
 8009208:	2000      	movs	r0, #0
 800920a:	6023      	str	r3, [r4, #0]
 800920c:	b016      	add	sp, #88	; 0x58
 800920e:	bd70      	pop	{r4, r5, r6, pc}

08009210 <__smakebuf_r>:
 8009210:	898b      	ldrh	r3, [r1, #12]
 8009212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009214:	079d      	lsls	r5, r3, #30
 8009216:	4606      	mov	r6, r0
 8009218:	460c      	mov	r4, r1
 800921a:	d507      	bpl.n	800922c <__smakebuf_r+0x1c>
 800921c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	6123      	str	r3, [r4, #16]
 8009224:	2301      	movs	r3, #1
 8009226:	6163      	str	r3, [r4, #20]
 8009228:	b002      	add	sp, #8
 800922a:	bd70      	pop	{r4, r5, r6, pc}
 800922c:	ab01      	add	r3, sp, #4
 800922e:	466a      	mov	r2, sp
 8009230:	f7ff ffca 	bl	80091c8 <__swhatbuf_r>
 8009234:	9900      	ldr	r1, [sp, #0]
 8009236:	4605      	mov	r5, r0
 8009238:	4630      	mov	r0, r6
 800923a:	f000 f87f 	bl	800933c <_malloc_r>
 800923e:	b948      	cbnz	r0, 8009254 <__smakebuf_r+0x44>
 8009240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009244:	059a      	lsls	r2, r3, #22
 8009246:	d4ef      	bmi.n	8009228 <__smakebuf_r+0x18>
 8009248:	f023 0303 	bic.w	r3, r3, #3
 800924c:	f043 0302 	orr.w	r3, r3, #2
 8009250:	81a3      	strh	r3, [r4, #12]
 8009252:	e7e3      	b.n	800921c <__smakebuf_r+0xc>
 8009254:	4b0d      	ldr	r3, [pc, #52]	; (800928c <__smakebuf_r+0x7c>)
 8009256:	62b3      	str	r3, [r6, #40]	; 0x28
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	6020      	str	r0, [r4, #0]
 800925c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009260:	81a3      	strh	r3, [r4, #12]
 8009262:	9b00      	ldr	r3, [sp, #0]
 8009264:	6163      	str	r3, [r4, #20]
 8009266:	9b01      	ldr	r3, [sp, #4]
 8009268:	6120      	str	r0, [r4, #16]
 800926a:	b15b      	cbz	r3, 8009284 <__smakebuf_r+0x74>
 800926c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009270:	4630      	mov	r0, r6
 8009272:	f000 fc0d 	bl	8009a90 <_isatty_r>
 8009276:	b128      	cbz	r0, 8009284 <__smakebuf_r+0x74>
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	f023 0303 	bic.w	r3, r3, #3
 800927e:	f043 0301 	orr.w	r3, r3, #1
 8009282:	81a3      	strh	r3, [r4, #12]
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	431d      	orrs	r5, r3
 8009288:	81a5      	strh	r5, [r4, #12]
 800928a:	e7cd      	b.n	8009228 <__smakebuf_r+0x18>
 800928c:	0800907d 	.word	0x0800907d

08009290 <malloc>:
 8009290:	4b02      	ldr	r3, [pc, #8]	; (800929c <malloc+0xc>)
 8009292:	4601      	mov	r1, r0
 8009294:	6818      	ldr	r0, [r3, #0]
 8009296:	f000 b851 	b.w	800933c <_malloc_r>
 800929a:	bf00      	nop
 800929c:	200002c8 	.word	0x200002c8

080092a0 <_free_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4605      	mov	r5, r0
 80092a4:	2900      	cmp	r1, #0
 80092a6:	d045      	beq.n	8009334 <_free_r+0x94>
 80092a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092ac:	1f0c      	subs	r4, r1, #4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	bfb8      	it	lt
 80092b2:	18e4      	addlt	r4, r4, r3
 80092b4:	f000 fc0e 	bl	8009ad4 <__malloc_lock>
 80092b8:	4a1f      	ldr	r2, [pc, #124]	; (8009338 <_free_r+0x98>)
 80092ba:	6813      	ldr	r3, [r2, #0]
 80092bc:	4610      	mov	r0, r2
 80092be:	b933      	cbnz	r3, 80092ce <_free_r+0x2e>
 80092c0:	6063      	str	r3, [r4, #4]
 80092c2:	6014      	str	r4, [r2, #0]
 80092c4:	4628      	mov	r0, r5
 80092c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092ca:	f000 bc04 	b.w	8009ad6 <__malloc_unlock>
 80092ce:	42a3      	cmp	r3, r4
 80092d0:	d90c      	bls.n	80092ec <_free_r+0x4c>
 80092d2:	6821      	ldr	r1, [r4, #0]
 80092d4:	1862      	adds	r2, r4, r1
 80092d6:	4293      	cmp	r3, r2
 80092d8:	bf04      	itt	eq
 80092da:	681a      	ldreq	r2, [r3, #0]
 80092dc:	685b      	ldreq	r3, [r3, #4]
 80092de:	6063      	str	r3, [r4, #4]
 80092e0:	bf04      	itt	eq
 80092e2:	1852      	addeq	r2, r2, r1
 80092e4:	6022      	streq	r2, [r4, #0]
 80092e6:	6004      	str	r4, [r0, #0]
 80092e8:	e7ec      	b.n	80092c4 <_free_r+0x24>
 80092ea:	4613      	mov	r3, r2
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	b10a      	cbz	r2, 80092f4 <_free_r+0x54>
 80092f0:	42a2      	cmp	r2, r4
 80092f2:	d9fa      	bls.n	80092ea <_free_r+0x4a>
 80092f4:	6819      	ldr	r1, [r3, #0]
 80092f6:	1858      	adds	r0, r3, r1
 80092f8:	42a0      	cmp	r0, r4
 80092fa:	d10b      	bne.n	8009314 <_free_r+0x74>
 80092fc:	6820      	ldr	r0, [r4, #0]
 80092fe:	4401      	add	r1, r0
 8009300:	1858      	adds	r0, r3, r1
 8009302:	4282      	cmp	r2, r0
 8009304:	6019      	str	r1, [r3, #0]
 8009306:	d1dd      	bne.n	80092c4 <_free_r+0x24>
 8009308:	6810      	ldr	r0, [r2, #0]
 800930a:	6852      	ldr	r2, [r2, #4]
 800930c:	605a      	str	r2, [r3, #4]
 800930e:	4401      	add	r1, r0
 8009310:	6019      	str	r1, [r3, #0]
 8009312:	e7d7      	b.n	80092c4 <_free_r+0x24>
 8009314:	d902      	bls.n	800931c <_free_r+0x7c>
 8009316:	230c      	movs	r3, #12
 8009318:	602b      	str	r3, [r5, #0]
 800931a:	e7d3      	b.n	80092c4 <_free_r+0x24>
 800931c:	6820      	ldr	r0, [r4, #0]
 800931e:	1821      	adds	r1, r4, r0
 8009320:	428a      	cmp	r2, r1
 8009322:	bf04      	itt	eq
 8009324:	6811      	ldreq	r1, [r2, #0]
 8009326:	6852      	ldreq	r2, [r2, #4]
 8009328:	6062      	str	r2, [r4, #4]
 800932a:	bf04      	itt	eq
 800932c:	1809      	addeq	r1, r1, r0
 800932e:	6021      	streq	r1, [r4, #0]
 8009330:	605c      	str	r4, [r3, #4]
 8009332:	e7c7      	b.n	80092c4 <_free_r+0x24>
 8009334:	bd38      	pop	{r3, r4, r5, pc}
 8009336:	bf00      	nop
 8009338:	2000034c 	.word	0x2000034c

0800933c <_malloc_r>:
 800933c:	b570      	push	{r4, r5, r6, lr}
 800933e:	1ccd      	adds	r5, r1, #3
 8009340:	f025 0503 	bic.w	r5, r5, #3
 8009344:	3508      	adds	r5, #8
 8009346:	2d0c      	cmp	r5, #12
 8009348:	bf38      	it	cc
 800934a:	250c      	movcc	r5, #12
 800934c:	2d00      	cmp	r5, #0
 800934e:	4606      	mov	r6, r0
 8009350:	db01      	blt.n	8009356 <_malloc_r+0x1a>
 8009352:	42a9      	cmp	r1, r5
 8009354:	d903      	bls.n	800935e <_malloc_r+0x22>
 8009356:	230c      	movs	r3, #12
 8009358:	6033      	str	r3, [r6, #0]
 800935a:	2000      	movs	r0, #0
 800935c:	bd70      	pop	{r4, r5, r6, pc}
 800935e:	f000 fbb9 	bl	8009ad4 <__malloc_lock>
 8009362:	4a21      	ldr	r2, [pc, #132]	; (80093e8 <_malloc_r+0xac>)
 8009364:	6814      	ldr	r4, [r2, #0]
 8009366:	4621      	mov	r1, r4
 8009368:	b991      	cbnz	r1, 8009390 <_malloc_r+0x54>
 800936a:	4c20      	ldr	r4, [pc, #128]	; (80093ec <_malloc_r+0xb0>)
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	b91b      	cbnz	r3, 8009378 <_malloc_r+0x3c>
 8009370:	4630      	mov	r0, r6
 8009372:	f000 fb05 	bl	8009980 <_sbrk_r>
 8009376:	6020      	str	r0, [r4, #0]
 8009378:	4629      	mov	r1, r5
 800937a:	4630      	mov	r0, r6
 800937c:	f000 fb00 	bl	8009980 <_sbrk_r>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d124      	bne.n	80093ce <_malloc_r+0x92>
 8009384:	230c      	movs	r3, #12
 8009386:	6033      	str	r3, [r6, #0]
 8009388:	4630      	mov	r0, r6
 800938a:	f000 fba4 	bl	8009ad6 <__malloc_unlock>
 800938e:	e7e4      	b.n	800935a <_malloc_r+0x1e>
 8009390:	680b      	ldr	r3, [r1, #0]
 8009392:	1b5b      	subs	r3, r3, r5
 8009394:	d418      	bmi.n	80093c8 <_malloc_r+0x8c>
 8009396:	2b0b      	cmp	r3, #11
 8009398:	d90f      	bls.n	80093ba <_malloc_r+0x7e>
 800939a:	600b      	str	r3, [r1, #0]
 800939c:	50cd      	str	r5, [r1, r3]
 800939e:	18cc      	adds	r4, r1, r3
 80093a0:	4630      	mov	r0, r6
 80093a2:	f000 fb98 	bl	8009ad6 <__malloc_unlock>
 80093a6:	f104 000b 	add.w	r0, r4, #11
 80093aa:	1d23      	adds	r3, r4, #4
 80093ac:	f020 0007 	bic.w	r0, r0, #7
 80093b0:	1ac3      	subs	r3, r0, r3
 80093b2:	d0d3      	beq.n	800935c <_malloc_r+0x20>
 80093b4:	425a      	negs	r2, r3
 80093b6:	50e2      	str	r2, [r4, r3]
 80093b8:	e7d0      	b.n	800935c <_malloc_r+0x20>
 80093ba:	428c      	cmp	r4, r1
 80093bc:	684b      	ldr	r3, [r1, #4]
 80093be:	bf16      	itet	ne
 80093c0:	6063      	strne	r3, [r4, #4]
 80093c2:	6013      	streq	r3, [r2, #0]
 80093c4:	460c      	movne	r4, r1
 80093c6:	e7eb      	b.n	80093a0 <_malloc_r+0x64>
 80093c8:	460c      	mov	r4, r1
 80093ca:	6849      	ldr	r1, [r1, #4]
 80093cc:	e7cc      	b.n	8009368 <_malloc_r+0x2c>
 80093ce:	1cc4      	adds	r4, r0, #3
 80093d0:	f024 0403 	bic.w	r4, r4, #3
 80093d4:	42a0      	cmp	r0, r4
 80093d6:	d005      	beq.n	80093e4 <_malloc_r+0xa8>
 80093d8:	1a21      	subs	r1, r4, r0
 80093da:	4630      	mov	r0, r6
 80093dc:	f000 fad0 	bl	8009980 <_sbrk_r>
 80093e0:	3001      	adds	r0, #1
 80093e2:	d0cf      	beq.n	8009384 <_malloc_r+0x48>
 80093e4:	6025      	str	r5, [r4, #0]
 80093e6:	e7db      	b.n	80093a0 <_malloc_r+0x64>
 80093e8:	2000034c 	.word	0x2000034c
 80093ec:	20000350 	.word	0x20000350

080093f0 <__sfputc_r>:
 80093f0:	6893      	ldr	r3, [r2, #8]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	b410      	push	{r4}
 80093f8:	6093      	str	r3, [r2, #8]
 80093fa:	da08      	bge.n	800940e <__sfputc_r+0x1e>
 80093fc:	6994      	ldr	r4, [r2, #24]
 80093fe:	42a3      	cmp	r3, r4
 8009400:	db01      	blt.n	8009406 <__sfputc_r+0x16>
 8009402:	290a      	cmp	r1, #10
 8009404:	d103      	bne.n	800940e <__sfputc_r+0x1e>
 8009406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800940a:	f7ff bca3 	b.w	8008d54 <__swbuf_r>
 800940e:	6813      	ldr	r3, [r2, #0]
 8009410:	1c58      	adds	r0, r3, #1
 8009412:	6010      	str	r0, [r2, #0]
 8009414:	7019      	strb	r1, [r3, #0]
 8009416:	4608      	mov	r0, r1
 8009418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800941c:	4770      	bx	lr

0800941e <__sfputs_r>:
 800941e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009420:	4606      	mov	r6, r0
 8009422:	460f      	mov	r7, r1
 8009424:	4614      	mov	r4, r2
 8009426:	18d5      	adds	r5, r2, r3
 8009428:	42ac      	cmp	r4, r5
 800942a:	d101      	bne.n	8009430 <__sfputs_r+0x12>
 800942c:	2000      	movs	r0, #0
 800942e:	e007      	b.n	8009440 <__sfputs_r+0x22>
 8009430:	463a      	mov	r2, r7
 8009432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009436:	4630      	mov	r0, r6
 8009438:	f7ff ffda 	bl	80093f0 <__sfputc_r>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d1f3      	bne.n	8009428 <__sfputs_r+0xa>
 8009440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009444 <_vfiprintf_r>:
 8009444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	460c      	mov	r4, r1
 800944a:	b09d      	sub	sp, #116	; 0x74
 800944c:	4617      	mov	r7, r2
 800944e:	461d      	mov	r5, r3
 8009450:	4606      	mov	r6, r0
 8009452:	b118      	cbz	r0, 800945c <_vfiprintf_r+0x18>
 8009454:	6983      	ldr	r3, [r0, #24]
 8009456:	b90b      	cbnz	r3, 800945c <_vfiprintf_r+0x18>
 8009458:	f7ff fe2c 	bl	80090b4 <__sinit>
 800945c:	4b7c      	ldr	r3, [pc, #496]	; (8009650 <_vfiprintf_r+0x20c>)
 800945e:	429c      	cmp	r4, r3
 8009460:	d158      	bne.n	8009514 <_vfiprintf_r+0xd0>
 8009462:	6874      	ldr	r4, [r6, #4]
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	0718      	lsls	r0, r3, #28
 8009468:	d55e      	bpl.n	8009528 <_vfiprintf_r+0xe4>
 800946a:	6923      	ldr	r3, [r4, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d05b      	beq.n	8009528 <_vfiprintf_r+0xe4>
 8009470:	2300      	movs	r3, #0
 8009472:	9309      	str	r3, [sp, #36]	; 0x24
 8009474:	2320      	movs	r3, #32
 8009476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800947a:	2330      	movs	r3, #48	; 0x30
 800947c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009480:	9503      	str	r5, [sp, #12]
 8009482:	f04f 0b01 	mov.w	fp, #1
 8009486:	46b8      	mov	r8, r7
 8009488:	4645      	mov	r5, r8
 800948a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800948e:	b10b      	cbz	r3, 8009494 <_vfiprintf_r+0x50>
 8009490:	2b25      	cmp	r3, #37	; 0x25
 8009492:	d154      	bne.n	800953e <_vfiprintf_r+0xfa>
 8009494:	ebb8 0a07 	subs.w	sl, r8, r7
 8009498:	d00b      	beq.n	80094b2 <_vfiprintf_r+0x6e>
 800949a:	4653      	mov	r3, sl
 800949c:	463a      	mov	r2, r7
 800949e:	4621      	mov	r1, r4
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7ff ffbc 	bl	800941e <__sfputs_r>
 80094a6:	3001      	adds	r0, #1
 80094a8:	f000 80c2 	beq.w	8009630 <_vfiprintf_r+0x1ec>
 80094ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ae:	4453      	add	r3, sl
 80094b0:	9309      	str	r3, [sp, #36]	; 0x24
 80094b2:	f898 3000 	ldrb.w	r3, [r8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 80ba 	beq.w	8009630 <_vfiprintf_r+0x1ec>
 80094bc:	2300      	movs	r3, #0
 80094be:	f04f 32ff 	mov.w	r2, #4294967295
 80094c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094c6:	9304      	str	r3, [sp, #16]
 80094c8:	9307      	str	r3, [sp, #28]
 80094ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094ce:	931a      	str	r3, [sp, #104]	; 0x68
 80094d0:	46a8      	mov	r8, r5
 80094d2:	2205      	movs	r2, #5
 80094d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80094d8:	485e      	ldr	r0, [pc, #376]	; (8009654 <_vfiprintf_r+0x210>)
 80094da:	f7f6 fe99 	bl	8000210 <memchr>
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	bb78      	cbnz	r0, 8009542 <_vfiprintf_r+0xfe>
 80094e2:	06d9      	lsls	r1, r3, #27
 80094e4:	bf44      	itt	mi
 80094e6:	2220      	movmi	r2, #32
 80094e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094ec:	071a      	lsls	r2, r3, #28
 80094ee:	bf44      	itt	mi
 80094f0:	222b      	movmi	r2, #43	; 0x2b
 80094f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094f6:	782a      	ldrb	r2, [r5, #0]
 80094f8:	2a2a      	cmp	r2, #42	; 0x2a
 80094fa:	d02a      	beq.n	8009552 <_vfiprintf_r+0x10e>
 80094fc:	9a07      	ldr	r2, [sp, #28]
 80094fe:	46a8      	mov	r8, r5
 8009500:	2000      	movs	r0, #0
 8009502:	250a      	movs	r5, #10
 8009504:	4641      	mov	r1, r8
 8009506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800950a:	3b30      	subs	r3, #48	; 0x30
 800950c:	2b09      	cmp	r3, #9
 800950e:	d969      	bls.n	80095e4 <_vfiprintf_r+0x1a0>
 8009510:	b360      	cbz	r0, 800956c <_vfiprintf_r+0x128>
 8009512:	e024      	b.n	800955e <_vfiprintf_r+0x11a>
 8009514:	4b50      	ldr	r3, [pc, #320]	; (8009658 <_vfiprintf_r+0x214>)
 8009516:	429c      	cmp	r4, r3
 8009518:	d101      	bne.n	800951e <_vfiprintf_r+0xda>
 800951a:	68b4      	ldr	r4, [r6, #8]
 800951c:	e7a2      	b.n	8009464 <_vfiprintf_r+0x20>
 800951e:	4b4f      	ldr	r3, [pc, #316]	; (800965c <_vfiprintf_r+0x218>)
 8009520:	429c      	cmp	r4, r3
 8009522:	bf08      	it	eq
 8009524:	68f4      	ldreq	r4, [r6, #12]
 8009526:	e79d      	b.n	8009464 <_vfiprintf_r+0x20>
 8009528:	4621      	mov	r1, r4
 800952a:	4630      	mov	r0, r6
 800952c:	f7ff fc64 	bl	8008df8 <__swsetup_r>
 8009530:	2800      	cmp	r0, #0
 8009532:	d09d      	beq.n	8009470 <_vfiprintf_r+0x2c>
 8009534:	f04f 30ff 	mov.w	r0, #4294967295
 8009538:	b01d      	add	sp, #116	; 0x74
 800953a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953e:	46a8      	mov	r8, r5
 8009540:	e7a2      	b.n	8009488 <_vfiprintf_r+0x44>
 8009542:	4a44      	ldr	r2, [pc, #272]	; (8009654 <_vfiprintf_r+0x210>)
 8009544:	1a80      	subs	r0, r0, r2
 8009546:	fa0b f000 	lsl.w	r0, fp, r0
 800954a:	4318      	orrs	r0, r3
 800954c:	9004      	str	r0, [sp, #16]
 800954e:	4645      	mov	r5, r8
 8009550:	e7be      	b.n	80094d0 <_vfiprintf_r+0x8c>
 8009552:	9a03      	ldr	r2, [sp, #12]
 8009554:	1d11      	adds	r1, r2, #4
 8009556:	6812      	ldr	r2, [r2, #0]
 8009558:	9103      	str	r1, [sp, #12]
 800955a:	2a00      	cmp	r2, #0
 800955c:	db01      	blt.n	8009562 <_vfiprintf_r+0x11e>
 800955e:	9207      	str	r2, [sp, #28]
 8009560:	e004      	b.n	800956c <_vfiprintf_r+0x128>
 8009562:	4252      	negs	r2, r2
 8009564:	f043 0302 	orr.w	r3, r3, #2
 8009568:	9207      	str	r2, [sp, #28]
 800956a:	9304      	str	r3, [sp, #16]
 800956c:	f898 3000 	ldrb.w	r3, [r8]
 8009570:	2b2e      	cmp	r3, #46	; 0x2e
 8009572:	d10e      	bne.n	8009592 <_vfiprintf_r+0x14e>
 8009574:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009578:	2b2a      	cmp	r3, #42	; 0x2a
 800957a:	d138      	bne.n	80095ee <_vfiprintf_r+0x1aa>
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	1d1a      	adds	r2, r3, #4
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	9203      	str	r2, [sp, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	bfb8      	it	lt
 8009588:	f04f 33ff 	movlt.w	r3, #4294967295
 800958c:	f108 0802 	add.w	r8, r8, #2
 8009590:	9305      	str	r3, [sp, #20]
 8009592:	4d33      	ldr	r5, [pc, #204]	; (8009660 <_vfiprintf_r+0x21c>)
 8009594:	f898 1000 	ldrb.w	r1, [r8]
 8009598:	2203      	movs	r2, #3
 800959a:	4628      	mov	r0, r5
 800959c:	f7f6 fe38 	bl	8000210 <memchr>
 80095a0:	b140      	cbz	r0, 80095b4 <_vfiprintf_r+0x170>
 80095a2:	2340      	movs	r3, #64	; 0x40
 80095a4:	1b40      	subs	r0, r0, r5
 80095a6:	fa03 f000 	lsl.w	r0, r3, r0
 80095aa:	9b04      	ldr	r3, [sp, #16]
 80095ac:	4303      	orrs	r3, r0
 80095ae:	f108 0801 	add.w	r8, r8, #1
 80095b2:	9304      	str	r3, [sp, #16]
 80095b4:	f898 1000 	ldrb.w	r1, [r8]
 80095b8:	482a      	ldr	r0, [pc, #168]	; (8009664 <_vfiprintf_r+0x220>)
 80095ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095be:	2206      	movs	r2, #6
 80095c0:	f108 0701 	add.w	r7, r8, #1
 80095c4:	f7f6 fe24 	bl	8000210 <memchr>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d037      	beq.n	800963c <_vfiprintf_r+0x1f8>
 80095cc:	4b26      	ldr	r3, [pc, #152]	; (8009668 <_vfiprintf_r+0x224>)
 80095ce:	bb1b      	cbnz	r3, 8009618 <_vfiprintf_r+0x1d4>
 80095d0:	9b03      	ldr	r3, [sp, #12]
 80095d2:	3307      	adds	r3, #7
 80095d4:	f023 0307 	bic.w	r3, r3, #7
 80095d8:	3308      	adds	r3, #8
 80095da:	9303      	str	r3, [sp, #12]
 80095dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095de:	444b      	add	r3, r9
 80095e0:	9309      	str	r3, [sp, #36]	; 0x24
 80095e2:	e750      	b.n	8009486 <_vfiprintf_r+0x42>
 80095e4:	fb05 3202 	mla	r2, r5, r2, r3
 80095e8:	2001      	movs	r0, #1
 80095ea:	4688      	mov	r8, r1
 80095ec:	e78a      	b.n	8009504 <_vfiprintf_r+0xc0>
 80095ee:	2300      	movs	r3, #0
 80095f0:	f108 0801 	add.w	r8, r8, #1
 80095f4:	9305      	str	r3, [sp, #20]
 80095f6:	4619      	mov	r1, r3
 80095f8:	250a      	movs	r5, #10
 80095fa:	4640      	mov	r0, r8
 80095fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009600:	3a30      	subs	r2, #48	; 0x30
 8009602:	2a09      	cmp	r2, #9
 8009604:	d903      	bls.n	800960e <_vfiprintf_r+0x1ca>
 8009606:	2b00      	cmp	r3, #0
 8009608:	d0c3      	beq.n	8009592 <_vfiprintf_r+0x14e>
 800960a:	9105      	str	r1, [sp, #20]
 800960c:	e7c1      	b.n	8009592 <_vfiprintf_r+0x14e>
 800960e:	fb05 2101 	mla	r1, r5, r1, r2
 8009612:	2301      	movs	r3, #1
 8009614:	4680      	mov	r8, r0
 8009616:	e7f0      	b.n	80095fa <_vfiprintf_r+0x1b6>
 8009618:	ab03      	add	r3, sp, #12
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	4622      	mov	r2, r4
 800961e:	4b13      	ldr	r3, [pc, #76]	; (800966c <_vfiprintf_r+0x228>)
 8009620:	a904      	add	r1, sp, #16
 8009622:	4630      	mov	r0, r6
 8009624:	f3af 8000 	nop.w
 8009628:	f1b0 3fff 	cmp.w	r0, #4294967295
 800962c:	4681      	mov	r9, r0
 800962e:	d1d5      	bne.n	80095dc <_vfiprintf_r+0x198>
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	065b      	lsls	r3, r3, #25
 8009634:	f53f af7e 	bmi.w	8009534 <_vfiprintf_r+0xf0>
 8009638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800963a:	e77d      	b.n	8009538 <_vfiprintf_r+0xf4>
 800963c:	ab03      	add	r3, sp, #12
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	4622      	mov	r2, r4
 8009642:	4b0a      	ldr	r3, [pc, #40]	; (800966c <_vfiprintf_r+0x228>)
 8009644:	a904      	add	r1, sp, #16
 8009646:	4630      	mov	r0, r6
 8009648:	f000 f888 	bl	800975c <_printf_i>
 800964c:	e7ec      	b.n	8009628 <_vfiprintf_r+0x1e4>
 800964e:	bf00      	nop
 8009650:	08009bd0 	.word	0x08009bd0
 8009654:	08009c10 	.word	0x08009c10
 8009658:	08009bf0 	.word	0x08009bf0
 800965c:	08009bb0 	.word	0x08009bb0
 8009660:	08009c16 	.word	0x08009c16
 8009664:	08009c1a 	.word	0x08009c1a
 8009668:	00000000 	.word	0x00000000
 800966c:	0800941f 	.word	0x0800941f

08009670 <_printf_common>:
 8009670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009674:	4691      	mov	r9, r2
 8009676:	461f      	mov	r7, r3
 8009678:	688a      	ldr	r2, [r1, #8]
 800967a:	690b      	ldr	r3, [r1, #16]
 800967c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009680:	4293      	cmp	r3, r2
 8009682:	bfb8      	it	lt
 8009684:	4613      	movlt	r3, r2
 8009686:	f8c9 3000 	str.w	r3, [r9]
 800968a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800968e:	4606      	mov	r6, r0
 8009690:	460c      	mov	r4, r1
 8009692:	b112      	cbz	r2, 800969a <_printf_common+0x2a>
 8009694:	3301      	adds	r3, #1
 8009696:	f8c9 3000 	str.w	r3, [r9]
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	0699      	lsls	r1, r3, #26
 800969e:	bf42      	ittt	mi
 80096a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80096a4:	3302      	addmi	r3, #2
 80096a6:	f8c9 3000 	strmi.w	r3, [r9]
 80096aa:	6825      	ldr	r5, [r4, #0]
 80096ac:	f015 0506 	ands.w	r5, r5, #6
 80096b0:	d107      	bne.n	80096c2 <_printf_common+0x52>
 80096b2:	f104 0a19 	add.w	sl, r4, #25
 80096b6:	68e3      	ldr	r3, [r4, #12]
 80096b8:	f8d9 2000 	ldr.w	r2, [r9]
 80096bc:	1a9b      	subs	r3, r3, r2
 80096be:	42ab      	cmp	r3, r5
 80096c0:	dc28      	bgt.n	8009714 <_printf_common+0xa4>
 80096c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80096c6:	6822      	ldr	r2, [r4, #0]
 80096c8:	3300      	adds	r3, #0
 80096ca:	bf18      	it	ne
 80096cc:	2301      	movne	r3, #1
 80096ce:	0692      	lsls	r2, r2, #26
 80096d0:	d42d      	bmi.n	800972e <_printf_common+0xbe>
 80096d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096d6:	4639      	mov	r1, r7
 80096d8:	4630      	mov	r0, r6
 80096da:	47c0      	blx	r8
 80096dc:	3001      	adds	r0, #1
 80096de:	d020      	beq.n	8009722 <_printf_common+0xb2>
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	68e5      	ldr	r5, [r4, #12]
 80096e4:	f8d9 2000 	ldr.w	r2, [r9]
 80096e8:	f003 0306 	and.w	r3, r3, #6
 80096ec:	2b04      	cmp	r3, #4
 80096ee:	bf08      	it	eq
 80096f0:	1aad      	subeq	r5, r5, r2
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	6922      	ldr	r2, [r4, #16]
 80096f6:	bf0c      	ite	eq
 80096f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096fc:	2500      	movne	r5, #0
 80096fe:	4293      	cmp	r3, r2
 8009700:	bfc4      	itt	gt
 8009702:	1a9b      	subgt	r3, r3, r2
 8009704:	18ed      	addgt	r5, r5, r3
 8009706:	f04f 0900 	mov.w	r9, #0
 800970a:	341a      	adds	r4, #26
 800970c:	454d      	cmp	r5, r9
 800970e:	d11a      	bne.n	8009746 <_printf_common+0xd6>
 8009710:	2000      	movs	r0, #0
 8009712:	e008      	b.n	8009726 <_printf_common+0xb6>
 8009714:	2301      	movs	r3, #1
 8009716:	4652      	mov	r2, sl
 8009718:	4639      	mov	r1, r7
 800971a:	4630      	mov	r0, r6
 800971c:	47c0      	blx	r8
 800971e:	3001      	adds	r0, #1
 8009720:	d103      	bne.n	800972a <_printf_common+0xba>
 8009722:	f04f 30ff 	mov.w	r0, #4294967295
 8009726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800972a:	3501      	adds	r5, #1
 800972c:	e7c3      	b.n	80096b6 <_printf_common+0x46>
 800972e:	18e1      	adds	r1, r4, r3
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	2030      	movs	r0, #48	; 0x30
 8009734:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009738:	4422      	add	r2, r4
 800973a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800973e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009742:	3302      	adds	r3, #2
 8009744:	e7c5      	b.n	80096d2 <_printf_common+0x62>
 8009746:	2301      	movs	r3, #1
 8009748:	4622      	mov	r2, r4
 800974a:	4639      	mov	r1, r7
 800974c:	4630      	mov	r0, r6
 800974e:	47c0      	blx	r8
 8009750:	3001      	adds	r0, #1
 8009752:	d0e6      	beq.n	8009722 <_printf_common+0xb2>
 8009754:	f109 0901 	add.w	r9, r9, #1
 8009758:	e7d8      	b.n	800970c <_printf_common+0x9c>
	...

0800975c <_printf_i>:
 800975c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009760:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009764:	460c      	mov	r4, r1
 8009766:	7e09      	ldrb	r1, [r1, #24]
 8009768:	b085      	sub	sp, #20
 800976a:	296e      	cmp	r1, #110	; 0x6e
 800976c:	4617      	mov	r7, r2
 800976e:	4606      	mov	r6, r0
 8009770:	4698      	mov	r8, r3
 8009772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009774:	f000 80b3 	beq.w	80098de <_printf_i+0x182>
 8009778:	d822      	bhi.n	80097c0 <_printf_i+0x64>
 800977a:	2963      	cmp	r1, #99	; 0x63
 800977c:	d036      	beq.n	80097ec <_printf_i+0x90>
 800977e:	d80a      	bhi.n	8009796 <_printf_i+0x3a>
 8009780:	2900      	cmp	r1, #0
 8009782:	f000 80b9 	beq.w	80098f8 <_printf_i+0x19c>
 8009786:	2958      	cmp	r1, #88	; 0x58
 8009788:	f000 8083 	beq.w	8009892 <_printf_i+0x136>
 800978c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009790:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009794:	e032      	b.n	80097fc <_printf_i+0xa0>
 8009796:	2964      	cmp	r1, #100	; 0x64
 8009798:	d001      	beq.n	800979e <_printf_i+0x42>
 800979a:	2969      	cmp	r1, #105	; 0x69
 800979c:	d1f6      	bne.n	800978c <_printf_i+0x30>
 800979e:	6820      	ldr	r0, [r4, #0]
 80097a0:	6813      	ldr	r3, [r2, #0]
 80097a2:	0605      	lsls	r5, r0, #24
 80097a4:	f103 0104 	add.w	r1, r3, #4
 80097a8:	d52a      	bpl.n	8009800 <_printf_i+0xa4>
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6011      	str	r1, [r2, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	da03      	bge.n	80097ba <_printf_i+0x5e>
 80097b2:	222d      	movs	r2, #45	; 0x2d
 80097b4:	425b      	negs	r3, r3
 80097b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80097ba:	486f      	ldr	r0, [pc, #444]	; (8009978 <_printf_i+0x21c>)
 80097bc:	220a      	movs	r2, #10
 80097be:	e039      	b.n	8009834 <_printf_i+0xd8>
 80097c0:	2973      	cmp	r1, #115	; 0x73
 80097c2:	f000 809d 	beq.w	8009900 <_printf_i+0x1a4>
 80097c6:	d808      	bhi.n	80097da <_printf_i+0x7e>
 80097c8:	296f      	cmp	r1, #111	; 0x6f
 80097ca:	d020      	beq.n	800980e <_printf_i+0xb2>
 80097cc:	2970      	cmp	r1, #112	; 0x70
 80097ce:	d1dd      	bne.n	800978c <_printf_i+0x30>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	f043 0320 	orr.w	r3, r3, #32
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	e003      	b.n	80097e2 <_printf_i+0x86>
 80097da:	2975      	cmp	r1, #117	; 0x75
 80097dc:	d017      	beq.n	800980e <_printf_i+0xb2>
 80097de:	2978      	cmp	r1, #120	; 0x78
 80097e0:	d1d4      	bne.n	800978c <_printf_i+0x30>
 80097e2:	2378      	movs	r3, #120	; 0x78
 80097e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097e8:	4864      	ldr	r0, [pc, #400]	; (800997c <_printf_i+0x220>)
 80097ea:	e055      	b.n	8009898 <_printf_i+0x13c>
 80097ec:	6813      	ldr	r3, [r2, #0]
 80097ee:	1d19      	adds	r1, r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6011      	str	r1, [r2, #0]
 80097f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097fc:	2301      	movs	r3, #1
 80097fe:	e08c      	b.n	800991a <_printf_i+0x1be>
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6011      	str	r1, [r2, #0]
 8009804:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009808:	bf18      	it	ne
 800980a:	b21b      	sxthne	r3, r3
 800980c:	e7cf      	b.n	80097ae <_printf_i+0x52>
 800980e:	6813      	ldr	r3, [r2, #0]
 8009810:	6825      	ldr	r5, [r4, #0]
 8009812:	1d18      	adds	r0, r3, #4
 8009814:	6010      	str	r0, [r2, #0]
 8009816:	0628      	lsls	r0, r5, #24
 8009818:	d501      	bpl.n	800981e <_printf_i+0xc2>
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	e002      	b.n	8009824 <_printf_i+0xc8>
 800981e:	0668      	lsls	r0, r5, #25
 8009820:	d5fb      	bpl.n	800981a <_printf_i+0xbe>
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	4854      	ldr	r0, [pc, #336]	; (8009978 <_printf_i+0x21c>)
 8009826:	296f      	cmp	r1, #111	; 0x6f
 8009828:	bf14      	ite	ne
 800982a:	220a      	movne	r2, #10
 800982c:	2208      	moveq	r2, #8
 800982e:	2100      	movs	r1, #0
 8009830:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009834:	6865      	ldr	r5, [r4, #4]
 8009836:	60a5      	str	r5, [r4, #8]
 8009838:	2d00      	cmp	r5, #0
 800983a:	f2c0 8095 	blt.w	8009968 <_printf_i+0x20c>
 800983e:	6821      	ldr	r1, [r4, #0]
 8009840:	f021 0104 	bic.w	r1, r1, #4
 8009844:	6021      	str	r1, [r4, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d13d      	bne.n	80098c6 <_printf_i+0x16a>
 800984a:	2d00      	cmp	r5, #0
 800984c:	f040 808e 	bne.w	800996c <_printf_i+0x210>
 8009850:	4665      	mov	r5, ip
 8009852:	2a08      	cmp	r2, #8
 8009854:	d10b      	bne.n	800986e <_printf_i+0x112>
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	07db      	lsls	r3, r3, #31
 800985a:	d508      	bpl.n	800986e <_printf_i+0x112>
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	6862      	ldr	r2, [r4, #4]
 8009860:	429a      	cmp	r2, r3
 8009862:	bfde      	ittt	le
 8009864:	2330      	movle	r3, #48	; 0x30
 8009866:	f805 3c01 	strble.w	r3, [r5, #-1]
 800986a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800986e:	ebac 0305 	sub.w	r3, ip, r5
 8009872:	6123      	str	r3, [r4, #16]
 8009874:	f8cd 8000 	str.w	r8, [sp]
 8009878:	463b      	mov	r3, r7
 800987a:	aa03      	add	r2, sp, #12
 800987c:	4621      	mov	r1, r4
 800987e:	4630      	mov	r0, r6
 8009880:	f7ff fef6 	bl	8009670 <_printf_common>
 8009884:	3001      	adds	r0, #1
 8009886:	d14d      	bne.n	8009924 <_printf_i+0x1c8>
 8009888:	f04f 30ff 	mov.w	r0, #4294967295
 800988c:	b005      	add	sp, #20
 800988e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009892:	4839      	ldr	r0, [pc, #228]	; (8009978 <_printf_i+0x21c>)
 8009894:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009898:	6813      	ldr	r3, [r2, #0]
 800989a:	6821      	ldr	r1, [r4, #0]
 800989c:	1d1d      	adds	r5, r3, #4
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6015      	str	r5, [r2, #0]
 80098a2:	060a      	lsls	r2, r1, #24
 80098a4:	d50b      	bpl.n	80098be <_printf_i+0x162>
 80098a6:	07ca      	lsls	r2, r1, #31
 80098a8:	bf44      	itt	mi
 80098aa:	f041 0120 	orrmi.w	r1, r1, #32
 80098ae:	6021      	strmi	r1, [r4, #0]
 80098b0:	b91b      	cbnz	r3, 80098ba <_printf_i+0x15e>
 80098b2:	6822      	ldr	r2, [r4, #0]
 80098b4:	f022 0220 	bic.w	r2, r2, #32
 80098b8:	6022      	str	r2, [r4, #0]
 80098ba:	2210      	movs	r2, #16
 80098bc:	e7b7      	b.n	800982e <_printf_i+0xd2>
 80098be:	064d      	lsls	r5, r1, #25
 80098c0:	bf48      	it	mi
 80098c2:	b29b      	uxthmi	r3, r3
 80098c4:	e7ef      	b.n	80098a6 <_printf_i+0x14a>
 80098c6:	4665      	mov	r5, ip
 80098c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80098cc:	fb02 3311 	mls	r3, r2, r1, r3
 80098d0:	5cc3      	ldrb	r3, [r0, r3]
 80098d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80098d6:	460b      	mov	r3, r1
 80098d8:	2900      	cmp	r1, #0
 80098da:	d1f5      	bne.n	80098c8 <_printf_i+0x16c>
 80098dc:	e7b9      	b.n	8009852 <_printf_i+0xf6>
 80098de:	6813      	ldr	r3, [r2, #0]
 80098e0:	6825      	ldr	r5, [r4, #0]
 80098e2:	6961      	ldr	r1, [r4, #20]
 80098e4:	1d18      	adds	r0, r3, #4
 80098e6:	6010      	str	r0, [r2, #0]
 80098e8:	0628      	lsls	r0, r5, #24
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	d501      	bpl.n	80098f2 <_printf_i+0x196>
 80098ee:	6019      	str	r1, [r3, #0]
 80098f0:	e002      	b.n	80098f8 <_printf_i+0x19c>
 80098f2:	066a      	lsls	r2, r5, #25
 80098f4:	d5fb      	bpl.n	80098ee <_printf_i+0x192>
 80098f6:	8019      	strh	r1, [r3, #0]
 80098f8:	2300      	movs	r3, #0
 80098fa:	6123      	str	r3, [r4, #16]
 80098fc:	4665      	mov	r5, ip
 80098fe:	e7b9      	b.n	8009874 <_printf_i+0x118>
 8009900:	6813      	ldr	r3, [r2, #0]
 8009902:	1d19      	adds	r1, r3, #4
 8009904:	6011      	str	r1, [r2, #0]
 8009906:	681d      	ldr	r5, [r3, #0]
 8009908:	6862      	ldr	r2, [r4, #4]
 800990a:	2100      	movs	r1, #0
 800990c:	4628      	mov	r0, r5
 800990e:	f7f6 fc7f 	bl	8000210 <memchr>
 8009912:	b108      	cbz	r0, 8009918 <_printf_i+0x1bc>
 8009914:	1b40      	subs	r0, r0, r5
 8009916:	6060      	str	r0, [r4, #4]
 8009918:	6863      	ldr	r3, [r4, #4]
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	2300      	movs	r3, #0
 800991e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009922:	e7a7      	b.n	8009874 <_printf_i+0x118>
 8009924:	6923      	ldr	r3, [r4, #16]
 8009926:	462a      	mov	r2, r5
 8009928:	4639      	mov	r1, r7
 800992a:	4630      	mov	r0, r6
 800992c:	47c0      	blx	r8
 800992e:	3001      	adds	r0, #1
 8009930:	d0aa      	beq.n	8009888 <_printf_i+0x12c>
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	079b      	lsls	r3, r3, #30
 8009936:	d413      	bmi.n	8009960 <_printf_i+0x204>
 8009938:	68e0      	ldr	r0, [r4, #12]
 800993a:	9b03      	ldr	r3, [sp, #12]
 800993c:	4298      	cmp	r0, r3
 800993e:	bfb8      	it	lt
 8009940:	4618      	movlt	r0, r3
 8009942:	e7a3      	b.n	800988c <_printf_i+0x130>
 8009944:	2301      	movs	r3, #1
 8009946:	464a      	mov	r2, r9
 8009948:	4639      	mov	r1, r7
 800994a:	4630      	mov	r0, r6
 800994c:	47c0      	blx	r8
 800994e:	3001      	adds	r0, #1
 8009950:	d09a      	beq.n	8009888 <_printf_i+0x12c>
 8009952:	3501      	adds	r5, #1
 8009954:	68e3      	ldr	r3, [r4, #12]
 8009956:	9a03      	ldr	r2, [sp, #12]
 8009958:	1a9b      	subs	r3, r3, r2
 800995a:	42ab      	cmp	r3, r5
 800995c:	dcf2      	bgt.n	8009944 <_printf_i+0x1e8>
 800995e:	e7eb      	b.n	8009938 <_printf_i+0x1dc>
 8009960:	2500      	movs	r5, #0
 8009962:	f104 0919 	add.w	r9, r4, #25
 8009966:	e7f5      	b.n	8009954 <_printf_i+0x1f8>
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1ac      	bne.n	80098c6 <_printf_i+0x16a>
 800996c:	7803      	ldrb	r3, [r0, #0]
 800996e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009972:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009976:	e76c      	b.n	8009852 <_printf_i+0xf6>
 8009978:	08009c21 	.word	0x08009c21
 800997c:	08009c32 	.word	0x08009c32

08009980 <_sbrk_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4c06      	ldr	r4, [pc, #24]	; (800999c <_sbrk_r+0x1c>)
 8009984:	2300      	movs	r3, #0
 8009986:	4605      	mov	r5, r0
 8009988:	4608      	mov	r0, r1
 800998a:	6023      	str	r3, [r4, #0]
 800998c:	f7f7 f9f6 	bl	8000d7c <_sbrk>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_sbrk_r+0x1a>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	b103      	cbz	r3, 800999a <_sbrk_r+0x1a>
 8009998:	602b      	str	r3, [r5, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	200005c0 	.word	0x200005c0

080099a0 <__sread>:
 80099a0:	b510      	push	{r4, lr}
 80099a2:	460c      	mov	r4, r1
 80099a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a8:	f000 f896 	bl	8009ad8 <_read_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	bfab      	itete	ge
 80099b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099b2:	89a3      	ldrhlt	r3, [r4, #12]
 80099b4:	181b      	addge	r3, r3, r0
 80099b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099ba:	bfac      	ite	ge
 80099bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80099be:	81a3      	strhlt	r3, [r4, #12]
 80099c0:	bd10      	pop	{r4, pc}

080099c2 <__swrite>:
 80099c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c6:	461f      	mov	r7, r3
 80099c8:	898b      	ldrh	r3, [r1, #12]
 80099ca:	05db      	lsls	r3, r3, #23
 80099cc:	4605      	mov	r5, r0
 80099ce:	460c      	mov	r4, r1
 80099d0:	4616      	mov	r6, r2
 80099d2:	d505      	bpl.n	80099e0 <__swrite+0x1e>
 80099d4:	2302      	movs	r3, #2
 80099d6:	2200      	movs	r2, #0
 80099d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099dc:	f000 f868 	bl	8009ab0 <_lseek_r>
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	4632      	mov	r2, r6
 80099ee:	463b      	mov	r3, r7
 80099f0:	4628      	mov	r0, r5
 80099f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f6:	f000 b817 	b.w	8009a28 <_write_r>

080099fa <__sseek>:
 80099fa:	b510      	push	{r4, lr}
 80099fc:	460c      	mov	r4, r1
 80099fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a02:	f000 f855 	bl	8009ab0 <_lseek_r>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	bf15      	itete	ne
 8009a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a16:	81a3      	strheq	r3, [r4, #12]
 8009a18:	bf18      	it	ne
 8009a1a:	81a3      	strhne	r3, [r4, #12]
 8009a1c:	bd10      	pop	{r4, pc}

08009a1e <__sclose>:
 8009a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a22:	f000 b813 	b.w	8009a4c <_close_r>
	...

08009a28 <_write_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4c07      	ldr	r4, [pc, #28]	; (8009a48 <_write_r+0x20>)
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	4608      	mov	r0, r1
 8009a30:	4611      	mov	r1, r2
 8009a32:	2200      	movs	r2, #0
 8009a34:	6022      	str	r2, [r4, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	f7f7 f89e 	bl	8000b78 <_write>
 8009a3c:	1c43      	adds	r3, r0, #1
 8009a3e:	d102      	bne.n	8009a46 <_write_r+0x1e>
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	b103      	cbz	r3, 8009a46 <_write_r+0x1e>
 8009a44:	602b      	str	r3, [r5, #0]
 8009a46:	bd38      	pop	{r3, r4, r5, pc}
 8009a48:	200005c0 	.word	0x200005c0

08009a4c <_close_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	4c06      	ldr	r4, [pc, #24]	; (8009a68 <_close_r+0x1c>)
 8009a50:	2300      	movs	r3, #0
 8009a52:	4605      	mov	r5, r0
 8009a54:	4608      	mov	r0, r1
 8009a56:	6023      	str	r3, [r4, #0]
 8009a58:	f7f7 f8ba 	bl	8000bd0 <_close>
 8009a5c:	1c43      	adds	r3, r0, #1
 8009a5e:	d102      	bne.n	8009a66 <_close_r+0x1a>
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	b103      	cbz	r3, 8009a66 <_close_r+0x1a>
 8009a64:	602b      	str	r3, [r5, #0]
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	200005c0 	.word	0x200005c0

08009a6c <_fstat_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4c07      	ldr	r4, [pc, #28]	; (8009a8c <_fstat_r+0x20>)
 8009a70:	2300      	movs	r3, #0
 8009a72:	4605      	mov	r5, r0
 8009a74:	4608      	mov	r0, r1
 8009a76:	4611      	mov	r1, r2
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	f7f7 f8f9 	bl	8000c70 <_fstat>
 8009a7e:	1c43      	adds	r3, r0, #1
 8009a80:	d102      	bne.n	8009a88 <_fstat_r+0x1c>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	b103      	cbz	r3, 8009a88 <_fstat_r+0x1c>
 8009a86:	602b      	str	r3, [r5, #0]
 8009a88:	bd38      	pop	{r3, r4, r5, pc}
 8009a8a:	bf00      	nop
 8009a8c:	200005c0 	.word	0x200005c0

08009a90 <_isatty_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4c06      	ldr	r4, [pc, #24]	; (8009aac <_isatty_r+0x1c>)
 8009a94:	2300      	movs	r3, #0
 8009a96:	4605      	mov	r5, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	6023      	str	r3, [r4, #0]
 8009a9c:	f7f7 f856 	bl	8000b4c <_isatty>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_isatty_r+0x1a>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_isatty_r+0x1a>
 8009aa8:	602b      	str	r3, [r5, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	200005c0 	.word	0x200005c0

08009ab0 <_lseek_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4c07      	ldr	r4, [pc, #28]	; (8009ad0 <_lseek_r+0x20>)
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	4611      	mov	r1, r2
 8009aba:	2200      	movs	r2, #0
 8009abc:	6022      	str	r2, [r4, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f7f7 f89d 	bl	8000bfe <_lseek>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_lseek_r+0x1e>
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_lseek_r+0x1e>
 8009acc:	602b      	str	r3, [r5, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	200005c0 	.word	0x200005c0

08009ad4 <__malloc_lock>:
 8009ad4:	4770      	bx	lr

08009ad6 <__malloc_unlock>:
 8009ad6:	4770      	bx	lr

08009ad8 <_read_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4c07      	ldr	r4, [pc, #28]	; (8009af8 <_read_r+0x20>)
 8009adc:	4605      	mov	r5, r0
 8009ade:	4608      	mov	r0, r1
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	6022      	str	r2, [r4, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f7f7 f89a 	bl	8000c20 <_read>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d102      	bne.n	8009af6 <_read_r+0x1e>
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	b103      	cbz	r3, 8009af6 <_read_r+0x1e>
 8009af4:	602b      	str	r3, [r5, #0]
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	200005c0 	.word	0x200005c0

08009afc <_init>:
 8009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afe:	bf00      	nop
 8009b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b02:	bc08      	pop	{r3}
 8009b04:	469e      	mov	lr, r3
 8009b06:	4770      	bx	lr

08009b08 <_fini>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	bf00      	nop
 8009b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0e:	bc08      	pop	{r3}
 8009b10:	469e      	mov	lr, r3
 8009b12:	4770      	bx	lr
