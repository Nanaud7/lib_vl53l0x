
lib_vl53l0x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ae8  08009ae8  0002032c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ae8  08009ae8  00019ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009af0  08009af0  0002032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009af0  08009af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009af4  08009af4  00019af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  08009af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000032c  08009e24  0002032c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08009e24  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017965  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002936  00000000  00000000  00037cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  0003a5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e40  00000000  00000000  0003b568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024987  00000000  00000000  0003c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed53  00000000  00000000  00060d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d22d9  00000000  00000000  0006fa82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141d5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000475c  00000000  00000000  00141dd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000032c 	.word	0x2000032c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080099a0 	.word	0x080099a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000330 	.word	0x20000330
 800020c:	080099a0 	.word	0x080099a0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a2c      	ldr	r2, [pc, #176]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b26      	ldr	r3, [pc, #152]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a25      	ldr	r2, [pc, #148]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b23      	ldr	r3, [pc, #140]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_GPIO_Init+0xd0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <MX_GPIO_Init+0xd0>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_GPIO_Init+0xd0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_GPIO_Init+0xd0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <MX_GPIO_Init+0xd0>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_GPIO_Init+0xd0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2120      	movs	r1, #32
 800063a:	4812      	ldr	r0, [pc, #72]	; (8000684 <MX_GPIO_Init+0xd4>)
 800063c:	f000 ff3e 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_GPIO_Init+0xd8>)
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_GPIO_Init+0xdc>)
 8000656:	f000 fd9f 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800065a:	2320      	movs	r3, #32
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_GPIO_Init+0xd4>)
 8000672:	f000 fd91 	bl	8001198 <HAL_GPIO_Init>

}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40020000 	.word	0x40020000
 8000688:	10210000 	.word	0x10210000
 800068c:	40020800 	.word	0x40020800

08000690 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x50>)
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <MX_I2C1_Init+0x54>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C1_Init+0x50>)
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x58>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ce:	f000 ff0f 	bl	80014f0 <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 f9e0 	bl	8000a9c <Error_Handler>
  }

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000354 	.word	0x20000354
 80006e4:	40005400 	.word	0x40005400
 80006e8:	00061a80 	.word	0x00061a80

080006ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <HAL_I2C_MspInit+0x84>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d12b      	bne.n	8000766 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800072a:	23c0      	movs	r3, #192	; 0xc0
 800072c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072e:	2312      	movs	r3, #18
 8000730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000732:	2301      	movs	r3, #1
 8000734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000736:	2303      	movs	r3, #3
 8000738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073a:	2304      	movs	r3, #4
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <HAL_I2C_MspInit+0x8c>)
 8000746:	f000 fd27 	bl	8001198 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000754:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_I2C_MspInit+0x88>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40005400 	.word	0x40005400
 8000774:	40023800 	.word	0x40023800
 8000778:	40020400 	.word	0x40020400

0800077c <vl53l0x_Initialization_Flow>:
 *      Author: Arnaud CHOBERT
 */

#include "lib_vl53l0x.h"

uint8_t vl53l0x_Initialization_Flow(VL53L0X_Dev_t* dev){
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	// Device initialization
	vl53l0x_Device_Initialization(dev);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 f80f 	bl	80007a8 <vl53l0x_Device_Initialization>

	// Calibration data loading
	vl53l0x_Calibration_Data_Load(dev);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 f83a 	bl	8000804 <vl53l0x_Calibration_Data_Load>

	// System settings
	vl53l0x_System_Settings(dev);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f850 	bl	8000836 <vl53l0x_System_Settings>

	// Start Measurement
	VL53L0X_StartMeasurement(dev);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f004 f93e 	bl	8004a18 <VL53L0X_StartMeasurement>

	return 0;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <vl53l0x_Device_Initialization>:

uint8_t vl53l0x_Device_Initialization(VL53L0X_Dev_t* dev){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	73fb      	strb	r3, [r7, #15]

	// DataInit
	if(VL53L0X_ERROR_NONE != (status = VL53L0X_DataInit(dev))){
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f003 f89f 	bl	80038f8 <VL53L0X_DataInit>
 80007ba:	4603      	mov	r3, r0
 80007bc:	73fb      	strb	r3, [r7, #15]
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d006      	beq.n	80007d2 <vl53l0x_Device_Initialization+0x2a>
		printf("Error DataInit() : %d\r\n",status);
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	4619      	mov	r1, r3
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <vl53l0x_Device_Initialization+0x54>)
 80007ca:	f008 f8e3 	bl	8008994 <iprintf>
		return 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00f      	b.n	80007f2 <vl53l0x_Device_Initialization+0x4a>
	}

	// StaticInit
	if(VL53L0X_ERROR_NONE != (status = VL53L0X_StaticInit(dev))){
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f003 f9f4 	bl	8003bc0 <VL53L0X_StaticInit>
 80007d8:	4603      	mov	r3, r0
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d006      	beq.n	80007f0 <vl53l0x_Device_Initialization+0x48>
		printf("Error StaticInit() : %d\r\n",status);
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <vl53l0x_Device_Initialization+0x58>)
 80007e8:	f008 f8d4 	bl	8008994 <iprintf>
		return 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	e000      	b.n	80007f2 <vl53l0x_Device_Initialization+0x4a>
	}

	return 0;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	080099b8 	.word	0x080099b8
 8000800:	080099d0 	.word	0x080099d0

08000804 <vl53l0x_Calibration_Data_Load>:

uint8_t vl53l0x_Calibration_Data_Load(VL53L0X_Dev_t* dev){
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	// Reference SPADs
	uint32_t count; uint8_t isApertureSpads;
	VL53L0X_PerformRefSpadManagement(dev, &count, &isApertureSpads);
 800080c:	f107 020b 	add.w	r2, r7, #11
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f004 fd1e 	bl	8005258 <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_GetReferenceSpads(dev, &count, &isApertureSpads);


	// Ref calibration
    uint8_t VhvSettings, PhaseCal;
	VL53L0X_PerformRefCalibration(dev, &VhvSettings, &PhaseCal);
 800081c:	f107 0209 	add.w	r2, r7, #9
 8000820:	f107 030a 	add.w	r3, r7, #10
 8000824:	4619      	mov	r1, r3
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f004 f87a 	bl	8004920 <VL53L0X_PerformRefCalibration>

	// Offset calibration

	// Cross-talk correction

	return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <vl53l0x_System_Settings>:

uint8_t vl53l0x_System_Settings(VL53L0X_Dev_t* dev){
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	// Device Mode
	VL53L0X_SetDeviceMode(dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800083e:	2101      	movs	r1, #1
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f003 fbcf 	bl	8003fe4 <VL53L0X_SetDeviceMode>

	// Polling and interrupt mode
	//VL53L0X_SetGpioConfig(dev, Pin, DeviceMode, Functionality, Polarity)

	// API range profiles
	vl53l0x_Range_Profiles(dev);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f806 	bl	8000858 <vl53l0x_Range_Profiles>

	return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <vl53l0x_Range_Profiles>:

uint8_t vl53l0x_Range_Profiles(VL53L0X_Dev_t* dev){
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8000860:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000864:	617b      	str	r3, [r7, #20]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8000866:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800086a:	613b      	str	r3, [r7, #16]
	uint32_t timingBudget = 33000;
 800086c:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8000870:	60fb      	str	r3, [r7, #12]
	uint8_t preRangeVcselPeriod = 14;
 8000872:	230e      	movs	r3, #14
 8000874:	72fb      	strb	r3, [r7, #11]
	uint8_t finalRangeVcselPeriod = 10;
 8000876:	230a      	movs	r3, #10
 8000878:	72bb      	strb	r3, [r7, #10]
		timingBudget = 33000;
		preRangeVcselPeriod = 18;
		finalRangeVcselPeriod = 14;
		break;
	case HIGH_ACCURACY:
		signalLimit = (FixPoint1616_t)(0.25*65536);
 800087a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800087e:	617b      	str	r3, [r7, #20]
		sigmaLimit = (FixPoint1616_t)(18*65536);
 8000880:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000884:	613b      	str	r3, [r7, #16]
		timingBudget = 200000;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <vl53l0x_Range_Profiles+0x7c>)
 8000888:	60fb      	str	r3, [r7, #12]
		preRangeVcselPeriod = 14;
 800088a:	230e      	movs	r3, #14
 800088c:	72fb      	strb	r3, [r7, #11]
		finalRangeVcselPeriod = 10;
 800088e:	230a      	movs	r3, #10
 8000890:	72bb      	strb	r3, [r7, #10]
		break;
 8000892:	bf00      	nop
		break;
	default:
		printf("Not Supported");
	}

	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	2101      	movs	r1, #1
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f003 feeb 	bl	8004674 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	2100      	movs	r1, #0
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f003 fee6 	bl	8004674 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(dev, timingBudget);
 80008a8:	68f9      	ldr	r1, [r7, #12]
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f003 fc14 	bl	80040d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80008b0:	7afb      	ldrb	r3, [r7, #11]
 80008b2:	461a      	mov	r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f003 fc34 	bl	8004124 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	461a      	mov	r2, r3
 80008c0:	2101      	movs	r1, #1
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f003 fc2e 	bl	8004124 <VL53L0X_SetVcselPulsePeriod>
}
 80008c8:	bf00      	nop
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	00030d40 	.word	0x00030d40

080008d8 <vl53l0x_PerformMeasurement>:
	VL53L0X_PerformXTalkCalibration(dev, XTalkCalDistance, &XTalkCompensationRateMegaCps);

	return 0;
}

uint8_t vl53l0x_PerformMeasurement(VL53L0X_Dev_t* dev, VL53L0X_RangingMeasurementData_t* VL53L0X_RangingMeasurementData){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L0X_ERROR_NONE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]

	VL53L0X_WaitDeviceReadyForNewMeasurement(dev, 100);
 80008e6:	2164      	movs	r1, #100	; 0x64
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f004 f994 	bl	8004c16 <VL53L0X_WaitDeviceReadyForNewMeasurement>

	if(VL53L0X_ERROR_NONE != (status = VL53L0X_GetRangingMeasurementData(dev, VL53L0X_RangingMeasurementData))){
 80008ee:	6839      	ldr	r1, [r7, #0]
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f004 f99f 	bl	8004c34 <VL53L0X_GetRangingMeasurementData>
 80008f6:	4603      	mov	r3, r0
 80008f8:	73fb      	strb	r3, [r7, #15]
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d006      	beq.n	800090e <vl53l0x_PerformMeasurement+0x36>
		printf("Error GetRangingMeasurementData() : %d\r\n",status);
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	4619      	mov	r1, r3
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <vl53l0x_PerformMeasurement+0x40>)
 8000906:	f008 f845 	bl	8008994 <iprintf>
		return 1;
 800090a:	2301      	movs	r3, #1
 800090c:	e000      	b.n	8000910 <vl53l0x_PerformMeasurement+0x38>
	}

	return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	080099ec 	.word	0x080099ec

0800091c <vl53l0x_PerformRangingMeasurement>:

uint16_t vl53l0x_PerformRangingMeasurement(VL53L0X_Dev_t* dev){
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;

	vl53l0x_PerformMeasurement(dev, &VL53L0X_RangingMeasurementData);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4619      	mov	r1, r3
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffd4 	bl	80008d8 <vl53l0x_PerformMeasurement>

	return VL53L0X_RangingMeasurementData.RangeMilliMeter;
 8000930:	8abb      	ldrh	r3, [r7, #20]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3728      	adds	r7, #40	; 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b0e6      	sub	sp, #408	; 0x198
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f000 faaf 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f83b 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f7ff fe31 	bl	80005b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800094e:	f000 fa0d 	bl	8000d6c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000952:	f7ff fe9d 	bl	8000690 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000956:	4816      	ldr	r0, [pc, #88]	; (80009b0 <main+0x74>)
 8000958:	f000 f8a4 	bl	8000aa4 <RetargetInit>
  printf("lib_vl53l0x\r\n");
 800095c:	4815      	ldr	r0, [pc, #84]	; (80009b4 <main+0x78>)
 800095e:	f008 f88d 	bl	8008a7c <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  VL53L0X_Dev_t dev;
  uint8_t status = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197

  dev.I2cHandle = &hi2c1;
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <main+0x7c>)
 800096c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  dev.I2cDevAddr = 0x52;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2252      	movs	r2, #82	; 0x52
 8000974:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  dev.comms_speed_khz = 400;
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800097e:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
  dev.comms_type = 1;
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2201      	movs	r2, #1
 8000986:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174

  vl53l0x_Initialization_Flow(&dev);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fef5 	bl	800077c <vl53l0x_Initialization_Flow>

  while (1)
  {
	  printf("Distance : %d\r\n",vl53l0x_PerformRangingMeasurement(&dev));
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ffc1 	bl	800091c <vl53l0x_PerformRangingMeasurement>
 800099a:	4603      	mov	r3, r0
 800099c:	4619      	mov	r1, r3
 800099e:	4807      	ldr	r0, [pc, #28]	; (80009bc <main+0x80>)
 80009a0:	f007 fff8 	bl	8008994 <iprintf>
	  HAL_Delay(1000);
 80009a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a8:	f000 faee 	bl	8000f88 <HAL_Delay>
	  printf("Distance : %d\r\n",vl53l0x_PerformRangingMeasurement(&dev));
 80009ac:	e7f1      	b.n	8000992 <main+0x56>
 80009ae:	bf00      	nop
 80009b0:	200003ac 	.word	0x200003ac
 80009b4:	08009a18 	.word	0x08009a18
 80009b8:	20000354 	.word	0x20000354
 80009bc:	08009a28 	.word	0x08009a28

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2234      	movs	r2, #52	; 0x34
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f007 ffd7 	bl	8008982 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <SystemClock_Config+0xd4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a29      	ldr	r2, [pc, #164]	; (8000a94 <SystemClock_Config+0xd4>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <SystemClock_Config+0xd4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a00:	2300      	movs	r3, #0
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <SystemClock_Config+0xd8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0c:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <SystemClock_Config+0xd8>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <SystemClock_Config+0xd8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a34:	2310      	movs	r3, #16
 8000a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 ff92 	bl	8002978 <HAL_RCC_OscConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a5a:	f000 f81f 	bl	8000a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a62:	2302      	movs	r3, #2
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 fcc2 	bl	8002404 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a86:	f000 f809 	bl	8000a9c <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	; 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <Error_Handler+0x6>

08000aa4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <RetargetInit+0x28>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <RetargetInit+0x2c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	6898      	ldr	r0, [r3, #8]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	2202      	movs	r2, #2
 8000abc:	2100      	movs	r1, #0
 8000abe:	f007 ffe5 	bl	8008a8c <setvbuf>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200003a8 	.word	0x200003a8
 8000ad0:	200002c8 	.word	0x200002c8

08000ad4 <_isatty>:

int _isatty(int fd) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db04      	blt.n	8000aec <_isatty+0x18>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	dc01      	bgt.n	8000aec <_isatty+0x18>
    return 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e005      	b.n	8000af8 <_isatty+0x24>

  errno = EBADF;
 8000aec:	f007 ff14 	bl	8008918 <__errno>
 8000af0:	4602      	mov	r2, r0
 8000af2:	2309      	movs	r3, #9
 8000af4:	6013      	str	r3, [r2, #0]
  return 0;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_write>:

int _write(int fd, char* ptr, int len) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d002      	beq.n	8000b18 <_write+0x18>
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d111      	bne.n	8000b3c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <_write+0x54>)
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	f002 f9ce 	bl	8002ec6 <HAL_UART_Transmit>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b2e:	7dfb      	ldrb	r3, [r7, #23]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <_write+0x38>
      return len;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	e008      	b.n	8000b4a <_write+0x4a>
    else
      return EIO;
 8000b38:	2305      	movs	r3, #5
 8000b3a:	e006      	b.n	8000b4a <_write+0x4a>
  }
  errno = EBADF;
 8000b3c:	f007 feec 	bl	8008918 <__errno>
 8000b40:	4602      	mov	r2, r0
 8000b42:	2309      	movs	r3, #9
 8000b44:	6013      	str	r3, [r2, #0]
  return -1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200003a8 	.word	0x200003a8

08000b58 <_close>:

int _close(int fd) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db04      	blt.n	8000b70 <_close+0x18>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	dc01      	bgt.n	8000b70 <_close+0x18>
    return 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e006      	b.n	8000b7e <_close+0x26>

  errno = EBADF;
 8000b70:	f007 fed2 	bl	8008918 <__errno>
 8000b74:	4602      	mov	r2, r0
 8000b76:	2309      	movs	r3, #9
 8000b78:	6013      	str	r3, [r2, #0]
  return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000b92:	f007 fec1 	bl	8008918 <__errno>
 8000b96:	4602      	mov	r2, r0
 8000b98:	2309      	movs	r3, #9
 8000b9a:	6013      	str	r3, [r2, #0]
  return -1;
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_read>:

int _read(int fd, char* ptr, int len) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d110      	bne.n	8000bdc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <_read+0x4c>)
 8000bbc:	6818      	ldr	r0, [r3, #0]
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	f002 fa17 	bl	8002ff8 <HAL_UART_Receive>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <_read+0x30>
      return 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e008      	b.n	8000bea <_read+0x42>
    else
      return EIO;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	e006      	b.n	8000bea <_read+0x42>
  }
  errno = EBADF;
 8000bdc:	f007 fe9c 	bl	8008918 <__errno>
 8000be0:	4602      	mov	r2, r0
 8000be2:	2309      	movs	r3, #9
 8000be4:	6013      	str	r3, [r2, #0]
  return -1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200003a8 	.word	0x200003a8

08000bf8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db08      	blt.n	8000c1a <_fstat+0x22>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	dc05      	bgt.n	8000c1a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c14:	605a      	str	r2, [r3, #4]
    return 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e005      	b.n	8000c26 <_fstat+0x2e>
  }

  errno = EBADF;
 8000c1a:	f007 fe7d 	bl	8008918 <__errno>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	2309      	movs	r3, #9
 8000c22:	6013      	str	r3, [r2, #0]
  return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c6e:	2007      	movs	r0, #7
 8000c70:	f000 fa5e 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f93c 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f007 fe08 	bl	8008918 <__errno>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20020000 	.word	0x20020000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000348 	.word	0x20000348
 8000d3c:	20000438 	.word	0x20000438

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <SystemInit+0x28>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <SystemInit+0x28>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SystemInit+0x28>)
 8000d56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <MX_USART2_UART_Init+0x50>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000da4:	f002 f842 	bl	8002e2c <HAL_UART_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dae:	f7ff fe75 	bl	8000a9c <Error_Handler>
  }

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200003ac 	.word	0x200003ac
 8000dbc:	40004400 	.word	0x40004400

08000dc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <HAL_UART_MspInit+0x84>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d12b      	bne.n	8000e3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_UART_MspInit+0x88>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_UART_MspInit+0x88>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_UART_MspInit+0x88>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_UART_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_UART_MspInit+0x88>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_UART_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <HAL_UART_MspInit+0x8c>)
 8000e36:	f000 f9af 	bl	8001198 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40004400 	.word	0x40004400
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e56:	e003      	b.n	8000e60 <LoopCopyDataInit>

08000e58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e5e:	3104      	adds	r1, #4

08000e60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e68:	d3f6      	bcc.n	8000e58 <CopyDataInit>
  ldr  r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e6c:	e002      	b.n	8000e74 <LoopFillZerobss>

08000e6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e70:	f842 3b04 	str.w	r3, [r2], #4

08000e74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e78:	d3f9      	bcc.n	8000e6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e7a:	f7ff ff61 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f007 fd51 	bl	8008924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fd5b 	bl	800093c <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e8c:	08009af8 	.word	0x08009af8
  ldr  r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e94:	2000032c 	.word	0x2000032c
  ldr  r2, =_sbss
 8000e98:	2000032c 	.word	0x2000032c
  ldr  r3, = _ebss
 8000e9c:	20000434 	.word	0x20000434

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_Init+0x40>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_Init+0x40>)
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_Init+0x40>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f92f 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f808 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff feaa 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f939 	bl	800117e <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f000 f90f 	bl	8001146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_InitTick+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	200003ec 	.word	0x200003ec

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	200003ec 	.word	0x200003ec

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_Delay+0x40>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffde 	bl	8000f70 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000008 	.word	0x20000008

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff47 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff5c 	bl	8001014 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff8e 	bl	8001084 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffb0 	bl	80010ec <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	e165      	b.n	8001480 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f040 8154 	bne.w	800147a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d00b      	beq.n	80011f2 <HAL_GPIO_Init+0x5a>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e6:	2b11      	cmp	r3, #17
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b12      	cmp	r3, #18
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0xfc>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b12      	cmp	r3, #18
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80ae 	beq.w	800147a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <HAL_GPIO_Init+0x2fc>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a5b      	ldr	r2, [pc, #364]	; (8001494 <HAL_GPIO_Init+0x2fc>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b59      	ldr	r3, [pc, #356]	; (8001494 <HAL_GPIO_Init+0x2fc>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133a:	4a57      	ldr	r2, [pc, #348]	; (8001498 <HAL_GPIO_Init+0x300>)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4e      	ldr	r2, [pc, #312]	; (800149c <HAL_GPIO_Init+0x304>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d025      	beq.n	80013b2 <HAL_GPIO_Init+0x21a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4d      	ldr	r2, [pc, #308]	; (80014a0 <HAL_GPIO_Init+0x308>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01f      	beq.n	80013ae <HAL_GPIO_Init+0x216>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4c      	ldr	r2, [pc, #304]	; (80014a4 <HAL_GPIO_Init+0x30c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <HAL_GPIO_Init+0x212>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4b      	ldr	r2, [pc, #300]	; (80014a8 <HAL_GPIO_Init+0x310>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x20e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4a      	ldr	r2, [pc, #296]	; (80014ac <HAL_GPIO_Init+0x314>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x20a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a49      	ldr	r2, [pc, #292]	; (80014b0 <HAL_GPIO_Init+0x318>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x206>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a48      	ldr	r2, [pc, #288]	; (80014b4 <HAL_GPIO_Init+0x31c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x202>
 8001396:	2306      	movs	r3, #6
 8001398:	e00c      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 800139a:	2307      	movs	r3, #7
 800139c:	e00a      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013b2:	2300      	movs	r3, #0
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4934      	ldr	r1, [pc, #208]	; (8001498 <HAL_GPIO_Init+0x300>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d2:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <HAL_GPIO_Init+0x320>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f6:	4a30      	ldr	r2, [pc, #192]	; (80014b8 <HAL_GPIO_Init+0x320>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013fc:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <HAL_GPIO_Init+0x320>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001420:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144a:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <HAL_GPIO_Init+0x320>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001474:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	f67f ae96 	bls.w	80011b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001488:	bf00      	nop
 800148a:	3724      	adds	r7, #36	; 0x24
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40023800 	.word	0x40023800
 8001498:	40013800 	.word	0x40013800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40021400 	.word	0x40021400
 80014b4:	40021800 	.word	0x40021800
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e11f      	b.n	8001742 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff f8e8 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001554:	f001 f848 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 8001558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a7b      	ldr	r2, [pc, #492]	; (800174c <HAL_I2C_Init+0x25c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d807      	bhi.n	8001574 <HAL_I2C_Init+0x84>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4a7a      	ldr	r2, [pc, #488]	; (8001750 <HAL_I2C_Init+0x260>)
 8001568:	4293      	cmp	r3, r2
 800156a:	bf94      	ite	ls
 800156c:	2301      	movls	r3, #1
 800156e:	2300      	movhi	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	e006      	b.n	8001582 <HAL_I2C_Init+0x92>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4a77      	ldr	r2, [pc, #476]	; (8001754 <HAL_I2C_Init+0x264>)
 8001578:	4293      	cmp	r3, r2
 800157a:	bf94      	ite	ls
 800157c:	2301      	movls	r3, #1
 800157e:	2300      	movhi	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0db      	b.n	8001742 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a72      	ldr	r2, [pc, #456]	; (8001758 <HAL_I2C_Init+0x268>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a64      	ldr	r2, [pc, #400]	; (800174c <HAL_I2C_Init+0x25c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d802      	bhi.n	80015c4 <HAL_I2C_Init+0xd4>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	e009      	b.n	80015d8 <HAL_I2C_Init+0xe8>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	4a63      	ldr	r2, [pc, #396]	; (800175c <HAL_I2C_Init+0x26c>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	3301      	adds	r3, #1
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	430b      	orrs	r3, r1
 80015de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4956      	ldr	r1, [pc, #344]	; (800174c <HAL_I2C_Init+0x25c>)
 80015f4:	428b      	cmp	r3, r1
 80015f6:	d80d      	bhi.n	8001614 <HAL_I2C_Init+0x124>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e59      	subs	r1, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fbb1 f3f3 	udiv	r3, r1, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	2b04      	cmp	r3, #4
 800160e:	bf38      	it	cc
 8001610:	2304      	movcc	r3, #4
 8001612:	e04f      	b.n	80016b4 <HAL_I2C_Init+0x1c4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d111      	bne.n	8001640 <HAL_I2C_Init+0x150>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	440b      	add	r3, r1
 800162a:	fbb0 f3f3 	udiv	r3, r0, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	e012      	b.n	8001666 <HAL_I2C_Init+0x176>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e58      	subs	r0, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_I2C_Init+0x17e>
 800166a:	2301      	movs	r3, #1
 800166c:	e022      	b.n	80016b4 <HAL_I2C_Init+0x1c4>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10e      	bne.n	8001694 <HAL_I2C_Init+0x1a4>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1e58      	subs	r0, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6859      	ldr	r1, [r3, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	440b      	add	r3, r1
 8001684:	fbb0 f3f3 	udiv	r3, r0, r3
 8001688:	3301      	adds	r3, #1
 800168a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001692:	e00f      	b.n	80016b4 <HAL_I2C_Init+0x1c4>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1e58      	subs	r0, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	0099      	lsls	r1, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	6809      	ldr	r1, [r1, #0]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6911      	ldr	r1, [r2, #16]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68d2      	ldr	r2, [r2, #12]
 80016ee:	4311      	orrs	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2220      	movs	r2, #32
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	000186a0 	.word	0x000186a0
 8001750:	001e847f 	.word	0x001e847f
 8001754:	003d08ff 	.word	0x003d08ff
 8001758:	431bde83 	.word	0x431bde83
 800175c:	10624dd3 	.word	0x10624dd3

08001760 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af02      	add	r7, sp, #8
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	461a      	mov	r2, r3
 800176c:	460b      	mov	r3, r1
 800176e:	817b      	strh	r3, [r7, #10]
 8001770:	4613      	mov	r3, r2
 8001772:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff fbfc 	bl	8000f70 <HAL_GetTick>
 8001778:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b20      	cmp	r3, #32
 8001784:	f040 80e0 	bne.w	8001948 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2319      	movs	r3, #25
 800178e:	2201      	movs	r2, #1
 8001790:	4970      	ldr	r1, [pc, #448]	; (8001954 <HAL_I2C_Master_Transmit+0x1f4>)
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fc58 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800179e:	2302      	movs	r3, #2
 80017a0:	e0d3      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_I2C_Master_Transmit+0x50>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e0cc      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d007      	beq.n	80017d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2221      	movs	r2, #33	; 0x21
 80017ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2210      	movs	r2, #16
 80017f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	893a      	ldrh	r2, [r7, #8]
 8001806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4a50      	ldr	r2, [pc, #320]	; (8001958 <HAL_I2C_Master_Transmit+0x1f8>)
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001818:	8979      	ldrh	r1, [r7, #10]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 fac2 	bl	8001da8 <I2C_MasterRequestWrite>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e08d      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001844:	e066      	b.n	8001914 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	6a39      	ldr	r1, [r7, #32]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 fcd2 	bl	80021f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00d      	beq.n	8001872 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	2b04      	cmp	r3, #4
 800185c:	d107      	bne.n	800186e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e06b      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188c:	b29b      	uxth	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d11b      	bne.n	80018e8 <HAL_I2C_Master_Transmit+0x188>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d017      	beq.n	80018e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	6a39      	ldr	r1, [r7, #32]
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 fcc2 	bl	8002276 <I2C_WaitOnBTFFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00d      	beq.n	8001914 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d107      	bne.n	8001910 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800190e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e01a      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001918:	2b00      	cmp	r3, #0
 800191a:	d194      	bne.n	8001846 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2220      	movs	r2, #32
 8001930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	e000      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001948:	2302      	movs	r3, #2
  }
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	00100002 	.word	0x00100002
 8001958:	ffff0000 	.word	0xffff0000

0800195c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	; 0x30
 8001960:	af02      	add	r7, sp, #8
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	461a      	mov	r2, r3
 8001968:	460b      	mov	r3, r1
 800196a:	817b      	strh	r3, [r7, #10]
 800196c:	4613      	mov	r3, r2
 800196e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff fafe 	bl	8000f70 <HAL_GetTick>
 8001974:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b20      	cmp	r3, #32
 8001980:	f040 820b 	bne.w	8001d9a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2319      	movs	r3, #25
 800198a:	2201      	movs	r2, #1
 800198c:	497c      	ldr	r1, [pc, #496]	; (8001b80 <HAL_I2C_Master_Receive+0x224>)
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fb5a 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800199a:	2302      	movs	r3, #2
 800199c:	e1fe      	b.n	8001d9c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_I2C_Master_Receive+0x50>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e1f7      	b.n	8001d9c <HAL_I2C_Master_Receive+0x440>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d007      	beq.n	80019d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0201 	orr.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2222      	movs	r2, #34	; 0x22
 80019e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2210      	movs	r2, #16
 80019ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	893a      	ldrh	r2, [r7, #8]
 8001a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4a5c      	ldr	r2, [pc, #368]	; (8001b84 <HAL_I2C_Master_Receive+0x228>)
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a14:	8979      	ldrh	r1, [r7, #10]
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 fa46 	bl	8001eac <I2C_MasterRequestRead>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1b8      	b.n	8001d9c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d113      	bne.n	8001a5a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	623b      	str	r3, [r7, #32]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e18c      	b.n	8001d74 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d11b      	bne.n	8001a9a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	e16c      	b.n	8001d74 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d11b      	bne.n	8001ada <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	e14c      	b.n	8001d74 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ae8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b00:	e138      	b.n	8001d74 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	f200 80f1 	bhi.w	8001cee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d123      	bne.n	8001b5c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fbed 	bl	80022f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e139      	b.n	8001d9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b5a:	e10b      	b.n	8001d74 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d14e      	bne.n	8001c02 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4906      	ldr	r1, [pc, #24]	; (8001b88 <HAL_I2C_Master_Receive+0x22c>)
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fa6a 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d008      	beq.n	8001b8c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e10e      	b.n	8001d9c <HAL_I2C_Master_Receive+0x440>
 8001b7e:	bf00      	nop
 8001b80:	00100002 	.word	0x00100002
 8001b84:	ffff0000 	.word	0xffff0000
 8001b88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c00:	e0b8      	b.n	8001d74 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4966      	ldr	r1, [pc, #408]	; (8001da4 <HAL_I2C_Master_Receive+0x448>)
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 fa1b 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0bf      	b.n	8001d9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c64:	2200      	movs	r2, #0
 8001c66:	494f      	ldr	r1, [pc, #316]	; (8001da4 <HAL_I2C_Master_Receive+0x448>)
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f9ed 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e091      	b.n	8001d9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cec:	e042      	b.n	8001d74 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 fb00 	bl	80022f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e04c      	b.n	8001d9c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d118      	bne.n	8001d74 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f47f aec2 	bne.w	8001b02 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d9a:	2302      	movs	r3, #2
  }
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	00010004 	.word	0x00010004

08001da8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	460b      	mov	r3, r1
 8001db6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d006      	beq.n	8001dd2 <I2C_MasterRequestWrite+0x2a>
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d003      	beq.n	8001dd2 <I2C_MasterRequestWrite+0x2a>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dd0:	d108      	bne.n	8001de4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e00b      	b.n	8001dfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	2b12      	cmp	r3, #18
 8001dea:	d107      	bne.n	8001dfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f91d 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00d      	beq.n	8001e30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e22:	d103      	bne.n	8001e2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e035      	b.n	8001e9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e38:	d108      	bne.n	8001e4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e3a:	897b      	ldrh	r3, [r7, #10]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e48:	611a      	str	r2, [r3, #16]
 8001e4a:	e01b      	b.n	8001e84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e4c:	897b      	ldrh	r3, [r7, #10]
 8001e4e:	11db      	asrs	r3, r3, #7
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f003 0306 	and.w	r3, r3, #6
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f063 030f 	orn	r3, r3, #15
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <I2C_MasterRequestWrite+0xfc>)
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f943 	bl	80020f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e010      	b.n	8001e9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e7a:	897b      	ldrh	r3, [r7, #10]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <I2C_MasterRequestWrite+0x100>)
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 f933 	bl	80020f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	00010008 	.word	0x00010008
 8001ea8:	00010002 	.word	0x00010002

08001eac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ed0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d006      	beq.n	8001ee6 <I2C_MasterRequestRead+0x3a>
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d003      	beq.n	8001ee6 <I2C_MasterRequestRead+0x3a>
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ee4:	d108      	bne.n	8001ef8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e00b      	b.n	8001f10 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	2b11      	cmp	r3, #17
 8001efe:	d107      	bne.n	8001f10 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 f893 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00d      	beq.n	8001f44 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f36:	d103      	bne.n	8001f40 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e079      	b.n	8002038 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f4c:	d108      	bne.n	8001f60 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f4e:	897b      	ldrh	r3, [r7, #10]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	611a      	str	r2, [r3, #16]
 8001f5e:	e05f      	b.n	8002020 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f60:	897b      	ldrh	r3, [r7, #10]
 8001f62:	11db      	asrs	r3, r3, #7
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f003 0306 	and.w	r3, r3, #6
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f063 030f 	orn	r3, r3, #15
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	4930      	ldr	r1, [pc, #192]	; (8002040 <I2C_MasterRequestRead+0x194>)
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f8b9 	bl	80020f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e054      	b.n	8002038 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f8e:	897b      	ldrh	r3, [r7, #10]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4929      	ldr	r1, [pc, #164]	; (8002044 <I2C_MasterRequestRead+0x198>)
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f8a9 	bl	80020f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e044      	b.n	8002038 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f831 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00d      	beq.n	8002008 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ffa:	d103      	bne.n	8002004 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e017      	b.n	8002038 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002008:	897b      	ldrh	r3, [r7, #10]
 800200a:	11db      	asrs	r3, r3, #7
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f003 0306 	and.w	r3, r3, #6
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f063 030e 	orn	r3, r3, #14
 8002018:	b2da      	uxtb	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4907      	ldr	r1, [pc, #28]	; (8002044 <I2C_MasterRequestRead+0x198>)
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f865 	bl	80020f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	00010008 	.word	0x00010008
 8002044:	00010002 	.word	0x00010002

08002048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002058:	e025      	b.n	80020a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d021      	beq.n	80020a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002062:	f7fe ff85 	bl	8000f70 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d116      	bne.n	80020a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f043 0220 	orr.w	r2, r3, #32
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e023      	b.n	80020ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	0c1b      	lsrs	r3, r3, #16
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d10d      	bne.n	80020cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4013      	ands	r3, r2
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	e00c      	b.n	80020e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4013      	ands	r3, r2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf0c      	ite	eq
 80020de:	2301      	moveq	r3, #1
 80020e0:	2300      	movne	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d0b6      	beq.n	800205a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002104:	e051      	b.n	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002114:	d123      	bne.n	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002124:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800212e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f043 0204 	orr.w	r2, r3, #4
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e046      	b.n	80021ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d021      	beq.n	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002166:	f7fe ff03 	bl	8000f70 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	d302      	bcc.n	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d116      	bne.n	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f043 0220 	orr.w	r2, r3, #32
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e020      	b.n	80021ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d10c      	bne.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4013      	ands	r3, r2
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bf14      	ite	ne
 80021c6:	2301      	movne	r3, #1
 80021c8:	2300      	moveq	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	e00b      	b.n	80021e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	43da      	mvns	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4013      	ands	r3, r2
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d18d      	bne.n	8002106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002200:	e02d      	b.n	800225e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f8ce 	bl	80023a4 <I2C_IsAcknowledgeFailed>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e02d      	b.n	800226e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d021      	beq.n	800225e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221a:	f7fe fea9 	bl	8000f70 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	429a      	cmp	r2, r3
 8002228:	d302      	bcc.n	8002230 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d116      	bne.n	800225e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f043 0220 	orr.w	r2, r3, #32
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e007      	b.n	800226e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d1ca      	bne.n	8002202 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002282:	e02d      	b.n	80022e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f88d 	bl	80023a4 <I2C_IsAcknowledgeFailed>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e02d      	b.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229a:	d021      	beq.n	80022e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229c:	f7fe fe68 	bl	8000f70 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d302      	bcc.n	80022b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d116      	bne.n	80022e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f043 0220 	orr.w	r2, r3, #32
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e007      	b.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d1ca      	bne.n	8002284 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002304:	e042      	b.n	800238c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b10      	cmp	r3, #16
 8002312:	d119      	bne.n	8002348 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0210 	mvn.w	r2, #16
 800231c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e029      	b.n	800239c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002348:	f7fe fe12 	bl	8000f70 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	429a      	cmp	r2, r3
 8002356:	d302      	bcc.n	800235e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f043 0220 	orr.w	r2, r3, #32
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e007      	b.n	800239c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d1b5      	bne.n	8002306 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ba:	d11b      	bne.n	80023f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f043 0204 	orr.w	r2, r3, #4
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0cc      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002418:	4b68      	ldr	r3, [pc, #416]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d90c      	bls.n	8002440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b63      	ldr	r3, [pc, #396]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0b8      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d020      	beq.n	800248e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002458:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a58      	ldr	r2, [pc, #352]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002470:	4b53      	ldr	r3, [pc, #332]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a52      	ldr	r2, [pc, #328]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800247a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247c:	4b50      	ldr	r3, [pc, #320]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	494d      	ldr	r1, [pc, #308]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d044      	beq.n	8002524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d119      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e07f      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c2:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e06f      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d2:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e067      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f023 0203 	bic.w	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4934      	ldr	r1, [pc, #208]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f4:	f7fe fd3c 	bl	8000f70 <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fc:	f7fe fd38 	bl	8000f70 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e04f      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 020c 	and.w	r2, r3, #12
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	429a      	cmp	r2, r3
 8002522:	d1eb      	bne.n	80024fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002524:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d20c      	bcs.n	800254c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e032      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4916      	ldr	r1, [pc, #88]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d009      	beq.n	800258a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	490e      	ldr	r1, [pc, #56]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800258a:	f000 f855 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 800258e:	4601      	mov	r1, r0
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	5cd3      	ldrb	r3, [r2, r3]
 800259e:	fa21 f303 	lsr.w	r3, r1, r3
 80025a2:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_RCC_ClockConfig+0x1c8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fc9c 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023c00 	.word	0x40023c00
 80025c0:	40023800 	.word	0x40023800
 80025c4:	08009a38 	.word	0x08009a38
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000004 	.word	0x20000004

080025d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000000 	.word	0x20000000

080025e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025ec:	f7ff fff0 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 80025f0:	4601      	mov	r1, r0
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	0a9b      	lsrs	r3, r3, #10
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4a03      	ldr	r2, [pc, #12]	; (800260c <HAL_RCC_GetPCLK1Freq+0x24>)
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	08009a48 	.word	0x08009a48

08002610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002614:	f7ff ffdc 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 8002618:	4601      	mov	r1, r0
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	0b5b      	lsrs	r3, r3, #13
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4a03      	ldr	r2, [pc, #12]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	fa21 f303 	lsr.w	r3, r1, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40023800 	.word	0x40023800
 8002634:	08009a48 	.word	0x08009a48

08002638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002652:	4bc6      	ldr	r3, [pc, #792]	; (800296c <HAL_RCC_GetSysClockFreq+0x334>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b0c      	cmp	r3, #12
 800265c:	f200 817e 	bhi.w	800295c <HAL_RCC_GetSysClockFreq+0x324>
 8002660:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <HAL_RCC_GetSysClockFreq+0x30>)
 8002662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002666:	bf00      	nop
 8002668:	0800269d 	.word	0x0800269d
 800266c:	0800295d 	.word	0x0800295d
 8002670:	0800295d 	.word	0x0800295d
 8002674:	0800295d 	.word	0x0800295d
 8002678:	080026a3 	.word	0x080026a3
 800267c:	0800295d 	.word	0x0800295d
 8002680:	0800295d 	.word	0x0800295d
 8002684:	0800295d 	.word	0x0800295d
 8002688:	080026a9 	.word	0x080026a9
 800268c:	0800295d 	.word	0x0800295d
 8002690:	0800295d 	.word	0x0800295d
 8002694:	0800295d 	.word	0x0800295d
 8002698:	08002805 	.word	0x08002805
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800269c:	4bb4      	ldr	r3, [pc, #720]	; (8002970 <HAL_RCC_GetSysClockFreq+0x338>)
 800269e:	613b      	str	r3, [r7, #16]
       break;
 80026a0:	e15f      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026a2:	4bb4      	ldr	r3, [pc, #720]	; (8002974 <HAL_RCC_GetSysClockFreq+0x33c>)
 80026a4:	613b      	str	r3, [r7, #16]
      break;
 80026a6:	e15c      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a8:	4bb0      	ldr	r3, [pc, #704]	; (800296c <HAL_RCC_GetSysClockFreq+0x334>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026b2:	4bae      	ldr	r3, [pc, #696]	; (800296c <HAL_RCC_GetSysClockFreq+0x334>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d04a      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026be:	4bab      	ldr	r3, [pc, #684]	; (800296c <HAL_RCC_GetSysClockFreq+0x334>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	f04f 0400 	mov.w	r4, #0
 80026c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	ea03 0501 	and.w	r5, r3, r1
 80026d4:	ea04 0602 	and.w	r6, r4, r2
 80026d8:	4629      	mov	r1, r5
 80026da:	4632      	mov	r2, r6
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	f04f 0400 	mov.w	r4, #0
 80026e4:	0154      	lsls	r4, r2, #5
 80026e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026ea:	014b      	lsls	r3, r1, #5
 80026ec:	4619      	mov	r1, r3
 80026ee:	4622      	mov	r2, r4
 80026f0:	1b49      	subs	r1, r1, r5
 80026f2:	eb62 0206 	sbc.w	r2, r2, r6
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	f04f 0400 	mov.w	r4, #0
 80026fe:	0194      	lsls	r4, r2, #6
 8002700:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002704:	018b      	lsls	r3, r1, #6
 8002706:	1a5b      	subs	r3, r3, r1
 8002708:	eb64 0402 	sbc.w	r4, r4, r2
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	00e2      	lsls	r2, r4, #3
 8002716:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800271a:	00d9      	lsls	r1, r3, #3
 800271c:	460b      	mov	r3, r1
 800271e:	4614      	mov	r4, r2
 8002720:	195b      	adds	r3, r3, r5
 8002722:	eb44 0406 	adc.w	r4, r4, r6
 8002726:	f04f 0100 	mov.w	r1, #0
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	0262      	lsls	r2, r4, #9
 8002730:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002734:	0259      	lsls	r1, r3, #9
 8002736:	460b      	mov	r3, r1
 8002738:	4614      	mov	r4, r2
 800273a:	4618      	mov	r0, r3
 800273c:	4621      	mov	r1, r4
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f04f 0400 	mov.w	r4, #0
 8002744:	461a      	mov	r2, r3
 8002746:	4623      	mov	r3, r4
 8002748:	f7fd fdb2 	bl	80002b0 <__aeabi_uldivmod>
 800274c:	4603      	mov	r3, r0
 800274e:	460c      	mov	r4, r1
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e049      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002754:	4b85      	ldr	r3, [pc, #532]	; (800296c <HAL_RCC_GetSysClockFreq+0x334>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	099b      	lsrs	r3, r3, #6
 800275a:	f04f 0400 	mov.w	r4, #0
 800275e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	ea03 0501 	and.w	r5, r3, r1
 800276a:	ea04 0602 	and.w	r6, r4, r2
 800276e:	4629      	mov	r1, r5
 8002770:	4632      	mov	r2, r6
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	f04f 0400 	mov.w	r4, #0
 800277a:	0154      	lsls	r4, r2, #5
 800277c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002780:	014b      	lsls	r3, r1, #5
 8002782:	4619      	mov	r1, r3
 8002784:	4622      	mov	r2, r4
 8002786:	1b49      	subs	r1, r1, r5
 8002788:	eb62 0206 	sbc.w	r2, r2, r6
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	f04f 0400 	mov.w	r4, #0
 8002794:	0194      	lsls	r4, r2, #6
 8002796:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800279a:	018b      	lsls	r3, r1, #6
 800279c:	1a5b      	subs	r3, r3, r1
 800279e:	eb64 0402 	sbc.w	r4, r4, r2
 80027a2:	f04f 0100 	mov.w	r1, #0
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	00e2      	lsls	r2, r4, #3
 80027ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027b0:	00d9      	lsls	r1, r3, #3
 80027b2:	460b      	mov	r3, r1
 80027b4:	4614      	mov	r4, r2
 80027b6:	195b      	adds	r3, r3, r5
 80027b8:	eb44 0406 	adc.w	r4, r4, r6
 80027bc:	f04f 0100 	mov.w	r1, #0
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	02a2      	lsls	r2, r4, #10
 80027c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027ca:	0299      	lsls	r1, r3, #10
 80027cc:	460b      	mov	r3, r1
 80027ce:	4614      	mov	r4, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	4621      	mov	r1, r4
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f04f 0400 	mov.w	r4, #0
 80027da:	461a      	mov	r2, r3
 80027dc:	4623      	mov	r3, r4
 80027de:	f7fd fd67 	bl	80002b0 <__aeabi_uldivmod>
 80027e2:	4603      	mov	r3, r0
 80027e4:	460c      	mov	r4, r1
 80027e6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027e8:	4b60      	ldr	r3, [pc, #384]	; (800296c <HAL_RCC_GetSysClockFreq+0x334>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	0c1b      	lsrs	r3, r3, #16
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	3301      	adds	r3, #1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	613b      	str	r3, [r7, #16]
      break;
 8002802:	e0ae      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002804:	4b59      	ldr	r3, [pc, #356]	; (800296c <HAL_RCC_GetSysClockFreq+0x334>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800280c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800280e:	4b57      	ldr	r3, [pc, #348]	; (800296c <HAL_RCC_GetSysClockFreq+0x334>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d04a      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281a:	4b54      	ldr	r3, [pc, #336]	; (800296c <HAL_RCC_GetSysClockFreq+0x334>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	f04f 0400 	mov.w	r4, #0
 8002824:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	ea03 0501 	and.w	r5, r3, r1
 8002830:	ea04 0602 	and.w	r6, r4, r2
 8002834:	4629      	mov	r1, r5
 8002836:	4632      	mov	r2, r6
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	f04f 0400 	mov.w	r4, #0
 8002840:	0154      	lsls	r4, r2, #5
 8002842:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002846:	014b      	lsls	r3, r1, #5
 8002848:	4619      	mov	r1, r3
 800284a:	4622      	mov	r2, r4
 800284c:	1b49      	subs	r1, r1, r5
 800284e:	eb62 0206 	sbc.w	r2, r2, r6
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	f04f 0400 	mov.w	r4, #0
 800285a:	0194      	lsls	r4, r2, #6
 800285c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002860:	018b      	lsls	r3, r1, #6
 8002862:	1a5b      	subs	r3, r3, r1
 8002864:	eb64 0402 	sbc.w	r4, r4, r2
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	00e2      	lsls	r2, r4, #3
 8002872:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002876:	00d9      	lsls	r1, r3, #3
 8002878:	460b      	mov	r3, r1
 800287a:	4614      	mov	r4, r2
 800287c:	195b      	adds	r3, r3, r5
 800287e:	eb44 0406 	adc.w	r4, r4, r6
 8002882:	f04f 0100 	mov.w	r1, #0
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	0262      	lsls	r2, r4, #9
 800288c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002890:	0259      	lsls	r1, r3, #9
 8002892:	460b      	mov	r3, r1
 8002894:	4614      	mov	r4, r2
 8002896:	4618      	mov	r0, r3
 8002898:	4621      	mov	r1, r4
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f04f 0400 	mov.w	r4, #0
 80028a0:	461a      	mov	r2, r3
 80028a2:	4623      	mov	r3, r4
 80028a4:	f7fd fd04 	bl	80002b0 <__aeabi_uldivmod>
 80028a8:	4603      	mov	r3, r0
 80028aa:	460c      	mov	r4, r1
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e049      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b0:	4b2e      	ldr	r3, [pc, #184]	; (800296c <HAL_RCC_GetSysClockFreq+0x334>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	f04f 0400 	mov.w	r4, #0
 80028ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	ea03 0501 	and.w	r5, r3, r1
 80028c6:	ea04 0602 	and.w	r6, r4, r2
 80028ca:	4629      	mov	r1, r5
 80028cc:	4632      	mov	r2, r6
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	f04f 0400 	mov.w	r4, #0
 80028d6:	0154      	lsls	r4, r2, #5
 80028d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028dc:	014b      	lsls	r3, r1, #5
 80028de:	4619      	mov	r1, r3
 80028e0:	4622      	mov	r2, r4
 80028e2:	1b49      	subs	r1, r1, r5
 80028e4:	eb62 0206 	sbc.w	r2, r2, r6
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	f04f 0400 	mov.w	r4, #0
 80028f0:	0194      	lsls	r4, r2, #6
 80028f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028f6:	018b      	lsls	r3, r1, #6
 80028f8:	1a5b      	subs	r3, r3, r1
 80028fa:	eb64 0402 	sbc.w	r4, r4, r2
 80028fe:	f04f 0100 	mov.w	r1, #0
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	00e2      	lsls	r2, r4, #3
 8002908:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800290c:	00d9      	lsls	r1, r3, #3
 800290e:	460b      	mov	r3, r1
 8002910:	4614      	mov	r4, r2
 8002912:	195b      	adds	r3, r3, r5
 8002914:	eb44 0406 	adc.w	r4, r4, r6
 8002918:	f04f 0100 	mov.w	r1, #0
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	02a2      	lsls	r2, r4, #10
 8002922:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002926:	0299      	lsls	r1, r3, #10
 8002928:	460b      	mov	r3, r1
 800292a:	4614      	mov	r4, r2
 800292c:	4618      	mov	r0, r3
 800292e:	4621      	mov	r1, r4
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f04f 0400 	mov.w	r4, #0
 8002936:	461a      	mov	r2, r3
 8002938:	4623      	mov	r3, r4
 800293a:	f7fd fcb9 	bl	80002b0 <__aeabi_uldivmod>
 800293e:	4603      	mov	r3, r0
 8002940:	460c      	mov	r4, r1
 8002942:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_RCC_GetSysClockFreq+0x334>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0f1b      	lsrs	r3, r3, #28
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	613b      	str	r3, [r7, #16]
      break;
 800295a:	e002      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <HAL_RCC_GetSysClockFreq+0x338>)
 800295e:	613b      	str	r3, [r7, #16]
      break;
 8002960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002962:	693b      	ldr	r3, [r7, #16]
}
 8002964:	4618      	mov	r0, r3
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	00f42400 	.word	0x00f42400
 8002974:	007a1200 	.word	0x007a1200

08002978 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8083 	beq.w	8002a98 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002992:	4b95      	ldr	r3, [pc, #596]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b04      	cmp	r3, #4
 800299c:	d019      	beq.n	80029d2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800299e:	4b92      	ldr	r3, [pc, #584]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d106      	bne.n	80029b8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029aa:	4b8f      	ldr	r3, [pc, #572]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b6:	d00c      	beq.n	80029d2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b8:	4b8b      	ldr	r3, [pc, #556]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029c0:	2b0c      	cmp	r3, #12
 80029c2:	d112      	bne.n	80029ea <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c4:	4b88      	ldr	r3, [pc, #544]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d0:	d10b      	bne.n	80029ea <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d2:	4b85      	ldr	r3, [pc, #532]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d05b      	beq.n	8002a96 <HAL_RCC_OscConfig+0x11e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d157      	bne.n	8002a96 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e216      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f2:	d106      	bne.n	8002a02 <HAL_RCC_OscConfig+0x8a>
 80029f4:	4b7c      	ldr	r3, [pc, #496]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a7b      	ldr	r2, [pc, #492]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 80029fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	e01d      	b.n	8002a3e <HAL_RCC_OscConfig+0xc6>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a0a:	d10c      	bne.n	8002a26 <HAL_RCC_OscConfig+0xae>
 8002a0c:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a75      	ldr	r2, [pc, #468]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a72      	ldr	r2, [pc, #456]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	e00b      	b.n	8002a3e <HAL_RCC_OscConfig+0xc6>
 8002a26:	4b70      	ldr	r3, [pc, #448]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6f      	ldr	r2, [pc, #444]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b6d      	ldr	r3, [pc, #436]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a6c      	ldr	r2, [pc, #432]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d013      	beq.n	8002a6e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a46:	f7fe fa93 	bl	8000f70 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a4e:	f7fe fa8f 	bl	8000f70 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b64      	cmp	r3, #100	; 0x64
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e1db      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a60:	4b61      	ldr	r3, [pc, #388]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0xd6>
 8002a6c:	e014      	b.n	8002a98 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fa7f 	bl	8000f70 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a76:	f7fe fa7b 	bl	8000f70 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	; 0x64
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1c7      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a88:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0xfe>
 8002a94:	e000      	b.n	8002a98 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a96:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d06f      	beq.n	8002b84 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aa4:	4b50      	ldr	r3, [pc, #320]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d017      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ab0:	4b4d      	ldr	r3, [pc, #308]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002abc:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac8:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ad0:	2b0c      	cmp	r3, #12
 8002ad2:	d11c      	bne.n	8002b0e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad4:	4b44      	ldr	r3, [pc, #272]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d116      	bne.n	8002b0e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae0:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_OscConfig+0x180>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e18f      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af8:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4938      	ldr	r1, [pc, #224]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0c:	e03a      	b.n	8002b84 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d020      	beq.n	8002b58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b16:	4b35      	ldr	r3, [pc, #212]	; (8002bec <HAL_RCC_OscConfig+0x274>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fa28 	bl	8000f70 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b24:	f7fe fa24 	bl	8000f70 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e170      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4925      	ldr	r1, [pc, #148]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
 8002b56:	e015      	b.n	8002b84 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b58:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_RCC_OscConfig+0x274>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fa07 	bl	8000f70 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b66:	f7fe fa03 	bl	8000f70 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e14f      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d037      	beq.n	8002c00 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d016      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_RCC_OscConfig+0x278>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7fe f9e7 	bl	8000f70 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7fe f9e3 	bl	8000f70 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e12f      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_OscConfig+0x270>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x22e>
 8002bc4:	e01c      	b.n	8002c00 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_RCC_OscConfig+0x278>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bcc:	f7fe f9d0 	bl	8000f70 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd2:	e00f      	b.n	8002bf4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7fe f9cc 	bl	8000f70 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d908      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e118      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	42470000 	.word	0x42470000
 8002bf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	4b8a      	ldr	r3, [pc, #552]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e9      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8097 	beq.w	8002d3c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c12:	4b83      	ldr	r3, [pc, #524]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b7f      	ldr	r3, [pc, #508]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a7e      	ldr	r2, [pc, #504]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b79      	ldr	r3, [pc, #484]	; (8002e24 <HAL_RCC_OscConfig+0x4ac>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d118      	bne.n	8002c7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4a:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a75      	ldr	r2, [pc, #468]	; (8002e24 <HAL_RCC_OscConfig+0x4ac>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c56:	f7fe f98b 	bl	8000f70 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7fe f987 	bl	8000f70 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0d3      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b6c      	ldr	r3, [pc, #432]	; (8002e24 <HAL_RCC_OscConfig+0x4ac>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x31a>
 8002c84:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	e01c      	b.n	8002ccc <HAL_RCC_OscConfig+0x354>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x33c>
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a60      	ldr	r2, [pc, #384]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca6:	4b5e      	ldr	r3, [pc, #376]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	4a5d      	ldr	r2, [pc, #372]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0x354>
 8002cb4:	4b5a      	ldr	r3, [pc, #360]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	4a59      	ldr	r2, [pc, #356]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc0:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	4a56      	ldr	r2, [pc, #344]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d015      	beq.n	8002d00 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe f94c 	bl	8000f70 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe f948 	bl	8000f70 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e092      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf2:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ee      	beq.n	8002cdc <HAL_RCC_OscConfig+0x364>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7fe f936 	bl	8000f70 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fe f932 	bl	8000f70 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e07c      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1e:	4b40      	ldr	r3, [pc, #256]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ee      	bne.n	8002d08 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	4a3a      	ldr	r2, [pc, #232]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d068      	beq.n	8002e16 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d44:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d060      	beq.n	8002e12 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d145      	bne.n	8002de4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d58:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <HAL_RCC_OscConfig+0x4b0>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe f907 	bl	8000f70 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe f903 	bl	8000f70 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e04f      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	019b      	lsls	r3, r3, #6
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	061b      	lsls	r3, r3, #24
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	071b      	lsls	r3, r3, #28
 8002db0:	491b      	ldr	r1, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db6:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <HAL_RCC_OscConfig+0x4b0>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe f8d8 	bl	8000f70 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe f8d4 	bl	8000f70 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e020      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x44c>
 8002de2:	e018      	b.n	8002e16 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_RCC_OscConfig+0x4b0>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fe f8c1 	bl	8000f70 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df2:	f7fe f8bd 	bl	8000f70 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e009      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_OscConfig+0x4a8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x47a>
 8002e10:	e001      	b.n	8002e16 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40007000 	.word	0x40007000
 8002e28:	42470060 	.word	0x42470060

08002e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e03f      	b.n	8002ebe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fd ffb4 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	; 0x24
 8002e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f9b1 	bl	80031d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b088      	sub	sp, #32
 8002eca:	af02      	add	r7, sp, #8
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	f040 8083 	bne.w	8002fee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_UART_Transmit+0x2e>
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e07b      	b.n	8002ff0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Transmit+0x40>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e074      	b.n	8002ff0 <HAL_UART_Transmit+0x12a>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2221      	movs	r2, #33	; 0x21
 8002f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe f828 	bl	8000f70 <HAL_GetTick>
 8002f20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	88fa      	ldrh	r2, [r7, #6]
 8002f26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	88fa      	ldrh	r2, [r7, #6]
 8002f2c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002f36:	e042      	b.n	8002fbe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4e:	d122      	bne.n	8002f96 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2200      	movs	r2, #0
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f8f2 	bl	8003144 <UART_WaitOnFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e042      	b.n	8002ff0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f7c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3302      	adds	r3, #2
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	e017      	b.n	8002fbe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3301      	adds	r3, #1
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	e013      	b.n	8002fbe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f8cf 	bl	8003144 <UART_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e01f      	b.n	8002ff0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	60ba      	str	r2, [r7, #8]
 8002fb6:	781a      	ldrb	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1b7      	bne.n	8002f38 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2140      	movs	r1, #64	; 0x40
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f8b6 	bl	8003144 <UART_WaitOnFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e006      	b.n	8002ff0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e000      	b.n	8002ff0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
  }
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b20      	cmp	r3, #32
 8003016:	f040 8090 	bne.w	800313a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_UART_Receive+0x2e>
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e088      	b.n	800313c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_UART_Receive+0x40>
 8003034:	2302      	movs	r3, #2
 8003036:	e081      	b.n	800313c <HAL_UART_Receive+0x144>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2222      	movs	r2, #34	; 0x22
 800304a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800304e:	f7fd ff8f 	bl	8000f70 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003068:	e05c      	b.n	8003124 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003080:	d12b      	bne.n	80030da <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2200      	movs	r2, #0
 800308a:	2120      	movs	r1, #32
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f859 	bl	8003144 <UART_WaitOnFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e04f      	b.n	800313c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10c      	bne.n	80030c2 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	3302      	adds	r3, #2
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	e030      	b.n	8003124 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3301      	adds	r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	e024      	b.n	8003124 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2200      	movs	r2, #0
 80030e2:	2120      	movs	r1, #32
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f82d 	bl	8003144 <UART_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e023      	b.n	800313c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d108      	bne.n	800310e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	60ba      	str	r2, [r7, #8]
 8003108:	b2ca      	uxtb	r2, r1
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e00a      	b.n	8003124 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	1c59      	adds	r1, r3, #1
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d19d      	bne.n	800306a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e000      	b.n	800313c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
  }
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003154:	e02c      	b.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d028      	beq.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <UART_WaitOnFlagUntilTimeout+0x30>
 8003164:	f7fd ff04 	bl	8000f70 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	429a      	cmp	r2, r3
 8003172:	d21d      	bcs.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003182:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e00f      	b.n	80031d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4013      	ands	r3, r2
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	429a      	cmp	r2, r3
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d0c3      	beq.n	8003156 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031dc:	b085      	sub	sp, #20
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800321a:	f023 030c 	bic.w	r3, r3, #12
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	68f9      	ldr	r1, [r7, #12]
 8003224:	430b      	orrs	r3, r1
 8003226:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003246:	f040 818b 	bne.w	8003560 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4ac1      	ldr	r2, [pc, #772]	; (8003554 <UART_SetConfig+0x37c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d005      	beq.n	8003260 <UART_SetConfig+0x88>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4abf      	ldr	r2, [pc, #764]	; (8003558 <UART_SetConfig+0x380>)
 800325a:	4293      	cmp	r3, r2
 800325c:	f040 80bd 	bne.w	80033da <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003260:	f7ff f9d6 	bl	8002610 <HAL_RCC_GetPCLK2Freq>
 8003264:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	461d      	mov	r5, r3
 800326a:	f04f 0600 	mov.w	r6, #0
 800326e:	46a8      	mov	r8, r5
 8003270:	46b1      	mov	r9, r6
 8003272:	eb18 0308 	adds.w	r3, r8, r8
 8003276:	eb49 0409 	adc.w	r4, r9, r9
 800327a:	4698      	mov	r8, r3
 800327c:	46a1      	mov	r9, r4
 800327e:	eb18 0805 	adds.w	r8, r8, r5
 8003282:	eb49 0906 	adc.w	r9, r9, r6
 8003286:	f04f 0100 	mov.w	r1, #0
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003292:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003296:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800329a:	4688      	mov	r8, r1
 800329c:	4691      	mov	r9, r2
 800329e:	eb18 0005 	adds.w	r0, r8, r5
 80032a2:	eb49 0106 	adc.w	r1, r9, r6
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	461d      	mov	r5, r3
 80032ac:	f04f 0600 	mov.w	r6, #0
 80032b0:	196b      	adds	r3, r5, r5
 80032b2:	eb46 0406 	adc.w	r4, r6, r6
 80032b6:	461a      	mov	r2, r3
 80032b8:	4623      	mov	r3, r4
 80032ba:	f7fc fff9 	bl	80002b0 <__aeabi_uldivmod>
 80032be:	4603      	mov	r3, r0
 80032c0:	460c      	mov	r4, r1
 80032c2:	461a      	mov	r2, r3
 80032c4:	4ba5      	ldr	r3, [pc, #660]	; (800355c <UART_SetConfig+0x384>)
 80032c6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	461d      	mov	r5, r3
 80032d4:	f04f 0600 	mov.w	r6, #0
 80032d8:	46a9      	mov	r9, r5
 80032da:	46b2      	mov	sl, r6
 80032dc:	eb19 0309 	adds.w	r3, r9, r9
 80032e0:	eb4a 040a 	adc.w	r4, sl, sl
 80032e4:	4699      	mov	r9, r3
 80032e6:	46a2      	mov	sl, r4
 80032e8:	eb19 0905 	adds.w	r9, r9, r5
 80032ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003300:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003304:	4689      	mov	r9, r1
 8003306:	4692      	mov	sl, r2
 8003308:	eb19 0005 	adds.w	r0, r9, r5
 800330c:	eb4a 0106 	adc.w	r1, sl, r6
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	461d      	mov	r5, r3
 8003316:	f04f 0600 	mov.w	r6, #0
 800331a:	196b      	adds	r3, r5, r5
 800331c:	eb46 0406 	adc.w	r4, r6, r6
 8003320:	461a      	mov	r2, r3
 8003322:	4623      	mov	r3, r4
 8003324:	f7fc ffc4 	bl	80002b0 <__aeabi_uldivmod>
 8003328:	4603      	mov	r3, r0
 800332a:	460c      	mov	r4, r1
 800332c:	461a      	mov	r2, r3
 800332e:	4b8b      	ldr	r3, [pc, #556]	; (800355c <UART_SetConfig+0x384>)
 8003330:	fba3 1302 	umull	r1, r3, r3, r2
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	2164      	movs	r1, #100	; 0x64
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	3332      	adds	r3, #50	; 0x32
 8003342:	4a86      	ldr	r2, [pc, #536]	; (800355c <UART_SetConfig+0x384>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003350:	4498      	add	r8, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	461d      	mov	r5, r3
 8003356:	f04f 0600 	mov.w	r6, #0
 800335a:	46a9      	mov	r9, r5
 800335c:	46b2      	mov	sl, r6
 800335e:	eb19 0309 	adds.w	r3, r9, r9
 8003362:	eb4a 040a 	adc.w	r4, sl, sl
 8003366:	4699      	mov	r9, r3
 8003368:	46a2      	mov	sl, r4
 800336a:	eb19 0905 	adds.w	r9, r9, r5
 800336e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800337e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003382:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003386:	4689      	mov	r9, r1
 8003388:	4692      	mov	sl, r2
 800338a:	eb19 0005 	adds.w	r0, r9, r5
 800338e:	eb4a 0106 	adc.w	r1, sl, r6
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	461d      	mov	r5, r3
 8003398:	f04f 0600 	mov.w	r6, #0
 800339c:	196b      	adds	r3, r5, r5
 800339e:	eb46 0406 	adc.w	r4, r6, r6
 80033a2:	461a      	mov	r2, r3
 80033a4:	4623      	mov	r3, r4
 80033a6:	f7fc ff83 	bl	80002b0 <__aeabi_uldivmod>
 80033aa:	4603      	mov	r3, r0
 80033ac:	460c      	mov	r4, r1
 80033ae:	461a      	mov	r2, r3
 80033b0:	4b6a      	ldr	r3, [pc, #424]	; (800355c <UART_SetConfig+0x384>)
 80033b2:	fba3 1302 	umull	r1, r3, r3, r2
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2164      	movs	r1, #100	; 0x64
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	3332      	adds	r3, #50	; 0x32
 80033c4:	4a65      	ldr	r2, [pc, #404]	; (800355c <UART_SetConfig+0x384>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	f003 0207 	and.w	r2, r3, #7
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4442      	add	r2, r8
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	e26f      	b.n	80038ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033da:	f7ff f905 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 80033de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	461d      	mov	r5, r3
 80033e4:	f04f 0600 	mov.w	r6, #0
 80033e8:	46a8      	mov	r8, r5
 80033ea:	46b1      	mov	r9, r6
 80033ec:	eb18 0308 	adds.w	r3, r8, r8
 80033f0:	eb49 0409 	adc.w	r4, r9, r9
 80033f4:	4698      	mov	r8, r3
 80033f6:	46a1      	mov	r9, r4
 80033f8:	eb18 0805 	adds.w	r8, r8, r5
 80033fc:	eb49 0906 	adc.w	r9, r9, r6
 8003400:	f04f 0100 	mov.w	r1, #0
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800340c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003410:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003414:	4688      	mov	r8, r1
 8003416:	4691      	mov	r9, r2
 8003418:	eb18 0005 	adds.w	r0, r8, r5
 800341c:	eb49 0106 	adc.w	r1, r9, r6
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	461d      	mov	r5, r3
 8003426:	f04f 0600 	mov.w	r6, #0
 800342a:	196b      	adds	r3, r5, r5
 800342c:	eb46 0406 	adc.w	r4, r6, r6
 8003430:	461a      	mov	r2, r3
 8003432:	4623      	mov	r3, r4
 8003434:	f7fc ff3c 	bl	80002b0 <__aeabi_uldivmod>
 8003438:	4603      	mov	r3, r0
 800343a:	460c      	mov	r4, r1
 800343c:	461a      	mov	r2, r3
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <UART_SetConfig+0x384>)
 8003440:	fba3 2302 	umull	r2, r3, r3, r2
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	461d      	mov	r5, r3
 800344e:	f04f 0600 	mov.w	r6, #0
 8003452:	46a9      	mov	r9, r5
 8003454:	46b2      	mov	sl, r6
 8003456:	eb19 0309 	adds.w	r3, r9, r9
 800345a:	eb4a 040a 	adc.w	r4, sl, sl
 800345e:	4699      	mov	r9, r3
 8003460:	46a2      	mov	sl, r4
 8003462:	eb19 0905 	adds.w	r9, r9, r5
 8003466:	eb4a 0a06 	adc.w	sl, sl, r6
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003476:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800347a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800347e:	4689      	mov	r9, r1
 8003480:	4692      	mov	sl, r2
 8003482:	eb19 0005 	adds.w	r0, r9, r5
 8003486:	eb4a 0106 	adc.w	r1, sl, r6
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	461d      	mov	r5, r3
 8003490:	f04f 0600 	mov.w	r6, #0
 8003494:	196b      	adds	r3, r5, r5
 8003496:	eb46 0406 	adc.w	r4, r6, r6
 800349a:	461a      	mov	r2, r3
 800349c:	4623      	mov	r3, r4
 800349e:	f7fc ff07 	bl	80002b0 <__aeabi_uldivmod>
 80034a2:	4603      	mov	r3, r0
 80034a4:	460c      	mov	r4, r1
 80034a6:	461a      	mov	r2, r3
 80034a8:	4b2c      	ldr	r3, [pc, #176]	; (800355c <UART_SetConfig+0x384>)
 80034aa:	fba3 1302 	umull	r1, r3, r3, r2
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2164      	movs	r1, #100	; 0x64
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	3332      	adds	r3, #50	; 0x32
 80034bc:	4a27      	ldr	r2, [pc, #156]	; (800355c <UART_SetConfig+0x384>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034ca:	4498      	add	r8, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	461d      	mov	r5, r3
 80034d0:	f04f 0600 	mov.w	r6, #0
 80034d4:	46a9      	mov	r9, r5
 80034d6:	46b2      	mov	sl, r6
 80034d8:	eb19 0309 	adds.w	r3, r9, r9
 80034dc:	eb4a 040a 	adc.w	r4, sl, sl
 80034e0:	4699      	mov	r9, r3
 80034e2:	46a2      	mov	sl, r4
 80034e4:	eb19 0905 	adds.w	r9, r9, r5
 80034e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80034ec:	f04f 0100 	mov.w	r1, #0
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003500:	4689      	mov	r9, r1
 8003502:	4692      	mov	sl, r2
 8003504:	eb19 0005 	adds.w	r0, r9, r5
 8003508:	eb4a 0106 	adc.w	r1, sl, r6
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	461d      	mov	r5, r3
 8003512:	f04f 0600 	mov.w	r6, #0
 8003516:	196b      	adds	r3, r5, r5
 8003518:	eb46 0406 	adc.w	r4, r6, r6
 800351c:	461a      	mov	r2, r3
 800351e:	4623      	mov	r3, r4
 8003520:	f7fc fec6 	bl	80002b0 <__aeabi_uldivmod>
 8003524:	4603      	mov	r3, r0
 8003526:	460c      	mov	r4, r1
 8003528:	461a      	mov	r2, r3
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <UART_SetConfig+0x384>)
 800352c:	fba3 1302 	umull	r1, r3, r3, r2
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	2164      	movs	r1, #100	; 0x64
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	3332      	adds	r3, #50	; 0x32
 800353e:	4a07      	ldr	r2, [pc, #28]	; (800355c <UART_SetConfig+0x384>)
 8003540:	fba2 2303 	umull	r2, r3, r2, r3
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	f003 0207 	and.w	r2, r3, #7
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4442      	add	r2, r8
 8003550:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003552:	e1b2      	b.n	80038ba <UART_SetConfig+0x6e2>
 8003554:	40011000 	.word	0x40011000
 8003558:	40011400 	.word	0x40011400
 800355c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4ad7      	ldr	r2, [pc, #860]	; (80038c4 <UART_SetConfig+0x6ec>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d005      	beq.n	8003576 <UART_SetConfig+0x39e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4ad6      	ldr	r2, [pc, #856]	; (80038c8 <UART_SetConfig+0x6f0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	f040 80d1 	bne.w	8003718 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003576:	f7ff f84b 	bl	8002610 <HAL_RCC_GetPCLK2Freq>
 800357a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	469a      	mov	sl, r3
 8003580:	f04f 0b00 	mov.w	fp, #0
 8003584:	46d0      	mov	r8, sl
 8003586:	46d9      	mov	r9, fp
 8003588:	eb18 0308 	adds.w	r3, r8, r8
 800358c:	eb49 0409 	adc.w	r4, r9, r9
 8003590:	4698      	mov	r8, r3
 8003592:	46a1      	mov	r9, r4
 8003594:	eb18 080a 	adds.w	r8, r8, sl
 8003598:	eb49 090b 	adc.w	r9, r9, fp
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035b0:	4688      	mov	r8, r1
 80035b2:	4691      	mov	r9, r2
 80035b4:	eb1a 0508 	adds.w	r5, sl, r8
 80035b8:	eb4b 0609 	adc.w	r6, fp, r9
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4619      	mov	r1, r3
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	f04f 0400 	mov.w	r4, #0
 80035ce:	0094      	lsls	r4, r2, #2
 80035d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035d4:	008b      	lsls	r3, r1, #2
 80035d6:	461a      	mov	r2, r3
 80035d8:	4623      	mov	r3, r4
 80035da:	4628      	mov	r0, r5
 80035dc:	4631      	mov	r1, r6
 80035de:	f7fc fe67 	bl	80002b0 <__aeabi_uldivmod>
 80035e2:	4603      	mov	r3, r0
 80035e4:	460c      	mov	r4, r1
 80035e6:	461a      	mov	r2, r3
 80035e8:	4bb8      	ldr	r3, [pc, #736]	; (80038cc <UART_SetConfig+0x6f4>)
 80035ea:	fba3 2302 	umull	r2, r3, r3, r2
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	469b      	mov	fp, r3
 80035f8:	f04f 0c00 	mov.w	ip, #0
 80035fc:	46d9      	mov	r9, fp
 80035fe:	46e2      	mov	sl, ip
 8003600:	eb19 0309 	adds.w	r3, r9, r9
 8003604:	eb4a 040a 	adc.w	r4, sl, sl
 8003608:	4699      	mov	r9, r3
 800360a:	46a2      	mov	sl, r4
 800360c:	eb19 090b 	adds.w	r9, r9, fp
 8003610:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003620:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003624:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003628:	4689      	mov	r9, r1
 800362a:	4692      	mov	sl, r2
 800362c:	eb1b 0509 	adds.w	r5, fp, r9
 8003630:	eb4c 060a 	adc.w	r6, ip, sl
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4619      	mov	r1, r3
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f04f 0400 	mov.w	r4, #0
 8003646:	0094      	lsls	r4, r2, #2
 8003648:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800364c:	008b      	lsls	r3, r1, #2
 800364e:	461a      	mov	r2, r3
 8003650:	4623      	mov	r3, r4
 8003652:	4628      	mov	r0, r5
 8003654:	4631      	mov	r1, r6
 8003656:	f7fc fe2b 	bl	80002b0 <__aeabi_uldivmod>
 800365a:	4603      	mov	r3, r0
 800365c:	460c      	mov	r4, r1
 800365e:	461a      	mov	r2, r3
 8003660:	4b9a      	ldr	r3, [pc, #616]	; (80038cc <UART_SetConfig+0x6f4>)
 8003662:	fba3 1302 	umull	r1, r3, r3, r2
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2164      	movs	r1, #100	; 0x64
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	3332      	adds	r3, #50	; 0x32
 8003674:	4a95      	ldr	r2, [pc, #596]	; (80038cc <UART_SetConfig+0x6f4>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003680:	4498      	add	r8, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	469b      	mov	fp, r3
 8003686:	f04f 0c00 	mov.w	ip, #0
 800368a:	46d9      	mov	r9, fp
 800368c:	46e2      	mov	sl, ip
 800368e:	eb19 0309 	adds.w	r3, r9, r9
 8003692:	eb4a 040a 	adc.w	r4, sl, sl
 8003696:	4699      	mov	r9, r3
 8003698:	46a2      	mov	sl, r4
 800369a:	eb19 090b 	adds.w	r9, r9, fp
 800369e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036a2:	f04f 0100 	mov.w	r1, #0
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036b6:	4689      	mov	r9, r1
 80036b8:	4692      	mov	sl, r2
 80036ba:	eb1b 0509 	adds.w	r5, fp, r9
 80036be:	eb4c 060a 	adc.w	r6, ip, sl
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	4619      	mov	r1, r3
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	f04f 0400 	mov.w	r4, #0
 80036d4:	0094      	lsls	r4, r2, #2
 80036d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036da:	008b      	lsls	r3, r1, #2
 80036dc:	461a      	mov	r2, r3
 80036de:	4623      	mov	r3, r4
 80036e0:	4628      	mov	r0, r5
 80036e2:	4631      	mov	r1, r6
 80036e4:	f7fc fde4 	bl	80002b0 <__aeabi_uldivmod>
 80036e8:	4603      	mov	r3, r0
 80036ea:	460c      	mov	r4, r1
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b77      	ldr	r3, [pc, #476]	; (80038cc <UART_SetConfig+0x6f4>)
 80036f0:	fba3 1302 	umull	r1, r3, r3, r2
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	2164      	movs	r1, #100	; 0x64
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	3332      	adds	r3, #50	; 0x32
 8003702:	4a72      	ldr	r2, [pc, #456]	; (80038cc <UART_SetConfig+0x6f4>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	f003 020f 	and.w	r2, r3, #15
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4442      	add	r2, r8
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	e0d0      	b.n	80038ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003718:	f7fe ff66 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 800371c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	469a      	mov	sl, r3
 8003722:	f04f 0b00 	mov.w	fp, #0
 8003726:	46d0      	mov	r8, sl
 8003728:	46d9      	mov	r9, fp
 800372a:	eb18 0308 	adds.w	r3, r8, r8
 800372e:	eb49 0409 	adc.w	r4, r9, r9
 8003732:	4698      	mov	r8, r3
 8003734:	46a1      	mov	r9, r4
 8003736:	eb18 080a 	adds.w	r8, r8, sl
 800373a:	eb49 090b 	adc.w	r9, r9, fp
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800374a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800374e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003752:	4688      	mov	r8, r1
 8003754:	4691      	mov	r9, r2
 8003756:	eb1a 0508 	adds.w	r5, sl, r8
 800375a:	eb4b 0609 	adc.w	r6, fp, r9
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4619      	mov	r1, r3
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	f04f 0400 	mov.w	r4, #0
 8003770:	0094      	lsls	r4, r2, #2
 8003772:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003776:	008b      	lsls	r3, r1, #2
 8003778:	461a      	mov	r2, r3
 800377a:	4623      	mov	r3, r4
 800377c:	4628      	mov	r0, r5
 800377e:	4631      	mov	r1, r6
 8003780:	f7fc fd96 	bl	80002b0 <__aeabi_uldivmod>
 8003784:	4603      	mov	r3, r0
 8003786:	460c      	mov	r4, r1
 8003788:	461a      	mov	r2, r3
 800378a:	4b50      	ldr	r3, [pc, #320]	; (80038cc <UART_SetConfig+0x6f4>)
 800378c:	fba3 2302 	umull	r2, r3, r3, r2
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	469b      	mov	fp, r3
 800379a:	f04f 0c00 	mov.w	ip, #0
 800379e:	46d9      	mov	r9, fp
 80037a0:	46e2      	mov	sl, ip
 80037a2:	eb19 0309 	adds.w	r3, r9, r9
 80037a6:	eb4a 040a 	adc.w	r4, sl, sl
 80037aa:	4699      	mov	r9, r3
 80037ac:	46a2      	mov	sl, r4
 80037ae:	eb19 090b 	adds.w	r9, r9, fp
 80037b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037ca:	4689      	mov	r9, r1
 80037cc:	4692      	mov	sl, r2
 80037ce:	eb1b 0509 	adds.w	r5, fp, r9
 80037d2:	eb4c 060a 	adc.w	r6, ip, sl
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4619      	mov	r1, r3
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	f04f 0400 	mov.w	r4, #0
 80037e8:	0094      	lsls	r4, r2, #2
 80037ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037ee:	008b      	lsls	r3, r1, #2
 80037f0:	461a      	mov	r2, r3
 80037f2:	4623      	mov	r3, r4
 80037f4:	4628      	mov	r0, r5
 80037f6:	4631      	mov	r1, r6
 80037f8:	f7fc fd5a 	bl	80002b0 <__aeabi_uldivmod>
 80037fc:	4603      	mov	r3, r0
 80037fe:	460c      	mov	r4, r1
 8003800:	461a      	mov	r2, r3
 8003802:	4b32      	ldr	r3, [pc, #200]	; (80038cc <UART_SetConfig+0x6f4>)
 8003804:	fba3 1302 	umull	r1, r3, r3, r2
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	2164      	movs	r1, #100	; 0x64
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	3332      	adds	r3, #50	; 0x32
 8003816:	4a2d      	ldr	r2, [pc, #180]	; (80038cc <UART_SetConfig+0x6f4>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003822:	4498      	add	r8, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	469b      	mov	fp, r3
 8003828:	f04f 0c00 	mov.w	ip, #0
 800382c:	46d9      	mov	r9, fp
 800382e:	46e2      	mov	sl, ip
 8003830:	eb19 0309 	adds.w	r3, r9, r9
 8003834:	eb4a 040a 	adc.w	r4, sl, sl
 8003838:	4699      	mov	r9, r3
 800383a:	46a2      	mov	sl, r4
 800383c:	eb19 090b 	adds.w	r9, r9, fp
 8003840:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003844:	f04f 0100 	mov.w	r1, #0
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003850:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003854:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003858:	4689      	mov	r9, r1
 800385a:	4692      	mov	sl, r2
 800385c:	eb1b 0509 	adds.w	r5, fp, r9
 8003860:	eb4c 060a 	adc.w	r6, ip, sl
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4619      	mov	r1, r3
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	f04f 0400 	mov.w	r4, #0
 8003876:	0094      	lsls	r4, r2, #2
 8003878:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800387c:	008b      	lsls	r3, r1, #2
 800387e:	461a      	mov	r2, r3
 8003880:	4623      	mov	r3, r4
 8003882:	4628      	mov	r0, r5
 8003884:	4631      	mov	r1, r6
 8003886:	f7fc fd13 	bl	80002b0 <__aeabi_uldivmod>
 800388a:	4603      	mov	r3, r0
 800388c:	460c      	mov	r4, r1
 800388e:	461a      	mov	r2, r3
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <UART_SetConfig+0x6f4>)
 8003892:	fba3 1302 	umull	r1, r3, r3, r2
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2164      	movs	r1, #100	; 0x64
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	3332      	adds	r3, #50	; 0x32
 80038a4:	4a09      	ldr	r2, [pc, #36]	; (80038cc <UART_SetConfig+0x6f4>)
 80038a6:	fba2 2303 	umull	r2, r3, r2, r3
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	f003 020f 	and.w	r2, r3, #15
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4442      	add	r2, r8
 80038b6:	609a      	str	r2, [r3, #8]
}
 80038b8:	e7ff      	b.n	80038ba <UART_SetConfig+0x6e2>
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c4:	40011000 	.word	0x40011000
 80038c8:	40011400 	.word	0x40011400
 80038cc:	51eb851f 	.word	0x51eb851f

080038d0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80038de:	6839      	ldr	r1, [r7, #0]
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f001 fcce 	bl	8005282 <VL53L0X_get_offset_calibration_data_micro_meter>
 80038e6:	4603      	mov	r3, r0
 80038e8:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80038ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80038f8:	b5b0      	push	{r4, r5, r7, lr}
 80038fa:	b096      	sub	sp, #88	; 0x58
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003900:	2300      	movs	r3, #0
 8003902:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8003906:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800390a:	2b00      	cmp	r3, #0
 800390c:	d107      	bne.n	800391e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800390e:	2200      	movs	r2, #0
 8003910:	2188      	movs	r1, #136	; 0x88
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f004 fed0 	bl	80086b8 <VL53L0X_WrByte>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800392c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003936:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a9e      	ldr	r2, [pc, #632]	; (8003bb8 <VL53L0X_DataInit+0x2c0>)
 800393e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a9d      	ldr	r2, [pc, #628]	; (8003bbc <VL53L0X_DataInit+0x2c4>)
 8003946:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	4619      	mov	r1, r3
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fab4 	bl	8003ec4 <VL53L0X_GetDeviceParameters>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8003962:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003966:	2b00      	cmp	r3, #0
 8003968:	d112      	bne.n	8003990 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800396a:	2300      	movs	r3, #0
 800396c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800396e:	2300      	movs	r3, #0
 8003970:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f103 0410 	add.w	r4, r3, #16
 8003978:	f107 0510 	add.w	r5, r7, #16
 800397c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800397e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003988:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800398c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2264      	movs	r2, #100	; 0x64
 8003994:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800399e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039a8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80039b2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80039be:	2201      	movs	r2, #1
 80039c0:	2180      	movs	r1, #128	; 0x80
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f004 fe78 	bl	80086b8 <VL53L0X_WrByte>
 80039c8:	4603      	mov	r3, r0
 80039ca:	461a      	mov	r2, r3
 80039cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80039d6:	2201      	movs	r2, #1
 80039d8:	21ff      	movs	r1, #255	; 0xff
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f004 fe6c 	bl	80086b8 <VL53L0X_WrByte>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461a      	mov	r2, r3
 80039e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2100      	movs	r1, #0
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f004 fe60 	bl	80086b8 <VL53L0X_WrByte>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461a      	mov	r2, r3
 80039fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8003a06:	f107 030f 	add.w	r3, r7, #15
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2191      	movs	r1, #145	; 0x91
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f004 fed4 	bl	80087bc <VL53L0X_RdByte>
 8003a14:	4603      	mov	r3, r0
 8003a16:	461a      	mov	r2, r3
 8003a18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f004 fe42 	bl	80086b8 <VL53L0X_WrByte>
 8003a34:	4603      	mov	r3, r0
 8003a36:	461a      	mov	r2, r3
 8003a38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003a42:	2200      	movs	r2, #0
 8003a44:	21ff      	movs	r1, #255	; 0xff
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f004 fe36 	bl	80086b8 <VL53L0X_WrByte>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f004 fe2a 	bl	80086b8 <VL53L0X_WrByte>
 8003a64:	4603      	mov	r3, r0
 8003a66:	461a      	mov	r2, r3
 8003a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003a72:	2300      	movs	r3, #0
 8003a74:	653b      	str	r3, [r7, #80]	; 0x50
 8003a76:	e014      	b.n	8003aa2 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8003a78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d114      	bne.n	8003aaa <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2201      	movs	r2, #1
 8003a86:	4619      	mov	r1, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fd43 	bl	8004514 <VL53L0X_SetLimitCheckEnable>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8003aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	dde7      	ble.n	8003a78 <VL53L0X_DataInit+0x180>
 8003aa8:	e000      	b.n	8003aac <VL53L0X_DataInit+0x1b4>
		else
			break;
 8003aaa:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8003aac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d107      	bne.n	8003ac4 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fd2b 	bl	8004514 <VL53L0X_SetLimitCheckEnable>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003ac4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d107      	bne.n	8003adc <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003acc:	2200      	movs	r2, #0
 8003ace:	2103      	movs	r1, #3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fd1f 	bl	8004514 <VL53L0X_SetLimitCheckEnable>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003adc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d107      	bne.n	8003af4 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2104      	movs	r1, #4
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fd13 	bl	8004514 <VL53L0X_SetLimitCheckEnable>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003af4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003afc:	2200      	movs	r2, #0
 8003afe:	2105      	movs	r1, #5
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fd07 	bl	8004514 <VL53L0X_SetLimitCheckEnable>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003b0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d108      	bne.n	8003b26 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003b14:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8003b18:	2100      	movs	r1, #0
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fdaa 	bl	8004674 <VL53L0X_SetLimitCheckValue>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003b26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d108      	bne.n	8003b40 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b32:	2101      	movs	r1, #1
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fd9d 	bl	8004674 <VL53L0X_SetLimitCheckValue>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d108      	bne.n	8003b5a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003b48:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fd90 	bl	8004674 <VL53L0X_SetLimitCheckValue>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003b62:	2200      	movs	r2, #0
 8003b64:	2103      	movs	r1, #3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fd84 	bl	8004674 <VL53L0X_SetLimitCheckValue>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b72:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10f      	bne.n	8003b9a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	22ff      	movs	r2, #255	; 0xff
 8003b7e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003b82:	22ff      	movs	r2, #255	; 0xff
 8003b84:	2101      	movs	r1, #1
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f004 fd96 	bl	80086b8 <VL53L0X_WrByte>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8003b9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8003baa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3758      	adds	r7, #88	; 0x58
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	00016b85 	.word	0x00016b85
 8003bbc:	000970a4 	.word	0x000970a4

08003bc0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8003bc0:	b5b0      	push	{r4, r5, r7, lr}
 8003bc2:	b09e      	sub	sp, #120	; 0x78
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003bce:	f107 031c 	add.w	r3, r7, #28
 8003bd2:	2240      	movs	r2, #64	; 0x40
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f004 fed3 	bl	8008982 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f002 fa95 	bl	800612e <VL53L0X_get_info_from_device>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8003c10:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003c18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003c1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d80d      	bhi.n	8003c40 <VL53L0X_StaticInit+0x80>
 8003c24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d102      	bne.n	8003c32 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d806      	bhi.n	8003c40 <VL53L0X_StaticInit+0x80>
 8003c32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10e      	bne.n	8003c58 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	d90b      	bls.n	8003c58 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003c40:	f107 0218 	add.w	r2, r7, #24
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	4619      	mov	r1, r3
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f001 fd14 	bl	8005678 <VL53L0X_perform_ref_spad_management>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003c56:	e009      	b.n	8003c6c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003c58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f001 ff15 	bl	8005a90 <VL53L0X_set_reference_spads>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003c6c:	4b94      	ldr	r3, [pc, #592]	; (8003ec0 <VL53L0X_StaticInit+0x300>)
 8003c6e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003c70:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10f      	bne.n	8003c98 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003c7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003c82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d104      	bne.n	8003c94 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003c90:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c92:	e001      	b.n	8003c98 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8003c94:	4b8a      	ldr	r3, [pc, #552]	; (8003ec0 <VL53L0X_StaticInit+0x300>)
 8003c96:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003c98:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d106      	bne.n	8003cae <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003ca0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f003 fde8 	bl	8007878 <VL53L0X_load_tuning_settings>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003cae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	2304      	movs	r3, #4
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f001 f90d 	bl	8004ee0 <VL53L0X_SetGpioConfig>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003ccc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d121      	bne.n	8003d18 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	21ff      	movs	r1, #255	; 0xff
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f004 fced 	bl	80086b8 <VL53L0X_WrByte>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003ce4:	f107 031a 	add.w	r3, r7, #26
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2184      	movs	r1, #132	; 0x84
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f004 fd8f 	bl	8008810 <VL53L0X_RdWord>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003d00:	2200      	movs	r2, #0
 8003d02:	21ff      	movs	r1, #255	; 0xff
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f004 fcd7 	bl	80086b8 <VL53L0X_WrByte>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003d18:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003d20:	8b7b      	ldrh	r3, [r7, #26]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	461a      	mov	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003d2c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d108      	bne.n	8003d46 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003d34:	f107 031c 	add.w	r3, r7, #28
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f8c2 	bl	8003ec4 <VL53L0X_GetDeviceParameters>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8003d46:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d110      	bne.n	8003d70 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003d4e:	f107 0319 	add.w	r3, r7, #25
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f9a0 	bl	800409a <VL53L0X_GetFractionEnable>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003d60:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d103      	bne.n	8003d70 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003d68:	7e7a      	ldrb	r2, [r7, #25]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003d70:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10e      	bne.n	8003d96 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f103 0410 	add.w	r4, r3, #16
 8003d7e:	f107 051c 	add.w	r5, r7, #28
 8003d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003d92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8003d96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d111      	bne.n	8003dc2 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003d9e:	f107 0319 	add.w	r3, r7, #25
 8003da2:	461a      	mov	r2, r3
 8003da4:	2101      	movs	r1, #1
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f004 fd08 	bl	80087bc <VL53L0X_RdByte>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003db2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d103      	bne.n	8003dc2 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003dba:	7e7a      	ldrb	r2, [r7, #25]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003dc2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2100      	movs	r1, #0
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f9d8 	bl	8004184 <VL53L0X_SetSequenceStepEnable>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003dda:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d107      	bne.n	8003df2 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003de2:	2200      	movs	r2, #0
 8003de4:	2102      	movs	r1, #2
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f9cc 	bl	8004184 <VL53L0X_SetSequenceStepEnable>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003df2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d103      	bne.n	8003e02 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e02:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003e0a:	f107 0313 	add.w	r3, r7, #19
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2100      	movs	r1, #0
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f99e 	bl	8004154 <VL53L0X_GetVcselPulsePeriod>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d103      	bne.n	8003e2e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003e26:	7cfa      	ldrb	r2, [r7, #19]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003e36:	f107 0313 	add.w	r3, r7, #19
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f988 	bl	8004154 <VL53L0X_GetVcselPulsePeriod>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003e52:	7cfa      	ldrb	r2, [r7, #19]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e5a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8003e62:	f107 030c 	add.w	r3, r7, #12
 8003e66:	461a      	mov	r2, r3
 8003e68:	2103      	movs	r1, #3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f002 fee0 	bl	8006c30 <get_sequence_step_timeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e86:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8003e8e:	f107 030c 	add.w	r3, r7, #12
 8003e92:	461a      	mov	r2, r3
 8003e94:	2104      	movs	r1, #4
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f002 feca 	bl	8006c30 <get_sequence_step_timeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003ea2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d103      	bne.n	8003eb2 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003eb2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3770      	adds	r7, #112	; 0x70
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	2000000c 	.word	0x2000000c

08003ec4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f8cc 	bl	8004074 <VL53L0X_GetDeviceMode>
 8003edc:	4603      	mov	r3, r0
 8003ede:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d107      	bne.n	8003ef8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	3308      	adds	r3, #8
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa94 	bl	800441c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2200      	movs	r2, #0
 8003f04:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d107      	bne.n	8003f1e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	3310      	adds	r3, #16
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 faca 	bl	80044ae <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d107      	bne.n	8003f36 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	3314      	adds	r3, #20
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fccf 	bl	80038d0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003f32:	4603      	mov	r3, r0
 8003f34:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d134      	bne.n	8003fa8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	e02a      	b.n	8003f9a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d12a      	bne.n	8003fa2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	b299      	uxth	r1, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	3308      	adds	r3, #8
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	4413      	add	r3, r2
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fbea 	bl	8004738 <VL53L0X_GetLimitCheckValue>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d117      	bne.n	8003fa6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	b299      	uxth	r1, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	3318      	adds	r3, #24
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	4413      	add	r3, r2
 8003f82:	461a      	mov	r2, r3
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fb51 	bl	800462c <VL53L0X_GetLimitCheckEnable>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	3301      	adds	r3, #1
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	ddd1      	ble.n	8003f44 <VL53L0X_GetDeviceParameters+0x80>
 8003fa0:	e002      	b.n	8003fa8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003fa6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d107      	bne.n	8003fc0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	333c      	adds	r3, #60	; 0x3c
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fc4c 	bl	8004854 <VL53L0X_GetWrapAroundCheckEnable>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f895 	bl	80040fe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	2b15      	cmp	r3, #21
 8003ff8:	d832      	bhi.n	8004060 <VL53L0X_SetDeviceMode+0x7c>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <VL53L0X_SetDeviceMode+0x1c>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004059 	.word	0x08004059
 8004004:	08004059 	.word	0x08004059
 8004008:	08004061 	.word	0x08004061
 800400c:	08004059 	.word	0x08004059
 8004010:	08004061 	.word	0x08004061
 8004014:	08004061 	.word	0x08004061
 8004018:	08004061 	.word	0x08004061
 800401c:	08004061 	.word	0x08004061
 8004020:	08004061 	.word	0x08004061
 8004024:	08004061 	.word	0x08004061
 8004028:	08004061 	.word	0x08004061
 800402c:	08004061 	.word	0x08004061
 8004030:	08004061 	.word	0x08004061
 8004034:	08004061 	.word	0x08004061
 8004038:	08004061 	.word	0x08004061
 800403c:	08004061 	.word	0x08004061
 8004040:	08004061 	.word	0x08004061
 8004044:	08004061 	.word	0x08004061
 8004048:	08004061 	.word	0x08004061
 800404c:	08004061 	.word	0x08004061
 8004050:	08004059 	.word	0x08004059
 8004054:	08004059 	.word	0x08004059
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	78fa      	ldrb	r2, [r7, #3]
 800405c:	741a      	strb	r2, [r3, #16]
		break;
 800405e:	e001      	b.n	8004064 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004060:	23f8      	movs	r3, #248	; 0xf8
 8004062:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004064:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	7c1a      	ldrb	r2, [r3, #16]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800408a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	2109      	movs	r1, #9
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f004 fb85 	bl	80087bc <VL53L0X_RdByte>
 80040b2:	4603      	mov	r3, r0
 80040b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80040b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80040cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80040e6:	6839      	ldr	r1, [r7, #0]
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f003 fa34 	bl	8007556 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80040ee:	4603      	mov	r3, r0
 80040f0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80040f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004108:	2300      	movs	r3, #0
 800410a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800410c:	6839      	ldr	r1, [r7, #0]
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f003 fb01 	bl	8007716 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8004114:	4603      	mov	r3, r0
 8004116:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8004118:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	70fb      	strb	r3, [r7, #3]
 8004130:	4613      	mov	r3, r2
 8004132:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004134:	2300      	movs	r3, #0
 8004136:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8004138:	78ba      	ldrb	r2, [r7, #2]
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	4619      	mov	r1, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f002 ff49 	bl	8006fd6 <VL53L0X_set_vcsel_pulse_period>
 8004144:	4603      	mov	r3, r0
 8004146:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004148:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	460b      	mov	r3, r1
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004162:	2300      	movs	r3, #0
 8004164:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8004166:	7afb      	ldrb	r3, [r7, #11]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	4619      	mov	r1, r3
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f003 f9bb 	bl	80074e8 <VL53L0X_get_vcsel_pulse_period>
 8004172:	4603      	mov	r3, r0
 8004174:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004176:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
 8004190:	4613      	mov	r3, r2
 8004192:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004194:	2300      	movs	r3, #0
 8004196:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80041a0:	f107 030f 	add.w	r3, r7, #15
 80041a4:	461a      	mov	r2, r3
 80041a6:	2101      	movs	r1, #1
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f004 fb07 	bl	80087bc <VL53L0X_RdByte>
 80041ae:	4603      	mov	r3, r0
 80041b0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80041b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d15a      	bne.n	8004274 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80041be:	78bb      	ldrb	r3, [r7, #2]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d12b      	bne.n	800421c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d825      	bhi.n	8004216 <VL53L0X_SetSequenceStepEnable+0x92>
 80041ca:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041e5 	.word	0x080041e5
 80041d4:	080041ef 	.word	0x080041ef
 80041d8:	080041f9 	.word	0x080041f9
 80041dc:	08004203 	.word	0x08004203
 80041e0:	0800420d 	.word	0x0800420d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80041e4:	7dbb      	ldrb	r3, [r7, #22]
 80041e6:	f043 0310 	orr.w	r3, r3, #16
 80041ea:	75bb      	strb	r3, [r7, #22]
				break;
 80041ec:	e043      	b.n	8004276 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80041ee:	7dbb      	ldrb	r3, [r7, #22]
 80041f0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80041f4:	75bb      	strb	r3, [r7, #22]
				break;
 80041f6:	e03e      	b.n	8004276 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80041f8:	7dbb      	ldrb	r3, [r7, #22]
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	75bb      	strb	r3, [r7, #22]
				break;
 8004200:	e039      	b.n	8004276 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8004202:	7dbb      	ldrb	r3, [r7, #22]
 8004204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004208:	75bb      	strb	r3, [r7, #22]
				break;
 800420a:	e034      	b.n	8004276 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800420c:	7dbb      	ldrb	r3, [r7, #22]
 800420e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004212:	75bb      	strb	r3, [r7, #22]
				break;
 8004214:	e02f      	b.n	8004276 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004216:	23fc      	movs	r3, #252	; 0xfc
 8004218:	75fb      	strb	r3, [r7, #23]
 800421a:	e02c      	b.n	8004276 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	2b04      	cmp	r3, #4
 8004220:	d825      	bhi.n	800426e <VL53L0X_SetSequenceStepEnable+0xea>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	0800423d 	.word	0x0800423d
 800422c:	08004247 	.word	0x08004247
 8004230:	08004251 	.word	0x08004251
 8004234:	0800425b 	.word	0x0800425b
 8004238:	08004265 	.word	0x08004265
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800423c:	7dbb      	ldrb	r3, [r7, #22]
 800423e:	f023 0310 	bic.w	r3, r3, #16
 8004242:	75bb      	strb	r3, [r7, #22]
				break;
 8004244:	e017      	b.n	8004276 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8004246:	7dbb      	ldrb	r3, [r7, #22]
 8004248:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800424c:	75bb      	strb	r3, [r7, #22]
				break;
 800424e:	e012      	b.n	8004276 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8004250:	7dbb      	ldrb	r3, [r7, #22]
 8004252:	f023 0304 	bic.w	r3, r3, #4
 8004256:	75bb      	strb	r3, [r7, #22]
				break;
 8004258:	e00d      	b.n	8004276 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800425a:	7dbb      	ldrb	r3, [r7, #22]
 800425c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004260:	75bb      	strb	r3, [r7, #22]
				break;
 8004262:	e008      	b.n	8004276 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004264:	7dbb      	ldrb	r3, [r7, #22]
 8004266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426a:	75bb      	strb	r3, [r7, #22]
				break;
 800426c:	e003      	b.n	8004276 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800426e:	23fc      	movs	r3, #252	; 0xfc
 8004270:	75fb      	strb	r3, [r7, #23]
 8004272:	e000      	b.n	8004276 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8004274:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	7dba      	ldrb	r2, [r7, #22]
 800427a:	429a      	cmp	r2, r3
 800427c:	d01e      	beq.n	80042bc <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800427e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d107      	bne.n	8004296 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8004286:	7dbb      	ldrb	r3, [r7, #22]
 8004288:	461a      	mov	r2, r3
 800428a:	2101      	movs	r1, #1
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f004 fa13 	bl	80086b8 <VL53L0X_WrByte>
 8004292:	4603      	mov	r3, r0
 8004294:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8004296:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	7dba      	ldrb	r2, [r7, #22]
 80042a2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80042a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80042b4:	6939      	ldr	r1, [r7, #16]
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ff0e 	bl	80040d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80042bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	607b      	str	r3, [r7, #4]
 80042d2:	460b      	mov	r3, r1
 80042d4:	72fb      	strb	r3, [r7, #11]
 80042d6:	4613      	mov	r3, r2
 80042d8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042da:	2300      	movs	r3, #0
 80042dc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80042e4:	7afb      	ldrb	r3, [r7, #11]
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d836      	bhi.n	8004358 <sequence_step_enabled+0x90>
 80042ea:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <sequence_step_enabled+0x28>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	08004305 	.word	0x08004305
 80042f4:	08004317 	.word	0x08004317
 80042f8:	08004329 	.word	0x08004329
 80042fc:	0800433b 	.word	0x0800433b
 8004300:	0800434d 	.word	0x0800434d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004304:	7abb      	ldrb	r3, [r7, #10]
 8004306:	111b      	asrs	r3, r3, #4
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	b2da      	uxtb	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	701a      	strb	r2, [r3, #0]
		break;
 8004314:	e022      	b.n	800435c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004316:	7abb      	ldrb	r3, [r7, #10]
 8004318:	10db      	asrs	r3, r3, #3
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	b2da      	uxtb	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	701a      	strb	r2, [r3, #0]
		break;
 8004326:	e019      	b.n	800435c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004328:	7abb      	ldrb	r3, [r7, #10]
 800432a:	109b      	asrs	r3, r3, #2
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	b2da      	uxtb	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	701a      	strb	r2, [r3, #0]
		break;
 8004338:	e010      	b.n	800435c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800433a:	7abb      	ldrb	r3, [r7, #10]
 800433c:	119b      	asrs	r3, r3, #6
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	b2da      	uxtb	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	701a      	strb	r2, [r3, #0]
		break;
 800434a:	e007      	b.n	800435c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800434c:	7abb      	ldrb	r3, [r7, #10]
 800434e:	09db      	lsrs	r3, r3, #7
 8004350:	b2da      	uxtb	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	701a      	strb	r2, [r3, #0]
		break;
 8004356:	e001      	b.n	800435c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004358:	23fc      	movs	r3, #252	; 0xfc
 800435a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800435c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004360:	4618      	mov	r0, r3
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800437e:	f107 030e 	add.w	r3, r7, #14
 8004382:	461a      	mov	r2, r3
 8004384:	2101      	movs	r1, #1
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f004 fa18 	bl	80087bc <VL53L0X_RdByte>
 800438c:	4603      	mov	r3, r0
 800438e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d107      	bne.n	80043a8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004398:	7bba      	ldrb	r2, [r7, #14]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2100      	movs	r1, #0
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff ff92 	bl	80042c8 <sequence_step_enabled>
 80043a4:	4603      	mov	r3, r0
 80043a6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80043a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d108      	bne.n	80043c2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80043b0:	7bba      	ldrb	r2, [r7, #14]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	3302      	adds	r3, #2
 80043b6:	2101      	movs	r1, #1
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff ff85 	bl	80042c8 <sequence_step_enabled>
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80043c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80043ca:	7bba      	ldrb	r2, [r7, #14]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	3301      	adds	r3, #1
 80043d0:	2102      	movs	r1, #2
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ff78 	bl	80042c8 <sequence_step_enabled>
 80043d8:	4603      	mov	r3, r0
 80043da:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80043dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d108      	bne.n	80043f6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80043e4:	7bba      	ldrb	r2, [r7, #14]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	3303      	adds	r3, #3
 80043ea:	2103      	movs	r1, #3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff ff6b 	bl	80042c8 <sequence_step_enabled>
 80043f2:	4603      	mov	r3, r0
 80043f4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80043f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d108      	bne.n	8004410 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80043fe:	7bba      	ldrb	r2, [r7, #14]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	3304      	adds	r3, #4
 8004404:	2104      	movs	r1, #4
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff ff5e 	bl	80042c8 <sequence_step_enabled>
 800440c:	4603      	mov	r3, r0
 800440e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800442a:	f107 030c 	add.w	r3, r7, #12
 800442e:	461a      	mov	r2, r3
 8004430:	21f8      	movs	r1, #248	; 0xf8
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f004 f9ec 	bl	8008810 <VL53L0X_RdWord>
 8004438:	4603      	mov	r3, r0
 800443a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800443c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d108      	bne.n	8004456 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004444:	f107 0308 	add.w	r3, r7, #8
 8004448:	461a      	mov	r2, r3
 800444a:	2104      	movs	r1, #4
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f004 fa17 	bl	8008880 <VL53L0X_RdDWord>
 8004452:	4603      	mov	r3, r0
 8004454:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800445e:	89bb      	ldrh	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	89ba      	ldrh	r2, [r7, #12]
 8004468:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004478:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800448e:	2300      	movs	r3, #0
 8004490:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	7f1b      	ldrb	r3, [r3, #28]
 8004496:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	7bba      	ldrb	r2, [r7, #14]
 800449c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800449e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b086      	sub	sp, #24
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80044bc:	f107 030e 	add.w	r3, r7, #14
 80044c0:	461a      	mov	r2, r3
 80044c2:	2120      	movs	r1, #32
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f004 f9a3 	bl	8008810 <VL53L0X_RdWord>
 80044ca:	4603      	mov	r3, r0
 80044cc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80044ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d118      	bne.n	8004508 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80044d6:	89fb      	ldrh	r3, [r7, #14]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d109      	bne.n	80044f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	771a      	strb	r2, [r3, #28]
 80044ee:	e00b      	b.n	8004508 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80044f0:	89fb      	ldrh	r3, [r7, #14]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004508:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	807b      	strh	r3, [r7, #2]
 8004520:	4613      	mov	r3, r2
 8004522:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004524:	2300      	movs	r3, #0
 8004526:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004534:	887b      	ldrh	r3, [r7, #2]
 8004536:	2b05      	cmp	r3, #5
 8004538:	d902      	bls.n	8004540 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800453a:	23fc      	movs	r3, #252	; 0xfc
 800453c:	75fb      	strb	r3, [r7, #23]
 800453e:	e05b      	b.n	80045f8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004540:	787b      	ldrb	r3, [r7, #1]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	73bb      	strb	r3, [r7, #14]
 8004552:	e00a      	b.n	800456a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	330c      	adds	r3, #12
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800456a:	887b      	ldrh	r3, [r7, #2]
 800456c:	2b05      	cmp	r3, #5
 800456e:	d841      	bhi.n	80045f4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8004570:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <VL53L0X_SetLimitCheckEnable+0x64>)
 8004572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004576:	bf00      	nop
 8004578:	08004591 	.word	0x08004591
 800457c:	0800459b 	.word	0x0800459b
 8004580:	080045b1 	.word	0x080045b1
 8004584:	080045bb 	.word	0x080045bb
 8004588:	080045c5 	.word	0x080045c5
 800458c:	080045dd 	.word	0x080045dd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7bfa      	ldrb	r2, [r7, #15]
 8004594:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004598:	e02e      	b.n	80045f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800459e:	b29b      	uxth	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	2144      	movs	r1, #68	; 0x44
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f004 f8ab 	bl	8008700 <VL53L0X_WrWord>
 80045aa:	4603      	mov	r3, r0
 80045ac:	75fb      	strb	r3, [r7, #23]

			break;
 80045ae:	e023      	b.n	80045f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	7bfa      	ldrb	r2, [r7, #15]
 80045b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80045b8:	e01e      	b.n	80045f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	7bfa      	ldrb	r2, [r7, #15]
 80045be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80045c2:	e019      	b.n	80045f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80045c4:	7bbb      	ldrb	r3, [r7, #14]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80045ca:	7b7b      	ldrb	r3, [r7, #13]
 80045cc:	22fe      	movs	r2, #254	; 0xfe
 80045ce:	2160      	movs	r1, #96	; 0x60
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f004 f8bf 	bl	8008754 <VL53L0X_UpdateByte>
 80045d6:	4603      	mov	r3, r0
 80045d8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80045da:	e00d      	b.n	80045f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80045dc:	7bbb      	ldrb	r3, [r7, #14]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80045e2:	7b7b      	ldrb	r3, [r7, #13]
 80045e4:	22ef      	movs	r2, #239	; 0xef
 80045e6:	2160      	movs	r1, #96	; 0x60
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f004 f8b3 	bl	8008754 <VL53L0X_UpdateByte>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80045f2:	e001      	b.n	80045f8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80045f4:	23fc      	movs	r3, #252	; 0xfc
 80045f6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80045f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10f      	bne.n	8004620 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004600:	787b      	ldrb	r3, [r7, #1]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004606:	887b      	ldrh	r3, [r7, #2]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004612:	e005      	b.n	8004620 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004620:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	460b      	mov	r3, r1
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800463a:	2300      	movs	r3, #0
 800463c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800463e:	897b      	ldrh	r3, [r7, #10]
 8004640:	2b05      	cmp	r3, #5
 8004642:	d905      	bls.n	8004650 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004644:	23fc      	movs	r3, #252	; 0xfc
 8004646:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e008      	b.n	8004662 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004650:	897b      	ldrh	r3, [r7, #10]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4413      	add	r3, r2
 8004656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800465a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	7dba      	ldrb	r2, [r7, #22]
 8004660:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004662:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004666:	4618      	mov	r0, r3
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	460b      	mov	r3, r1
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004682:	2300      	movs	r3, #0
 8004684:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8004686:	897b      	ldrh	r3, [r7, #10]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004690:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8004692:	7dbb      	ldrb	r3, [r7, #22]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d107      	bne.n	80046a8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004698:	897b      	ldrh	r3, [r7, #10]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	330c      	adds	r3, #12
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	e040      	b.n	800472a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80046a8:	897b      	ldrh	r3, [r7, #10]
 80046aa:	2b05      	cmp	r3, #5
 80046ac:	d830      	bhi.n	8004710 <VL53L0X_SetLimitCheckValue+0x9c>
 80046ae:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <VL53L0X_SetLimitCheckValue+0x40>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	080046cd 	.word	0x080046cd
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	080046eb 	.word	0x080046eb
 80046c0:	080046f3 	.word	0x080046f3
 80046c4:	080046fb 	.word	0x080046fb
 80046c8:	080046fb 	.word	0x080046fb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80046d2:	e01f      	b.n	8004714 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80046d8:	b29b      	uxth	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	2144      	movs	r1, #68	; 0x44
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f004 f80e 	bl	8008700 <VL53L0X_WrWord>
 80046e4:	4603      	mov	r3, r0
 80046e6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80046e8:	e014      	b.n	8004714 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80046f0:	e010      	b.n	8004714 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80046f8:	e00c      	b.n	8004714 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80046fe:	b29b      	uxth	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	2164      	movs	r1, #100	; 0x64
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f003 fffb 	bl	8008700 <VL53L0X_WrWord>
 800470a:	4603      	mov	r3, r0
 800470c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800470e:	e001      	b.n	8004714 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004710:	23fc      	movs	r3, #252	; 0xfc
 8004712:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004714:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800471c:	897b      	ldrh	r3, [r7, #10]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	330c      	adds	r3, #12
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800472a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop

08004738 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	460b      	mov	r3, r1
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004746:	2300      	movs	r3, #0
 8004748:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800474e:	897b      	ldrh	r3, [r7, #10]
 8004750:	2b05      	cmp	r3, #5
 8004752:	d847      	bhi.n	80047e4 <VL53L0X_GetLimitCheckValue+0xac>
 8004754:	a201      	add	r2, pc, #4	; (adr r2, 800475c <VL53L0X_GetLimitCheckValue+0x24>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004775 	.word	0x08004775
 8004760:	08004781 	.word	0x08004781
 8004764:	080047a7 	.word	0x080047a7
 8004768:	080047b3 	.word	0x080047b3
 800476c:	080047bf 	.word	0x080047bf
 8004770:	080047bf 	.word	0x080047bf

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004778:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	77bb      	strb	r3, [r7, #30]
		break;
 800477e:	e033      	b.n	80047e8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004780:	f107 0316 	add.w	r3, r7, #22
 8004784:	461a      	mov	r2, r3
 8004786:	2144      	movs	r1, #68	; 0x44
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f004 f841 	bl	8008810 <VL53L0X_RdWord>
 800478e:	4603      	mov	r3, r0
 8004790:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004792:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800479a:	8afb      	ldrh	r3, [r7, #22]
 800479c:	025b      	lsls	r3, r3, #9
 800479e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80047a0:	2301      	movs	r3, #1
 80047a2:	77bb      	strb	r3, [r7, #30]
		break;
 80047a4:	e020      	b.n	80047e8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047aa:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	77bb      	strb	r3, [r7, #30]
		break;
 80047b0:	e01a      	b.n	80047e8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	77bb      	strb	r3, [r7, #30]
		break;
 80047bc:	e014      	b.n	80047e8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80047be:	f107 0316 	add.w	r3, r7, #22
 80047c2:	461a      	mov	r2, r3
 80047c4:	2164      	movs	r1, #100	; 0x64
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f004 f822 	bl	8008810 <VL53L0X_RdWord>
 80047cc:	4603      	mov	r3, r0
 80047ce:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80047d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80047d8:	8afb      	ldrh	r3, [r7, #22]
 80047da:	025b      	lsls	r3, r3, #9
 80047dc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	77bb      	strb	r3, [r7, #30]
		break;
 80047e2:	e001      	b.n	80047e8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80047e4:	23fc      	movs	r3, #252	; 0xfc
 80047e6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80047e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d12a      	bne.n	8004846 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80047f0:	7fbb      	ldrb	r3, [r7, #30]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d124      	bne.n	8004840 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d110      	bne.n	800481e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80047fc:	897b      	ldrh	r3, [r7, #10]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	330c      	adds	r3, #12
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004810:	897b      	ldrh	r3, [r7, #10]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800481c:	e013      	b.n	8004846 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004824:	897b      	ldrh	r3, [r7, #10]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	330c      	adds	r3, #12
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004832:	897b      	ldrh	r3, [r7, #10]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800483e:	e002      	b.n	8004846 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004846:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop

08004854 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8004862:	f107 030e 	add.w	r3, r7, #14
 8004866:	461a      	mov	r2, r3
 8004868:	2101      	movs	r1, #1
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f003 ffa6 	bl	80087bc <VL53L0X_RdByte>
 8004870:	4603      	mov	r3, r0
 8004872:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8004874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10e      	bne.n	800489a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800487c:	7bba      	ldrb	r2, [r7, #14]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8004884:	7bbb      	ldrb	r3, [r7, #14]
 8004886:	b25b      	sxtb	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	da03      	bge.n	8004894 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2201      	movs	r2, #1
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e002      	b.n	800489a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800489a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80048ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80048c4:	f107 030e 	add.w	r3, r7, #14
 80048c8:	4619      	mov	r1, r3
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff fbd2 	bl	8004074 <VL53L0X_GetDeviceMode>
 80048d0:	4603      	mov	r3, r0
 80048d2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80048d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d107      	bne.n	80048ec <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80048dc:	7bbb      	ldrb	r3, [r7, #14]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f898 	bl	8004a18 <VL53L0X_StartMeasurement>
 80048e8:	4603      	mov	r3, r0
 80048ea:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80048ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d104      	bne.n	80048fe <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f001 fb4d 	bl	8005f94 <VL53L0X_measurement_poll_for_completion>
 80048fa:	4603      	mov	r3, r0
 80048fc:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80048fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004906:	7bbb      	ldrb	r3, [r7, #14]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d103      	bne.n	8004914 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2203      	movs	r2, #3
 8004910:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800492c:	2300      	movs	r3, #0
 800492e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8004930:	2301      	movs	r3, #1
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f001 faef 	bl	8005f1a <VL53L0X_perform_ref_calibration>
 800493c:	4603      	mov	r3, r0
 800493e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8004940:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004958:	2300      	movs	r3, #0
 800495a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004962:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8004964:	7dbb      	ldrb	r3, [r7, #22]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d005      	beq.n	8004976 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800496a:	7dbb      	ldrb	r3, [r7, #22]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d002      	beq.n	8004976 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8004970:	7dbb      	ldrb	r3, [r7, #22]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d147      	bne.n	8004a06 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8004976:	f107 030c 	add.w	r3, r7, #12
 800497a:	f107 0210 	add.w	r2, r7, #16
 800497e:	2101      	movs	r1, #1
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fbd1 	bl	8005128 <VL53L0X_GetInterruptThresholds>
 8004986:	4603      	mov	r3, r0
 8004988:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004990:	d803      	bhi.n	800499a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8004992:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8004994:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004998:	d935      	bls.n	8004a06 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800499a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d131      	bne.n	8004a06 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d006      	beq.n	80049b6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80049a8:	491a      	ldr	r1, [pc, #104]	; (8004a14 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f002 ff64 	bl	8007878 <VL53L0X_load_tuning_settings>
 80049b0:	4603      	mov	r3, r0
 80049b2:	75fb      	strb	r3, [r7, #23]
 80049b4:	e027      	b.n	8004a06 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80049b6:	2204      	movs	r2, #4
 80049b8:	21ff      	movs	r1, #255	; 0xff
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f003 fe7c 	bl	80086b8 <VL53L0X_WrByte>
 80049c0:	4603      	mov	r3, r0
 80049c2:	461a      	mov	r2, r3
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80049ca:	2200      	movs	r2, #0
 80049cc:	2170      	movs	r1, #112	; 0x70
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f003 fe72 	bl	80086b8 <VL53L0X_WrByte>
 80049d4:	4603      	mov	r3, r0
 80049d6:	461a      	mov	r2, r3
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	4313      	orrs	r3, r2
 80049dc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80049de:	2200      	movs	r2, #0
 80049e0:	21ff      	movs	r1, #255	; 0xff
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f003 fe68 	bl	80086b8 <VL53L0X_WrByte>
 80049e8:	4603      	mov	r3, r0
 80049ea:	461a      	mov	r2, r3
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80049f2:	2200      	movs	r2, #0
 80049f4:	2180      	movs	r1, #128	; 0x80
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f003 fe5e 	bl	80086b8 <VL53L0X_WrByte>
 80049fc:	4603      	mov	r3, r0
 80049fe:	461a      	mov	r2, r3
 8004a00:	7dfb      	ldrb	r3, [r7, #23]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004a06:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000100 	.word	0x20000100

08004a18 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004a28:	f107 030e 	add.w	r3, r7, #14
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fb20 	bl	8004074 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004a34:	2201      	movs	r2, #1
 8004a36:	2180      	movs	r1, #128	; 0x80
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f003 fe3d 	bl	80086b8 <VL53L0X_WrByte>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004a42:	2201      	movs	r2, #1
 8004a44:	21ff      	movs	r1, #255	; 0xff
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f003 fe36 	bl	80086b8 <VL53L0X_WrByte>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004a50:	2200      	movs	r2, #0
 8004a52:	2100      	movs	r1, #0
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f003 fe2f 	bl	80086b8 <VL53L0X_WrByte>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004a64:	461a      	mov	r2, r3
 8004a66:	2191      	movs	r1, #145	; 0x91
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f003 fe25 	bl	80086b8 <VL53L0X_WrByte>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004a72:	2201      	movs	r2, #1
 8004a74:	2100      	movs	r1, #0
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f003 fe1e 	bl	80086b8 <VL53L0X_WrByte>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004a80:	2200      	movs	r2, #0
 8004a82:	21ff      	movs	r1, #255	; 0xff
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f003 fe17 	bl	80086b8 <VL53L0X_WrByte>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2180      	movs	r1, #128	; 0x80
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f003 fe10 	bl	80086b8 <VL53L0X_WrByte>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8004a9c:	7bbb      	ldrb	r3, [r7, #14]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d037      	beq.n	8004b12 <VL53L0X_StartMeasurement+0xfa>
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d04f      	beq.n	8004b46 <VL53L0X_StartMeasurement+0x12e>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d167      	bne.n	8004b7a <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8004aaa:	2201      	movs	r2, #1
 8004aac:	2100      	movs	r1, #0
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f003 fe02 	bl	80086b8 <VL53L0X_WrByte>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8004abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d15d      	bne.n	8004b80 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8004ace:	f107 030d 	add.w	r3, r7, #13
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f003 fe70 	bl	80087bc <VL53L0X_RdByte>
 8004adc:	4603      	mov	r3, r0
 8004ade:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8004ae6:	7b7a      	ldrb	r2, [r7, #13]
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	4013      	ands	r3, r2
 8004aec:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004aee:	7bfa      	ldrb	r2, [r7, #15]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d107      	bne.n	8004b04 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8004af4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d103      	bne.n	8004b04 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b02:	d3e1      	bcc.n	8004ac8 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b0a:	d339      	bcc.n	8004b80 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8004b0c:	23f9      	movs	r3, #249	; 0xf9
 8004b0e:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8004b10:	e036      	b.n	8004b80 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004b12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff ff15 	bl	800494c <VL53L0X_CheckAndLoadInterruptSettings>
 8004b22:	4603      	mov	r3, r0
 8004b24:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004b26:	2202      	movs	r2, #2
 8004b28:	2100      	movs	r1, #0
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f003 fdc4 	bl	80086b8 <VL53L0X_WrByte>
 8004b30:	4603      	mov	r3, r0
 8004b32:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8004b34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d123      	bne.n	8004b84 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2204      	movs	r2, #4
 8004b40:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004b44:	e01e      	b.n	8004b84 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004b46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d105      	bne.n	8004b5a <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004b4e:	2101      	movs	r1, #1
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff fefb 	bl	800494c <VL53L0X_CheckAndLoadInterruptSettings>
 8004b56:	4603      	mov	r3, r0
 8004b58:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f003 fdaa 	bl	80086b8 <VL53L0X_WrByte>
 8004b64:	4603      	mov	r3, r0
 8004b66:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8004b68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10b      	bne.n	8004b88 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2204      	movs	r2, #4
 8004b74:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004b78:	e006      	b.n	8004b88 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004b7a:	23f8      	movs	r3, #248	; 0xf8
 8004b7c:	75fb      	strb	r3, [r7, #23]
 8004b7e:	e004      	b.n	8004b8a <VL53L0X_StartMeasurement+0x172>
		break;
 8004b80:	bf00      	nop
 8004b82:	e002      	b.n	8004b8a <VL53L0X_StartMeasurement+0x172>
		break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <VL53L0X_StartMeasurement+0x172>
		break;
 8004b88:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004baa:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8004bac:	7bbb      	ldrb	r3, [r7, #14]
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d112      	bne.n	8004bd8 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8004bb2:	f107 0308 	add.w	r3, r7, #8
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fb2b 	bl	8005214 <VL53L0X_GetInterruptMaskStatus>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d103      	bne.n	8004bd0 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	e01c      	b.n	8004c0a <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	e018      	b.n	8004c0a <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8004bd8:	f107 030d 	add.w	r3, r7, #13
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2114      	movs	r1, #20
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f003 fdeb 	bl	80087bc <VL53L0X_RdByte>
 8004be6:	4603      	mov	r3, r0
 8004be8:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8004bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8004bf2:	7b7b      	ldrb	r3, [r7, #13]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	e002      	b.n	8004c0a <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <VL53L0X_WaitDeviceReadyForNewMeasurement>:

VL53L0X_Error VL53L0X_WaitDeviceReadyForNewMeasurement(VL53L0X_DEV Dev,
	uint32_t MaxLoop)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b085      	sub	sp, #20
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8004c20:	239d      	movs	r3, #157	; 0x9d
 8004c22:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented for VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8004c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <VL53L0X_GetRangingMeasurementData>:


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004c34:	b5b0      	push	{r4, r5, r7, lr}
 8004c36:	b096      	sub	sp, #88	; 0x58
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004c44:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c48:	230c      	movs	r3, #12
 8004c4a:	2114      	movs	r1, #20
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f003 fd07 	bl	8008660 <VL53L0X_ReadMulti>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004c58:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f040 80d2 	bne.w	8004e06 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2200      	movs	r2, #0
 8004c66:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8004c6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8004c8a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	025b      	lsls	r3, r3, #9
 8004ca0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ca6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004ca8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	4413      	add	r3, r2
 8004cba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004cbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cc2:	025b      	lsls	r3, r3, #9
 8004cc4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8004cca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	4413      	add	r3, r2
 8004cdc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004ce6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004ce8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8004cf6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004cfe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004d02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d08:	d047      	beq.n	8004d9a <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8004d0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d0c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004d10:	fb02 f303 	mul.w	r3, r2, r3
 8004d14:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004d18:	4a58      	ldr	r2, [pc, #352]	; (8004e7c <VL53L0X_GetRangingMeasurementData+0x248>)
 8004d1a:	fb82 1203 	smull	r1, r2, r2, r3
 8004d1e:	1192      	asrs	r2, r2, #6
 8004d20:	17db      	asrs	r3, r3, #31
 8004d22:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004d24:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7f1b      	ldrb	r3, [r3, #28]
 8004d32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d02d      	beq.n	8004d9a <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004d3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d40:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004d44:	fb02 f303 	mul.w	r3, r2, r3
 8004d48:	121b      	asrs	r3, r3, #8
 8004d4a:	461a      	mov	r2, r3
				if ((SignalRate
 8004d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d10d      	bne.n	8004d6e <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8004d52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d004      	beq.n	8004d64 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8004d5a:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8004d5e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004d62:	e016      	b.n	8004d92 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8004d64:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004d68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004d6c:	e011      	b.n	8004d92 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004d6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d74:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004d78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d7a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004d82:	121b      	asrs	r3, r3, #8
 8004d84:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d88:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004d8e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004d92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d96:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004d9a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00d      	beq.n	8004dbe <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004da2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004da6:	089b      	lsrs	r3, r3, #2
 8004da8:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004dae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	019b      	lsls	r3, r3, #6
 8004db6:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	75da      	strb	r2, [r3, #23]
 8004dbc:	e006      	b.n	8004dcc <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004dc4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004dcc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004dd0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004dd4:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	4613      	mov	r3, r2
 8004de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f003 f9f0 	bl	80081c8 <VL53L0X_get_pal_range_status>
 8004de8:	4603      	mov	r3, r0
 8004dea:	461a      	mov	r2, r3
 8004dec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004df6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004dfe:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e06:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d12f      	bne.n	8004e6e <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f107 040c 	add.w	r4, r7, #12
 8004e14:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e20:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004e28:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004e36:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004e3c:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004e42:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004e48:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004e4e:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004e54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004e5e:	f107 050c 	add.w	r5, r7, #12
 8004e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e6e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3750      	adds	r7, #80	; 0x50
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bdb0      	pop	{r4, r5, r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	10624dd3 	.word	0x10624dd3

08004e80 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004e8e:	2100      	movs	r1, #0
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff f8a7 	bl	8003fe4 <VL53L0X_SetDeviceMode>
 8004e96:	4603      	mov	r3, r0
 8004e98:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d104      	bne.n	8004eac <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff fd08 	bl	80048b8 <VL53L0X_PerformSingleMeasurement>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004eb4:	6839      	ldr	r1, [r7, #0]
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff febc 	bl	8004c34 <VL53L0X_GetRangingMeasurementData>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d105      	bne.n	8004ed4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004ec8:	2100      	movs	r1, #0
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f962 	bl	8005194 <VL53L0X_ClearInterruptMask>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	4608      	mov	r0, r1
 8004eea:	4611      	mov	r1, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	4603      	mov	r3, r0
 8004ef0:	70fb      	strb	r3, [r7, #3]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	70bb      	strb	r3, [r7, #2]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004f04:	23f6      	movs	r3, #246	; 0xf6
 8004f06:	73fb      	strb	r3, [r7, #15]
 8004f08:	e107      	b.n	800511a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004f0a:	78bb      	ldrb	r3, [r7, #2]
 8004f0c:	2b14      	cmp	r3, #20
 8004f0e:	d110      	bne.n	8004f32 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004f10:	7e3b      	ldrb	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d102      	bne.n	8004f1c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004f16:	2310      	movs	r3, #16
 8004f18:	73bb      	strb	r3, [r7, #14]
 8004f1a:	e001      	b.n	8004f20 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004f20:	7bbb      	ldrb	r3, [r7, #14]
 8004f22:	461a      	mov	r2, r3
 8004f24:	2184      	movs	r1, #132	; 0x84
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f003 fbc6 	bl	80086b8 <VL53L0X_WrByte>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	73fb      	strb	r3, [r7, #15]
 8004f30:	e0f3      	b.n	800511a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004f32:	78bb      	ldrb	r3, [r7, #2]
 8004f34:	2b15      	cmp	r3, #21
 8004f36:	f040 8097 	bne.w	8005068 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	21ff      	movs	r1, #255	; 0xff
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f003 fbba 	bl	80086b8 <VL53L0X_WrByte>
 8004f44:	4603      	mov	r3, r0
 8004f46:	461a      	mov	r2, r3
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2100      	movs	r1, #0
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f003 fbb0 	bl	80086b8 <VL53L0X_WrByte>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004f62:	2200      	movs	r2, #0
 8004f64:	21ff      	movs	r1, #255	; 0xff
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f003 fba6 	bl	80086b8 <VL53L0X_WrByte>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	461a      	mov	r2, r3
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004f76:	2201      	movs	r2, #1
 8004f78:	2180      	movs	r1, #128	; 0x80
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f003 fb9c 	bl	80086b8 <VL53L0X_WrByte>
 8004f80:	4603      	mov	r3, r0
 8004f82:	461a      	mov	r2, r3
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	2185      	movs	r1, #133	; 0x85
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f003 fb92 	bl	80086b8 <VL53L0X_WrByte>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	21ff      	movs	r1, #255	; 0xff
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f003 fb88 	bl	80086b8 <VL53L0X_WrByte>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	461a      	mov	r2, r3
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	21cd      	movs	r1, #205	; 0xcd
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f003 fb7e 	bl	80086b8 <VL53L0X_WrByte>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004fc6:	2211      	movs	r2, #17
 8004fc8:	21cc      	movs	r1, #204	; 0xcc
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f003 fb74 	bl	80086b8 <VL53L0X_WrByte>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004fda:	2207      	movs	r2, #7
 8004fdc:	21ff      	movs	r1, #255	; 0xff
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f003 fb6a 	bl	80086b8 <VL53L0X_WrByte>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004fee:	2200      	movs	r2, #0
 8004ff0:	21be      	movs	r1, #190	; 0xbe
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f003 fb60 	bl	80086b8 <VL53L0X_WrByte>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005002:	2206      	movs	r2, #6
 8005004:	21ff      	movs	r1, #255	; 0xff
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f003 fb56 	bl	80086b8 <VL53L0X_WrByte>
 800500c:	4603      	mov	r3, r0
 800500e:	461a      	mov	r2, r3
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	4313      	orrs	r3, r2
 8005014:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8005016:	2209      	movs	r2, #9
 8005018:	21cc      	movs	r1, #204	; 0xcc
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f003 fb4c 	bl	80086b8 <VL53L0X_WrByte>
 8005020:	4603      	mov	r3, r0
 8005022:	461a      	mov	r2, r3
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	4313      	orrs	r3, r2
 8005028:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800502a:	2200      	movs	r2, #0
 800502c:	21ff      	movs	r1, #255	; 0xff
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f003 fb42 	bl	80086b8 <VL53L0X_WrByte>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	4313      	orrs	r3, r2
 800503c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800503e:	2201      	movs	r2, #1
 8005040:	21ff      	movs	r1, #255	; 0xff
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f003 fb38 	bl	80086b8 <VL53L0X_WrByte>
 8005048:	4603      	mov	r3, r0
 800504a:	461a      	mov	r2, r3
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	4313      	orrs	r3, r2
 8005050:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005052:	2200      	movs	r2, #0
 8005054:	2100      	movs	r1, #0
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f003 fb2e 	bl	80086b8 <VL53L0X_WrByte>
 800505c:	4603      	mov	r3, r0
 800505e:	461a      	mov	r2, r3
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	4313      	orrs	r3, r2
 8005064:	73fb      	strb	r3, [r7, #15]
 8005066:	e058      	b.n	800511a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8005068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d121      	bne.n	80050b4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8005070:	787b      	ldrb	r3, [r7, #1]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d81b      	bhi.n	80050ae <VL53L0X_SetGpioConfig+0x1ce>
 8005076:	a201      	add	r2, pc, #4	; (adr r2, 800507c <VL53L0X_SetGpioConfig+0x19c>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	08005091 	.word	0x08005091
 8005080:	08005097 	.word	0x08005097
 8005084:	0800509d 	.word	0x0800509d
 8005088:	080050a3 	.word	0x080050a3
 800508c:	080050a9 	.word	0x080050a9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8005090:	2300      	movs	r3, #0
 8005092:	73bb      	strb	r3, [r7, #14]
				break;
 8005094:	e00f      	b.n	80050b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8005096:	2301      	movs	r3, #1
 8005098:	73bb      	strb	r3, [r7, #14]
				break;
 800509a:	e00c      	b.n	80050b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800509c:	2302      	movs	r3, #2
 800509e:	73bb      	strb	r3, [r7, #14]
				break;
 80050a0:	e009      	b.n	80050b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80050a2:	2303      	movs	r3, #3
 80050a4:	73bb      	strb	r3, [r7, #14]
				break;
 80050a6:	e006      	b.n	80050b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80050a8:	2304      	movs	r3, #4
 80050aa:	73bb      	strb	r3, [r7, #14]
				break;
 80050ac:	e003      	b.n	80050b6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80050ae:	23f5      	movs	r3, #245	; 0xf5
 80050b0:	73fb      	strb	r3, [r7, #15]
 80050b2:	e000      	b.n	80050b6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80050b4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80050b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d107      	bne.n	80050ce <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80050be:	7bbb      	ldrb	r3, [r7, #14]
 80050c0:	461a      	mov	r2, r3
 80050c2:	210a      	movs	r1, #10
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f003 faf7 	bl	80086b8 <VL53L0X_WrByte>
 80050ca:	4603      	mov	r3, r0
 80050cc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80050ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10f      	bne.n	80050f6 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80050d6:	7e3b      	ldrb	r3, [r7, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	73bb      	strb	r3, [r7, #14]
 80050e0:	e001      	b.n	80050e6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80050e2:	2310      	movs	r3, #16
 80050e4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80050e6:	7bbb      	ldrb	r3, [r7, #14]
 80050e8:	22ef      	movs	r2, #239	; 0xef
 80050ea:	2184      	movs	r1, #132	; 0x84
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f003 fb31 	bl	8008754 <VL53L0X_UpdateByte>
 80050f2:	4603      	mov	r3, r0
 80050f4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80050f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	787a      	ldrb	r2, [r7, #1]
 8005102:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8005106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d105      	bne.n	800511a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800510e:	2100      	movs	r1, #0
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f83f 	bl	8005194 <VL53L0X_ClearInterruptMask>
 8005116:	4603      	mov	r3, r0
 8005118:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800511a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop

08005128 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	460b      	mov	r3, r1
 8005136:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005138:	2300      	movs	r3, #0
 800513a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800513c:	f107 0314 	add.w	r3, r7, #20
 8005140:	461a      	mov	r2, r3
 8005142:	210e      	movs	r1, #14
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f003 fb63 	bl	8008810 <VL53L0X_RdWord>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800514e:	8abb      	ldrh	r3, [r7, #20]
 8005150:	045b      	lsls	r3, r3, #17
 8005152:	461a      	mov	r2, r3
 8005154:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <VL53L0X_GetInterruptThresholds+0x68>)
 8005156:	4013      	ands	r3, r2
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800515c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10f      	bne.n	8005184 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005164:	f107 0314 	add.w	r3, r7, #20
 8005168:	461a      	mov	r2, r3
 800516a:	210c      	movs	r1, #12
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f003 fb4f 	bl	8008810 <VL53L0X_RdWord>
 8005172:	4603      	mov	r3, r0
 8005174:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005176:	8abb      	ldrh	r3, [r7, #20]
 8005178:	045b      	lsls	r3, r3, #17
 800517a:	461a      	mov	r2, r3
 800517c:	4b04      	ldr	r3, [pc, #16]	; (8005190 <VL53L0X_GetInterruptThresholds+0x68>)
 800517e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005184:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	1ffe0000 	.word	0x1ffe0000

08005194 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800519e:	2300      	movs	r3, #0
 80051a0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80051a6:	2201      	movs	r2, #1
 80051a8:	210b      	movs	r1, #11
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f003 fa84 	bl	80086b8 <VL53L0X_WrByte>
 80051b0:	4603      	mov	r3, r0
 80051b2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80051b4:	2200      	movs	r2, #0
 80051b6:	210b      	movs	r1, #11
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f003 fa7d 	bl	80086b8 <VL53L0X_WrByte>
 80051be:	4603      	mov	r3, r0
 80051c0:	461a      	mov	r2, r3
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80051c8:	f107 030d 	add.w	r3, r7, #13
 80051cc:	461a      	mov	r2, r3
 80051ce:	2113      	movs	r1, #19
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f003 faf3 	bl	80087bc <VL53L0X_RdByte>
 80051d6:	4603      	mov	r3, r0
 80051d8:	461a      	mov	r2, r3
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	4313      	orrs	r3, r2
 80051de:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80051e0:	7bbb      	ldrb	r3, [r7, #14]
 80051e2:	3301      	adds	r3, #1
 80051e4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80051e6:	7b7b      	ldrb	r3, [r7, #13]
 80051e8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d006      	beq.n	80051fe <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80051f0:	7bbb      	ldrb	r3, [r7, #14]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d803      	bhi.n	80051fe <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80051f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0d3      	beq.n	80051a6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80051fe:	7bbb      	ldrb	r3, [r7, #14]
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005204:	23f4      	movs	r3, #244	; 0xf4
 8005206:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005208:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8005222:	f107 030e 	add.w	r3, r7, #14
 8005226:	461a      	mov	r2, r3
 8005228:	2113      	movs	r1, #19
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f003 fac6 	bl	80087bc <VL53L0X_RdByte>
 8005230:	4603      	mov	r3, r0
 8005232:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005234:	7bbb      	ldrb	r3, [r7, #14]
 8005236:	f003 0207 	and.w	r2, r3, #7
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800523e:	7bbb      	ldrb	r3, [r7, #14]
 8005240:	f003 0318 	and.w	r3, r3, #24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005248:	23fa      	movs	r3, #250	; 0xfa
 800524a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800524c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005264:	2300      	movs	r3, #0
 8005266:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 fa03 	bl	8005678 <VL53L0X_perform_ref_spad_management>
 8005272:	4603      	mov	r3, r0
 8005274:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8005276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800528c:	2300      	movs	r3, #0
 800528e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8005290:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005294:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8005296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800529a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800529c:	f107 0308 	add.w	r3, r7, #8
 80052a0:	461a      	mov	r2, r3
 80052a2:	2128      	movs	r1, #40	; 0x28
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f003 fab3 	bl	8008810 <VL53L0X_RdWord>
 80052aa:	4603      	mov	r3, r0
 80052ac:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80052ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d11e      	bne.n	80052f4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80052b6:	893b      	ldrh	r3, [r7, #8]
 80052b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052bc:	b29b      	uxth	r3, r3
 80052be:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80052c0:	893b      	ldrh	r3, [r7, #8]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	dd0b      	ble.n	80052e4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80052cc:	893a      	ldrh	r2, [r7, #8]
 80052ce:	897b      	ldrh	r3, [r7, #10]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	b21b      	sxth	r3, r3
 80052d6:	461a      	mov	r2, r3
					* 250;
 80052d8:	23fa      	movs	r3, #250	; 0xfa
 80052da:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	e007      	b.n	80052f4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80052e4:	893b      	ldrh	r3, [r7, #8]
 80052e6:	b21b      	sxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	23fa      	movs	r3, #250	; 0xfa
 80052ec:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80052f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005300:	b480      	push	{r7}
 8005302:	b08b      	sub	sp, #44	; 0x2c
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800530e:	2308      	movs	r3, #8
 8005310:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	f04f 32ff 	mov.w	r2, #4294967295
 800531c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	fbb2 f3f3 	udiv	r3, r2, r3
 8005326:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005330:	69b9      	ldr	r1, [r7, #24]
 8005332:	fb01 f202 	mul.w	r2, r1, r2
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
 800533e:	e030      	b.n	80053a2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	4413      	add	r3, r2
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800534e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	429a      	cmp	r2, r3
 8005354:	d11e      	bne.n	8005394 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8005356:	7ffa      	ldrb	r2, [r7, #31]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	fa42 f303 	asr.w	r3, r2, r3
 800535e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005364:	e016      	b.n	8005394 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005366:	7ffb      	ldrb	r3, [r7, #31]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <get_next_good_spad+0x88>
				success = 1;
 8005370:	2301      	movs	r3, #1
 8005372:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	fb02 f203 	mul.w	r2, r2, r3
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	4413      	add	r3, r2
 8005380:	461a      	mov	r2, r3
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	601a      	str	r2, [r3, #0]
				break;
 8005386:	e009      	b.n	800539c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005388:	7ffb      	ldrb	r3, [r7, #31]
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	3301      	adds	r3, #1
 8005392:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005394:	6a3a      	ldr	r2, [r7, #32]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	429a      	cmp	r2, r3
 800539a:	d3e4      	bcc.n	8005366 <get_next_good_spad+0x66>
				coarseIndex++) {
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	3301      	adds	r3, #1
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80053a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d202      	bcs.n	80053b0 <get_next_good_spad+0xb0>
 80053aa:	7fbb      	ldrb	r3, [r7, #30]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0c7      	beq.n	8005340 <get_next_good_spad+0x40>
		}
	}
}
 80053b0:	bf00      	nop
 80053b2:	372c      	adds	r7, #44	; 0x2c
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80053c4:	2301      	movs	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	099b      	lsrs	r3, r3, #6
 80053cc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80053ce:	4a07      	ldr	r2, [pc, #28]	; (80053ec <is_aperture+0x30>)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <is_aperture+0x22>
		isAperture = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80053de:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	200002b8 	.word	0x200002b8

080053f0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b089      	sub	sp, #36	; 0x24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005400:	2308      	movs	r3, #8
 8005402:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	fbb2 f3f3 	udiv	r3, r2, r3
 800540c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	fbb3 f2f2 	udiv	r2, r3, r2
 8005416:	69b9      	ldr	r1, [r7, #24]
 8005418:	fb01 f202 	mul.w	r2, r1, r2
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005428:	23ce      	movs	r3, #206	; 0xce
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e010      	b.n	8005450 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	b25a      	sxtb	r2, r3
 8005438:	2101      	movs	r1, #1
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	b25b      	sxtb	r3, r3
 8005442:	4313      	orrs	r3, r2
 8005444:	b259      	sxtb	r1, r3
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	4413      	add	r3, r2
 800544c:	b2ca      	uxtb	r2, r1
 800544e:	701a      	strb	r2, [r3, #0]

	return status;
 8005450:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3724      	adds	r7, #36	; 0x24
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800546a:	2306      	movs	r3, #6
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	21b0      	movs	r1, #176	; 0xb0
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f003 f8c5 	bl	8008600 <VL53L0X_WriteMulti>
 8005476:	4603      	mov	r3, r0
 8005478:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800547a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005490:	2306      	movs	r3, #6
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	21b0      	movs	r1, #176	; 0xb0
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f003 f8e2 	bl	8008660 <VL53L0X_ReadMulti>
 800549c:	4603      	mov	r3, r0
 800549e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80054a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08c      	sub	sp, #48	; 0x30
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	607a      	str	r2, [r7, #4]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	460b      	mov	r3, r1
 80054ba:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80054c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80054c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80054ca:	2300      	movs	r3, #0
 80054cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ce:	e02b      	b.n	8005528 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80054d0:	f107 031c 	add.w	r3, r7, #28
 80054d4:	6a3a      	ldr	r2, [r7, #32]
 80054d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff ff11 	bl	8005300 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e4:	d103      	bne.n	80054ee <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80054e6:	23ce      	movs	r3, #206	; 0xce
 80054e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80054ec:	e020      	b.n	8005530 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	461a      	mov	r2, r3
 80054f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f4:	4413      	add	r3, r2
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff ff60 	bl	80053bc <is_aperture>
 80054fc:	4603      	mov	r3, r0
 80054fe:	461a      	mov	r2, r3
 8005500:	7afb      	ldrb	r3, [r7, #11]
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005506:	23ce      	movs	r3, #206	; 0xce
 8005508:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800550c:	e010      	b.n	8005530 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8005512:	6a3a      	ldr	r2, [r7, #32]
 8005514:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005516:	6838      	ldr	r0, [r7, #0]
 8005518:	f7ff ff6a 	bl	80053f0 <enable_spad_bit>
		currentSpad++;
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	3301      	adds	r3, #1
 8005520:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	3301      	adds	r3, #1
 8005526:	62bb      	str	r3, [r7, #40]	; 0x28
 8005528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800552a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800552c:	429a      	cmp	r2, r3
 800552e:	d3cf      	bcc.n	80054d0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8005530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005532:	6a3a      	ldr	r2, [r7, #32]
 8005534:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005536:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800553e:	6839      	ldr	r1, [r7, #0]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f7ff ff8d 	bl	8005460 <set_ref_spad_map>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800554c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005550:	2b00      	cmp	r3, #0
 8005552:	d121      	bne.n	8005598 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	4619      	mov	r1, r3
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff ff93 	bl	8005486 <get_ref_spad_map>
 8005560:	4603      	mov	r3, r0
 8005562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800556a:	e011      	b.n	8005590 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	4413      	add	r3, r2
 8005572:	781a      	ldrb	r2, [r3, #0]
 8005574:	f107 0114 	add.w	r1, r7, #20
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	440b      	add	r3, r1
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d003      	beq.n	800558a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005582:	23ce      	movs	r3, #206	; 0xce
 8005584:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8005588:	e006      	b.n	8005598 <enable_ref_spads+0xec>
			}
			i++;
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	3301      	adds	r3, #1
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8005590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	429a      	cmp	r2, r3
 8005596:	d3e9      	bcc.n	800556c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005598:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800559c:	4618      	mov	r0, r3
 800559e:	3730      	adds	r7, #48	; 0x30
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	; 0x28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80055c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80055c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d107      	bne.n	80055dc <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80055cc:	22c0      	movs	r2, #192	; 0xc0
 80055ce:	2101      	movs	r1, #1
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f003 f871 	bl	80086b8 <VL53L0X_WrByte>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80055dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d108      	bne.n	80055f6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80055e4:	f107 0308 	add.w	r3, r7, #8
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff fc48 	bl	8004e80 <VL53L0X_PerformSingleRangingMeasurement>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80055f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d107      	bne.n	800560e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80055fe:	2201      	movs	r2, #1
 8005600:	21ff      	movs	r1, #255	; 0xff
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f003 f858 	bl	80086b8 <VL53L0X_WrByte>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800560e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005612:	2b00      	cmp	r3, #0
 8005614:	d107      	bne.n	8005626 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	21b6      	movs	r1, #182	; 0xb6
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f003 f8f8 	bl	8008810 <VL53L0X_RdWord>
 8005620:	4603      	mov	r3, r0
 8005622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005626:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800562a:	2b00      	cmp	r3, #0
 800562c:	d107      	bne.n	800563e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800562e:	2200      	movs	r2, #0
 8005630:	21ff      	movs	r1, #255	; 0xff
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f003 f840 	bl	80086b8 <VL53L0X_WrByte>
 8005638:	4603      	mov	r3, r0
 800563a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800563e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005642:	2b00      	cmp	r3, #0
 8005644:	d112      	bne.n	800566c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005646:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800564a:	461a      	mov	r2, r3
 800564c:	2101      	movs	r1, #1
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f003 f832 	bl	80086b8 <VL53L0X_WrByte>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800565a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005668:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800566c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005670:	4618      	mov	r0, r3
 8005672:	3728      	adds	r7, #40	; 0x28
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b09d      	sub	sp, #116	; 0x74
 800567c:	af06      	add	r7, sp, #24
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005684:	2300      	movs	r3, #0
 8005686:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800568a:	23b4      	movs	r3, #180	; 0xb4
 800568c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8005690:	2303      	movs	r3, #3
 8005692:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8005694:	232c      	movs	r3, #44	; 0x2c
 8005696:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80056a4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80056a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80056b2:	2306      	movs	r3, #6
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80056dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80056de:	2300      	movs	r3, #0
 80056e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80056e2:	e009      	b.n	80056f8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80056f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f4:	3301      	adds	r3, #1
 80056f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80056f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d3f1      	bcc.n	80056e4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005700:	2201      	movs	r2, #1
 8005702:	21ff      	movs	r1, #255	; 0xff
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f002 ffd7 	bl	80086b8 <VL53L0X_WrByte>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005710:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005714:	2b00      	cmp	r3, #0
 8005716:	d107      	bne.n	8005728 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005718:	2200      	movs	r2, #0
 800571a:	214f      	movs	r1, #79	; 0x4f
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f002 ffcb 	bl	80086b8 <VL53L0X_WrByte>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005728:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800572c:	2b00      	cmp	r3, #0
 800572e:	d107      	bne.n	8005740 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8005730:	222c      	movs	r2, #44	; 0x2c
 8005732:	214e      	movs	r1, #78	; 0x4e
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f002 ffbf 	bl	80086b8 <VL53L0X_WrByte>
 800573a:	4603      	mov	r3, r0
 800573c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005740:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005744:	2b00      	cmp	r3, #0
 8005746:	d107      	bne.n	8005758 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005748:	2200      	movs	r2, #0
 800574a:	21ff      	movs	r1, #255	; 0xff
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f002 ffb3 	bl	80086b8 <VL53L0X_WrByte>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005758:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800575c:	2b00      	cmp	r3, #0
 800575e:	d109      	bne.n	8005774 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8005760:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005764:	461a      	mov	r2, r3
 8005766:	21b6      	movs	r1, #182	; 0xb6
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f002 ffa5 	bl	80086b8 <VL53L0X_WrByte>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8005774:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005778:	2b00      	cmp	r3, #0
 800577a:	d107      	bne.n	800578c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800577c:	2200      	movs	r2, #0
 800577e:	2180      	movs	r1, #128	; 0x80
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f002 ff99 	bl	80086b8 <VL53L0X_WrByte>
 8005786:	4603      	mov	r3, r0
 8005788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800578c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8005794:	f107 0210 	add.w	r2, r7, #16
 8005798:	f107 0111 	add.w	r1, r7, #17
 800579c:	2300      	movs	r3, #0
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 fbbb 	bl	8005f1a <VL53L0X_perform_ref_calibration>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80057aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d121      	bne.n	80057f6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80057b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80057be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80057ce:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80057d2:	f107 0218 	add.w	r2, r7, #24
 80057d6:	9204      	str	r2, [sp, #16]
 80057d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057da:	9203      	str	r2, [sp, #12]
 80057dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057de:	9202      	str	r2, [sp, #8]
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	4623      	mov	r3, r4
 80057e8:	4602      	mov	r2, r0
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff fe5e 	bl	80054ac <enable_ref_spads>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80057f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d174      	bne.n	80058e8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8005802:	f107 0312 	add.w	r3, r7, #18
 8005806:	4619      	mov	r1, r3
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f7ff fecb 	bl	80055a4 <perform_ref_signal_measurement>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005814:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005818:	2b00      	cmp	r3, #0
 800581a:	d161      	bne.n	80058e0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800581c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800581e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005820:	429a      	cmp	r2, r3
 8005822:	d25d      	bcs.n	80058e0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8005824:	2300      	movs	r3, #0
 8005826:	64bb      	str	r3, [r7, #72]	; 0x48
 8005828:	e009      	b.n	800583e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800582e:	4413      	add	r3, r2
 8005830:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005834:	2200      	movs	r2, #0
 8005836:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800583a:	3301      	adds	r3, #1
 800583c:	64bb      	str	r3, [r7, #72]	; 0x48
 800583e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	429a      	cmp	r2, r3
 8005844:	d3f1      	bcc.n	800582a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8005846:	e002      	b.n	800584e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800584a:	3301      	adds	r3, #1
 800584c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800584e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8005852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005854:	4413      	add	r3, r2
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fdb0 	bl	80053bc <is_aperture>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8005862:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	429a      	cmp	r2, r3
 8005868:	d3ee      	bcc.n	8005848 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800586a:	2301      	movs	r3, #1
 800586c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800586e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005870:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800587e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005882:	f107 0218 	add.w	r2, r7, #24
 8005886:	9204      	str	r2, [sp, #16]
 8005888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800588a:	9203      	str	r2, [sp, #12]
 800588c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800588e:	9202      	str	r2, [sp, #8]
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	4623      	mov	r3, r4
 8005898:	4602      	mov	r2, r0
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7ff fe06 	bl	80054ac <enable_ref_spads>
 80058a0:	4603      	mov	r3, r0
 80058a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80058a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d11b      	bne.n	80058e6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80058b2:	f107 0312 	add.w	r3, r7, #18
 80058b6:	4619      	mov	r1, r3
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff fe73 	bl	80055a4 <perform_ref_signal_measurement>
 80058be:	4603      	mov	r3, r0
 80058c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80058c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10c      	bne.n	80058e6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80058cc:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80058ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d208      	bcs.n	80058e6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80058da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80058de:	e002      	b.n	80058e6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058e4:	e000      	b.n	80058e8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80058e6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80058e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f040 80af 	bne.w	8005a50 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80058f2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80058f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058f6:	429a      	cmp	r2, r3
 80058f8:	f240 80aa 	bls.w	8005a50 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80058fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8005902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800590c:	f107 031c 	add.w	r3, r7, #28
 8005910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005912:	4618      	mov	r0, r3
 8005914:	f003 f82a 	bl	800896c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8005918:	8a7b      	ldrh	r3, [r7, #18]
 800591a:	461a      	mov	r2, r3
 800591c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	bfb8      	it	lt
 8005924:	425b      	neglt	r3, r3
 8005926:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800592e:	e086      	b.n	8005a3e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8005936:	f107 0314 	add.w	r3, r7, #20
 800593a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800593c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800593e:	f7ff fcdf 	bl	8005300 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005948:	d103      	bne.n	8005952 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800594a:	23ce      	movs	r3, #206	; 0xce
 800594c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8005950:	e07e      	b.n	8005a50 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8005952:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4413      	add	r3, r2
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff fd2e 	bl	80053bc <is_aperture>
 8005960:	4603      	mov	r3, r0
 8005962:	461a      	mov	r2, r3
 8005964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005966:	4293      	cmp	r3, r2
 8005968:	d003      	beq.n	8005972 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8005970:	e06e      	b.n	8005a50 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8005972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005974:	3301      	adds	r3, #1
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8005982:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fd32 	bl	80053f0 <enable_spad_bit>
 800598c:	4603      	mov	r3, r0
 800598e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005992:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10c      	bne.n	80059b4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800599a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599c:	3301      	adds	r3, #1
 800599e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80059a6:	4619      	mov	r1, r3
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7ff fd59 	bl	8005460 <set_ref_spad_map>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80059b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d146      	bne.n	8005a4a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80059bc:	f107 0312 	add.w	r3, r7, #18
 80059c0:	4619      	mov	r1, r3
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f7ff fdee 	bl	80055a4 <perform_ref_signal_measurement>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80059ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d13b      	bne.n	8005a4e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80059d6:	8a7b      	ldrh	r3, [r7, #18]
 80059d8:	461a      	mov	r2, r3
 80059da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bfb8      	it	lt
 80059e2:	425b      	neglt	r3, r3
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80059e6:	8a7b      	ldrh	r3, [r7, #18]
 80059e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d21c      	bcs.n	8005a28 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80059ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d914      	bls.n	8005a20 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80059f6:	f107 031c 	add.w	r3, r7, #28
 80059fa:	4619      	mov	r1, r3
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff fd2f 	bl	8005460 <set_ref_spad_map>
 8005a02:	4603      	mov	r3, r0
 8005a04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8005a0e:	f107 011c 	add.w	r1, r7, #28
 8005a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a14:	4618      	mov	r0, r3
 8005a16:	f002 ffa9 	bl	800896c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8005a20:	2301      	movs	r3, #1
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a26:	e00a      	b.n	8005a3e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8005a32:	f107 031c 	add.w	r3, r7, #28
 8005a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f002 ff97 	bl	800896c <memcpy>
		while (!complete) {
 8005a3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f43f af74 	beq.w	8005930 <VL53L0X_perform_ref_spad_management+0x2b8>
 8005a48:	e002      	b.n	8005a50 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005a4e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d115      	bne.n	8005a84 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a5c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005a64:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	781a      	ldrb	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8005a84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	375c      	adds	r7, #92	; 0x5c
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd90      	pop	{r4, r7, pc}

08005a90 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b093      	sub	sp, #76	; 0x4c
 8005a94:	af06      	add	r7, sp, #24
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8005aa8:	23b4      	movs	r3, #180	; 0xb4
 8005aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8005aae:	2306      	movs	r3, #6
 8005ab0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8005ab2:	232c      	movs	r3, #44	; 0x2c
 8005ab4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	21ff      	movs	r1, #255	; 0xff
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f002 fdfc 	bl	80086b8 <VL53L0X_WrByte>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005ac6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d107      	bne.n	8005ade <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8005ace:	2200      	movs	r2, #0
 8005ad0:	214f      	movs	r1, #79	; 0x4f
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f002 fdf0 	bl	80086b8 <VL53L0X_WrByte>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005ade:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d107      	bne.n	8005af6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8005ae6:	222c      	movs	r2, #44	; 0x2c
 8005ae8:	214e      	movs	r1, #78	; 0x4e
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f002 fde4 	bl	80086b8 <VL53L0X_WrByte>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005af6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005afe:	2200      	movs	r2, #0
 8005b00:	21ff      	movs	r1, #255	; 0xff
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f002 fdd8 	bl	80086b8 <VL53L0X_WrByte>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005b0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8005b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	21b6      	movs	r1, #182	; 0xb6
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f002 fdca 	bl	80086b8 <VL53L0X_WrByte>
 8005b24:	4603      	mov	r3, r0
 8005b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2e:	e009      	b.n	8005b44 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	3301      	adds	r3, #1
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
 8005b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d3f1      	bcc.n	8005b30 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d011      	beq.n	8005b76 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005b52:	e002      	b.n	8005b5a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	3301      	adds	r3, #1
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005b5a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	4413      	add	r3, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff fc2a 	bl	80053bc <is_aperture>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d103      	bne.n	8005b76 <VL53L0X_set_reference_spads+0xe6>
 8005b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d3ee      	bcc.n	8005b54 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8005b82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b86:	79f9      	ldrb	r1, [r7, #7]
 8005b88:	f107 0214 	add.w	r2, r7, #20
 8005b8c:	9204      	str	r2, [sp, #16]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	9203      	str	r2, [sp, #12]
 8005b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b94:	9202      	str	r2, [sp, #8]
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	4623      	mov	r3, r4
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff fc83 	bl	80054ac <enable_ref_spads>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8005bac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10c      	bne.n	8005bce <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	79fa      	ldrb	r2, [r7, #7]
 8005bca:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8005bce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3734      	adds	r7, #52	; 0x34
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd90      	pop	{r4, r7, pc}

08005bda <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	f043 0301 	orr.w	r3, r3, #1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f002 fd5a 	bl	80086b8 <VL53L0X_WrByte>
 8005c04:	4603      	mov	r3, r0
 8005c06:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d104      	bne.n	8005c1a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f9bf 	bl	8005f94 <VL53L0X_measurement_poll_for_completion>
 8005c16:	4603      	mov	r3, r0
 8005c18:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d105      	bne.n	8005c2e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005c22:	2100      	movs	r1, #0
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff fab5 	bl	8005194 <VL53L0X_ClearInterruptMask>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005c36:	2200      	movs	r2, #0
 8005c38:	2100      	movs	r1, #0
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f002 fd3c 	bl	80086b8 <VL53L0X_WrByte>
 8005c40:	4603      	mov	r3, r0
 8005c42:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	70fb      	strb	r3, [r7, #3]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70bb      	strb	r3, [r7, #2]
 8005c66:	4613      	mov	r3, r2
 8005c68:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005c72:	2201      	movs	r2, #1
 8005c74:	21ff      	movs	r1, #255	; 0xff
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f002 fd1e 	bl	80086b8 <VL53L0X_WrByte>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	461a      	mov	r2, r3
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005c86:	2200      	movs	r2, #0
 8005c88:	2100      	movs	r1, #0
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f002 fd14 	bl	80086b8 <VL53L0X_WrByte>
 8005c90:	4603      	mov	r3, r0
 8005c92:	461a      	mov	r2, r3
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	21ff      	movs	r1, #255	; 0xff
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f002 fd0a 	bl	80086b8 <VL53L0X_WrByte>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01e      	beq.n	8005cf2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005cb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d009      	beq.n	8005cd0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	21cb      	movs	r1, #203	; 0xcb
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f002 fd7b 	bl	80087bc <VL53L0X_RdByte>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	461a      	mov	r2, r3
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005cd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d02a      	beq.n	8005d2e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005cd8:	f107 030e 	add.w	r3, r7, #14
 8005cdc:	461a      	mov	r2, r3
 8005cde:	21ee      	movs	r1, #238	; 0xee
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f002 fd6b 	bl	80087bc <VL53L0X_RdByte>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	461a      	mov	r2, r3
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	73fb      	strb	r3, [r7, #15]
 8005cf0:	e01d      	b.n	8005d2e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005cf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005cfa:	78bb      	ldrb	r3, [r7, #2]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	21cb      	movs	r1, #203	; 0xcb
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f002 fcd9 	bl	80086b8 <VL53L0X_WrByte>
 8005d06:	4603      	mov	r3, r0
 8005d08:	461a      	mov	r2, r3
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005d10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00a      	beq.n	8005d2e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005d18:	787b      	ldrb	r3, [r7, #1]
 8005d1a:	2280      	movs	r2, #128	; 0x80
 8005d1c:	21ee      	movs	r1, #238	; 0xee
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f002 fd18 	bl	8008754 <VL53L0X_UpdateByte>
 8005d24:	4603      	mov	r3, r0
 8005d26:	461a      	mov	r2, r3
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005d2e:	2201      	movs	r2, #1
 8005d30:	21ff      	movs	r1, #255	; 0xff
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f002 fcc0 	bl	80086b8 <VL53L0X_WrByte>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005d42:	2201      	movs	r2, #1
 8005d44:	2100      	movs	r1, #0
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f002 fcb6 	bl	80086b8 <VL53L0X_WrByte>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	461a      	mov	r2, r3
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005d56:	2200      	movs	r2, #0
 8005d58:	21ff      	movs	r1, #255	; 0xff
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f002 fcac 	bl	80086b8 <VL53L0X_WrByte>
 8005d60:	4603      	mov	r3, r0
 8005d62:	461a      	mov	r2, r3
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005d6a:	7bbb      	ldrb	r3, [r7, #14]
 8005d6c:	f023 0310 	bic.w	r3, r3, #16
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	701a      	strb	r2, [r3, #0]

	return Status;
 8005d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b08a      	sub	sp, #40	; 0x28
 8005d86:	af04      	add	r7, sp, #16
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	461a      	mov	r2, r3
 8005d90:	460b      	mov	r3, r1
 8005d92:	71fb      	strb	r3, [r7, #7]
 8005d94:	4613      	mov	r3, r2
 8005d96:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005dac:	79bb      	ldrb	r3, [r7, #6]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005db8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005dba:	2201      	movs	r2, #1
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f002 fc7a 	bl	80086b8 <VL53L0X_WrByte>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005dc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d105      	bne.n	8005ddc <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005dd0:	2140      	movs	r1, #64	; 0x40
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f7ff ff01 	bl	8005bda <VL53L0X_perform_single_ref_calibration>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005ddc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d115      	bne.n	8005e10 <VL53L0X_perform_vhv_calibration+0x8e>
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d112      	bne.n	8005e10 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005dea:	7d39      	ldrb	r1, [r7, #20]
 8005dec:	7d7a      	ldrb	r2, [r7, #21]
 8005dee:	2300      	movs	r3, #0
 8005df0:	9303      	str	r3, [sp, #12]
 8005df2:	2301      	movs	r3, #1
 8005df4:	9302      	str	r3, [sp, #8]
 8005df6:	f107 0313 	add.w	r3, r7, #19
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	460b      	mov	r3, r1
 8005e02:	2101      	movs	r1, #1
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7ff ff23 	bl	8005c50 <VL53L0X_ref_calibration_io>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	75fb      	strb	r3, [r7, #23]
 8005e0e:	e002      	b.n	8005e16 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d112      	bne.n	8005e44 <VL53L0X_perform_vhv_calibration+0xc2>
 8005e1e:	79bb      	ldrb	r3, [r7, #6]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00f      	beq.n	8005e44 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005e24:	7dbb      	ldrb	r3, [r7, #22]
 8005e26:	461a      	mov	r2, r3
 8005e28:	2101      	movs	r1, #1
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f002 fc44 	bl	80086b8 <VL53L0X_WrByte>
 8005e30:	4603      	mov	r3, r0
 8005e32:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d103      	bne.n	8005e44 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	7dba      	ldrb	r2, [r7, #22]
 8005e40:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005e44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08a      	sub	sp, #40	; 0x28
 8005e54:	af04      	add	r7, sp, #16
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	460b      	mov	r3, r1
 8005e60:	71fb      	strb	r3, [r7, #7]
 8005e62:	4613      	mov	r3, r2
 8005e64:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005e76:	79bb      	ldrb	r3, [r7, #6]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005e82:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005e84:	2202      	movs	r2, #2
 8005e86:	2101      	movs	r1, #1
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f002 fc15 	bl	80086b8 <VL53L0X_WrByte>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d105      	bne.n	8005ea6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7ff fe9c 	bl	8005bda <VL53L0X_perform_single_ref_calibration>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d115      	bne.n	8005eda <VL53L0X_perform_phase_calibration+0x8a>
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d112      	bne.n	8005eda <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005eb4:	7d39      	ldrb	r1, [r7, #20]
 8005eb6:	7d7a      	ldrb	r2, [r7, #21]
 8005eb8:	2301      	movs	r3, #1
 8005eba:	9303      	str	r3, [sp, #12]
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	9302      	str	r3, [sp, #8]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	9301      	str	r3, [sp, #4]
 8005ec4:	f107 0313 	add.w	r3, r7, #19
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	2101      	movs	r1, #1
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7ff febe 	bl	8005c50 <VL53L0X_ref_calibration_io>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]
 8005ed8:	e002      	b.n	8005ee0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d112      	bne.n	8005f0e <VL53L0X_perform_phase_calibration+0xbe>
 8005ee8:	79bb      	ldrb	r3, [r7, #6]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00f      	beq.n	8005f0e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005eee:	7dbb      	ldrb	r3, [r7, #22]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f002 fbdf 	bl	80086b8 <VL53L0X_WrByte>
 8005efa:	4603      	mov	r3, r0
 8005efc:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d103      	bne.n	8005f0e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	7dba      	ldrb	r2, [r7, #22]
 8005f0a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b086      	sub	sp, #24
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005f36:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7ff ff1f 	bl	8005d82 <VL53L0X_perform_vhv_calibration>
 8005f44:	4603      	mov	r3, r0
 8005f46:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d107      	bne.n	8005f60 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	2300      	movs	r3, #0
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7ff ff7a 	bl	8005e50 <VL53L0X_perform_phase_calibration>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10f      	bne.n	8005f88 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005f68:	7dbb      	ldrb	r3, [r7, #22]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f002 fba2 	bl	80086b8 <VL53L0X_WrByte>
 8005f74:	4603      	mov	r3, r0
 8005f76:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d103      	bne.n	8005f88 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	7dba      	ldrb	r2, [r7, #22]
 8005f84:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005fa8:	f107 030f 	add.w	r3, r7, #15
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fe fdf1 	bl	8004b96 <VL53L0X_GetMeasurementDataReady>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d110      	bne.n	8005fe2 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d00f      	beq.n	8005fe6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005fd2:	d302      	bcc.n	8005fda <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005fd4:	23f9      	movs	r3, #249	; 0xf9
 8005fd6:	75fb      	strb	r3, [r7, #23]
			break;
 8005fd8:	e006      	b.n	8005fe8 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f002 fc8c 	bl	80088f8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005fe0:	e7e2      	b.n	8005fa8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8005fe6:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005fe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	3301      	adds	r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800600c:	7bfb      	ldrb	r3, [r7, #15]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800601a:	b480      	push	{r7}
 800601c:	b085      	sub	sp, #20
 800601e:	af00      	add	r7, sp, #0
 8006020:	4603      	mov	r3, r0
 8006022:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	085b      	lsrs	r3, r3, #1
 800602c:	b2db      	uxtb	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800604c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006050:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006052:	e002      	b.n	800605a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	089b      	lsrs	r3, r3, #2
 8006058:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	429a      	cmp	r2, r3
 8006060:	d8f8      	bhi.n	8006054 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8006062:	e017      	b.n	8006094 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4413      	add	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d30b      	bcc.n	8006088 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4413      	add	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	4413      	add	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	e002      	b.n	800608e <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	085b      	lsrs	r3, r3, #1
 800608c:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	089b      	lsrs	r3, r3, #2
 8006092:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e4      	bne.n	8006064 <VL53L0X_isqrt+0x24>
	}

	return res;
 800609a:	68fb      	ldr	r3, [r7, #12]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80060b4:	2200      	movs	r2, #0
 80060b6:	2183      	movs	r1, #131	; 0x83
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f002 fafd 	bl	80086b8 <VL53L0X_WrByte>
 80060be:	4603      	mov	r3, r0
 80060c0:	461a      	mov	r2, r3
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80060c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d11e      	bne.n	800610e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80060d4:	f107 030f 	add.w	r3, r7, #15
 80060d8:	461a      	mov	r2, r3
 80060da:	2183      	movs	r1, #131	; 0x83
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f002 fb6d 	bl	80087bc <VL53L0X_RdByte>
 80060e2:	4603      	mov	r3, r0
 80060e4:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10a      	bne.n	8006102 <VL53L0X_device_read_strobe+0x5a>
 80060ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d106      	bne.n	8006102 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	3301      	adds	r3, #1
 80060f8:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006100:	d3e8      	bcc.n	80060d4 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006108:	d301      	bcc.n	800610e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800610a:	23f9      	movs	r3, #249	; 0xf9
 800610c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800610e:	2201      	movs	r2, #1
 8006110:	2183      	movs	r1, #131	; 0x83
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f002 fad0 	bl	80086b8 <VL53L0X_WrByte>
 8006118:	4603      	mov	r3, r0
 800611a:	461a      	mov	r2, r3
 800611c:	7dfb      	ldrb	r3, [r7, #23]
 800611e:	4313      	orrs	r3, r2
 8006120:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8006122:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b098      	sub	sp, #96	; 0x60
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	460b      	mov	r3, r1
 8006138:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800613a:	2300      	movs	r3, #0
 800613c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8006150:	2300      	movs	r3, #0
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800615e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006162:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006176:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800617a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800617e:	2b07      	cmp	r3, #7
 8006180:	f000 8408 	beq.w	8006994 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006184:	2201      	movs	r2, #1
 8006186:	2180      	movs	r1, #128	; 0x80
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f002 fa95 	bl	80086b8 <VL53L0X_WrByte>
 800618e:	4603      	mov	r3, r0
 8006190:	461a      	mov	r2, r3
 8006192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006196:	4313      	orrs	r3, r2
 8006198:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800619c:	2201      	movs	r2, #1
 800619e:	21ff      	movs	r1, #255	; 0xff
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f002 fa89 	bl	80086b8 <VL53L0X_WrByte>
 80061a6:	4603      	mov	r3, r0
 80061a8:	461a      	mov	r2, r3
 80061aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80061b4:	2200      	movs	r2, #0
 80061b6:	2100      	movs	r1, #0
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f002 fa7d 	bl	80086b8 <VL53L0X_WrByte>
 80061be:	4603      	mov	r3, r0
 80061c0:	461a      	mov	r2, r3
 80061c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80061cc:	2206      	movs	r2, #6
 80061ce:	21ff      	movs	r1, #255	; 0xff
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f002 fa71 	bl	80086b8 <VL53L0X_WrByte>
 80061d6:	4603      	mov	r3, r0
 80061d8:	461a      	mov	r2, r3
 80061da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061de:	4313      	orrs	r3, r2
 80061e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80061e4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80061e8:	461a      	mov	r2, r3
 80061ea:	2183      	movs	r1, #131	; 0x83
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f002 fae5 	bl	80087bc <VL53L0X_RdByte>
 80061f2:	4603      	mov	r3, r0
 80061f4:	461a      	mov	r2, r3
 80061f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006200:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006204:	f043 0304 	orr.w	r3, r3, #4
 8006208:	b2db      	uxtb	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	2183      	movs	r1, #131	; 0x83
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f002 fa52 	bl	80086b8 <VL53L0X_WrByte>
 8006214:	4603      	mov	r3, r0
 8006216:	461a      	mov	r2, r3
 8006218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800621c:	4313      	orrs	r3, r2
 800621e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006222:	2207      	movs	r2, #7
 8006224:	21ff      	movs	r1, #255	; 0xff
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f002 fa46 	bl	80086b8 <VL53L0X_WrByte>
 800622c:	4603      	mov	r3, r0
 800622e:	461a      	mov	r2, r3
 8006230:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006234:	4313      	orrs	r3, r2
 8006236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800623a:	2201      	movs	r2, #1
 800623c:	2181      	movs	r1, #129	; 0x81
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f002 fa3a 	bl	80086b8 <VL53L0X_WrByte>
 8006244:	4603      	mov	r3, r0
 8006246:	461a      	mov	r2, r3
 8006248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800624c:	4313      	orrs	r3, r2
 800624e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f002 fb50 	bl	80088f8 <VL53L0X_PollingDelay>
 8006258:	4603      	mov	r3, r0
 800625a:	461a      	mov	r2, r3
 800625c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006260:	4313      	orrs	r3, r2
 8006262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006266:	2201      	movs	r2, #1
 8006268:	2180      	movs	r1, #128	; 0x80
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f002 fa24 	bl	80086b8 <VL53L0X_WrByte>
 8006270:	4603      	mov	r3, r0
 8006272:	461a      	mov	r2, r3
 8006274:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006278:	4313      	orrs	r3, r2
 800627a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8098 	beq.w	80063ba <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800628a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800628e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006292:	2b00      	cmp	r3, #0
 8006294:	f040 8091 	bne.w	80063ba <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006298:	226b      	movs	r2, #107	; 0x6b
 800629a:	2194      	movs	r1, #148	; 0x94
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f002 fa0b 	bl	80086b8 <VL53L0X_WrByte>
 80062a2:	4603      	mov	r3, r0
 80062a4:	461a      	mov	r2, r3
 80062a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fef9 	bl	80060a8 <VL53L0X_device_read_strobe>
 80062b6:	4603      	mov	r3, r0
 80062b8:	461a      	mov	r2, r3
 80062ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062be:	4313      	orrs	r3, r2
 80062c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80062c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062c8:	461a      	mov	r2, r3
 80062ca:	2190      	movs	r1, #144	; 0x90
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f002 fad7 	bl	8008880 <VL53L0X_RdDWord>
 80062d2:	4603      	mov	r3, r0
 80062d4:	461a      	mov	r2, r3
 80062d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062da:	4313      	orrs	r3, r2
 80062dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	0a1b      	lsrs	r3, r3, #8
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	0bdb      	lsrs	r3, r3, #15
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80062fc:	2224      	movs	r2, #36	; 0x24
 80062fe:	2194      	movs	r1, #148	; 0x94
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f002 f9d9 	bl	80086b8 <VL53L0X_WrByte>
 8006306:	4603      	mov	r3, r0
 8006308:	461a      	mov	r2, r3
 800630a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800630e:	4313      	orrs	r3, r2
 8006310:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff fec7 	bl	80060a8 <VL53L0X_device_read_strobe>
 800631a:	4603      	mov	r3, r0
 800631c:	461a      	mov	r2, r3
 800631e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006322:	4313      	orrs	r3, r2
 8006324:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800632c:	461a      	mov	r2, r3
 800632e:	2190      	movs	r1, #144	; 0x90
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f002 faa5 	bl	8008880 <VL53L0X_RdDWord>
 8006336:	4603      	mov	r3, r0
 8006338:	461a      	mov	r2, r3
 800633a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800633e:	4313      	orrs	r3, r2
 8006340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	0e1b      	lsrs	r3, r3, #24
 8006348:	b2db      	uxtb	r3, r3
 800634a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	0c1b      	lsrs	r3, r3, #16
 8006350:	b2db      	uxtb	r3, r3
 8006352:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	0a1b      	lsrs	r3, r3, #8
 8006358:	b2db      	uxtb	r3, r3
 800635a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	b2db      	uxtb	r3, r3
 8006360:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006362:	2225      	movs	r2, #37	; 0x25
 8006364:	2194      	movs	r1, #148	; 0x94
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f002 f9a6 	bl	80086b8 <VL53L0X_WrByte>
 800636c:	4603      	mov	r3, r0
 800636e:	461a      	mov	r2, r3
 8006370:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006374:	4313      	orrs	r3, r2
 8006376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff fe94 	bl	80060a8 <VL53L0X_device_read_strobe>
 8006380:	4603      	mov	r3, r0
 8006382:	461a      	mov	r2, r3
 8006384:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006388:	4313      	orrs	r3, r2
 800638a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800638e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006392:	461a      	mov	r2, r3
 8006394:	2190      	movs	r1, #144	; 0x90
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f002 fa72 	bl	8008880 <VL53L0X_RdDWord>
 800639c:	4603      	mov	r3, r0
 800639e:	461a      	mov	r2, r3
 80063a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	0e1b      	lsrs	r3, r3, #24
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	0c1b      	lsrs	r3, r3, #16
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8189 	beq.w	80066d8 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80063c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063ca:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f040 8182 	bne.w	80066d8 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80063d4:	2202      	movs	r2, #2
 80063d6:	2194      	movs	r1, #148	; 0x94
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f002 f96d 	bl	80086b8 <VL53L0X_WrByte>
 80063de:	4603      	mov	r3, r0
 80063e0:	461a      	mov	r2, r3
 80063e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff fe5b 	bl	80060a8 <VL53L0X_device_read_strobe>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006400:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8006404:	461a      	mov	r2, r3
 8006406:	2190      	movs	r1, #144	; 0x90
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f002 f9d7 	bl	80087bc <VL53L0X_RdByte>
 800640e:	4603      	mov	r3, r0
 8006410:	461a      	mov	r2, r3
 8006412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006416:	4313      	orrs	r3, r2
 8006418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800641c:	227b      	movs	r2, #123	; 0x7b
 800641e:	2194      	movs	r1, #148	; 0x94
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f002 f949 	bl	80086b8 <VL53L0X_WrByte>
 8006426:	4603      	mov	r3, r0
 8006428:	461a      	mov	r2, r3
 800642a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800642e:	4313      	orrs	r3, r2
 8006430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff fe37 	bl	80060a8 <VL53L0X_device_read_strobe>
 800643a:	4603      	mov	r3, r0
 800643c:	461a      	mov	r2, r3
 800643e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006442:	4313      	orrs	r3, r2
 8006444:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006448:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800644c:	461a      	mov	r2, r3
 800644e:	2190      	movs	r1, #144	; 0x90
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f002 f9b3 	bl	80087bc <VL53L0X_RdByte>
 8006456:	4603      	mov	r3, r0
 8006458:	461a      	mov	r2, r3
 800645a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800645e:	4313      	orrs	r3, r2
 8006460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006464:	2277      	movs	r2, #119	; 0x77
 8006466:	2194      	movs	r1, #148	; 0x94
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f002 f925 	bl	80086b8 <VL53L0X_WrByte>
 800646e:	4603      	mov	r3, r0
 8006470:	461a      	mov	r2, r3
 8006472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006476:	4313      	orrs	r3, r2
 8006478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff fe13 	bl	80060a8 <VL53L0X_device_read_strobe>
 8006482:	4603      	mov	r3, r0
 8006484:	461a      	mov	r2, r3
 8006486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800648a:	4313      	orrs	r3, r2
 800648c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006490:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006494:	461a      	mov	r2, r3
 8006496:	2190      	movs	r1, #144	; 0x90
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f002 f9f1 	bl	8008880 <VL53L0X_RdDWord>
 800649e:	4603      	mov	r3, r0
 80064a0:	461a      	mov	r2, r3
 80064a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	0e5b      	lsrs	r3, r3, #25
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	0c9b      	lsrs	r3, r3, #18
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	0adb      	lsrs	r3, r3, #11
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	091b      	lsrs	r3, r3, #4
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80064f6:	2278      	movs	r2, #120	; 0x78
 80064f8:	2194      	movs	r1, #148	; 0x94
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f002 f8dc 	bl	80086b8 <VL53L0X_WrByte>
 8006500:	4603      	mov	r3, r0
 8006502:	461a      	mov	r2, r3
 8006504:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006508:	4313      	orrs	r3, r2
 800650a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff fdca 	bl	80060a8 <VL53L0X_device_read_strobe>
 8006514:	4603      	mov	r3, r0
 8006516:	461a      	mov	r2, r3
 8006518:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800651c:	4313      	orrs	r3, r2
 800651e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006522:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006526:	461a      	mov	r2, r3
 8006528:	2190      	movs	r1, #144	; 0x90
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f002 f9a8 	bl	8008880 <VL53L0X_RdDWord>
 8006530:	4603      	mov	r3, r0
 8006532:	461a      	mov	r2, r3
 8006534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006538:	4313      	orrs	r3, r2
 800653a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	0f5b      	lsrs	r3, r3, #29
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006548:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800654a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800654e:	4413      	add	r3, r2
 8006550:	b2db      	uxtb	r3, r3
 8006552:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	0d9b      	lsrs	r3, r3, #22
 8006558:	b2db      	uxtb	r3, r3
 800655a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800655e:	b2db      	uxtb	r3, r3
 8006560:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	0bdb      	lsrs	r3, r3, #15
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800656c:	b2db      	uxtb	r3, r3
 800656e:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800657a:	b2db      	uxtb	r3, r3
 800657c:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	085b      	lsrs	r3, r3, #1
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006588:	b2db      	uxtb	r3, r3
 800658a:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	b2db      	uxtb	r3, r3
 8006590:	019b      	lsls	r3, r3, #6
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800659e:	2279      	movs	r2, #121	; 0x79
 80065a0:	2194      	movs	r1, #148	; 0x94
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f002 f888 	bl	80086b8 <VL53L0X_WrByte>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065b0:	4313      	orrs	r3, r2
 80065b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff fd76 	bl	80060a8 <VL53L0X_device_read_strobe>
 80065bc:	4603      	mov	r3, r0
 80065be:	461a      	mov	r2, r3
 80065c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80065ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065ce:	461a      	mov	r2, r3
 80065d0:	2190      	movs	r1, #144	; 0x90
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f002 f954 	bl	8008880 <VL53L0X_RdDWord>
 80065d8:	4603      	mov	r3, r0
 80065da:	461a      	mov	r2, r3
 80065dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	0e9b      	lsrs	r3, r3, #26
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f0:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80065f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065f6:	4413      	add	r3, r2
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	0cdb      	lsrs	r3, r3, #19
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006606:	b2db      	uxtb	r3, r3
 8006608:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	0b1b      	lsrs	r3, r3, #12
 800660e:	b2db      	uxtb	r3, r3
 8006610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006614:	b2db      	uxtb	r3, r3
 8006616:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	b2db      	uxtb	r3, r3
 800661e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006622:	b2db      	uxtb	r3, r3
 8006624:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	b2db      	uxtb	r3, r3
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	b2db      	uxtb	r3, r3
 800662e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006638:	227a      	movs	r2, #122	; 0x7a
 800663a:	2194      	movs	r1, #148	; 0x94
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f002 f83b 	bl	80086b8 <VL53L0X_WrByte>
 8006642:	4603      	mov	r3, r0
 8006644:	461a      	mov	r2, r3
 8006646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800664a:	4313      	orrs	r3, r2
 800664c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff fd29 	bl	80060a8 <VL53L0X_device_read_strobe>
 8006656:	4603      	mov	r3, r0
 8006658:	461a      	mov	r2, r3
 800665a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800665e:	4313      	orrs	r3, r2
 8006660:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006664:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006668:	461a      	mov	r2, r3
 800666a:	2190      	movs	r1, #144	; 0x90
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f002 f907 	bl	8008880 <VL53L0X_RdDWord>
 8006672:	4603      	mov	r3, r0
 8006674:	461a      	mov	r2, r3
 8006676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800667a:	4313      	orrs	r3, r2
 800667c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	0f9b      	lsrs	r3, r3, #30
 8006684:	b2db      	uxtb	r3, r3
 8006686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800668a:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800668c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006690:	4413      	add	r3, r2
 8006692:	b2db      	uxtb	r3, r3
 8006694:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	0ddb      	lsrs	r3, r3, #23
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	0c1b      	lsrs	r3, r3, #16
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	0a5b      	lsrs	r3, r3, #9
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	089b      	lsrs	r3, r3, #2
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80066d2:	2300      	movs	r3, #0
 80066d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 80f1 	beq.w	80068c6 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80066e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066e8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 80ea 	bne.w	80068c6 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80066f2:	227b      	movs	r2, #123	; 0x7b
 80066f4:	2194      	movs	r1, #148	; 0x94
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f001 ffde 	bl	80086b8 <VL53L0X_WrByte>
 80066fc:	4603      	mov	r3, r0
 80066fe:	461a      	mov	r2, r3
 8006700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006704:	4313      	orrs	r3, r2
 8006706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7ff fccc 	bl	80060a8 <VL53L0X_device_read_strobe>
 8006710:	4603      	mov	r3, r0
 8006712:	461a      	mov	r2, r3
 8006714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006718:	4313      	orrs	r3, r2
 800671a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800671e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006722:	461a      	mov	r2, r3
 8006724:	2190      	movs	r1, #144	; 0x90
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f002 f8aa 	bl	8008880 <VL53L0X_RdDWord>
 800672c:	4603      	mov	r3, r0
 800672e:	461a      	mov	r2, r3
 8006730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006734:	4313      	orrs	r3, r2
 8006736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800673a:	227c      	movs	r2, #124	; 0x7c
 800673c:	2194      	movs	r1, #148	; 0x94
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 ffba 	bl	80086b8 <VL53L0X_WrByte>
 8006744:	4603      	mov	r3, r0
 8006746:	461a      	mov	r2, r3
 8006748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800674c:	4313      	orrs	r3, r2
 800674e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fca8 	bl	80060a8 <VL53L0X_device_read_strobe>
 8006758:	4603      	mov	r3, r0
 800675a:	461a      	mov	r2, r3
 800675c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006760:	4313      	orrs	r3, r2
 8006762:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800676a:	461a      	mov	r2, r3
 800676c:	2190      	movs	r1, #144	; 0x90
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f002 f886 	bl	8008880 <VL53L0X_RdDWord>
 8006774:	4603      	mov	r3, r0
 8006776:	461a      	mov	r2, r3
 8006778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800677c:	4313      	orrs	r3, r2
 800677e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006782:	2273      	movs	r2, #115	; 0x73
 8006784:	2194      	movs	r1, #148	; 0x94
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 ff96 	bl	80086b8 <VL53L0X_WrByte>
 800678c:	4603      	mov	r3, r0
 800678e:	461a      	mov	r2, r3
 8006790:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006794:	4313      	orrs	r3, r2
 8006796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fc84 	bl	80060a8 <VL53L0X_device_read_strobe>
 80067a0:	4603      	mov	r3, r0
 80067a2:	461a      	mov	r2, r3
 80067a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80067ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067b2:	461a      	mov	r2, r3
 80067b4:	2190      	movs	r1, #144	; 0x90
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f002 f862 	bl	8008880 <VL53L0X_RdDWord>
 80067bc:	4603      	mov	r3, r0
 80067be:	461a      	mov	r2, r3
 80067c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80067d2:	2274      	movs	r2, #116	; 0x74
 80067d4:	2194      	movs	r1, #148	; 0x94
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 ff6e 	bl	80086b8 <VL53L0X_WrByte>
 80067dc:	4603      	mov	r3, r0
 80067de:	461a      	mov	r2, r3
 80067e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067e4:	4313      	orrs	r3, r2
 80067e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff fc5c 	bl	80060a8 <VL53L0X_device_read_strobe>
 80067f0:	4603      	mov	r3, r0
 80067f2:	461a      	mov	r2, r3
 80067f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80067fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006802:	461a      	mov	r2, r3
 8006804:	2190      	movs	r1, #144	; 0x90
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f002 f83a 	bl	8008880 <VL53L0X_RdDWord>
 800680c:	4603      	mov	r3, r0
 800680e:	461a      	mov	r2, r3
 8006810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006814:	4313      	orrs	r3, r2
 8006816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800681e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006820:	4313      	orrs	r3, r2
 8006822:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006824:	2275      	movs	r2, #117	; 0x75
 8006826:	2194      	movs	r1, #148	; 0x94
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 ff45 	bl	80086b8 <VL53L0X_WrByte>
 800682e:	4603      	mov	r3, r0
 8006830:	461a      	mov	r2, r3
 8006832:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006836:	4313      	orrs	r3, r2
 8006838:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fc33 	bl	80060a8 <VL53L0X_device_read_strobe>
 8006842:	4603      	mov	r3, r0
 8006844:	461a      	mov	r2, r3
 8006846:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800684a:	4313      	orrs	r3, r2
 800684c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006854:	461a      	mov	r2, r3
 8006856:	2190      	movs	r1, #144	; 0x90
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f002 f811 	bl	8008880 <VL53L0X_RdDWord>
 800685e:	4603      	mov	r3, r0
 8006860:	461a      	mov	r2, r3
 8006862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006866:	4313      	orrs	r3, r2
 8006868:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006870:	b29b      	uxth	r3, r3
 8006872:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006874:	2276      	movs	r2, #118	; 0x76
 8006876:	2194      	movs	r1, #148	; 0x94
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 ff1d 	bl	80086b8 <VL53L0X_WrByte>
 800687e:	4603      	mov	r3, r0
 8006880:	461a      	mov	r2, r3
 8006882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006886:	4313      	orrs	r3, r2
 8006888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff fc0b 	bl	80060a8 <VL53L0X_device_read_strobe>
 8006892:	4603      	mov	r3, r0
 8006894:	461a      	mov	r2, r3
 8006896:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800689a:	4313      	orrs	r3, r2
 800689c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80068a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068a4:	461a      	mov	r2, r3
 80068a6:	2190      	movs	r1, #144	; 0x90
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 ffe9 	bl	8008880 <VL53L0X_RdDWord>
 80068ae:	4603      	mov	r3, r0
 80068b0:	461a      	mov	r2, r3
 80068b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80068c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068c2:	4313      	orrs	r3, r2
 80068c4:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80068c6:	2200      	movs	r2, #0
 80068c8:	2181      	movs	r1, #129	; 0x81
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fef4 	bl	80086b8 <VL53L0X_WrByte>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068d8:	4313      	orrs	r3, r2
 80068da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80068de:	2206      	movs	r2, #6
 80068e0:	21ff      	movs	r1, #255	; 0xff
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 fee8 	bl	80086b8 <VL53L0X_WrByte>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80068f6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80068fa:	461a      	mov	r2, r3
 80068fc:	2183      	movs	r1, #131	; 0x83
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f001 ff5c 	bl	80087bc <VL53L0X_RdByte>
 8006904:	4603      	mov	r3, r0
 8006906:	461a      	mov	r2, r3
 8006908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800690c:	4313      	orrs	r3, r2
 800690e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006916:	f023 0304 	bic.w	r3, r3, #4
 800691a:	b2db      	uxtb	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	2183      	movs	r1, #131	; 0x83
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 fec9 	bl	80086b8 <VL53L0X_WrByte>
 8006926:	4603      	mov	r3, r0
 8006928:	461a      	mov	r2, r3
 800692a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800692e:	4313      	orrs	r3, r2
 8006930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006934:	2201      	movs	r2, #1
 8006936:	21ff      	movs	r1, #255	; 0xff
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 febd 	bl	80086b8 <VL53L0X_WrByte>
 800693e:	4603      	mov	r3, r0
 8006940:	461a      	mov	r2, r3
 8006942:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006946:	4313      	orrs	r3, r2
 8006948:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800694c:	2201      	movs	r2, #1
 800694e:	2100      	movs	r1, #0
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 feb1 	bl	80086b8 <VL53L0X_WrByte>
 8006956:	4603      	mov	r3, r0
 8006958:	461a      	mov	r2, r3
 800695a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800695e:	4313      	orrs	r3, r2
 8006960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006964:	2200      	movs	r2, #0
 8006966:	21ff      	movs	r1, #255	; 0xff
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fea5 	bl	80086b8 <VL53L0X_WrByte>
 800696e:	4603      	mov	r3, r0
 8006970:	461a      	mov	r2, r3
 8006972:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006976:	4313      	orrs	r3, r2
 8006978:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800697c:	2200      	movs	r2, #0
 800697e:	2180      	movs	r1, #128	; 0x80
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 fe99 	bl	80086b8 <VL53L0X_WrByte>
 8006986:	4603      	mov	r3, r0
 8006988:	461a      	mov	r2, r3
 800698a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800698e:	4313      	orrs	r3, r2
 8006990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006994:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006998:	2b00      	cmp	r3, #0
 800699a:	f040 808f 	bne.w	8006abc <VL53L0X_get_info_from_device+0x98e>
 800699e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069a2:	2b07      	cmp	r3, #7
 80069a4:	f000 808a 	beq.w	8006abc <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d024      	beq.n	80069fc <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80069b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069b6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d11e      	bne.n	80069fc <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80069c4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80069ce:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80069d2:	2300      	movs	r3, #0
 80069d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d6:	e00e      	b.n	80069f6 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80069d8:	f107 0208 	add.w	r2, r7, #8
 80069dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069de:	4413      	add	r3, r2
 80069e0:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80069ec:	460a      	mov	r2, r1
 80069ee:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80069f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f2:	3301      	adds	r3, #1
 80069f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f8:	2b05      	cmp	r3, #5
 80069fa:	dded      	ble.n	80069d8 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d018      	beq.n	8006a38 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006a06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a0a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d112      	bne.n	8006a38 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a12:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a1c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	33f3      	adds	r3, #243	; 0xf3
 8006a2a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006a2c:	f107 0310 	add.w	r3, r7, #16
 8006a30:	4619      	mov	r1, r3
 8006a32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a34:	f002 f8d8 	bl	8008be8 <strcpy>

		}

		if (((option & 4) == 4) &&
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d030      	beq.n	8006aa4 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006a42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a46:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d12a      	bne.n	8006aa4 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a60:	025b      	lsls	r3, r3, #9
 8006a62:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a68:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8006a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d011      	beq.n	8006a9c <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8006a78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a86:	fb02 f303 	mul.w	r3, r2, r3
 8006a8a:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8006a8c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8006a90:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006a94:	425b      	negs	r3, r3
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8006a9c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006aa4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8006ab2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006abc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3760      	adds	r7, #96	; 0x60
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006ac8:	b490      	push	{r4, r7}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006ad4:	f240 6377 	movw	r3, #1655	; 0x677
 8006ad8:	f04f 0400 	mov.w	r4, #0
 8006adc:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8006ae0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006ae4:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006ae6:	78fb      	ldrb	r3, [r7, #3]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	fb02 f303 	mul.w	r3, r2, r3
 8006af4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8006af6:	68bb      	ldr	r3, [r7, #8]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc90      	pop	{r4, r7}
 8006b00:	4770      	bx	lr

08006b02 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b087      	sub	sp, #28
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d017      	beq.n	8006b4c <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006b22:	e005      	b.n	8006b30 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	085b      	lsrs	r3, r3, #1
 8006b28:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006b2a:	89fb      	ldrh	r3, [r7, #14]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1f4      	bne.n	8006b24 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006b3a:	89fb      	ldrh	r3, [r7, #14]
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8006b48:	4413      	add	r3, r2
 8006b4a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8006b4c:	8afb      	ldrh	r3, [r7, #22]

}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	4603      	mov	r3, r0
 8006b62:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006b6c:	88fa      	ldrh	r2, [r7, #6]
 8006b6e:	0a12      	lsrs	r2, r2, #8
 8006b70:	b292      	uxth	r2, r2
 8006b72:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006b74:	3301      	adds	r3, #1
 8006b76:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006b78:	68fb      	ldr	r3, [r7, #12]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
	...

08006b88 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006b9a:	79fb      	ldrb	r3, [r7, #7]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff ff92 	bl	8006ac8 <VL53L0X_calc_macro_period_ps>
 8006ba4:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006bac:	4a0a      	ldr	r2, [pc, #40]	; (8006bd8 <VL53L0X_calc_timeout_mclks+0x50>)
 8006bae:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb2:	099b      	lsrs	r3, r3, #6
 8006bb4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bbc:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	441a      	add	r2, r3
	timeout_period_mclks =
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bcc:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8006bce:	69fb      	ldr	r3, [r7, #28]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3720      	adds	r7, #32
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	10624dd3 	.word	0x10624dd3

08006bdc <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	807b      	strh	r3, [r7, #2]
 8006be8:	4613      	mov	r3, r2
 8006bea:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006bf0:	787b      	ldrb	r3, [r7, #1]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff ff67 	bl	8006ac8 <VL53L0X_calc_macro_period_ps>
 8006bfa:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006c02:	4a0a      	ldr	r2, [pc, #40]	; (8006c2c <VL53L0X_calc_timeout_us+0x50>)
 8006c04:	fba2 2303 	umull	r2, r3, r2, r3
 8006c08:	099b      	lsrs	r3, r3, #6
 8006c0a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006c0c:	887b      	ldrh	r3, [r7, #2]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	fb02 f303 	mul.w	r3, r2, r3
 8006c14:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8006c18:	4a04      	ldr	r2, [pc, #16]	; (8006c2c <VL53L0X_calc_timeout_us+0x50>)
 8006c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1e:	099b      	lsrs	r3, r3, #6
 8006c20:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006c22:	697b      	ldr	r3, [r7, #20]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	10624dd3 	.word	0x10624dd3

08006c30 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08c      	sub	sp, #48	; 0x30
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006c56:	7afb      	ldrb	r3, [r7, #11]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <get_sequence_step_timeout+0x38>
 8006c5c:	7afb      	ldrb	r3, [r7, #11]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d002      	beq.n	8006c68 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006c62:	7afb      	ldrb	r3, [r7, #11]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d128      	bne.n	8006cba <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006c68:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	2100      	movs	r1, #0
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7fd fa6f 	bl	8004154 <VL53L0X_GetVcselPulsePeriod>
 8006c76:	4603      	mov	r3, r0
 8006c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006c7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d109      	bne.n	8006c98 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006c84:	f107 0320 	add.w	r3, r7, #32
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2146      	movs	r1, #70	; 0x46
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f001 fd95 	bl	80087bc <VL53L0X_RdByte>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006c98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff ff5b 	bl	8006b5a <VL53L0X_decode_timeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006ca8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006cac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cae:	4619      	mov	r1, r3
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f7ff ff93 	bl	8006bdc <VL53L0X_calc_timeout_us>
 8006cb6:	62b8      	str	r0, [r7, #40]	; 0x28
 8006cb8:	e092      	b.n	8006de0 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006cba:	7afb      	ldrb	r3, [r7, #11]
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d135      	bne.n	8006d2c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006cc0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f7fd fa43 	bl	8004154 <VL53L0X_GetVcselPulsePeriod>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006cd4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f040 8081 	bne.w	8006de0 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006cde:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f7fd fa34 	bl	8004154 <VL53L0X_GetVcselPulsePeriod>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006cf2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d109      	bne.n	8006d0e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006cfa:	f107 031e 	add.w	r3, r7, #30
 8006cfe:	461a      	mov	r2, r3
 8006d00:	2151      	movs	r1, #81	; 0x51
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f001 fd84 	bl	8008810 <VL53L0X_RdWord>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006d0e:	8bfb      	ldrh	r3, [r7, #30]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff ff22 	bl	8006b5a <VL53L0X_decode_timeout>
 8006d16:	4603      	mov	r3, r0
 8006d18:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006d1a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006d1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d20:	4619      	mov	r1, r3
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7ff ff5a 	bl	8006bdc <VL53L0X_calc_timeout_us>
 8006d28:	62b8      	str	r0, [r7, #40]	; 0x28
 8006d2a:	e059      	b.n	8006de0 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006d2c:	7afb      	ldrb	r3, [r7, #11]
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d156      	bne.n	8006de0 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006d32:	f107 0314 	add.w	r3, r7, #20
 8006d36:	4619      	mov	r1, r3
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7fd fb17 	bl	800436c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01d      	beq.n	8006d84 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006d48:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2100      	movs	r1, #0
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7fd f9ff 	bl	8004154 <VL53L0X_GetVcselPulsePeriod>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006d5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10f      	bne.n	8006d84 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006d64:	f107 031e 	add.w	r3, r7, #30
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2151      	movs	r1, #81	; 0x51
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f001 fd4f 	bl	8008810 <VL53L0X_RdWord>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006d78:	8bfb      	ldrh	r3, [r7, #30]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff feed 	bl	8006b5a <VL53L0X_decode_timeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006d84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006d8c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006d90:	461a      	mov	r2, r3
 8006d92:	2101      	movs	r1, #1
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7fd f9dd 	bl	8004154 <VL53L0X_GetVcselPulsePeriod>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006da0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10f      	bne.n	8006dc8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006da8:	f107 031c 	add.w	r3, r7, #28
 8006dac:	461a      	mov	r2, r3
 8006dae:	2171      	movs	r1, #113	; 0x71
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f001 fd2d 	bl	8008810 <VL53L0X_RdWord>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006dbc:	8bbb      	ldrh	r3, [r7, #28]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff fecb 	bl	8006b5a <VL53L0X_decode_timeout>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006dc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006dca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006dd0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f7ff feff 	bl	8006bdc <VL53L0X_calc_timeout_us>
 8006dde:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de4:	601a      	str	r2, [r3, #0]

	return Status;
 8006de6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3730      	adds	r7, #48	; 0x30
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b08a      	sub	sp, #40	; 0x28
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	607a      	str	r2, [r7, #4]
 8006dfe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <set_sequence_step_timeout+0x26>
 8006e0c:	7afb      	ldrb	r3, [r7, #11]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d002      	beq.n	8006e18 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d138      	bne.n	8006e8a <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e18:	f107 031b 	add.w	r3, r7, #27
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	2100      	movs	r1, #0
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7fd f997 	bl	8004154 <VL53L0X_GetVcselPulsePeriod>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006e2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d11a      	bne.n	8006e6a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006e34:	7efb      	ldrb	r3, [r7, #27]
 8006e36:	461a      	mov	r2, r3
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff fea4 	bl	8006b88 <VL53L0X_calc_timeout_mclks>
 8006e40:	4603      	mov	r3, r0
 8006e42:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006e44:	8bbb      	ldrh	r3, [r7, #28]
 8006e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4a:	d903      	bls.n	8006e54 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006e4c:	23ff      	movs	r3, #255	; 0xff
 8006e4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e52:	e004      	b.n	8006e5e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006e54:	8bbb      	ldrh	r3, [r7, #28]
 8006e56:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006e5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006e6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f040 80ab 	bne.w	8006fca <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006e74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e78:	461a      	mov	r2, r3
 8006e7a:	2146      	movs	r1, #70	; 0x46
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f001 fc1b 	bl	80086b8 <VL53L0X_WrByte>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006e88:	e09f      	b.n	8006fca <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006e8a:	7afb      	ldrb	r3, [r7, #11]
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d135      	bne.n	8006efc <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006e90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d11b      	bne.n	8006ed0 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e98:	f107 031b 	add.w	r3, r7, #27
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f7fd f957 	bl	8004154 <VL53L0X_GetVcselPulsePeriod>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006eac:	7efb      	ldrb	r3, [r7, #27]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6879      	ldr	r1, [r7, #4]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f7ff fe68 	bl	8006b88 <VL53L0X_calc_timeout_mclks>
 8006eb8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006eba:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006ebc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff fe1f 	bl	8006b02 <VL53L0X_encode_timeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006ec8:	8b3a      	ldrh	r2, [r7, #24]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006ed0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d108      	bne.n	8006eea <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006ed8:	8b3b      	ldrh	r3, [r7, #24]
 8006eda:	461a      	mov	r2, r3
 8006edc:	2151      	movs	r1, #81	; 0x51
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f001 fc0e 	bl	8008700 <VL53L0X_WrWord>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006eea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d16b      	bne.n	8006fca <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006efa:	e066      	b.n	8006fca <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006efc:	7afb      	ldrb	r3, [r7, #11]
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d160      	bne.n	8006fc4 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006f02:	f107 0310 	add.w	r3, r7, #16
 8006f06:	4619      	mov	r1, r3
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7fd fa2f 	bl	800436c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006f12:	7cfb      	ldrb	r3, [r7, #19]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01d      	beq.n	8006f54 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f18:	f107 031b 	add.w	r3, r7, #27
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	2100      	movs	r1, #0
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7fd f917 	bl	8004154 <VL53L0X_GetVcselPulsePeriod>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006f2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10f      	bne.n	8006f54 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006f34:	f107 0318 	add.w	r3, r7, #24
 8006f38:	461a      	mov	r2, r3
 8006f3a:	2151      	movs	r1, #81	; 0x51
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f001 fc67 	bl	8008810 <VL53L0X_RdWord>
 8006f42:	4603      	mov	r3, r0
 8006f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006f48:	8b3b      	ldrh	r3, [r7, #24]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fe05 	bl	8006b5a <VL53L0X_decode_timeout>
 8006f50:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006f52:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006f54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d109      	bne.n	8006f70 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f5c:	f107 031b 	add.w	r3, r7, #27
 8006f60:	461a      	mov	r2, r3
 8006f62:	2101      	movs	r1, #1
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7fd f8f5 	bl	8004154 <VL53L0X_GetVcselPulsePeriod>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006f70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d128      	bne.n	8006fca <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006f78:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7ff fe02 	bl	8006b88 <VL53L0X_calc_timeout_mclks>
 8006f84:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f88:	6a3a      	ldr	r2, [r7, #32]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8006f8e:	6a38      	ldr	r0, [r7, #32]
 8006f90:	f7ff fdb7 	bl	8006b02 <VL53L0X_encode_timeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8006f98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d108      	bne.n	8006fb2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006fa0:	8bfb      	ldrh	r3, [r7, #30]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	2171      	movs	r1, #113	; 0x71
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f001 fbaa 	bl	8008700 <VL53L0X_WrWord>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006fb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d107      	bne.n	8006fca <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006fc2:	e002      	b.n	8006fca <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006fc4:	23fc      	movs	r3, #252	; 0xfc
 8006fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8006fca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3728      	adds	r7, #40	; 0x28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b08a      	sub	sp, #40	; 0x28
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	70fb      	strb	r3, [r7, #3]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006fec:	230c      	movs	r3, #12
 8006fee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8006ff2:	2312      	movs	r3, #18
 8006ff4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8006ffe:	230e      	movs	r3, #14
 8007000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8007008:	78bb      	ldrb	r3, [r7, #2]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007014:	23fc      	movs	r3, #252	; 0xfc
 8007016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800701a:	e020      	b.n	800705e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10d      	bne.n	800703e <VL53L0X_set_vcsel_pulse_period+0x68>
 8007022:	78ba      	ldrb	r2, [r7, #2]
 8007024:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007028:	429a      	cmp	r2, r3
 800702a:	d304      	bcc.n	8007036 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800702c:	78ba      	ldrb	r2, [r7, #2]
 800702e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007032:	429a      	cmp	r2, r3
 8007034:	d903      	bls.n	800703e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007036:	23fc      	movs	r3, #252	; 0xfc
 8007038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800703c:	e00f      	b.n	800705e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800703e:	78fb      	ldrb	r3, [r7, #3]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d10c      	bne.n	800705e <VL53L0X_set_vcsel_pulse_period+0x88>
 8007044:	78ba      	ldrb	r2, [r7, #2]
 8007046:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800704a:	429a      	cmp	r2, r3
 800704c:	d304      	bcc.n	8007058 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800704e:	78ba      	ldrb	r2, [r7, #2]
 8007050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007054:	429a      	cmp	r2, r3
 8007056:	d902      	bls.n	800705e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007058:	23fc      	movs	r3, #252	; 0xfc
 800705a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800705e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8007066:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800706a:	e239      	b.n	80074e0 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d150      	bne.n	8007114 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8007072:	78bb      	ldrb	r3, [r7, #2]
 8007074:	2b0c      	cmp	r3, #12
 8007076:	d110      	bne.n	800709a <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8007078:	2218      	movs	r2, #24
 800707a:	2157      	movs	r1, #87	; 0x57
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 fb1b 	bl	80086b8 <VL53L0X_WrByte>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8007088:	2208      	movs	r2, #8
 800708a:	2156      	movs	r1, #86	; 0x56
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 fb13 	bl	80086b8 <VL53L0X_WrByte>
 8007092:	4603      	mov	r3, r0
 8007094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007098:	e17f      	b.n	800739a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800709a:	78bb      	ldrb	r3, [r7, #2]
 800709c:	2b0e      	cmp	r3, #14
 800709e:	d110      	bne.n	80070c2 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80070a0:	2230      	movs	r2, #48	; 0x30
 80070a2:	2157      	movs	r1, #87	; 0x57
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 fb07 	bl	80086b8 <VL53L0X_WrByte>
 80070aa:	4603      	mov	r3, r0
 80070ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80070b0:	2208      	movs	r2, #8
 80070b2:	2156      	movs	r1, #86	; 0x56
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 faff 	bl	80086b8 <VL53L0X_WrByte>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070c0:	e16b      	b.n	800739a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80070c2:	78bb      	ldrb	r3, [r7, #2]
 80070c4:	2b10      	cmp	r3, #16
 80070c6:	d110      	bne.n	80070ea <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80070c8:	2240      	movs	r2, #64	; 0x40
 80070ca:	2157      	movs	r1, #87	; 0x57
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 faf3 	bl	80086b8 <VL53L0X_WrByte>
 80070d2:	4603      	mov	r3, r0
 80070d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80070d8:	2208      	movs	r2, #8
 80070da:	2156      	movs	r1, #86	; 0x56
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 faeb 	bl	80086b8 <VL53L0X_WrByte>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070e8:	e157      	b.n	800739a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80070ea:	78bb      	ldrb	r3, [r7, #2]
 80070ec:	2b12      	cmp	r3, #18
 80070ee:	f040 8154 	bne.w	800739a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80070f2:	2250      	movs	r2, #80	; 0x50
 80070f4:	2157      	movs	r1, #87	; 0x57
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 fade 	bl	80086b8 <VL53L0X_WrByte>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8007102:	2208      	movs	r2, #8
 8007104:	2156      	movs	r1, #86	; 0x56
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 fad6 	bl	80086b8 <VL53L0X_WrByte>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007112:	e142      	b.n	800739a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	2b01      	cmp	r3, #1
 8007118:	f040 813f 	bne.w	800739a <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800711c:	78bb      	ldrb	r3, [r7, #2]
 800711e:	2b08      	cmp	r3, #8
 8007120:	d14c      	bne.n	80071bc <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8007122:	2210      	movs	r2, #16
 8007124:	2148      	movs	r1, #72	; 0x48
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fac6 	bl	80086b8 <VL53L0X_WrByte>
 800712c:	4603      	mov	r3, r0
 800712e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8007132:	2208      	movs	r2, #8
 8007134:	2147      	movs	r1, #71	; 0x47
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 fabe 	bl	80086b8 <VL53L0X_WrByte>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007142:	2202      	movs	r2, #2
 8007144:	2132      	movs	r1, #50	; 0x32
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 fab6 	bl	80086b8 <VL53L0X_WrByte>
 800714c:	4603      	mov	r3, r0
 800714e:	461a      	mov	r2, r3
 8007150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007154:	4313      	orrs	r3, r2
 8007156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800715a:	220c      	movs	r2, #12
 800715c:	2130      	movs	r1, #48	; 0x30
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 faaa 	bl	80086b8 <VL53L0X_WrByte>
 8007164:	4603      	mov	r3, r0
 8007166:	461a      	mov	r2, r3
 8007168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800716c:	4313      	orrs	r3, r2
 800716e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007172:	2201      	movs	r2, #1
 8007174:	21ff      	movs	r1, #255	; 0xff
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 fa9e 	bl	80086b8 <VL53L0X_WrByte>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007184:	4313      	orrs	r3, r2
 8007186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800718a:	2230      	movs	r2, #48	; 0x30
 800718c:	2130      	movs	r1, #48	; 0x30
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 fa92 	bl	80086b8 <VL53L0X_WrByte>
 8007194:	4603      	mov	r3, r0
 8007196:	461a      	mov	r2, r3
 8007198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800719c:	4313      	orrs	r3, r2
 800719e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80071a2:	2200      	movs	r2, #0
 80071a4:	21ff      	movs	r1, #255	; 0xff
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 fa86 	bl	80086b8 <VL53L0X_WrByte>
 80071ac:	4603      	mov	r3, r0
 80071ae:	461a      	mov	r2, r3
 80071b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071ba:	e0ee      	b.n	800739a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80071bc:	78bb      	ldrb	r3, [r7, #2]
 80071be:	2b0a      	cmp	r3, #10
 80071c0:	d14c      	bne.n	800725c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80071c2:	2228      	movs	r2, #40	; 0x28
 80071c4:	2148      	movs	r1, #72	; 0x48
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f001 fa76 	bl	80086b8 <VL53L0X_WrByte>
 80071cc:	4603      	mov	r3, r0
 80071ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80071d2:	2208      	movs	r2, #8
 80071d4:	2147      	movs	r1, #71	; 0x47
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fa6e 	bl	80086b8 <VL53L0X_WrByte>
 80071dc:	4603      	mov	r3, r0
 80071de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80071e2:	2203      	movs	r2, #3
 80071e4:	2132      	movs	r1, #50	; 0x32
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fa66 	bl	80086b8 <VL53L0X_WrByte>
 80071ec:	4603      	mov	r3, r0
 80071ee:	461a      	mov	r2, r3
 80071f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80071fa:	2209      	movs	r2, #9
 80071fc:	2130      	movs	r1, #48	; 0x30
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 fa5a 	bl	80086b8 <VL53L0X_WrByte>
 8007204:	4603      	mov	r3, r0
 8007206:	461a      	mov	r2, r3
 8007208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800720c:	4313      	orrs	r3, r2
 800720e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007212:	2201      	movs	r2, #1
 8007214:	21ff      	movs	r1, #255	; 0xff
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 fa4e 	bl	80086b8 <VL53L0X_WrByte>
 800721c:	4603      	mov	r3, r0
 800721e:	461a      	mov	r2, r3
 8007220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007224:	4313      	orrs	r3, r2
 8007226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800722a:	2220      	movs	r2, #32
 800722c:	2130      	movs	r1, #48	; 0x30
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 fa42 	bl	80086b8 <VL53L0X_WrByte>
 8007234:	4603      	mov	r3, r0
 8007236:	461a      	mov	r2, r3
 8007238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800723c:	4313      	orrs	r3, r2
 800723e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007242:	2200      	movs	r2, #0
 8007244:	21ff      	movs	r1, #255	; 0xff
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 fa36 	bl	80086b8 <VL53L0X_WrByte>
 800724c:	4603      	mov	r3, r0
 800724e:	461a      	mov	r2, r3
 8007250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007254:	4313      	orrs	r3, r2
 8007256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800725a:	e09e      	b.n	800739a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800725c:	78bb      	ldrb	r3, [r7, #2]
 800725e:	2b0c      	cmp	r3, #12
 8007260:	d14c      	bne.n	80072fc <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8007262:	2238      	movs	r2, #56	; 0x38
 8007264:	2148      	movs	r1, #72	; 0x48
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 fa26 	bl	80086b8 <VL53L0X_WrByte>
 800726c:	4603      	mov	r3, r0
 800726e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8007272:	2208      	movs	r2, #8
 8007274:	2147      	movs	r1, #71	; 0x47
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 fa1e 	bl	80086b8 <VL53L0X_WrByte>
 800727c:	4603      	mov	r3, r0
 800727e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007282:	2203      	movs	r2, #3
 8007284:	2132      	movs	r1, #50	; 0x32
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 fa16 	bl	80086b8 <VL53L0X_WrByte>
 800728c:	4603      	mov	r3, r0
 800728e:	461a      	mov	r2, r3
 8007290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007294:	4313      	orrs	r3, r2
 8007296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800729a:	2208      	movs	r2, #8
 800729c:	2130      	movs	r1, #48	; 0x30
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f001 fa0a 	bl	80086b8 <VL53L0X_WrByte>
 80072a4:	4603      	mov	r3, r0
 80072a6:	461a      	mov	r2, r3
 80072a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80072b2:	2201      	movs	r2, #1
 80072b4:	21ff      	movs	r1, #255	; 0xff
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 f9fe 	bl	80086b8 <VL53L0X_WrByte>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80072ca:	2220      	movs	r2, #32
 80072cc:	2130      	movs	r1, #48	; 0x30
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 f9f2 	bl	80086b8 <VL53L0X_WrByte>
 80072d4:	4603      	mov	r3, r0
 80072d6:	461a      	mov	r2, r3
 80072d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072dc:	4313      	orrs	r3, r2
 80072de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80072e2:	2200      	movs	r2, #0
 80072e4:	21ff      	movs	r1, #255	; 0xff
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 f9e6 	bl	80086b8 <VL53L0X_WrByte>
 80072ec:	4603      	mov	r3, r0
 80072ee:	461a      	mov	r2, r3
 80072f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072fa:	e04e      	b.n	800739a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80072fc:	78bb      	ldrb	r3, [r7, #2]
 80072fe:	2b0e      	cmp	r3, #14
 8007300:	d14b      	bne.n	800739a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007302:	2248      	movs	r2, #72	; 0x48
 8007304:	2148      	movs	r1, #72	; 0x48
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 f9d6 	bl	80086b8 <VL53L0X_WrByte>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8007312:	2208      	movs	r2, #8
 8007314:	2147      	movs	r1, #71	; 0x47
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 f9ce 	bl	80086b8 <VL53L0X_WrByte>
 800731c:	4603      	mov	r3, r0
 800731e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007322:	2203      	movs	r2, #3
 8007324:	2132      	movs	r1, #50	; 0x32
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 f9c6 	bl	80086b8 <VL53L0X_WrByte>
 800732c:	4603      	mov	r3, r0
 800732e:	461a      	mov	r2, r3
 8007330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007334:	4313      	orrs	r3, r2
 8007336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800733a:	2207      	movs	r2, #7
 800733c:	2130      	movs	r1, #48	; 0x30
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 f9ba 	bl	80086b8 <VL53L0X_WrByte>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800734c:	4313      	orrs	r3, r2
 800734e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007352:	2201      	movs	r2, #1
 8007354:	21ff      	movs	r1, #255	; 0xff
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 f9ae 	bl	80086b8 <VL53L0X_WrByte>
 800735c:	4603      	mov	r3, r0
 800735e:	461a      	mov	r2, r3
 8007360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007364:	4313      	orrs	r3, r2
 8007366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800736a:	2220      	movs	r2, #32
 800736c:	2130      	movs	r1, #48	; 0x30
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f9a2 	bl	80086b8 <VL53L0X_WrByte>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800737c:	4313      	orrs	r3, r2
 800737e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007382:	2200      	movs	r2, #0
 8007384:	21ff      	movs	r1, #255	; 0xff
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 f996 	bl	80086b8 <VL53L0X_WrByte>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007394:	4313      	orrs	r3, r2
 8007396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800739a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d17f      	bne.n	80074a2 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80073a2:	78bb      	ldrb	r3, [r7, #2]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fe fe38 	bl	800601a <VL53L0X_encode_vcsel_period>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d045      	beq.n	8007446 <VL53L0X_set_vcsel_pulse_period+0x470>
 80073ba:	e06e      	b.n	800749a <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80073bc:	f107 0314 	add.w	r3, r7, #20
 80073c0:	461a      	mov	r2, r3
 80073c2:	2103      	movs	r1, #3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff fc33 	bl	8006c30 <get_sequence_step_timeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80073d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d109      	bne.n	80073ec <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80073d8:	f107 0310 	add.w	r3, r7, #16
 80073dc:	461a      	mov	r2, r3
 80073de:	2102      	movs	r1, #2
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff fc25 	bl	8006c30 <get_sequence_step_timeout>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80073ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d109      	bne.n	8007408 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80073f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80073f8:	461a      	mov	r2, r3
 80073fa:	2150      	movs	r1, #80	; 0x50
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 f95b 	bl	80086b8 <VL53L0X_WrByte>
 8007402:	4603      	mov	r3, r0
 8007404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007408:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800740c:	2b00      	cmp	r3, #0
 800740e:	d108      	bne.n	8007422 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	461a      	mov	r2, r3
 8007414:	2103      	movs	r1, #3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7ff fceb 	bl	8006df2 <set_sequence_step_timeout>
 800741c:	4603      	mov	r3, r0
 800741e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8007422:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007426:	2b00      	cmp	r3, #0
 8007428:	d108      	bne.n	800743c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	461a      	mov	r2, r3
 800742e:	2102      	movs	r1, #2
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff fcde 	bl	8006df2 <set_sequence_step_timeout>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	78ba      	ldrb	r2, [r7, #2]
 8007440:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007444:	e02e      	b.n	80074a4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007446:	f107 0318 	add.w	r3, r7, #24
 800744a:	461a      	mov	r2, r3
 800744c:	2104      	movs	r1, #4
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff fbee 	bl	8006c30 <get_sequence_step_timeout>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800745a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800745e:	2b00      	cmp	r3, #0
 8007460:	d109      	bne.n	8007476 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8007462:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007466:	461a      	mov	r2, r3
 8007468:	2170      	movs	r1, #112	; 0x70
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 f924 	bl	80086b8 <VL53L0X_WrByte>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007476:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800747a:	2b00      	cmp	r3, #0
 800747c:	d108      	bne.n	8007490 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	461a      	mov	r2, r3
 8007482:	2104      	movs	r1, #4
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff fcb4 	bl	8006df2 <set_sequence_step_timeout>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	78ba      	ldrb	r2, [r7, #2]
 8007494:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007498:	e004      	b.n	80074a4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800749a:	23fc      	movs	r3, #252	; 0xfc
 800749c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074a0:	e000      	b.n	80074a4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80074a2:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80074a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d109      	bne.n	80074c0 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80074b2:	69f9      	ldr	r1, [r7, #28]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7fc fe0f 	bl	80040d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80074c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d109      	bne.n	80074dc <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80074c8:	f107 010f 	add.w	r1, r7, #15
 80074cc:	2301      	movs	r3, #1
 80074ce:	2200      	movs	r2, #0
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7fe fcbd 	bl	8005e50 <VL53L0X_perform_phase_calibration>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80074dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3728      	adds	r7, #40	; 0x28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	460b      	mov	r3, r1
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80074fa:	7afb      	ldrb	r3, [r7, #11]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007500:	2b01      	cmp	r3, #1
 8007502:	d00a      	beq.n	800751a <VL53L0X_get_vcsel_pulse_period+0x32>
 8007504:	e013      	b.n	800752e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007506:	f107 0316 	add.w	r3, r7, #22
 800750a:	461a      	mov	r2, r3
 800750c:	2150      	movs	r1, #80	; 0x50
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f001 f954 	bl	80087bc <VL53L0X_RdByte>
 8007514:	4603      	mov	r3, r0
 8007516:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007518:	e00b      	b.n	8007532 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800751a:	f107 0316 	add.w	r3, r7, #22
 800751e:	461a      	mov	r2, r3
 8007520:	2170      	movs	r1, #112	; 0x70
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f001 f94a 	bl	80087bc <VL53L0X_RdByte>
 8007528:	4603      	mov	r3, r0
 800752a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800752c:	e001      	b.n	8007532 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800752e:	23fc      	movs	r3, #252	; 0xfc
 8007530:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d107      	bne.n	800754a <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800753a:	7dbb      	ldrb	r3, [r7, #22]
 800753c:	4618      	mov	r0, r3
 800753e:	f7fe fd59 	bl	8005ff4 <VL53L0X_decode_vcsel_period>
 8007542:	4603      	mov	r3, r0
 8007544:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	701a      	strb	r2, [r3, #0]

	return Status;
 800754a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b092      	sub	sp, #72	; 0x48
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007560:	2300      	movs	r3, #0
 8007562:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007566:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800756a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800756c:	f240 7376 	movw	r3, #1910	; 0x776
 8007570:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8007572:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007576:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007578:	f44f 7325 	mov.w	r3, #660	; 0x294
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800757e:	f240 234e 	movw	r3, #590	; 0x24e
 8007582:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8007584:	f240 23b2 	movw	r3, #690	; 0x2b2
 8007588:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800758a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800758e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007590:	f240 2326 	movw	r3, #550	; 0x226
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007596:	2300      	movs	r3, #0
 8007598:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800759a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800759e:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d205      	bcs.n	80075b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075ac:	23fc      	movs	r3, #252	; 0xfc
 80075ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80075b2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80075b6:	e0aa      	b.n	800770e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80075b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80075c4:	f107 0314 	add.w	r3, r7, #20
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fc fece 	bl	800436c <VL53L0X_GetSequenceStepEnables>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80075d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d15b      	bne.n	8007696 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80075de:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80075e4:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d102      	bne.n	80075f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80075ea:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d052      	beq.n	8007696 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80075f0:	f107 0310 	add.w	r3, r7, #16
 80075f4:	461a      	mov	r2, r3
 80075f6:	2102      	movs	r1, #2
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff fb19 	bl	8006c30 <get_sequence_step_timeout>
 80075fe:	4603      	mov	r3, r0
 8007600:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8007604:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800760c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007610:	e07d      	b.n	800770e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8007612:	7d3b      	ldrb	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00f      	beq.n	8007638 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8007618:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800761a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761c:	4413      	add	r3, r2
 800761e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007624:	429a      	cmp	r2, r3
 8007626:	d204      	bcs.n	8007632 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8007628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	643b      	str	r3, [r7, #64]	; 0x40
 8007630:	e002      	b.n	8007638 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007632:	23fc      	movs	r3, #252	; 0xfc
 8007634:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8007638:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8007640:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007644:	e063      	b.n	800770e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8007646:	7dbb      	ldrb	r3, [r7, #22]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d011      	beq.n	8007670 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007650:	4413      	add	r3, r2
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765a:	429a      	cmp	r2, r3
 800765c:	d204      	bcs.n	8007668 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800765e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	643b      	str	r3, [r7, #64]	; 0x40
 8007666:	e016      	b.n	8007696 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007668:	23fc      	movs	r3, #252	; 0xfc
 800766a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800766e:	e012      	b.n	8007696 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007670:	7d7b      	ldrb	r3, [r7, #21]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00f      	beq.n	8007696 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800767a:	4413      	add	r3, r2
 800767c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007682:	429a      	cmp	r2, r3
 8007684:	d204      	bcs.n	8007690 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	643b      	str	r3, [r7, #64]	; 0x40
 800768e:	e002      	b.n	8007696 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007690:	23fc      	movs	r3, #252	; 0xfc
 8007692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007696:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800769e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80076a2:	e034      	b.n	800770e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d019      	beq.n	80076de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80076aa:	f107 030c 	add.w	r3, r7, #12
 80076ae:	461a      	mov	r2, r3
 80076b0:	2103      	movs	r1, #3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff fabc 	bl	8006c30 <get_sequence_step_timeout>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076c2:	4413      	add	r3, r2
 80076c4:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d204      	bcs.n	80076d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80076ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	643b      	str	r3, [r7, #64]	; 0x40
 80076d6:	e002      	b.n	80076de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076d8:	23fc      	movs	r3, #252	; 0xfc
 80076da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80076de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d111      	bne.n	800770a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80076e6:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00e      	beq.n	800770a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80076ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80076f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076f6:	2104      	movs	r1, #4
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fb7a 	bl	8006df2 <set_sequence_step_timeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800770a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800770e:	4618      	mov	r0, r3
 8007710:	3748      	adds	r7, #72	; 0x48
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b090      	sub	sp, #64	; 0x40
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007720:	2300      	movs	r3, #0
 8007722:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007726:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800772a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800772c:	f240 7376 	movw	r3, #1910	; 0x776
 8007730:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8007732:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007738:	f44f 7325 	mov.w	r3, #660	; 0x294
 800773c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800773e:	f240 234e 	movw	r3, #590	; 0x24e
 8007742:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8007744:	f240 23b2 	movw	r3, #690	; 0x2b2
 8007748:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800774a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007750:	f240 2326 	movw	r3, #550	; 0x226
 8007754:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800775a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800775c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775e:	441a      	add	r2, r3
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007764:	f107 0318 	add.w	r3, r7, #24
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fc fdfe 	bl	800436c <VL53L0X_GetSequenceStepEnables>
 8007770:	4603      	mov	r3, r0
 8007772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8007776:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800777e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007782:	e075      	b.n	8007870 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8007784:	7e3b      	ldrb	r3, [r7, #24]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d105      	bne.n	8007796 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800778a:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800778c:	2b00      	cmp	r3, #0
 800778e:	d102      	bne.n	8007796 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8007790:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8007792:	2b00      	cmp	r3, #0
 8007794:	d030      	beq.n	80077f8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8007796:	f107 0310 	add.w	r3, r7, #16
 800779a:	461a      	mov	r2, r3
 800779c:	2102      	movs	r1, #2
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7ff fa46 	bl	8006c30 <get_sequence_step_timeout>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80077aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d122      	bne.n	80077f8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80077b2:	7e3b      	ldrb	r3, [r7, #24]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d007      	beq.n	80077c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80077bc:	6939      	ldr	r1, [r7, #16]
 80077be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c0:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80077c2:	441a      	add	r2, r3
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80077c8:	7ebb      	ldrb	r3, [r7, #26]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80077d2:	6939      	ldr	r1, [r7, #16]
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	440b      	add	r3, r1
 80077d8:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80077da:	441a      	add	r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	e00a      	b.n	80077f8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80077e2:	7e7b      	ldrb	r3, [r7, #25]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d007      	beq.n	80077f8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80077ec:	6939      	ldr	r1, [r7, #16]
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80077f2:	441a      	add	r2, r3
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80077f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d114      	bne.n	800782a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007800:	7efb      	ldrb	r3, [r7, #27]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d011      	beq.n	800782a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8007806:	f107 030c 	add.w	r3, r7, #12
 800780a:	461a      	mov	r2, r3
 800780c:	2103      	movs	r1, #3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff fa0e 	bl	8006c30 <get_sequence_step_timeout>
 8007814:	4603      	mov	r3, r0
 8007816:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007824:	441a      	add	r2, r3
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800782a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800782e:	2b00      	cmp	r3, #0
 8007830:	d114      	bne.n	800785c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007832:	7f3b      	ldrb	r3, [r7, #28]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d011      	beq.n	800785c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	461a      	mov	r2, r3
 800783e:	2104      	movs	r1, #4
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff f9f5 	bl	8006c30 <get_sequence_step_timeout>
 8007846:	4603      	mov	r3, r0
 8007848:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007850:	6979      	ldr	r1, [r7, #20]
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007856:	441a      	add	r2, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800785c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007860:	2b00      	cmp	r3, #0
 8007862:	d103      	bne.n	800786c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800786c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007870:	4618      	mov	r0, r3
 8007872:	3740      	adds	r7, #64	; 0x40
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007882:	2300      	movs	r3, #0
 8007884:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800788a:	e0c6      	b.n	8007a1a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4413      	add	r3, r2
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	74fb      	strb	r3, [r7, #19]
		Index++;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	3301      	adds	r3, #1
 800789a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800789c:	7cfb      	ldrb	r3, [r7, #19]
 800789e:	2bff      	cmp	r3, #255	; 0xff
 80078a0:	f040 808d 	bne.w	80079be <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	4413      	add	r3, r2
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	747b      	strb	r3, [r7, #17]
			Index++;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	3301      	adds	r3, #1
 80078b2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80078b4:	7c7b      	ldrb	r3, [r7, #17]
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d87e      	bhi.n	80079b8 <VL53L0X_load_tuning_settings+0x140>
 80078ba:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <VL53L0X_load_tuning_settings+0x48>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078d1 	.word	0x080078d1
 80078c4:	0800790b 	.word	0x0800790b
 80078c8:	08007945 	.word	0x08007945
 80078cc:	0800797f 	.word	0x0800797f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4413      	add	r3, r2
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	743b      	strb	r3, [r7, #16]
				Index++;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	3301      	adds	r3, #1
 80078de:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	4413      	add	r3, r2
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	73fb      	strb	r3, [r7, #15]
				Index++;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	3301      	adds	r3, #1
 80078ee:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80078f0:	7c3b      	ldrb	r3, [r7, #16]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	4413      	add	r3, r2
 80078fe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	89ba      	ldrh	r2, [r7, #12]
 8007904:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8007908:	e087      	b.n	8007a1a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	4413      	add	r3, r2
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	743b      	strb	r3, [r7, #16]
				Index++;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	3301      	adds	r3, #1
 8007918:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	4413      	add	r3, r2
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	3301      	adds	r3, #1
 8007928:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800792a:	7c3b      	ldrb	r3, [r7, #16]
 800792c:	b29b      	uxth	r3, r3
 800792e:	021b      	lsls	r3, r3, #8
 8007930:	b29a      	uxth	r2, r3
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	b29b      	uxth	r3, r3
 8007936:	4413      	add	r3, r2
 8007938:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	89ba      	ldrh	r2, [r7, #12]
 800793e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8007942:	e06a      	b.n	8007a1a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	4413      	add	r3, r2
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	743b      	strb	r3, [r7, #16]
				Index++;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	3301      	adds	r3, #1
 8007952:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	4413      	add	r3, r2
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	3301      	adds	r3, #1
 8007962:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007964:	7c3b      	ldrb	r3, [r7, #16]
 8007966:	b29b      	uxth	r3, r3
 8007968:	021b      	lsls	r3, r3, #8
 800796a:	b29a      	uxth	r2, r3
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	b29b      	uxth	r3, r3
 8007970:	4413      	add	r3, r2
 8007972:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	89ba      	ldrh	r2, [r7, #12]
 8007978:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800797c:	e04d      	b.n	8007a1a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	4413      	add	r3, r2
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	743b      	strb	r3, [r7, #16]
				Index++;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	3301      	adds	r3, #1
 800798c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	4413      	add	r3, r2
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	3301      	adds	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800799e:	7c3b      	ldrb	r3, [r7, #16]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	021b      	lsls	r3, r3, #8
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	4413      	add	r3, r2
 80079ac:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	89ba      	ldrh	r2, [r7, #12]
 80079b2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80079b6:	e030      	b.n	8007a1a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80079b8:	23fc      	movs	r3, #252	; 0xfc
 80079ba:	77fb      	strb	r3, [r7, #31]
 80079bc:	e02d      	b.n	8007a1a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80079be:	7cfb      	ldrb	r3, [r7, #19]
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d828      	bhi.n	8007a16 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	4413      	add	r3, r2
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	74bb      	strb	r3, [r7, #18]
			Index++;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	3301      	adds	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80079d4:	2300      	movs	r3, #0
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	e00f      	b.n	80079fa <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	4413      	add	r3, r2
 80079e0:	7819      	ldrb	r1, [r3, #0]
 80079e2:	f107 0208 	add.w	r2, r7, #8
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	4413      	add	r3, r2
 80079ea:	460a      	mov	r2, r1
 80079ec:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	3301      	adds	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	3301      	adds	r3, #1
 80079f8:	61bb      	str	r3, [r7, #24]
 80079fa:	7cfb      	ldrb	r3, [r7, #19]
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	dbeb      	blt.n	80079da <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007a02:	7cfb      	ldrb	r3, [r7, #19]
 8007a04:	f107 0208 	add.w	r2, r7, #8
 8007a08:	7cb9      	ldrb	r1, [r7, #18]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fdf8 	bl	8008600 <VL53L0X_WriteMulti>
 8007a10:	4603      	mov	r3, r0
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	e001      	b.n	8007a1a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a16:	23fc      	movs	r3, #252	; 0xfc
 8007a18:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	4413      	add	r3, r2
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d004      	beq.n	8007a30 <VL53L0X_load_tuning_settings+0x1b8>
 8007a26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f43f af2e 	beq.w	800788c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3720      	adds	r7, #32
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007a52:	f107 0313 	add.w	r3, r7, #19
 8007a56:	4619      	mov	r1, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7fc fd13 	bl	8004484 <VL53L0X_GetXTalkCompensationEnable>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8007a62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d111      	bne.n	8007a8e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007a6a:	7cfb      	ldrb	r3, [r7, #19]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00e      	beq.n	8007a8e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	8a9b      	ldrh	r3, [r3, #20]
 8007a7a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	fb02 f303 	mul.w	r3, r2, r3
 8007a82:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	3380      	adds	r3, #128	; 0x80
 8007a88:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007a8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3720      	adds	r7, #32
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8007ab2:	f107 0310 	add.w	r3, r7, #16
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f7ff ffbe 	bl	8007a3c <VL53L0X_get_total_xtalk_rate>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007ac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d105      	bne.n	8007ad8 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	441a      	add	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	601a      	str	r2, [r3, #0]

	return Status;
 8007ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b09a      	sub	sp, #104	; 0x68
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007af2:	2312      	movs	r3, #18
 8007af4:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8007af6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007afa:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007afc:	2342      	movs	r3, #66	; 0x42
 8007afe:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007b00:	2306      	movs	r3, #6
 8007b02:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007b04:	2307      	movs	r3, #7
 8007b06:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007b1c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b22:	fb02 f303 	mul.w	r3, r2, r3
 8007b26:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8007b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2a:	3380      	adds	r3, #128	; 0x80
 8007b2c:	0a1b      	lsrs	r3, r3, #8
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8007b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b34:	fb02 f303 	mul.w	r3, r2, r3
 8007b38:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01b      	beq.n	8007b7c <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	029b      	lsls	r3, r3, #10
 8007b48:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b50:	4413      	add	r3, r2
 8007b52:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007b54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007b5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b60:	4613      	mov	r3, r2
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	4413      	add	r3, r2
 8007b66:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b6c:	fb02 f303 	mul.w	r3, r2, r3
 8007b70:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8007b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007b78:	0c1b      	lsrs	r3, r3, #16
 8007b7a:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b80:	fb02 f303 	mul.w	r3, r2, r3
 8007b84:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007b8c:	0c1b      	lsrs	r3, r3, #16
 8007b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b94:	fb02 f303 	mul.w	r3, r2, r3
 8007b98:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b9c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007ba0:	0c1b      	lsrs	r3, r3, #16
 8007ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba6:	085a      	lsrs	r2, r3, #1
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	441a      	add	r2, r3
 8007bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bb8:	fb02 f303 	mul.w	r3, r2, r3
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc4:	d302      	bcc.n	8007bcc <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8007bc6:	4b55      	ldr	r3, [pc, #340]	; (8007d1c <VL53L0X_calc_dmax+0x238>)
 8007bc8:	663b      	str	r3, [r7, #96]	; 0x60
 8007bca:	e016      	b.n	8007bfa <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bce:	085a      	lsrs	r2, r3, #1
 8007bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bd2:	441a      	add	r2, r3
 8007bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bda:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007be0:	fb02 f303 	mul.w	r3, r2, r3
 8007be4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007be8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007bec:	0c1b      	lsrs	r3, r3, #16
 8007bee:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bf4:	fb02 f303 	mul.w	r3, r2, r3
 8007bf8:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bfc:	039b      	lsls	r3, r3, #14
 8007bfe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007c02:	4a47      	ldr	r2, [pc, #284]	; (8007d20 <VL53L0X_calc_dmax+0x23c>)
 8007c04:	fba2 2303 	umull	r2, r3, r2, r3
 8007c08:	099b      	lsrs	r3, r3, #6
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c10:	fb02 f303 	mul.w	r3, r2, r3
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c1a:	fb02 f303 	mul.w	r3, r2, r3
 8007c1e:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	3308      	adds	r3, #8
 8007c24:	091b      	lsrs	r3, r3, #4
 8007c26:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8007c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	4613      	mov	r3, r2
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	4413      	add	r3, r2
 8007c38:	011b      	lsls	r3, r3, #4
 8007c3a:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007c42:	0b9b      	lsrs	r3, r3, #14
 8007c44:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c4a:	4413      	add	r3, r2
 8007c4c:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007c4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c50:	085b      	lsrs	r3, r3, #1
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	4413      	add	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c60:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	039b      	lsls	r3, r3, #14
 8007c66:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	085b      	lsrs	r3, r3, #1
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	4413      	add	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7a:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c80:	fb02 f303 	mul.w	r3, r2, r3
 8007c84:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007c8c:	4a24      	ldr	r2, [pc, #144]	; (8007d20 <VL53L0X_calc_dmax+0x23c>)
 8007c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c92:	099b      	lsrs	r3, r3, #6
 8007c94:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007ca2:	4a1f      	ldr	r2, [pc, #124]	; (8007d20 <VL53L0X_calc_dmax+0x23c>)
 8007ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca8:	099b      	lsrs	r3, r3, #6
 8007caa:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cae:	3380      	adds	r3, #128	; 0x80
 8007cb0:	0a1b      	lsrs	r3, r3, #8
 8007cb2:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d008      	beq.n	8007ccc <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	085a      	lsrs	r2, r3, #1
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	441a      	add	r2, r3
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cca:	e001      	b.n	8007cd0 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007cd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007cd2:	f7fe f9b5 	bl	8006040 <VL53L0X_isqrt>
 8007cd6:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d008      	beq.n	8007cf0 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	085a      	lsrs	r2, r3, #1
 8007ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce4:	441a      	add	r2, r3
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cee:	e001      	b.n	8007cf4 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007cf4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007cf6:	f7fe f9a3 	bl	8006040 <VL53L0X_isqrt>
 8007cfa:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8007cfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d902      	bls.n	8007d10 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8007d0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d0e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007d10:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3768      	adds	r7, #104	; 0x68
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	fff00000 	.word	0xfff00000
 8007d20:	10624dd3 	.word	0x10624dd3

08007d24 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b0b4      	sub	sp, #208	; 0xd0
 8007d28:	af04      	add	r7, sp, #16
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
 8007d30:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007d32:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8007d3a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007d3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8007d42:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8007d46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8007d4a:	f241 235c 	movw	r3, #4700	; 0x125c
 8007d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007d52:	4b9e      	ldr	r3, [pc, #632]	; (8007fcc <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007d54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007d58:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007d5c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007d5e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6a:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007d6c:	4b98      	ldr	r3, [pc, #608]	; (8007fd0 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8007d6e:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007d70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d74:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007d76:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8007d7c:	f240 6377 	movw	r3, #1655	; 0x677
 8007d80:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d82:	2300      	movs	r3, #0
 8007d84:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d96:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007d9a:	0c1b      	lsrs	r3, r3, #16
 8007d9c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007da4:	f107 0310 	add.w	r3, r7, #16
 8007da8:	461a      	mov	r2, r3
 8007daa:	68b9      	ldr	r1, [r7, #8]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff fe74 	bl	8007a9a <VL53L0X_get_total_signal_rate>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007db8:	f107 0314 	add.w	r3, r7, #20
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	68b9      	ldr	r1, [r7, #8]
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f7ff fe3b 	bl	8007a3c <VL53L0X_get_total_xtalk_rate>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dd2:	fb02 f303 	mul.w	r3, r2, r3
 8007dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dda:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007dde:	0c1b      	lsrs	r3, r3, #16
 8007de0:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007de8:	fb02 f303 	mul.w	r3, r2, r3
 8007dec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007df0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d902      	bls.n	8007e00 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007e00:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d168      	bne.n	8007eda <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007e18:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007e1c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007e20:	461a      	mov	r2, r3
 8007e22:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f7fe feae 	bl	8006b88 <VL53L0X_calc_timeout_mclks>
 8007e2c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8007e3e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007e42:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007e46:	461a      	mov	r2, r3
 8007e48:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f7fe fe9b 	bl	8006b88 <VL53L0X_calc_timeout_mclks>
 8007e52:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007e54:	2303      	movs	r3, #3
 8007e56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8007e5a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007e5e:	2b08      	cmp	r3, #8
 8007e60:	d102      	bne.n	8007e68 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8007e62:	2302      	movs	r3, #2
 8007e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007e68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e6c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007e6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007e72:	fb02 f303 	mul.w	r3, r2, r3
 8007e76:	02db      	lsls	r3, r3, #11
 8007e78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e80:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007e84:	4a53      	ldr	r2, [pc, #332]	; (8007fd4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007e86:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8a:	099b      	lsrs	r3, r3, #6
 8007e8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007e90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e96:	fb02 f303 	mul.w	r3, r2, r3
 8007e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007e9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ea2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007ea6:	4a4b      	ldr	r2, [pc, #300]	; (8007fd4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eac:	099b      	lsrs	r3, r3, #6
 8007eae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	3380      	adds	r3, #128	; 0x80
 8007eb6:	0a1b      	lsrs	r3, r3, #8
 8007eb8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ec0:	fb02 f303 	mul.w	r3, r2, r3
 8007ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007ec8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ecc:	3380      	adds	r3, #128	; 0x80
 8007ece:	0a1b      	lsrs	r3, r3, #8
 8007ed0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007eda:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8007ee2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007ee6:	e165      	b.n	80081b4 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8007ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10c      	bne.n	8007f08 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ef4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007efc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e153      	b.n	80081b0 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8007f08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f1a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f1e:	041a      	lsls	r2, r3, #16
 8007f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007f2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d902      	bls.n	8007f3a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007f3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f3e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007f42:	fb02 f303 	mul.w	r3, r2, r3
 8007f46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007f4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007f4e:	4613      	mov	r3, r2
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe f872 	bl	8006040 <VL53L0X_isqrt>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	891b      	ldrh	r3, [r3, #8]
 8007f66:	461a      	mov	r2, r3
 8007f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f6a:	fb02 f303 	mul.w	r3, r2, r3
 8007f6e:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f72:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007f74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f78:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007f7a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007f7c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007f80:	4a14      	ldr	r2, [pc, #80]	; (8007fd4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007f82:	fba2 2303 	umull	r2, r3, r2, r3
 8007f86:	099b      	lsrs	r3, r3, #6
 8007f88:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8007f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f8c:	041b      	lsls	r3, r3, #16
 8007f8e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007f92:	4a10      	ldr	r2, [pc, #64]	; (8007fd4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007f94:	fba2 2303 	umull	r2, r3, r2, r3
 8007f98:	099b      	lsrs	r3, r3, #6
 8007f9a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9e:	021b      	lsls	r3, r3, #8
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007fa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	bfb8      	it	lt
 8007fae:	425b      	neglt	r3, r3
 8007fb0:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb4:	021b      	lsls	r3, r3, #8
 8007fb6:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	7e1b      	ldrb	r3, [r3, #24]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00b      	beq.n	8007fd8 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8007fc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fc8:	e035      	b.n	8008036 <VL53L0X_calc_sigma_estimate+0x312>
 8007fca:	bf00      	nop
 8007fcc:	028f87ae 	.word	0x028f87ae
 8007fd0:	0006999a 	.word	0x0006999a
 8007fd4:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ff0:	fb02 f303 	mul.w	r3, r2, r3
 8007ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007ff8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ffe:	4413      	add	r3, r2
 8008000:	0c1b      	lsrs	r3, r3, #16
 8008002:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800800a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800800e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8008012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008016:	085b      	lsrs	r3, r3, #1
 8008018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800801c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008020:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008024:	fb02 f303 	mul.w	r3, r2, r3
 8008028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800802c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008030:	0b9b      	lsrs	r3, r3, #14
 8008032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800803a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800803c:	fb02 f303 	mul.w	r3, r2, r3
 8008040:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008048:	0c1b      	lsrs	r3, r3, #16
 800804a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008050:	fb02 f303 	mul.w	r3, r2, r3
 8008054:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8008056:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800805a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008062:	0c1b      	lsrs	r3, r3, #16
 8008064:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800806a:	fb02 f303 	mul.w	r3, r2, r3
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8008070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	4413      	add	r3, r2
 8008076:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800807a:	f7fd ffe1 	bl	8006040 <VL53L0X_isqrt>
 800807e:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	3332      	adds	r3, #50	; 0x32
 800808a:	4a4c      	ldr	r2, [pc, #304]	; (80081bc <VL53L0X_calc_sigma_estimate+0x498>)
 800808c:	fba2 2303 	umull	r2, r3, r2, r3
 8008090:	095a      	lsrs	r2, r3, #5
 8008092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008094:	fbb2 f3f3 	udiv	r3, r2, r3
 8008098:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800809c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080a0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80080a4:	fb02 f303 	mul.w	r3, r2, r3
 80080a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80080ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080b0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80080b4:	3308      	adds	r3, #8
 80080b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80080ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080be:	4a40      	ldr	r2, [pc, #256]	; (80081c0 <VL53L0X_calc_sigma_estimate+0x49c>)
 80080c0:	fba2 2303 	umull	r2, r3, r2, r3
 80080c4:	0b5b      	lsrs	r3, r3, #13
 80080c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80080ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d902      	bls.n	80080da <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80080d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80080da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80080de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80080e8:	4a36      	ldr	r2, [pc, #216]	; (80081c4 <VL53L0X_calc_sigma_estimate+0x4a0>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	099b      	lsrs	r3, r3, #6
 80080f0:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80080f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080fa:	441a      	add	r2, r3
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 8008102:	4618      	mov	r0, r3
 8008104:	f7fd ff9c 	bl	8006040 <VL53L0X_isqrt>
 8008108:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008116:	4a2b      	ldr	r2, [pc, #172]	; (80081c4 <VL53L0X_calc_sigma_estimate+0x4a0>)
 8008118:	fba2 2303 	umull	r2, r3, r2, r3
 800811c:	099b      	lsrs	r3, r3, #6
 800811e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008124:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008128:	fb02 f303 	mul.w	r3, r2, r3
 800812c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	69fa      	ldr	r2, [r7, #28]
 8008132:	fb02 f303 	mul.w	r3, r2, r3
 8008136:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	4413      	add	r3, r2
 800813e:	4618      	mov	r0, r3
 8008140:	f7fd ff7e 	bl	8006040 <VL53L0X_isqrt>
 8008144:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800814c:	fb02 f303 	mul.w	r3, r2, r3
 8008150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8008154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d009      	beq.n	800816e <VL53L0X_calc_sigma_estimate+0x44a>
 800815a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <VL53L0X_calc_sigma_estimate+0x44a>
 8008162:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008166:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800816a:	429a      	cmp	r2, r3
 800816c:	d903      	bls.n	8008176 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800816e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800817c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8008188:	6939      	ldr	r1, [r7, #16]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	9303      	str	r3, [sp, #12]
 800818e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008192:	9302      	str	r3, [sp, #8]
 8008194:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff fc9d 	bl	8007ae4 <VL53L0X_calc_dmax>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081b0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	37c0      	adds	r7, #192	; 0xc0
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	51eb851f 	.word	0x51eb851f
 80081c0:	d1b71759 	.word	0xd1b71759
 80081c4:	10624dd3 	.word	0x10624dd3

080081c8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b090      	sub	sp, #64	; 0x40
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	607a      	str	r2, [r7, #4]
 80081d2:	461a      	mov	r2, r3
 80081d4:	460b      	mov	r3, r1
 80081d6:	72fb      	strb	r3, [r7, #11]
 80081d8:	4613      	mov	r3, r2
 80081da:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081dc:	2300      	movs	r3, #0
 80081de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800821a:	7afb      	ldrb	r3, [r7, #11]
 800821c:	10db      	asrs	r3, r3, #3
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 030f 	and.w	r3, r3, #15
 8008224:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008228:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800822c:	2b00      	cmp	r3, #0
 800822e:	d017      	beq.n	8008260 <VL53L0X_get_pal_range_status+0x98>
 8008230:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008234:	2b05      	cmp	r3, #5
 8008236:	d013      	beq.n	8008260 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008238:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800823c:	2b07      	cmp	r3, #7
 800823e:	d00f      	beq.n	8008260 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008240:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008244:	2b0c      	cmp	r3, #12
 8008246:	d00b      	beq.n	8008260 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008248:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800824c:	2b0d      	cmp	r3, #13
 800824e:	d007      	beq.n	8008260 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008250:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008254:	2b0e      	cmp	r3, #14
 8008256:	d003      	beq.n	8008260 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008258:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800825c:	2b0f      	cmp	r3, #15
 800825e:	d103      	bne.n	8008268 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008260:	2301      	movs	r3, #1
 8008262:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008266:	e002      	b.n	800826e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800826e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008272:	2b00      	cmp	r3, #0
 8008274:	d109      	bne.n	800828a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008276:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800827a:	461a      	mov	r2, r3
 800827c:	2100      	movs	r1, #0
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7fc f9d4 	bl	800462c <VL53L0X_GetLimitCheckEnable>
 8008284:	4603      	mov	r3, r0
 8008286:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800828a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800828e:	2b00      	cmp	r3, #0
 8008290:	d02e      	beq.n	80082f0 <VL53L0X_get_pal_range_status+0x128>
 8008292:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008296:	2b00      	cmp	r3, #0
 8008298:	d12a      	bne.n	80082f0 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800829a:	f107 0310 	add.w	r3, r7, #16
 800829e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80082a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff fd3d 	bl	8007d24 <VL53L0X_calc_sigma_estimate>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80082b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d103      	bne.n	80082c0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082be:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80082c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d113      	bne.n	80082f0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80082c8:	f107 0320 	add.w	r3, r7, #32
 80082cc:	461a      	mov	r2, r3
 80082ce:	2100      	movs	r1, #0
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7fc fa31 	bl	8004738 <VL53L0X_GetLimitCheckValue>
 80082d6:	4603      	mov	r3, r0
 80082d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d006      	beq.n	80082f0 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80082e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d902      	bls.n	80082f0 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80082ea:	2301      	movs	r3, #1
 80082ec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80082f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d109      	bne.n	800830c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80082f8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80082fc:	461a      	mov	r2, r3
 80082fe:	2102      	movs	r1, #2
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7fc f993 	bl	800462c <VL53L0X_GetLimitCheckEnable>
 8008306:	4603      	mov	r3, r0
 8008308:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800830c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008310:	2b00      	cmp	r3, #0
 8008312:	d044      	beq.n	800839e <VL53L0X_get_pal_range_status+0x1d6>
 8008314:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008318:	2b00      	cmp	r3, #0
 800831a:	d140      	bne.n	800839e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800831c:	f107 031c 	add.w	r3, r7, #28
 8008320:	461a      	mov	r2, r3
 8008322:	2102      	movs	r1, #2
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7fc fa07 	bl	8004738 <VL53L0X_GetLimitCheckValue>
 800832a:	4603      	mov	r3, r0
 800832c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008330:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008334:	2b00      	cmp	r3, #0
 8008336:	d107      	bne.n	8008348 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008338:	2201      	movs	r2, #1
 800833a:	21ff      	movs	r1, #255	; 0xff
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 f9bb 	bl	80086b8 <VL53L0X_WrByte>
 8008342:	4603      	mov	r3, r0
 8008344:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008348:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800834c:	2b00      	cmp	r3, #0
 800834e:	d109      	bne.n	8008364 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008350:	f107 0316 	add.w	r3, r7, #22
 8008354:	461a      	mov	r2, r3
 8008356:	21b6      	movs	r1, #182	; 0xb6
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 fa59 	bl	8008810 <VL53L0X_RdWord>
 800835e:	4603      	mov	r3, r0
 8008360:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8008364:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008368:	2b00      	cmp	r3, #0
 800836a:	d107      	bne.n	800837c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800836c:	2200      	movs	r2, #0
 800836e:	21ff      	movs	r1, #255	; 0xff
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 f9a1 	bl	80086b8 <VL53L0X_WrByte>
 8008376:	4603      	mov	r3, r0
 8008378:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800837c:	8afb      	ldrh	r3, [r7, #22]
 800837e:	025b      	lsls	r3, r3, #9
 8008380:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008386:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d006      	beq.n	800839e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008390:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008394:	429a      	cmp	r2, r3
 8008396:	d902      	bls.n	800839e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008398:	2301      	movs	r3, #1
 800839a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800839e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d109      	bne.n	80083ba <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80083a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083aa:	461a      	mov	r2, r3
 80083ac:	2103      	movs	r1, #3
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f7fc f93c 	bl	800462c <VL53L0X_GetLimitCheckEnable>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80083ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d023      	beq.n	800840a <VL53L0X_get_pal_range_status+0x242>
 80083c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d11f      	bne.n	800840a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80083ca:	893b      	ldrh	r3, [r7, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d102      	bne.n	80083d6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	637b      	str	r3, [r7, #52]	; 0x34
 80083d4:	e005      	b.n	80083e2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	021a      	lsls	r2, r3, #8
 80083da:	893b      	ldrh	r3, [r7, #8]
 80083dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80083e2:	f107 0318 	add.w	r3, r7, #24
 80083e6:	461a      	mov	r2, r3
 80083e8:	2103      	movs	r1, #3
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7fc f9a4 	bl	8004738 <VL53L0X_GetLimitCheckValue>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d006      	beq.n	800840a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80083fc:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80083fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008400:	429a      	cmp	r2, r3
 8008402:	d202      	bcs.n	800840a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008404:	2301      	movs	r3, #1
 8008406:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800840a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800840e:	2b00      	cmp	r3, #0
 8008410:	d14a      	bne.n	80084a8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008412:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008416:	2b01      	cmp	r3, #1
 8008418:	d103      	bne.n	8008422 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800841a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841c:	22ff      	movs	r2, #255	; 0xff
 800841e:	701a      	strb	r2, [r3, #0]
 8008420:	e042      	b.n	80084a8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008422:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008426:	2b01      	cmp	r3, #1
 8008428:	d007      	beq.n	800843a <VL53L0X_get_pal_range_status+0x272>
 800842a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800842e:	2b02      	cmp	r3, #2
 8008430:	d003      	beq.n	800843a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8008432:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008436:	2b03      	cmp	r3, #3
 8008438:	d103      	bne.n	8008442 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800843a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800843c:	2205      	movs	r2, #5
 800843e:	701a      	strb	r2, [r3, #0]
 8008440:	e032      	b.n	80084a8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008442:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008446:	2b06      	cmp	r3, #6
 8008448:	d003      	beq.n	8008452 <VL53L0X_get_pal_range_status+0x28a>
 800844a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800844e:	2b09      	cmp	r3, #9
 8008450:	d103      	bne.n	800845a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008454:	2204      	movs	r2, #4
 8008456:	701a      	strb	r2, [r3, #0]
 8008458:	e026      	b.n	80084a8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800845a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800845e:	2b08      	cmp	r3, #8
 8008460:	d007      	beq.n	8008472 <VL53L0X_get_pal_range_status+0x2aa>
 8008462:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008466:	2b0a      	cmp	r3, #10
 8008468:	d003      	beq.n	8008472 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800846a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800846e:	2b01      	cmp	r3, #1
 8008470:	d103      	bne.n	800847a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8008472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008474:	2203      	movs	r2, #3
 8008476:	701a      	strb	r2, [r3, #0]
 8008478:	e016      	b.n	80084a8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800847a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800847e:	2b04      	cmp	r3, #4
 8008480:	d003      	beq.n	800848a <VL53L0X_get_pal_range_status+0x2c2>
 8008482:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008486:	2b01      	cmp	r3, #1
 8008488:	d103      	bne.n	8008492 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800848a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848c:	2202      	movs	r2, #2
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	e00a      	b.n	80084a8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8008492:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008496:	2b01      	cmp	r3, #1
 8008498:	d103      	bne.n	80084a2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800849a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800849c:	2201      	movs	r2, #1
 800849e:	701a      	strb	r2, [r3, #0]
 80084a0:	e002      	b.n	80084a8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80084a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a4:	2200      	movs	r2, #0
 80084a6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80084a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d102      	bne.n	80084b6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80084b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084b2:	2200      	movs	r2, #0
 80084b4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80084b6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80084ba:	461a      	mov	r2, r3
 80084bc:	2101      	movs	r1, #1
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f7fc f8b4 	bl	800462c <VL53L0X_GetLimitCheckEnable>
 80084c4:	4603      	mov	r3, r0
 80084c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80084ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d14f      	bne.n	8008572 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80084d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <VL53L0X_get_pal_range_status+0x31a>
 80084da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d103      	bne.n	80084ea <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80084e2:	2301      	movs	r3, #1
 80084e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084e8:	e002      	b.n	80084f0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80084ea:	2300      	movs	r3, #0
 80084ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80084f6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80084fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d003      	beq.n	800850a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008502:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008506:	2b00      	cmp	r3, #0
 8008508:	d103      	bne.n	8008512 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800850a:	2301      	movs	r3, #1
 800850c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008510:	e002      	b.n	8008518 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800851e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008522:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <VL53L0X_get_pal_range_status+0x36a>
 800852a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800852e:	2b01      	cmp	r3, #1
 8008530:	d103      	bne.n	800853a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008532:	2301      	movs	r3, #1
 8008534:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008538:	e002      	b.n	8008540 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008546:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800854a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <VL53L0X_get_pal_range_status+0x392>
 8008552:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008556:	2b01      	cmp	r3, #1
 8008558:	d103      	bne.n	8008562 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800855a:	2301      	movs	r3, #1
 800855c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008560:	e002      	b.n	8008568 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800856e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008572:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8008576:	4618      	mov	r0, r3
 8008578:	3740      	adds	r7, #64	; 0x40
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800857e:	b580      	push	{r7, lr}
 8008580:	b088      	sub	sp, #32
 8008582:	af02      	add	r7, sp, #8
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	330a      	adds	r3, #10
 800858e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800859c:	b299      	uxth	r1, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	4613      	mov	r3, r2
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	f7f9 f8d9 	bl	8001760 <HAL_I2C_Master_Transmit>
 80085ae:	4603      	mov	r3, r0
 80085b0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80085b2:	693b      	ldr	r3, [r7, #16]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80085bc:	b580      	push	{r7, lr}
 80085be:	b088      	sub	sp, #32
 80085c0:	af02      	add	r7, sp, #8
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	330a      	adds	r3, #10
 80085cc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80085da:	f043 0301 	orr.w	r3, r3, #1
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	b299      	uxth	r1, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	4613      	mov	r3, r2
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	f7f9 f9b5 	bl	800195c <HAL_I2C_Master_Receive>
 80085f2:	4603      	mov	r3, r0
 80085f4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80085f6:	693b      	ldr	r3, [r7, #16]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	607a      	str	r2, [r7, #4]
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	460b      	mov	r3, r1
 800860e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008610:	2300      	movs	r3, #0
 8008612:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b3f      	cmp	r3, #63	; 0x3f
 8008618:	d902      	bls.n	8008620 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800861a:	f06f 0303 	mvn.w	r3, #3
 800861e:	e016      	b.n	800864e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008620:	4a0d      	ldr	r2, [pc, #52]	; (8008658 <VL53L0X_WriteMulti+0x58>)
 8008622:	7afb      	ldrb	r3, [r7, #11]
 8008624:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	480c      	ldr	r0, [pc, #48]	; (800865c <VL53L0X_WriteMulti+0x5c>)
 800862c:	f000 f99e 	bl	800896c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	3301      	adds	r3, #1
 8008634:	461a      	mov	r2, r3
 8008636:	4908      	ldr	r1, [pc, #32]	; (8008658 <VL53L0X_WriteMulti+0x58>)
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f7ff ffa0 	bl	800857e <_I2CWrite>
 800863e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008646:	23ec      	movs	r3, #236	; 0xec
 8008648:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800864a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	200003f0 	.word	0x200003f0
 800865c:	200003f1 	.word	0x200003f1

08008660 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	607a      	str	r2, [r7, #4]
 800866a:	603b      	str	r3, [r7, #0]
 800866c:	460b      	mov	r3, r1
 800866e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008670:	2300      	movs	r3, #0
 8008672:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008674:	f107 030b 	add.w	r3, r7, #11
 8008678:	2201      	movs	r2, #1
 800867a:	4619      	mov	r1, r3
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff ff7e 	bl	800857e <_I2CWrite>
 8008682:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800868a:	23ec      	movs	r3, #236	; 0xec
 800868c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800868e:	e00c      	b.n	80086aa <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f7ff ff91 	bl	80085bc <_I2CRead>
 800869a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80086a2:	23ec      	movs	r3, #236	; 0xec
 80086a4:	75fb      	strb	r3, [r7, #23]
 80086a6:	e000      	b.n	80086aa <VL53L0X_ReadMulti+0x4a>
    }
done:
 80086a8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80086aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70fb      	strb	r3, [r7, #3]
 80086c4:	4613      	mov	r3, r2
 80086c6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80086cc:	4a0b      	ldr	r2, [pc, #44]	; (80086fc <VL53L0X_WrByte+0x44>)
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80086d2:	4a0a      	ldr	r2, [pc, #40]	; (80086fc <VL53L0X_WrByte+0x44>)
 80086d4:	78bb      	ldrb	r3, [r7, #2]
 80086d6:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80086d8:	2202      	movs	r2, #2
 80086da:	4908      	ldr	r1, [pc, #32]	; (80086fc <VL53L0X_WrByte+0x44>)
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff ff4e 	bl	800857e <_I2CWrite>
 80086e2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80086ea:	23ec      	movs	r3, #236	; 0xec
 80086ec:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80086ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	200003f0 	.word	0x200003f0

08008700 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
 800870c:	4613      	mov	r3, r2
 800870e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008714:	4a0e      	ldr	r2, [pc, #56]	; (8008750 <VL53L0X_WrWord+0x50>)
 8008716:	78fb      	ldrb	r3, [r7, #3]
 8008718:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800871a:	883b      	ldrh	r3, [r7, #0]
 800871c:	0a1b      	lsrs	r3, r3, #8
 800871e:	b29b      	uxth	r3, r3
 8008720:	b2da      	uxtb	r2, r3
 8008722:	4b0b      	ldr	r3, [pc, #44]	; (8008750 <VL53L0X_WrWord+0x50>)
 8008724:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8008726:	883b      	ldrh	r3, [r7, #0]
 8008728:	b2da      	uxtb	r2, r3
 800872a:	4b09      	ldr	r3, [pc, #36]	; (8008750 <VL53L0X_WrWord+0x50>)
 800872c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800872e:	2203      	movs	r2, #3
 8008730:	4907      	ldr	r1, [pc, #28]	; (8008750 <VL53L0X_WrWord+0x50>)
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff ff23 	bl	800857e <_I2CWrite>
 8008738:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008740:	23ec      	movs	r3, #236	; 0xec
 8008742:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	200003f0 	.word	0x200003f0

08008754 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	4608      	mov	r0, r1
 800875e:	4611      	mov	r1, r2
 8008760:	461a      	mov	r2, r3
 8008762:	4603      	mov	r3, r0
 8008764:	70fb      	strb	r3, [r7, #3]
 8008766:	460b      	mov	r3, r1
 8008768:	70bb      	strb	r3, [r7, #2]
 800876a:	4613      	mov	r3, r2
 800876c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8008772:	f107 020e 	add.w	r2, r7, #14
 8008776:	78fb      	ldrb	r3, [r7, #3]
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f81e 	bl	80087bc <VL53L0X_RdByte>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8008784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d110      	bne.n	80087ae <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800878c:	7bba      	ldrb	r2, [r7, #14]
 800878e:	78bb      	ldrb	r3, [r7, #2]
 8008790:	4013      	ands	r3, r2
 8008792:	b2da      	uxtb	r2, r3
 8008794:	787b      	ldrb	r3, [r7, #1]
 8008796:	4313      	orrs	r3, r2
 8008798:	b2db      	uxtb	r3, r3
 800879a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800879c:	7bba      	ldrb	r2, [r7, #14]
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff ff88 	bl	80086b8 <VL53L0X_WrByte>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]
 80087ac:	e000      	b.n	80087b0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80087ae:	bf00      	nop
done:
    return Status;
 80087b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	460b      	mov	r3, r1
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087ca:	2300      	movs	r3, #0
 80087cc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80087ce:	f107 030b 	add.w	r3, r7, #11
 80087d2:	2201      	movs	r2, #1
 80087d4:	4619      	mov	r1, r3
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f7ff fed1 	bl	800857e <_I2CWrite>
 80087dc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80087e4:	23ec      	movs	r3, #236	; 0xec
 80087e6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80087e8:	e00c      	b.n	8008804 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 80087ea:	2201      	movs	r2, #1
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7ff fee4 	bl	80085bc <_I2CRead>
 80087f4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80087fc:	23ec      	movs	r3, #236	; 0xec
 80087fe:	75fb      	strb	r3, [r7, #23]
 8008800:	e000      	b.n	8008804 <VL53L0X_RdByte+0x48>
    }
done:
 8008802:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008804:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	460b      	mov	r3, r1
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800881e:	2300      	movs	r3, #0
 8008820:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008822:	f107 030b 	add.w	r3, r7, #11
 8008826:	2201      	movs	r2, #1
 8008828:	4619      	mov	r1, r3
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7ff fea7 	bl	800857e <_I2CWrite>
 8008830:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008838:	23ec      	movs	r3, #236	; 0xec
 800883a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800883c:	e017      	b.n	800886e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800883e:	2202      	movs	r2, #2
 8008840:	490e      	ldr	r1, [pc, #56]	; (800887c <VL53L0X_RdWord+0x6c>)
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f7ff feba 	bl	80085bc <_I2CRead>
 8008848:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008850:	23ec      	movs	r3, #236	; 0xec
 8008852:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008854:	e00b      	b.n	800886e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008856:	4b09      	ldr	r3, [pc, #36]	; (800887c <VL53L0X_RdWord+0x6c>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	b29b      	uxth	r3, r3
 800885c:	021b      	lsls	r3, r3, #8
 800885e:	b29a      	uxth	r2, r3
 8008860:	4b06      	ldr	r3, [pc, #24]	; (800887c <VL53L0X_RdWord+0x6c>)
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	b29b      	uxth	r3, r3
 8008866:	4413      	add	r3, r2
 8008868:	b29a      	uxth	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800886e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	200003f0 	.word	0x200003f0

08008880 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	460b      	mov	r3, r1
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800888e:	2300      	movs	r3, #0
 8008890:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008892:	f107 030b 	add.w	r3, r7, #11
 8008896:	2201      	movs	r2, #1
 8008898:	4619      	mov	r1, r3
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f7ff fe6f 	bl	800857e <_I2CWrite>
 80088a0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80088a8:	23ec      	movs	r3, #236	; 0xec
 80088aa:	75fb      	strb	r3, [r7, #23]
        goto done;
 80088ac:	e01b      	b.n	80088e6 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80088ae:	2204      	movs	r2, #4
 80088b0:	4910      	ldr	r1, [pc, #64]	; (80088f4 <VL53L0X_RdDWord+0x74>)
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff fe82 	bl	80085bc <_I2CRead>
 80088b8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80088c0:	23ec      	movs	r3, #236	; 0xec
 80088c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80088c4:	e00f      	b.n	80088e6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80088c6:	4b0b      	ldr	r3, [pc, #44]	; (80088f4 <VL53L0X_RdDWord+0x74>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	061a      	lsls	r2, r3, #24
 80088cc:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <VL53L0X_RdDWord+0x74>)
 80088ce:	785b      	ldrb	r3, [r3, #1]
 80088d0:	041b      	lsls	r3, r3, #16
 80088d2:	441a      	add	r2, r3
 80088d4:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <VL53L0X_RdDWord+0x74>)
 80088d6:	789b      	ldrb	r3, [r3, #2]
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	4413      	add	r3, r2
 80088dc:	4a05      	ldr	r2, [pc, #20]	; (80088f4 <VL53L0X_RdDWord+0x74>)
 80088de:	78d2      	ldrb	r2, [r2, #3]
 80088e0:	441a      	add	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80088e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	200003f0 	.word	0x200003f0

080088f8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008900:	2300      	movs	r3, #0
 8008902:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8008904:	2002      	movs	r0, #2
 8008906:	f7f8 fb3f 	bl	8000f88 <HAL_Delay>
    return status;
 800890a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <__errno>:
 8008918:	4b01      	ldr	r3, [pc, #4]	; (8008920 <__errno+0x8>)
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	200002c8 	.word	0x200002c8

08008924 <__libc_init_array>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4e0d      	ldr	r6, [pc, #52]	; (800895c <__libc_init_array+0x38>)
 8008928:	4c0d      	ldr	r4, [pc, #52]	; (8008960 <__libc_init_array+0x3c>)
 800892a:	1ba4      	subs	r4, r4, r6
 800892c:	10a4      	asrs	r4, r4, #2
 800892e:	2500      	movs	r5, #0
 8008930:	42a5      	cmp	r5, r4
 8008932:	d109      	bne.n	8008948 <__libc_init_array+0x24>
 8008934:	4e0b      	ldr	r6, [pc, #44]	; (8008964 <__libc_init_array+0x40>)
 8008936:	4c0c      	ldr	r4, [pc, #48]	; (8008968 <__libc_init_array+0x44>)
 8008938:	f001 f832 	bl	80099a0 <_init>
 800893c:	1ba4      	subs	r4, r4, r6
 800893e:	10a4      	asrs	r4, r4, #2
 8008940:	2500      	movs	r5, #0
 8008942:	42a5      	cmp	r5, r4
 8008944:	d105      	bne.n	8008952 <__libc_init_array+0x2e>
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800894c:	4798      	blx	r3
 800894e:	3501      	adds	r5, #1
 8008950:	e7ee      	b.n	8008930 <__libc_init_array+0xc>
 8008952:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008956:	4798      	blx	r3
 8008958:	3501      	adds	r5, #1
 800895a:	e7f2      	b.n	8008942 <__libc_init_array+0x1e>
 800895c:	08009af0 	.word	0x08009af0
 8008960:	08009af0 	.word	0x08009af0
 8008964:	08009af0 	.word	0x08009af0
 8008968:	08009af4 	.word	0x08009af4

0800896c <memcpy>:
 800896c:	b510      	push	{r4, lr}
 800896e:	1e43      	subs	r3, r0, #1
 8008970:	440a      	add	r2, r1
 8008972:	4291      	cmp	r1, r2
 8008974:	d100      	bne.n	8008978 <memcpy+0xc>
 8008976:	bd10      	pop	{r4, pc}
 8008978:	f811 4b01 	ldrb.w	r4, [r1], #1
 800897c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008980:	e7f7      	b.n	8008972 <memcpy+0x6>

08008982 <memset>:
 8008982:	4402      	add	r2, r0
 8008984:	4603      	mov	r3, r0
 8008986:	4293      	cmp	r3, r2
 8008988:	d100      	bne.n	800898c <memset+0xa>
 800898a:	4770      	bx	lr
 800898c:	f803 1b01 	strb.w	r1, [r3], #1
 8008990:	e7f9      	b.n	8008986 <memset+0x4>
	...

08008994 <iprintf>:
 8008994:	b40f      	push	{r0, r1, r2, r3}
 8008996:	4b0a      	ldr	r3, [pc, #40]	; (80089c0 <iprintf+0x2c>)
 8008998:	b513      	push	{r0, r1, r4, lr}
 800899a:	681c      	ldr	r4, [r3, #0]
 800899c:	b124      	cbz	r4, 80089a8 <iprintf+0x14>
 800899e:	69a3      	ldr	r3, [r4, #24]
 80089a0:	b913      	cbnz	r3, 80089a8 <iprintf+0x14>
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 fad8 	bl	8008f58 <__sinit>
 80089a8:	ab05      	add	r3, sp, #20
 80089aa:	9a04      	ldr	r2, [sp, #16]
 80089ac:	68a1      	ldr	r1, [r4, #8]
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	4620      	mov	r0, r4
 80089b2:	f000 fc99 	bl	80092e8 <_vfiprintf_r>
 80089b6:	b002      	add	sp, #8
 80089b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089bc:	b004      	add	sp, #16
 80089be:	4770      	bx	lr
 80089c0:	200002c8 	.word	0x200002c8

080089c4 <_puts_r>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	460e      	mov	r6, r1
 80089c8:	4605      	mov	r5, r0
 80089ca:	b118      	cbz	r0, 80089d4 <_puts_r+0x10>
 80089cc:	6983      	ldr	r3, [r0, #24]
 80089ce:	b90b      	cbnz	r3, 80089d4 <_puts_r+0x10>
 80089d0:	f000 fac2 	bl	8008f58 <__sinit>
 80089d4:	69ab      	ldr	r3, [r5, #24]
 80089d6:	68ac      	ldr	r4, [r5, #8]
 80089d8:	b913      	cbnz	r3, 80089e0 <_puts_r+0x1c>
 80089da:	4628      	mov	r0, r5
 80089dc:	f000 fabc 	bl	8008f58 <__sinit>
 80089e0:	4b23      	ldr	r3, [pc, #140]	; (8008a70 <_puts_r+0xac>)
 80089e2:	429c      	cmp	r4, r3
 80089e4:	d117      	bne.n	8008a16 <_puts_r+0x52>
 80089e6:	686c      	ldr	r4, [r5, #4]
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	071b      	lsls	r3, r3, #28
 80089ec:	d51d      	bpl.n	8008a2a <_puts_r+0x66>
 80089ee:	6923      	ldr	r3, [r4, #16]
 80089f0:	b1db      	cbz	r3, 8008a2a <_puts_r+0x66>
 80089f2:	3e01      	subs	r6, #1
 80089f4:	68a3      	ldr	r3, [r4, #8]
 80089f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089fa:	3b01      	subs	r3, #1
 80089fc:	60a3      	str	r3, [r4, #8]
 80089fe:	b9e9      	cbnz	r1, 8008a3c <_puts_r+0x78>
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	da2e      	bge.n	8008a62 <_puts_r+0x9e>
 8008a04:	4622      	mov	r2, r4
 8008a06:	210a      	movs	r1, #10
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 f8f5 	bl	8008bf8 <__swbuf_r>
 8008a0e:	3001      	adds	r0, #1
 8008a10:	d011      	beq.n	8008a36 <_puts_r+0x72>
 8008a12:	200a      	movs	r0, #10
 8008a14:	e011      	b.n	8008a3a <_puts_r+0x76>
 8008a16:	4b17      	ldr	r3, [pc, #92]	; (8008a74 <_puts_r+0xb0>)
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	d101      	bne.n	8008a20 <_puts_r+0x5c>
 8008a1c:	68ac      	ldr	r4, [r5, #8]
 8008a1e:	e7e3      	b.n	80089e8 <_puts_r+0x24>
 8008a20:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <_puts_r+0xb4>)
 8008a22:	429c      	cmp	r4, r3
 8008a24:	bf08      	it	eq
 8008a26:	68ec      	ldreq	r4, [r5, #12]
 8008a28:	e7de      	b.n	80089e8 <_puts_r+0x24>
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 f935 	bl	8008c9c <__swsetup_r>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	d0dd      	beq.n	80089f2 <_puts_r+0x2e>
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3a:	bd70      	pop	{r4, r5, r6, pc}
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	da04      	bge.n	8008a4a <_puts_r+0x86>
 8008a40:	69a2      	ldr	r2, [r4, #24]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	dc06      	bgt.n	8008a54 <_puts_r+0x90>
 8008a46:	290a      	cmp	r1, #10
 8008a48:	d004      	beq.n	8008a54 <_puts_r+0x90>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	6022      	str	r2, [r4, #0]
 8008a50:	7019      	strb	r1, [r3, #0]
 8008a52:	e7cf      	b.n	80089f4 <_puts_r+0x30>
 8008a54:	4622      	mov	r2, r4
 8008a56:	4628      	mov	r0, r5
 8008a58:	f000 f8ce 	bl	8008bf8 <__swbuf_r>
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d1c9      	bne.n	80089f4 <_puts_r+0x30>
 8008a60:	e7e9      	b.n	8008a36 <_puts_r+0x72>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	200a      	movs	r0, #10
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	6022      	str	r2, [r4, #0]
 8008a6a:	7018      	strb	r0, [r3, #0]
 8008a6c:	e7e5      	b.n	8008a3a <_puts_r+0x76>
 8008a6e:	bf00      	nop
 8008a70:	08009a74 	.word	0x08009a74
 8008a74:	08009a94 	.word	0x08009a94
 8008a78:	08009a54 	.word	0x08009a54

08008a7c <puts>:
 8008a7c:	4b02      	ldr	r3, [pc, #8]	; (8008a88 <puts+0xc>)
 8008a7e:	4601      	mov	r1, r0
 8008a80:	6818      	ldr	r0, [r3, #0]
 8008a82:	f7ff bf9f 	b.w	80089c4 <_puts_r>
 8008a86:	bf00      	nop
 8008a88:	200002c8 	.word	0x200002c8

08008a8c <setvbuf>:
 8008a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a90:	461d      	mov	r5, r3
 8008a92:	4b51      	ldr	r3, [pc, #324]	; (8008bd8 <setvbuf+0x14c>)
 8008a94:	681e      	ldr	r6, [r3, #0]
 8008a96:	4604      	mov	r4, r0
 8008a98:	460f      	mov	r7, r1
 8008a9a:	4690      	mov	r8, r2
 8008a9c:	b126      	cbz	r6, 8008aa8 <setvbuf+0x1c>
 8008a9e:	69b3      	ldr	r3, [r6, #24]
 8008aa0:	b913      	cbnz	r3, 8008aa8 <setvbuf+0x1c>
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f000 fa58 	bl	8008f58 <__sinit>
 8008aa8:	4b4c      	ldr	r3, [pc, #304]	; (8008bdc <setvbuf+0x150>)
 8008aaa:	429c      	cmp	r4, r3
 8008aac:	d152      	bne.n	8008b54 <setvbuf+0xc8>
 8008aae:	6874      	ldr	r4, [r6, #4]
 8008ab0:	f1b8 0f02 	cmp.w	r8, #2
 8008ab4:	d006      	beq.n	8008ac4 <setvbuf+0x38>
 8008ab6:	f1b8 0f01 	cmp.w	r8, #1
 8008aba:	f200 8089 	bhi.w	8008bd0 <setvbuf+0x144>
 8008abe:	2d00      	cmp	r5, #0
 8008ac0:	f2c0 8086 	blt.w	8008bd0 <setvbuf+0x144>
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f000 f9dc 	bl	8008e84 <_fflush_r>
 8008acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ace:	b141      	cbz	r1, 8008ae2 <setvbuf+0x56>
 8008ad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ad4:	4299      	cmp	r1, r3
 8008ad6:	d002      	beq.n	8008ade <setvbuf+0x52>
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f000 fb33 	bl	8009144 <_free_r>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	61a3      	str	r3, [r4, #24]
 8008ae6:	6063      	str	r3, [r4, #4]
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	061b      	lsls	r3, r3, #24
 8008aec:	d503      	bpl.n	8008af6 <setvbuf+0x6a>
 8008aee:	6921      	ldr	r1, [r4, #16]
 8008af0:	4630      	mov	r0, r6
 8008af2:	f000 fb27 	bl	8009144 <_free_r>
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008afc:	f023 0303 	bic.w	r3, r3, #3
 8008b00:	f1b8 0f02 	cmp.w	r8, #2
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	d05d      	beq.n	8008bc4 <setvbuf+0x138>
 8008b08:	ab01      	add	r3, sp, #4
 8008b0a:	466a      	mov	r2, sp
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f000 faac 	bl	800906c <__swhatbuf_r>
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	4318      	orrs	r0, r3
 8008b18:	81a0      	strh	r0, [r4, #12]
 8008b1a:	bb2d      	cbnz	r5, 8008b68 <setvbuf+0xdc>
 8008b1c:	9d00      	ldr	r5, [sp, #0]
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f000 fb08 	bl	8009134 <malloc>
 8008b24:	4607      	mov	r7, r0
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d14e      	bne.n	8008bc8 <setvbuf+0x13c>
 8008b2a:	f8dd 9000 	ldr.w	r9, [sp]
 8008b2e:	45a9      	cmp	r9, r5
 8008b30:	d13c      	bne.n	8008bac <setvbuf+0x120>
 8008b32:	f04f 30ff 	mov.w	r0, #4294967295
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f043 0302 	orr.w	r3, r3, #2
 8008b3c:	81a3      	strh	r3, [r4, #12]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60a3      	str	r3, [r4, #8]
 8008b42:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b46:	6023      	str	r3, [r4, #0]
 8008b48:	6123      	str	r3, [r4, #16]
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	6163      	str	r3, [r4, #20]
 8008b4e:	b003      	add	sp, #12
 8008b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b54:	4b22      	ldr	r3, [pc, #136]	; (8008be0 <setvbuf+0x154>)
 8008b56:	429c      	cmp	r4, r3
 8008b58:	d101      	bne.n	8008b5e <setvbuf+0xd2>
 8008b5a:	68b4      	ldr	r4, [r6, #8]
 8008b5c:	e7a8      	b.n	8008ab0 <setvbuf+0x24>
 8008b5e:	4b21      	ldr	r3, [pc, #132]	; (8008be4 <setvbuf+0x158>)
 8008b60:	429c      	cmp	r4, r3
 8008b62:	bf08      	it	eq
 8008b64:	68f4      	ldreq	r4, [r6, #12]
 8008b66:	e7a3      	b.n	8008ab0 <setvbuf+0x24>
 8008b68:	2f00      	cmp	r7, #0
 8008b6a:	d0d8      	beq.n	8008b1e <setvbuf+0x92>
 8008b6c:	69b3      	ldr	r3, [r6, #24]
 8008b6e:	b913      	cbnz	r3, 8008b76 <setvbuf+0xea>
 8008b70:	4630      	mov	r0, r6
 8008b72:	f000 f9f1 	bl	8008f58 <__sinit>
 8008b76:	f1b8 0f01 	cmp.w	r8, #1
 8008b7a:	bf08      	it	eq
 8008b7c:	89a3      	ldrheq	r3, [r4, #12]
 8008b7e:	6027      	str	r7, [r4, #0]
 8008b80:	bf04      	itt	eq
 8008b82:	f043 0301 	orreq.w	r3, r3, #1
 8008b86:	81a3      	strheq	r3, [r4, #12]
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	f013 0008 	ands.w	r0, r3, #8
 8008b8e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8008b92:	d01b      	beq.n	8008bcc <setvbuf+0x140>
 8008b94:	f013 0001 	ands.w	r0, r3, #1
 8008b98:	bf18      	it	ne
 8008b9a:	426d      	negne	r5, r5
 8008b9c:	f04f 0300 	mov.w	r3, #0
 8008ba0:	bf1d      	ittte	ne
 8008ba2:	60a3      	strne	r3, [r4, #8]
 8008ba4:	61a5      	strne	r5, [r4, #24]
 8008ba6:	4618      	movne	r0, r3
 8008ba8:	60a5      	streq	r5, [r4, #8]
 8008baa:	e7d0      	b.n	8008b4e <setvbuf+0xc2>
 8008bac:	4648      	mov	r0, r9
 8008bae:	f000 fac1 	bl	8009134 <malloc>
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d0bc      	beq.n	8008b32 <setvbuf+0xa6>
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbe:	81a3      	strh	r3, [r4, #12]
 8008bc0:	464d      	mov	r5, r9
 8008bc2:	e7d3      	b.n	8008b6c <setvbuf+0xe0>
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	e7b6      	b.n	8008b36 <setvbuf+0xaa>
 8008bc8:	46a9      	mov	r9, r5
 8008bca:	e7f5      	b.n	8008bb8 <setvbuf+0x12c>
 8008bcc:	60a0      	str	r0, [r4, #8]
 8008bce:	e7be      	b.n	8008b4e <setvbuf+0xc2>
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd4:	e7bb      	b.n	8008b4e <setvbuf+0xc2>
 8008bd6:	bf00      	nop
 8008bd8:	200002c8 	.word	0x200002c8
 8008bdc:	08009a74 	.word	0x08009a74
 8008be0:	08009a94 	.word	0x08009a94
 8008be4:	08009a54 	.word	0x08009a54

08008be8 <strcpy>:
 8008be8:	4603      	mov	r3, r0
 8008bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bee:	f803 2b01 	strb.w	r2, [r3], #1
 8008bf2:	2a00      	cmp	r2, #0
 8008bf4:	d1f9      	bne.n	8008bea <strcpy+0x2>
 8008bf6:	4770      	bx	lr

08008bf8 <__swbuf_r>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	460e      	mov	r6, r1
 8008bfc:	4614      	mov	r4, r2
 8008bfe:	4605      	mov	r5, r0
 8008c00:	b118      	cbz	r0, 8008c0a <__swbuf_r+0x12>
 8008c02:	6983      	ldr	r3, [r0, #24]
 8008c04:	b90b      	cbnz	r3, 8008c0a <__swbuf_r+0x12>
 8008c06:	f000 f9a7 	bl	8008f58 <__sinit>
 8008c0a:	4b21      	ldr	r3, [pc, #132]	; (8008c90 <__swbuf_r+0x98>)
 8008c0c:	429c      	cmp	r4, r3
 8008c0e:	d12a      	bne.n	8008c66 <__swbuf_r+0x6e>
 8008c10:	686c      	ldr	r4, [r5, #4]
 8008c12:	69a3      	ldr	r3, [r4, #24]
 8008c14:	60a3      	str	r3, [r4, #8]
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	071a      	lsls	r2, r3, #28
 8008c1a:	d52e      	bpl.n	8008c7a <__swbuf_r+0x82>
 8008c1c:	6923      	ldr	r3, [r4, #16]
 8008c1e:	b363      	cbz	r3, 8008c7a <__swbuf_r+0x82>
 8008c20:	6923      	ldr	r3, [r4, #16]
 8008c22:	6820      	ldr	r0, [r4, #0]
 8008c24:	1ac0      	subs	r0, r0, r3
 8008c26:	6963      	ldr	r3, [r4, #20]
 8008c28:	b2f6      	uxtb	r6, r6
 8008c2a:	4283      	cmp	r3, r0
 8008c2c:	4637      	mov	r7, r6
 8008c2e:	dc04      	bgt.n	8008c3a <__swbuf_r+0x42>
 8008c30:	4621      	mov	r1, r4
 8008c32:	4628      	mov	r0, r5
 8008c34:	f000 f926 	bl	8008e84 <_fflush_r>
 8008c38:	bb28      	cbnz	r0, 8008c86 <__swbuf_r+0x8e>
 8008c3a:	68a3      	ldr	r3, [r4, #8]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	60a3      	str	r3, [r4, #8]
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	6022      	str	r2, [r4, #0]
 8008c46:	701e      	strb	r6, [r3, #0]
 8008c48:	6963      	ldr	r3, [r4, #20]
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	4283      	cmp	r3, r0
 8008c4e:	d004      	beq.n	8008c5a <__swbuf_r+0x62>
 8008c50:	89a3      	ldrh	r3, [r4, #12]
 8008c52:	07db      	lsls	r3, r3, #31
 8008c54:	d519      	bpl.n	8008c8a <__swbuf_r+0x92>
 8008c56:	2e0a      	cmp	r6, #10
 8008c58:	d117      	bne.n	8008c8a <__swbuf_r+0x92>
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f000 f911 	bl	8008e84 <_fflush_r>
 8008c62:	b190      	cbz	r0, 8008c8a <__swbuf_r+0x92>
 8008c64:	e00f      	b.n	8008c86 <__swbuf_r+0x8e>
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <__swbuf_r+0x9c>)
 8008c68:	429c      	cmp	r4, r3
 8008c6a:	d101      	bne.n	8008c70 <__swbuf_r+0x78>
 8008c6c:	68ac      	ldr	r4, [r5, #8]
 8008c6e:	e7d0      	b.n	8008c12 <__swbuf_r+0x1a>
 8008c70:	4b09      	ldr	r3, [pc, #36]	; (8008c98 <__swbuf_r+0xa0>)
 8008c72:	429c      	cmp	r4, r3
 8008c74:	bf08      	it	eq
 8008c76:	68ec      	ldreq	r4, [r5, #12]
 8008c78:	e7cb      	b.n	8008c12 <__swbuf_r+0x1a>
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	f000 f80d 	bl	8008c9c <__swsetup_r>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d0cc      	beq.n	8008c20 <__swbuf_r+0x28>
 8008c86:	f04f 37ff 	mov.w	r7, #4294967295
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	08009a74 	.word	0x08009a74
 8008c94:	08009a94 	.word	0x08009a94
 8008c98:	08009a54 	.word	0x08009a54

08008c9c <__swsetup_r>:
 8008c9c:	4b32      	ldr	r3, [pc, #200]	; (8008d68 <__swsetup_r+0xcc>)
 8008c9e:	b570      	push	{r4, r5, r6, lr}
 8008ca0:	681d      	ldr	r5, [r3, #0]
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	b125      	cbz	r5, 8008cb2 <__swsetup_r+0x16>
 8008ca8:	69ab      	ldr	r3, [r5, #24]
 8008caa:	b913      	cbnz	r3, 8008cb2 <__swsetup_r+0x16>
 8008cac:	4628      	mov	r0, r5
 8008cae:	f000 f953 	bl	8008f58 <__sinit>
 8008cb2:	4b2e      	ldr	r3, [pc, #184]	; (8008d6c <__swsetup_r+0xd0>)
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	d10f      	bne.n	8008cd8 <__swsetup_r+0x3c>
 8008cb8:	686c      	ldr	r4, [r5, #4]
 8008cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	0715      	lsls	r5, r2, #28
 8008cc2:	d42c      	bmi.n	8008d1e <__swsetup_r+0x82>
 8008cc4:	06d0      	lsls	r0, r2, #27
 8008cc6:	d411      	bmi.n	8008cec <__swsetup_r+0x50>
 8008cc8:	2209      	movs	r2, #9
 8008cca:	6032      	str	r2, [r6, #0]
 8008ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd0:	81a3      	strh	r3, [r4, #12]
 8008cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd6:	e03e      	b.n	8008d56 <__swsetup_r+0xba>
 8008cd8:	4b25      	ldr	r3, [pc, #148]	; (8008d70 <__swsetup_r+0xd4>)
 8008cda:	429c      	cmp	r4, r3
 8008cdc:	d101      	bne.n	8008ce2 <__swsetup_r+0x46>
 8008cde:	68ac      	ldr	r4, [r5, #8]
 8008ce0:	e7eb      	b.n	8008cba <__swsetup_r+0x1e>
 8008ce2:	4b24      	ldr	r3, [pc, #144]	; (8008d74 <__swsetup_r+0xd8>)
 8008ce4:	429c      	cmp	r4, r3
 8008ce6:	bf08      	it	eq
 8008ce8:	68ec      	ldreq	r4, [r5, #12]
 8008cea:	e7e6      	b.n	8008cba <__swsetup_r+0x1e>
 8008cec:	0751      	lsls	r1, r2, #29
 8008cee:	d512      	bpl.n	8008d16 <__swsetup_r+0x7a>
 8008cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cf2:	b141      	cbz	r1, 8008d06 <__swsetup_r+0x6a>
 8008cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cf8:	4299      	cmp	r1, r3
 8008cfa:	d002      	beq.n	8008d02 <__swsetup_r+0x66>
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f000 fa21 	bl	8009144 <_free_r>
 8008d02:	2300      	movs	r3, #0
 8008d04:	6363      	str	r3, [r4, #52]	; 0x34
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	6063      	str	r3, [r4, #4]
 8008d12:	6923      	ldr	r3, [r4, #16]
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	f043 0308 	orr.w	r3, r3, #8
 8008d1c:	81a3      	strh	r3, [r4, #12]
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	b94b      	cbnz	r3, 8008d36 <__swsetup_r+0x9a>
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d2c:	d003      	beq.n	8008d36 <__swsetup_r+0x9a>
 8008d2e:	4621      	mov	r1, r4
 8008d30:	4630      	mov	r0, r6
 8008d32:	f000 f9bf 	bl	80090b4 <__smakebuf_r>
 8008d36:	89a2      	ldrh	r2, [r4, #12]
 8008d38:	f012 0301 	ands.w	r3, r2, #1
 8008d3c:	d00c      	beq.n	8008d58 <__swsetup_r+0xbc>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	60a3      	str	r3, [r4, #8]
 8008d42:	6963      	ldr	r3, [r4, #20]
 8008d44:	425b      	negs	r3, r3
 8008d46:	61a3      	str	r3, [r4, #24]
 8008d48:	6923      	ldr	r3, [r4, #16]
 8008d4a:	b953      	cbnz	r3, 8008d62 <__swsetup_r+0xc6>
 8008d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008d54:	d1ba      	bne.n	8008ccc <__swsetup_r+0x30>
 8008d56:	bd70      	pop	{r4, r5, r6, pc}
 8008d58:	0792      	lsls	r2, r2, #30
 8008d5a:	bf58      	it	pl
 8008d5c:	6963      	ldrpl	r3, [r4, #20]
 8008d5e:	60a3      	str	r3, [r4, #8]
 8008d60:	e7f2      	b.n	8008d48 <__swsetup_r+0xac>
 8008d62:	2000      	movs	r0, #0
 8008d64:	e7f7      	b.n	8008d56 <__swsetup_r+0xba>
 8008d66:	bf00      	nop
 8008d68:	200002c8 	.word	0x200002c8
 8008d6c:	08009a74 	.word	0x08009a74
 8008d70:	08009a94 	.word	0x08009a94
 8008d74:	08009a54 	.word	0x08009a54

08008d78 <__sflush_r>:
 8008d78:	898a      	ldrh	r2, [r1, #12]
 8008d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7e:	4605      	mov	r5, r0
 8008d80:	0710      	lsls	r0, r2, #28
 8008d82:	460c      	mov	r4, r1
 8008d84:	d458      	bmi.n	8008e38 <__sflush_r+0xc0>
 8008d86:	684b      	ldr	r3, [r1, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	dc05      	bgt.n	8008d98 <__sflush_r+0x20>
 8008d8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	dc02      	bgt.n	8008d98 <__sflush_r+0x20>
 8008d92:	2000      	movs	r0, #0
 8008d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d9a:	2e00      	cmp	r6, #0
 8008d9c:	d0f9      	beq.n	8008d92 <__sflush_r+0x1a>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008da4:	682f      	ldr	r7, [r5, #0]
 8008da6:	6a21      	ldr	r1, [r4, #32]
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	d032      	beq.n	8008e12 <__sflush_r+0x9a>
 8008dac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	075a      	lsls	r2, r3, #29
 8008db2:	d505      	bpl.n	8008dc0 <__sflush_r+0x48>
 8008db4:	6863      	ldr	r3, [r4, #4]
 8008db6:	1ac0      	subs	r0, r0, r3
 8008db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dba:	b10b      	cbz	r3, 8008dc0 <__sflush_r+0x48>
 8008dbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dbe:	1ac0      	subs	r0, r0, r3
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dc6:	6a21      	ldr	r1, [r4, #32]
 8008dc8:	4628      	mov	r0, r5
 8008dca:	47b0      	blx	r6
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	d106      	bne.n	8008de0 <__sflush_r+0x68>
 8008dd2:	6829      	ldr	r1, [r5, #0]
 8008dd4:	291d      	cmp	r1, #29
 8008dd6:	d848      	bhi.n	8008e6a <__sflush_r+0xf2>
 8008dd8:	4a29      	ldr	r2, [pc, #164]	; (8008e80 <__sflush_r+0x108>)
 8008dda:	40ca      	lsrs	r2, r1
 8008ddc:	07d6      	lsls	r6, r2, #31
 8008dde:	d544      	bpl.n	8008e6a <__sflush_r+0xf2>
 8008de0:	2200      	movs	r2, #0
 8008de2:	6062      	str	r2, [r4, #4]
 8008de4:	04d9      	lsls	r1, r3, #19
 8008de6:	6922      	ldr	r2, [r4, #16]
 8008de8:	6022      	str	r2, [r4, #0]
 8008dea:	d504      	bpl.n	8008df6 <__sflush_r+0x7e>
 8008dec:	1c42      	adds	r2, r0, #1
 8008dee:	d101      	bne.n	8008df4 <__sflush_r+0x7c>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	b903      	cbnz	r3, 8008df6 <__sflush_r+0x7e>
 8008df4:	6560      	str	r0, [r4, #84]	; 0x54
 8008df6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008df8:	602f      	str	r7, [r5, #0]
 8008dfa:	2900      	cmp	r1, #0
 8008dfc:	d0c9      	beq.n	8008d92 <__sflush_r+0x1a>
 8008dfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e02:	4299      	cmp	r1, r3
 8008e04:	d002      	beq.n	8008e0c <__sflush_r+0x94>
 8008e06:	4628      	mov	r0, r5
 8008e08:	f000 f99c 	bl	8009144 <_free_r>
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	6360      	str	r0, [r4, #52]	; 0x34
 8008e10:	e7c0      	b.n	8008d94 <__sflush_r+0x1c>
 8008e12:	2301      	movs	r3, #1
 8008e14:	4628      	mov	r0, r5
 8008e16:	47b0      	blx	r6
 8008e18:	1c41      	adds	r1, r0, #1
 8008e1a:	d1c8      	bne.n	8008dae <__sflush_r+0x36>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0c5      	beq.n	8008dae <__sflush_r+0x36>
 8008e22:	2b1d      	cmp	r3, #29
 8008e24:	d001      	beq.n	8008e2a <__sflush_r+0xb2>
 8008e26:	2b16      	cmp	r3, #22
 8008e28:	d101      	bne.n	8008e2e <__sflush_r+0xb6>
 8008e2a:	602f      	str	r7, [r5, #0]
 8008e2c:	e7b1      	b.n	8008d92 <__sflush_r+0x1a>
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e34:	81a3      	strh	r3, [r4, #12]
 8008e36:	e7ad      	b.n	8008d94 <__sflush_r+0x1c>
 8008e38:	690f      	ldr	r7, [r1, #16]
 8008e3a:	2f00      	cmp	r7, #0
 8008e3c:	d0a9      	beq.n	8008d92 <__sflush_r+0x1a>
 8008e3e:	0793      	lsls	r3, r2, #30
 8008e40:	680e      	ldr	r6, [r1, #0]
 8008e42:	bf08      	it	eq
 8008e44:	694b      	ldreq	r3, [r1, #20]
 8008e46:	600f      	str	r7, [r1, #0]
 8008e48:	bf18      	it	ne
 8008e4a:	2300      	movne	r3, #0
 8008e4c:	eba6 0807 	sub.w	r8, r6, r7
 8008e50:	608b      	str	r3, [r1, #8]
 8008e52:	f1b8 0f00 	cmp.w	r8, #0
 8008e56:	dd9c      	ble.n	8008d92 <__sflush_r+0x1a>
 8008e58:	4643      	mov	r3, r8
 8008e5a:	463a      	mov	r2, r7
 8008e5c:	6a21      	ldr	r1, [r4, #32]
 8008e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e60:	4628      	mov	r0, r5
 8008e62:	47b0      	blx	r6
 8008e64:	2800      	cmp	r0, #0
 8008e66:	dc06      	bgt.n	8008e76 <__sflush_r+0xfe>
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e6e:	81a3      	strh	r3, [r4, #12]
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295
 8008e74:	e78e      	b.n	8008d94 <__sflush_r+0x1c>
 8008e76:	4407      	add	r7, r0
 8008e78:	eba8 0800 	sub.w	r8, r8, r0
 8008e7c:	e7e9      	b.n	8008e52 <__sflush_r+0xda>
 8008e7e:	bf00      	nop
 8008e80:	20400001 	.word	0x20400001

08008e84 <_fflush_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	690b      	ldr	r3, [r1, #16]
 8008e88:	4605      	mov	r5, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	b1db      	cbz	r3, 8008ec6 <_fflush_r+0x42>
 8008e8e:	b118      	cbz	r0, 8008e98 <_fflush_r+0x14>
 8008e90:	6983      	ldr	r3, [r0, #24]
 8008e92:	b90b      	cbnz	r3, 8008e98 <_fflush_r+0x14>
 8008e94:	f000 f860 	bl	8008f58 <__sinit>
 8008e98:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <_fflush_r+0x48>)
 8008e9a:	429c      	cmp	r4, r3
 8008e9c:	d109      	bne.n	8008eb2 <_fflush_r+0x2e>
 8008e9e:	686c      	ldr	r4, [r5, #4]
 8008ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea4:	b17b      	cbz	r3, 8008ec6 <_fflush_r+0x42>
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eae:	f7ff bf63 	b.w	8008d78 <__sflush_r>
 8008eb2:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <_fflush_r+0x4c>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	d101      	bne.n	8008ebc <_fflush_r+0x38>
 8008eb8:	68ac      	ldr	r4, [r5, #8]
 8008eba:	e7f1      	b.n	8008ea0 <_fflush_r+0x1c>
 8008ebc:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <_fflush_r+0x50>)
 8008ebe:	429c      	cmp	r4, r3
 8008ec0:	bf08      	it	eq
 8008ec2:	68ec      	ldreq	r4, [r5, #12]
 8008ec4:	e7ec      	b.n	8008ea0 <_fflush_r+0x1c>
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	bd38      	pop	{r3, r4, r5, pc}
 8008eca:	bf00      	nop
 8008ecc:	08009a74 	.word	0x08009a74
 8008ed0:	08009a94 	.word	0x08009a94
 8008ed4:	08009a54 	.word	0x08009a54

08008ed8 <std>:
 8008ed8:	2300      	movs	r3, #0
 8008eda:	b510      	push	{r4, lr}
 8008edc:	4604      	mov	r4, r0
 8008ede:	e9c0 3300 	strd	r3, r3, [r0]
 8008ee2:	6083      	str	r3, [r0, #8]
 8008ee4:	8181      	strh	r1, [r0, #12]
 8008ee6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ee8:	81c2      	strh	r2, [r0, #14]
 8008eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eee:	6183      	str	r3, [r0, #24]
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	2208      	movs	r2, #8
 8008ef4:	305c      	adds	r0, #92	; 0x5c
 8008ef6:	f7ff fd44 	bl	8008982 <memset>
 8008efa:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <std+0x38>)
 8008efc:	6263      	str	r3, [r4, #36]	; 0x24
 8008efe:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <std+0x3c>)
 8008f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f02:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <std+0x40>)
 8008f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f06:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <std+0x44>)
 8008f08:	6224      	str	r4, [r4, #32]
 8008f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	bf00      	nop
 8008f10:	08009845 	.word	0x08009845
 8008f14:	08009867 	.word	0x08009867
 8008f18:	0800989f 	.word	0x0800989f
 8008f1c:	080098c3 	.word	0x080098c3

08008f20 <_cleanup_r>:
 8008f20:	4901      	ldr	r1, [pc, #4]	; (8008f28 <_cleanup_r+0x8>)
 8008f22:	f000 b885 	b.w	8009030 <_fwalk_reent>
 8008f26:	bf00      	nop
 8008f28:	08008e85 	.word	0x08008e85

08008f2c <__sfmoreglue>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	1e4a      	subs	r2, r1, #1
 8008f30:	2568      	movs	r5, #104	; 0x68
 8008f32:	4355      	muls	r5, r2
 8008f34:	460e      	mov	r6, r1
 8008f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f3a:	f000 f951 	bl	80091e0 <_malloc_r>
 8008f3e:	4604      	mov	r4, r0
 8008f40:	b140      	cbz	r0, 8008f54 <__sfmoreglue+0x28>
 8008f42:	2100      	movs	r1, #0
 8008f44:	e9c0 1600 	strd	r1, r6, [r0]
 8008f48:	300c      	adds	r0, #12
 8008f4a:	60a0      	str	r0, [r4, #8]
 8008f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f50:	f7ff fd17 	bl	8008982 <memset>
 8008f54:	4620      	mov	r0, r4
 8008f56:	bd70      	pop	{r4, r5, r6, pc}

08008f58 <__sinit>:
 8008f58:	6983      	ldr	r3, [r0, #24]
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	bb33      	cbnz	r3, 8008fae <__sinit+0x56>
 8008f60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008f64:	6503      	str	r3, [r0, #80]	; 0x50
 8008f66:	4b12      	ldr	r3, [pc, #72]	; (8008fb0 <__sinit+0x58>)
 8008f68:	4a12      	ldr	r2, [pc, #72]	; (8008fb4 <__sinit+0x5c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6282      	str	r2, [r0, #40]	; 0x28
 8008f6e:	4298      	cmp	r0, r3
 8008f70:	bf04      	itt	eq
 8008f72:	2301      	moveq	r3, #1
 8008f74:	6183      	streq	r3, [r0, #24]
 8008f76:	f000 f81f 	bl	8008fb8 <__sfp>
 8008f7a:	6060      	str	r0, [r4, #4]
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f000 f81b 	bl	8008fb8 <__sfp>
 8008f82:	60a0      	str	r0, [r4, #8]
 8008f84:	4620      	mov	r0, r4
 8008f86:	f000 f817 	bl	8008fb8 <__sfp>
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	60e0      	str	r0, [r4, #12]
 8008f8e:	2104      	movs	r1, #4
 8008f90:	6860      	ldr	r0, [r4, #4]
 8008f92:	f7ff ffa1 	bl	8008ed8 <std>
 8008f96:	2201      	movs	r2, #1
 8008f98:	2109      	movs	r1, #9
 8008f9a:	68a0      	ldr	r0, [r4, #8]
 8008f9c:	f7ff ff9c 	bl	8008ed8 <std>
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	2112      	movs	r1, #18
 8008fa4:	68e0      	ldr	r0, [r4, #12]
 8008fa6:	f7ff ff97 	bl	8008ed8 <std>
 8008faa:	2301      	movs	r3, #1
 8008fac:	61a3      	str	r3, [r4, #24]
 8008fae:	bd10      	pop	{r4, pc}
 8008fb0:	08009a50 	.word	0x08009a50
 8008fb4:	08008f21 	.word	0x08008f21

08008fb8 <__sfp>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	4b1b      	ldr	r3, [pc, #108]	; (8009028 <__sfp+0x70>)
 8008fbc:	681e      	ldr	r6, [r3, #0]
 8008fbe:	69b3      	ldr	r3, [r6, #24]
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	b913      	cbnz	r3, 8008fca <__sfp+0x12>
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7ff ffc7 	bl	8008f58 <__sinit>
 8008fca:	3648      	adds	r6, #72	; 0x48
 8008fcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	d503      	bpl.n	8008fdc <__sfp+0x24>
 8008fd4:	6833      	ldr	r3, [r6, #0]
 8008fd6:	b133      	cbz	r3, 8008fe6 <__sfp+0x2e>
 8008fd8:	6836      	ldr	r6, [r6, #0]
 8008fda:	e7f7      	b.n	8008fcc <__sfp+0x14>
 8008fdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fe0:	b16d      	cbz	r5, 8008ffe <__sfp+0x46>
 8008fe2:	3468      	adds	r4, #104	; 0x68
 8008fe4:	e7f4      	b.n	8008fd0 <__sfp+0x18>
 8008fe6:	2104      	movs	r1, #4
 8008fe8:	4638      	mov	r0, r7
 8008fea:	f7ff ff9f 	bl	8008f2c <__sfmoreglue>
 8008fee:	6030      	str	r0, [r6, #0]
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d1f1      	bne.n	8008fd8 <__sfp+0x20>
 8008ff4:	230c      	movs	r3, #12
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffe:	4b0b      	ldr	r3, [pc, #44]	; (800902c <__sfp+0x74>)
 8009000:	6665      	str	r5, [r4, #100]	; 0x64
 8009002:	e9c4 5500 	strd	r5, r5, [r4]
 8009006:	60a5      	str	r5, [r4, #8]
 8009008:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800900c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009010:	2208      	movs	r2, #8
 8009012:	4629      	mov	r1, r5
 8009014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009018:	f7ff fcb3 	bl	8008982 <memset>
 800901c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009024:	e7e9      	b.n	8008ffa <__sfp+0x42>
 8009026:	bf00      	nop
 8009028:	08009a50 	.word	0x08009a50
 800902c:	ffff0001 	.word	0xffff0001

08009030 <_fwalk_reent>:
 8009030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009034:	4680      	mov	r8, r0
 8009036:	4689      	mov	r9, r1
 8009038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800903c:	2600      	movs	r6, #0
 800903e:	b914      	cbnz	r4, 8009046 <_fwalk_reent+0x16>
 8009040:	4630      	mov	r0, r6
 8009042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009046:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800904a:	3f01      	subs	r7, #1
 800904c:	d501      	bpl.n	8009052 <_fwalk_reent+0x22>
 800904e:	6824      	ldr	r4, [r4, #0]
 8009050:	e7f5      	b.n	800903e <_fwalk_reent+0xe>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d907      	bls.n	8009068 <_fwalk_reent+0x38>
 8009058:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800905c:	3301      	adds	r3, #1
 800905e:	d003      	beq.n	8009068 <_fwalk_reent+0x38>
 8009060:	4629      	mov	r1, r5
 8009062:	4640      	mov	r0, r8
 8009064:	47c8      	blx	r9
 8009066:	4306      	orrs	r6, r0
 8009068:	3568      	adds	r5, #104	; 0x68
 800906a:	e7ee      	b.n	800904a <_fwalk_reent+0x1a>

0800906c <__swhatbuf_r>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	460e      	mov	r6, r1
 8009070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009074:	2900      	cmp	r1, #0
 8009076:	b096      	sub	sp, #88	; 0x58
 8009078:	4614      	mov	r4, r2
 800907a:	461d      	mov	r5, r3
 800907c:	da07      	bge.n	800908e <__swhatbuf_r+0x22>
 800907e:	2300      	movs	r3, #0
 8009080:	602b      	str	r3, [r5, #0]
 8009082:	89b3      	ldrh	r3, [r6, #12]
 8009084:	061a      	lsls	r2, r3, #24
 8009086:	d410      	bmi.n	80090aa <__swhatbuf_r+0x3e>
 8009088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800908c:	e00e      	b.n	80090ac <__swhatbuf_r+0x40>
 800908e:	466a      	mov	r2, sp
 8009090:	f000 fc3e 	bl	8009910 <_fstat_r>
 8009094:	2800      	cmp	r0, #0
 8009096:	dbf2      	blt.n	800907e <__swhatbuf_r+0x12>
 8009098:	9a01      	ldr	r2, [sp, #4]
 800909a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800909e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090a2:	425a      	negs	r2, r3
 80090a4:	415a      	adcs	r2, r3
 80090a6:	602a      	str	r2, [r5, #0]
 80090a8:	e7ee      	b.n	8009088 <__swhatbuf_r+0x1c>
 80090aa:	2340      	movs	r3, #64	; 0x40
 80090ac:	2000      	movs	r0, #0
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	b016      	add	sp, #88	; 0x58
 80090b2:	bd70      	pop	{r4, r5, r6, pc}

080090b4 <__smakebuf_r>:
 80090b4:	898b      	ldrh	r3, [r1, #12]
 80090b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090b8:	079d      	lsls	r5, r3, #30
 80090ba:	4606      	mov	r6, r0
 80090bc:	460c      	mov	r4, r1
 80090be:	d507      	bpl.n	80090d0 <__smakebuf_r+0x1c>
 80090c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	6123      	str	r3, [r4, #16]
 80090c8:	2301      	movs	r3, #1
 80090ca:	6163      	str	r3, [r4, #20]
 80090cc:	b002      	add	sp, #8
 80090ce:	bd70      	pop	{r4, r5, r6, pc}
 80090d0:	ab01      	add	r3, sp, #4
 80090d2:	466a      	mov	r2, sp
 80090d4:	f7ff ffca 	bl	800906c <__swhatbuf_r>
 80090d8:	9900      	ldr	r1, [sp, #0]
 80090da:	4605      	mov	r5, r0
 80090dc:	4630      	mov	r0, r6
 80090de:	f000 f87f 	bl	80091e0 <_malloc_r>
 80090e2:	b948      	cbnz	r0, 80090f8 <__smakebuf_r+0x44>
 80090e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e8:	059a      	lsls	r2, r3, #22
 80090ea:	d4ef      	bmi.n	80090cc <__smakebuf_r+0x18>
 80090ec:	f023 0303 	bic.w	r3, r3, #3
 80090f0:	f043 0302 	orr.w	r3, r3, #2
 80090f4:	81a3      	strh	r3, [r4, #12]
 80090f6:	e7e3      	b.n	80090c0 <__smakebuf_r+0xc>
 80090f8:	4b0d      	ldr	r3, [pc, #52]	; (8009130 <__smakebuf_r+0x7c>)
 80090fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	6020      	str	r0, [r4, #0]
 8009100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	9b00      	ldr	r3, [sp, #0]
 8009108:	6163      	str	r3, [r4, #20]
 800910a:	9b01      	ldr	r3, [sp, #4]
 800910c:	6120      	str	r0, [r4, #16]
 800910e:	b15b      	cbz	r3, 8009128 <__smakebuf_r+0x74>
 8009110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009114:	4630      	mov	r0, r6
 8009116:	f000 fc0d 	bl	8009934 <_isatty_r>
 800911a:	b128      	cbz	r0, 8009128 <__smakebuf_r+0x74>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	f023 0303 	bic.w	r3, r3, #3
 8009122:	f043 0301 	orr.w	r3, r3, #1
 8009126:	81a3      	strh	r3, [r4, #12]
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	431d      	orrs	r5, r3
 800912c:	81a5      	strh	r5, [r4, #12]
 800912e:	e7cd      	b.n	80090cc <__smakebuf_r+0x18>
 8009130:	08008f21 	.word	0x08008f21

08009134 <malloc>:
 8009134:	4b02      	ldr	r3, [pc, #8]	; (8009140 <malloc+0xc>)
 8009136:	4601      	mov	r1, r0
 8009138:	6818      	ldr	r0, [r3, #0]
 800913a:	f000 b851 	b.w	80091e0 <_malloc_r>
 800913e:	bf00      	nop
 8009140:	200002c8 	.word	0x200002c8

08009144 <_free_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4605      	mov	r5, r0
 8009148:	2900      	cmp	r1, #0
 800914a:	d045      	beq.n	80091d8 <_free_r+0x94>
 800914c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009150:	1f0c      	subs	r4, r1, #4
 8009152:	2b00      	cmp	r3, #0
 8009154:	bfb8      	it	lt
 8009156:	18e4      	addlt	r4, r4, r3
 8009158:	f000 fc0e 	bl	8009978 <__malloc_lock>
 800915c:	4a1f      	ldr	r2, [pc, #124]	; (80091dc <_free_r+0x98>)
 800915e:	6813      	ldr	r3, [r2, #0]
 8009160:	4610      	mov	r0, r2
 8009162:	b933      	cbnz	r3, 8009172 <_free_r+0x2e>
 8009164:	6063      	str	r3, [r4, #4]
 8009166:	6014      	str	r4, [r2, #0]
 8009168:	4628      	mov	r0, r5
 800916a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800916e:	f000 bc04 	b.w	800997a <__malloc_unlock>
 8009172:	42a3      	cmp	r3, r4
 8009174:	d90c      	bls.n	8009190 <_free_r+0x4c>
 8009176:	6821      	ldr	r1, [r4, #0]
 8009178:	1862      	adds	r2, r4, r1
 800917a:	4293      	cmp	r3, r2
 800917c:	bf04      	itt	eq
 800917e:	681a      	ldreq	r2, [r3, #0]
 8009180:	685b      	ldreq	r3, [r3, #4]
 8009182:	6063      	str	r3, [r4, #4]
 8009184:	bf04      	itt	eq
 8009186:	1852      	addeq	r2, r2, r1
 8009188:	6022      	streq	r2, [r4, #0]
 800918a:	6004      	str	r4, [r0, #0]
 800918c:	e7ec      	b.n	8009168 <_free_r+0x24>
 800918e:	4613      	mov	r3, r2
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	b10a      	cbz	r2, 8009198 <_free_r+0x54>
 8009194:	42a2      	cmp	r2, r4
 8009196:	d9fa      	bls.n	800918e <_free_r+0x4a>
 8009198:	6819      	ldr	r1, [r3, #0]
 800919a:	1858      	adds	r0, r3, r1
 800919c:	42a0      	cmp	r0, r4
 800919e:	d10b      	bne.n	80091b8 <_free_r+0x74>
 80091a0:	6820      	ldr	r0, [r4, #0]
 80091a2:	4401      	add	r1, r0
 80091a4:	1858      	adds	r0, r3, r1
 80091a6:	4282      	cmp	r2, r0
 80091a8:	6019      	str	r1, [r3, #0]
 80091aa:	d1dd      	bne.n	8009168 <_free_r+0x24>
 80091ac:	6810      	ldr	r0, [r2, #0]
 80091ae:	6852      	ldr	r2, [r2, #4]
 80091b0:	605a      	str	r2, [r3, #4]
 80091b2:	4401      	add	r1, r0
 80091b4:	6019      	str	r1, [r3, #0]
 80091b6:	e7d7      	b.n	8009168 <_free_r+0x24>
 80091b8:	d902      	bls.n	80091c0 <_free_r+0x7c>
 80091ba:	230c      	movs	r3, #12
 80091bc:	602b      	str	r3, [r5, #0]
 80091be:	e7d3      	b.n	8009168 <_free_r+0x24>
 80091c0:	6820      	ldr	r0, [r4, #0]
 80091c2:	1821      	adds	r1, r4, r0
 80091c4:	428a      	cmp	r2, r1
 80091c6:	bf04      	itt	eq
 80091c8:	6811      	ldreq	r1, [r2, #0]
 80091ca:	6852      	ldreq	r2, [r2, #4]
 80091cc:	6062      	str	r2, [r4, #4]
 80091ce:	bf04      	itt	eq
 80091d0:	1809      	addeq	r1, r1, r0
 80091d2:	6021      	streq	r1, [r4, #0]
 80091d4:	605c      	str	r4, [r3, #4]
 80091d6:	e7c7      	b.n	8009168 <_free_r+0x24>
 80091d8:	bd38      	pop	{r3, r4, r5, pc}
 80091da:	bf00      	nop
 80091dc:	2000034c 	.word	0x2000034c

080091e0 <_malloc_r>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	1ccd      	adds	r5, r1, #3
 80091e4:	f025 0503 	bic.w	r5, r5, #3
 80091e8:	3508      	adds	r5, #8
 80091ea:	2d0c      	cmp	r5, #12
 80091ec:	bf38      	it	cc
 80091ee:	250c      	movcc	r5, #12
 80091f0:	2d00      	cmp	r5, #0
 80091f2:	4606      	mov	r6, r0
 80091f4:	db01      	blt.n	80091fa <_malloc_r+0x1a>
 80091f6:	42a9      	cmp	r1, r5
 80091f8:	d903      	bls.n	8009202 <_malloc_r+0x22>
 80091fa:	230c      	movs	r3, #12
 80091fc:	6033      	str	r3, [r6, #0]
 80091fe:	2000      	movs	r0, #0
 8009200:	bd70      	pop	{r4, r5, r6, pc}
 8009202:	f000 fbb9 	bl	8009978 <__malloc_lock>
 8009206:	4a21      	ldr	r2, [pc, #132]	; (800928c <_malloc_r+0xac>)
 8009208:	6814      	ldr	r4, [r2, #0]
 800920a:	4621      	mov	r1, r4
 800920c:	b991      	cbnz	r1, 8009234 <_malloc_r+0x54>
 800920e:	4c20      	ldr	r4, [pc, #128]	; (8009290 <_malloc_r+0xb0>)
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	b91b      	cbnz	r3, 800921c <_malloc_r+0x3c>
 8009214:	4630      	mov	r0, r6
 8009216:	f000 fb05 	bl	8009824 <_sbrk_r>
 800921a:	6020      	str	r0, [r4, #0]
 800921c:	4629      	mov	r1, r5
 800921e:	4630      	mov	r0, r6
 8009220:	f000 fb00 	bl	8009824 <_sbrk_r>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	d124      	bne.n	8009272 <_malloc_r+0x92>
 8009228:	230c      	movs	r3, #12
 800922a:	6033      	str	r3, [r6, #0]
 800922c:	4630      	mov	r0, r6
 800922e:	f000 fba4 	bl	800997a <__malloc_unlock>
 8009232:	e7e4      	b.n	80091fe <_malloc_r+0x1e>
 8009234:	680b      	ldr	r3, [r1, #0]
 8009236:	1b5b      	subs	r3, r3, r5
 8009238:	d418      	bmi.n	800926c <_malloc_r+0x8c>
 800923a:	2b0b      	cmp	r3, #11
 800923c:	d90f      	bls.n	800925e <_malloc_r+0x7e>
 800923e:	600b      	str	r3, [r1, #0]
 8009240:	50cd      	str	r5, [r1, r3]
 8009242:	18cc      	adds	r4, r1, r3
 8009244:	4630      	mov	r0, r6
 8009246:	f000 fb98 	bl	800997a <__malloc_unlock>
 800924a:	f104 000b 	add.w	r0, r4, #11
 800924e:	1d23      	adds	r3, r4, #4
 8009250:	f020 0007 	bic.w	r0, r0, #7
 8009254:	1ac3      	subs	r3, r0, r3
 8009256:	d0d3      	beq.n	8009200 <_malloc_r+0x20>
 8009258:	425a      	negs	r2, r3
 800925a:	50e2      	str	r2, [r4, r3]
 800925c:	e7d0      	b.n	8009200 <_malloc_r+0x20>
 800925e:	428c      	cmp	r4, r1
 8009260:	684b      	ldr	r3, [r1, #4]
 8009262:	bf16      	itet	ne
 8009264:	6063      	strne	r3, [r4, #4]
 8009266:	6013      	streq	r3, [r2, #0]
 8009268:	460c      	movne	r4, r1
 800926a:	e7eb      	b.n	8009244 <_malloc_r+0x64>
 800926c:	460c      	mov	r4, r1
 800926e:	6849      	ldr	r1, [r1, #4]
 8009270:	e7cc      	b.n	800920c <_malloc_r+0x2c>
 8009272:	1cc4      	adds	r4, r0, #3
 8009274:	f024 0403 	bic.w	r4, r4, #3
 8009278:	42a0      	cmp	r0, r4
 800927a:	d005      	beq.n	8009288 <_malloc_r+0xa8>
 800927c:	1a21      	subs	r1, r4, r0
 800927e:	4630      	mov	r0, r6
 8009280:	f000 fad0 	bl	8009824 <_sbrk_r>
 8009284:	3001      	adds	r0, #1
 8009286:	d0cf      	beq.n	8009228 <_malloc_r+0x48>
 8009288:	6025      	str	r5, [r4, #0]
 800928a:	e7db      	b.n	8009244 <_malloc_r+0x64>
 800928c:	2000034c 	.word	0x2000034c
 8009290:	20000350 	.word	0x20000350

08009294 <__sfputc_r>:
 8009294:	6893      	ldr	r3, [r2, #8]
 8009296:	3b01      	subs	r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	b410      	push	{r4}
 800929c:	6093      	str	r3, [r2, #8]
 800929e:	da08      	bge.n	80092b2 <__sfputc_r+0x1e>
 80092a0:	6994      	ldr	r4, [r2, #24]
 80092a2:	42a3      	cmp	r3, r4
 80092a4:	db01      	blt.n	80092aa <__sfputc_r+0x16>
 80092a6:	290a      	cmp	r1, #10
 80092a8:	d103      	bne.n	80092b2 <__sfputc_r+0x1e>
 80092aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092ae:	f7ff bca3 	b.w	8008bf8 <__swbuf_r>
 80092b2:	6813      	ldr	r3, [r2, #0]
 80092b4:	1c58      	adds	r0, r3, #1
 80092b6:	6010      	str	r0, [r2, #0]
 80092b8:	7019      	strb	r1, [r3, #0]
 80092ba:	4608      	mov	r0, r1
 80092bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <__sfputs_r>:
 80092c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c4:	4606      	mov	r6, r0
 80092c6:	460f      	mov	r7, r1
 80092c8:	4614      	mov	r4, r2
 80092ca:	18d5      	adds	r5, r2, r3
 80092cc:	42ac      	cmp	r4, r5
 80092ce:	d101      	bne.n	80092d4 <__sfputs_r+0x12>
 80092d0:	2000      	movs	r0, #0
 80092d2:	e007      	b.n	80092e4 <__sfputs_r+0x22>
 80092d4:	463a      	mov	r2, r7
 80092d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092da:	4630      	mov	r0, r6
 80092dc:	f7ff ffda 	bl	8009294 <__sfputc_r>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d1f3      	bne.n	80092cc <__sfputs_r+0xa>
 80092e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092e8 <_vfiprintf_r>:
 80092e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	460c      	mov	r4, r1
 80092ee:	b09d      	sub	sp, #116	; 0x74
 80092f0:	4617      	mov	r7, r2
 80092f2:	461d      	mov	r5, r3
 80092f4:	4606      	mov	r6, r0
 80092f6:	b118      	cbz	r0, 8009300 <_vfiprintf_r+0x18>
 80092f8:	6983      	ldr	r3, [r0, #24]
 80092fa:	b90b      	cbnz	r3, 8009300 <_vfiprintf_r+0x18>
 80092fc:	f7ff fe2c 	bl	8008f58 <__sinit>
 8009300:	4b7c      	ldr	r3, [pc, #496]	; (80094f4 <_vfiprintf_r+0x20c>)
 8009302:	429c      	cmp	r4, r3
 8009304:	d158      	bne.n	80093b8 <_vfiprintf_r+0xd0>
 8009306:	6874      	ldr	r4, [r6, #4]
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	0718      	lsls	r0, r3, #28
 800930c:	d55e      	bpl.n	80093cc <_vfiprintf_r+0xe4>
 800930e:	6923      	ldr	r3, [r4, #16]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d05b      	beq.n	80093cc <_vfiprintf_r+0xe4>
 8009314:	2300      	movs	r3, #0
 8009316:	9309      	str	r3, [sp, #36]	; 0x24
 8009318:	2320      	movs	r3, #32
 800931a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800931e:	2330      	movs	r3, #48	; 0x30
 8009320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009324:	9503      	str	r5, [sp, #12]
 8009326:	f04f 0b01 	mov.w	fp, #1
 800932a:	46b8      	mov	r8, r7
 800932c:	4645      	mov	r5, r8
 800932e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009332:	b10b      	cbz	r3, 8009338 <_vfiprintf_r+0x50>
 8009334:	2b25      	cmp	r3, #37	; 0x25
 8009336:	d154      	bne.n	80093e2 <_vfiprintf_r+0xfa>
 8009338:	ebb8 0a07 	subs.w	sl, r8, r7
 800933c:	d00b      	beq.n	8009356 <_vfiprintf_r+0x6e>
 800933e:	4653      	mov	r3, sl
 8009340:	463a      	mov	r2, r7
 8009342:	4621      	mov	r1, r4
 8009344:	4630      	mov	r0, r6
 8009346:	f7ff ffbc 	bl	80092c2 <__sfputs_r>
 800934a:	3001      	adds	r0, #1
 800934c:	f000 80c2 	beq.w	80094d4 <_vfiprintf_r+0x1ec>
 8009350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009352:	4453      	add	r3, sl
 8009354:	9309      	str	r3, [sp, #36]	; 0x24
 8009356:	f898 3000 	ldrb.w	r3, [r8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 80ba 	beq.w	80094d4 <_vfiprintf_r+0x1ec>
 8009360:	2300      	movs	r3, #0
 8009362:	f04f 32ff 	mov.w	r2, #4294967295
 8009366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800936a:	9304      	str	r3, [sp, #16]
 800936c:	9307      	str	r3, [sp, #28]
 800936e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009372:	931a      	str	r3, [sp, #104]	; 0x68
 8009374:	46a8      	mov	r8, r5
 8009376:	2205      	movs	r2, #5
 8009378:	f818 1b01 	ldrb.w	r1, [r8], #1
 800937c:	485e      	ldr	r0, [pc, #376]	; (80094f8 <_vfiprintf_r+0x210>)
 800937e:	f7f6 ff47 	bl	8000210 <memchr>
 8009382:	9b04      	ldr	r3, [sp, #16]
 8009384:	bb78      	cbnz	r0, 80093e6 <_vfiprintf_r+0xfe>
 8009386:	06d9      	lsls	r1, r3, #27
 8009388:	bf44      	itt	mi
 800938a:	2220      	movmi	r2, #32
 800938c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009390:	071a      	lsls	r2, r3, #28
 8009392:	bf44      	itt	mi
 8009394:	222b      	movmi	r2, #43	; 0x2b
 8009396:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800939a:	782a      	ldrb	r2, [r5, #0]
 800939c:	2a2a      	cmp	r2, #42	; 0x2a
 800939e:	d02a      	beq.n	80093f6 <_vfiprintf_r+0x10e>
 80093a0:	9a07      	ldr	r2, [sp, #28]
 80093a2:	46a8      	mov	r8, r5
 80093a4:	2000      	movs	r0, #0
 80093a6:	250a      	movs	r5, #10
 80093a8:	4641      	mov	r1, r8
 80093aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ae:	3b30      	subs	r3, #48	; 0x30
 80093b0:	2b09      	cmp	r3, #9
 80093b2:	d969      	bls.n	8009488 <_vfiprintf_r+0x1a0>
 80093b4:	b360      	cbz	r0, 8009410 <_vfiprintf_r+0x128>
 80093b6:	e024      	b.n	8009402 <_vfiprintf_r+0x11a>
 80093b8:	4b50      	ldr	r3, [pc, #320]	; (80094fc <_vfiprintf_r+0x214>)
 80093ba:	429c      	cmp	r4, r3
 80093bc:	d101      	bne.n	80093c2 <_vfiprintf_r+0xda>
 80093be:	68b4      	ldr	r4, [r6, #8]
 80093c0:	e7a2      	b.n	8009308 <_vfiprintf_r+0x20>
 80093c2:	4b4f      	ldr	r3, [pc, #316]	; (8009500 <_vfiprintf_r+0x218>)
 80093c4:	429c      	cmp	r4, r3
 80093c6:	bf08      	it	eq
 80093c8:	68f4      	ldreq	r4, [r6, #12]
 80093ca:	e79d      	b.n	8009308 <_vfiprintf_r+0x20>
 80093cc:	4621      	mov	r1, r4
 80093ce:	4630      	mov	r0, r6
 80093d0:	f7ff fc64 	bl	8008c9c <__swsetup_r>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d09d      	beq.n	8009314 <_vfiprintf_r+0x2c>
 80093d8:	f04f 30ff 	mov.w	r0, #4294967295
 80093dc:	b01d      	add	sp, #116	; 0x74
 80093de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e2:	46a8      	mov	r8, r5
 80093e4:	e7a2      	b.n	800932c <_vfiprintf_r+0x44>
 80093e6:	4a44      	ldr	r2, [pc, #272]	; (80094f8 <_vfiprintf_r+0x210>)
 80093e8:	1a80      	subs	r0, r0, r2
 80093ea:	fa0b f000 	lsl.w	r0, fp, r0
 80093ee:	4318      	orrs	r0, r3
 80093f0:	9004      	str	r0, [sp, #16]
 80093f2:	4645      	mov	r5, r8
 80093f4:	e7be      	b.n	8009374 <_vfiprintf_r+0x8c>
 80093f6:	9a03      	ldr	r2, [sp, #12]
 80093f8:	1d11      	adds	r1, r2, #4
 80093fa:	6812      	ldr	r2, [r2, #0]
 80093fc:	9103      	str	r1, [sp, #12]
 80093fe:	2a00      	cmp	r2, #0
 8009400:	db01      	blt.n	8009406 <_vfiprintf_r+0x11e>
 8009402:	9207      	str	r2, [sp, #28]
 8009404:	e004      	b.n	8009410 <_vfiprintf_r+0x128>
 8009406:	4252      	negs	r2, r2
 8009408:	f043 0302 	orr.w	r3, r3, #2
 800940c:	9207      	str	r2, [sp, #28]
 800940e:	9304      	str	r3, [sp, #16]
 8009410:	f898 3000 	ldrb.w	r3, [r8]
 8009414:	2b2e      	cmp	r3, #46	; 0x2e
 8009416:	d10e      	bne.n	8009436 <_vfiprintf_r+0x14e>
 8009418:	f898 3001 	ldrb.w	r3, [r8, #1]
 800941c:	2b2a      	cmp	r3, #42	; 0x2a
 800941e:	d138      	bne.n	8009492 <_vfiprintf_r+0x1aa>
 8009420:	9b03      	ldr	r3, [sp, #12]
 8009422:	1d1a      	adds	r2, r3, #4
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	9203      	str	r2, [sp, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	bfb8      	it	lt
 800942c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009430:	f108 0802 	add.w	r8, r8, #2
 8009434:	9305      	str	r3, [sp, #20]
 8009436:	4d33      	ldr	r5, [pc, #204]	; (8009504 <_vfiprintf_r+0x21c>)
 8009438:	f898 1000 	ldrb.w	r1, [r8]
 800943c:	2203      	movs	r2, #3
 800943e:	4628      	mov	r0, r5
 8009440:	f7f6 fee6 	bl	8000210 <memchr>
 8009444:	b140      	cbz	r0, 8009458 <_vfiprintf_r+0x170>
 8009446:	2340      	movs	r3, #64	; 0x40
 8009448:	1b40      	subs	r0, r0, r5
 800944a:	fa03 f000 	lsl.w	r0, r3, r0
 800944e:	9b04      	ldr	r3, [sp, #16]
 8009450:	4303      	orrs	r3, r0
 8009452:	f108 0801 	add.w	r8, r8, #1
 8009456:	9304      	str	r3, [sp, #16]
 8009458:	f898 1000 	ldrb.w	r1, [r8]
 800945c:	482a      	ldr	r0, [pc, #168]	; (8009508 <_vfiprintf_r+0x220>)
 800945e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009462:	2206      	movs	r2, #6
 8009464:	f108 0701 	add.w	r7, r8, #1
 8009468:	f7f6 fed2 	bl	8000210 <memchr>
 800946c:	2800      	cmp	r0, #0
 800946e:	d037      	beq.n	80094e0 <_vfiprintf_r+0x1f8>
 8009470:	4b26      	ldr	r3, [pc, #152]	; (800950c <_vfiprintf_r+0x224>)
 8009472:	bb1b      	cbnz	r3, 80094bc <_vfiprintf_r+0x1d4>
 8009474:	9b03      	ldr	r3, [sp, #12]
 8009476:	3307      	adds	r3, #7
 8009478:	f023 0307 	bic.w	r3, r3, #7
 800947c:	3308      	adds	r3, #8
 800947e:	9303      	str	r3, [sp, #12]
 8009480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009482:	444b      	add	r3, r9
 8009484:	9309      	str	r3, [sp, #36]	; 0x24
 8009486:	e750      	b.n	800932a <_vfiprintf_r+0x42>
 8009488:	fb05 3202 	mla	r2, r5, r2, r3
 800948c:	2001      	movs	r0, #1
 800948e:	4688      	mov	r8, r1
 8009490:	e78a      	b.n	80093a8 <_vfiprintf_r+0xc0>
 8009492:	2300      	movs	r3, #0
 8009494:	f108 0801 	add.w	r8, r8, #1
 8009498:	9305      	str	r3, [sp, #20]
 800949a:	4619      	mov	r1, r3
 800949c:	250a      	movs	r5, #10
 800949e:	4640      	mov	r0, r8
 80094a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094a4:	3a30      	subs	r2, #48	; 0x30
 80094a6:	2a09      	cmp	r2, #9
 80094a8:	d903      	bls.n	80094b2 <_vfiprintf_r+0x1ca>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0c3      	beq.n	8009436 <_vfiprintf_r+0x14e>
 80094ae:	9105      	str	r1, [sp, #20]
 80094b0:	e7c1      	b.n	8009436 <_vfiprintf_r+0x14e>
 80094b2:	fb05 2101 	mla	r1, r5, r1, r2
 80094b6:	2301      	movs	r3, #1
 80094b8:	4680      	mov	r8, r0
 80094ba:	e7f0      	b.n	800949e <_vfiprintf_r+0x1b6>
 80094bc:	ab03      	add	r3, sp, #12
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	4622      	mov	r2, r4
 80094c2:	4b13      	ldr	r3, [pc, #76]	; (8009510 <_vfiprintf_r+0x228>)
 80094c4:	a904      	add	r1, sp, #16
 80094c6:	4630      	mov	r0, r6
 80094c8:	f3af 8000 	nop.w
 80094cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80094d0:	4681      	mov	r9, r0
 80094d2:	d1d5      	bne.n	8009480 <_vfiprintf_r+0x198>
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	065b      	lsls	r3, r3, #25
 80094d8:	f53f af7e 	bmi.w	80093d8 <_vfiprintf_r+0xf0>
 80094dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094de:	e77d      	b.n	80093dc <_vfiprintf_r+0xf4>
 80094e0:	ab03      	add	r3, sp, #12
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	4622      	mov	r2, r4
 80094e6:	4b0a      	ldr	r3, [pc, #40]	; (8009510 <_vfiprintf_r+0x228>)
 80094e8:	a904      	add	r1, sp, #16
 80094ea:	4630      	mov	r0, r6
 80094ec:	f000 f888 	bl	8009600 <_printf_i>
 80094f0:	e7ec      	b.n	80094cc <_vfiprintf_r+0x1e4>
 80094f2:	bf00      	nop
 80094f4:	08009a74 	.word	0x08009a74
 80094f8:	08009ab4 	.word	0x08009ab4
 80094fc:	08009a94 	.word	0x08009a94
 8009500:	08009a54 	.word	0x08009a54
 8009504:	08009aba 	.word	0x08009aba
 8009508:	08009abe 	.word	0x08009abe
 800950c:	00000000 	.word	0x00000000
 8009510:	080092c3 	.word	0x080092c3

08009514 <_printf_common>:
 8009514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009518:	4691      	mov	r9, r2
 800951a:	461f      	mov	r7, r3
 800951c:	688a      	ldr	r2, [r1, #8]
 800951e:	690b      	ldr	r3, [r1, #16]
 8009520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009524:	4293      	cmp	r3, r2
 8009526:	bfb8      	it	lt
 8009528:	4613      	movlt	r3, r2
 800952a:	f8c9 3000 	str.w	r3, [r9]
 800952e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009532:	4606      	mov	r6, r0
 8009534:	460c      	mov	r4, r1
 8009536:	b112      	cbz	r2, 800953e <_printf_common+0x2a>
 8009538:	3301      	adds	r3, #1
 800953a:	f8c9 3000 	str.w	r3, [r9]
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	0699      	lsls	r1, r3, #26
 8009542:	bf42      	ittt	mi
 8009544:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009548:	3302      	addmi	r3, #2
 800954a:	f8c9 3000 	strmi.w	r3, [r9]
 800954e:	6825      	ldr	r5, [r4, #0]
 8009550:	f015 0506 	ands.w	r5, r5, #6
 8009554:	d107      	bne.n	8009566 <_printf_common+0x52>
 8009556:	f104 0a19 	add.w	sl, r4, #25
 800955a:	68e3      	ldr	r3, [r4, #12]
 800955c:	f8d9 2000 	ldr.w	r2, [r9]
 8009560:	1a9b      	subs	r3, r3, r2
 8009562:	42ab      	cmp	r3, r5
 8009564:	dc28      	bgt.n	80095b8 <_printf_common+0xa4>
 8009566:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800956a:	6822      	ldr	r2, [r4, #0]
 800956c:	3300      	adds	r3, #0
 800956e:	bf18      	it	ne
 8009570:	2301      	movne	r3, #1
 8009572:	0692      	lsls	r2, r2, #26
 8009574:	d42d      	bmi.n	80095d2 <_printf_common+0xbe>
 8009576:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800957a:	4639      	mov	r1, r7
 800957c:	4630      	mov	r0, r6
 800957e:	47c0      	blx	r8
 8009580:	3001      	adds	r0, #1
 8009582:	d020      	beq.n	80095c6 <_printf_common+0xb2>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	68e5      	ldr	r5, [r4, #12]
 8009588:	f8d9 2000 	ldr.w	r2, [r9]
 800958c:	f003 0306 	and.w	r3, r3, #6
 8009590:	2b04      	cmp	r3, #4
 8009592:	bf08      	it	eq
 8009594:	1aad      	subeq	r5, r5, r2
 8009596:	68a3      	ldr	r3, [r4, #8]
 8009598:	6922      	ldr	r2, [r4, #16]
 800959a:	bf0c      	ite	eq
 800959c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095a0:	2500      	movne	r5, #0
 80095a2:	4293      	cmp	r3, r2
 80095a4:	bfc4      	itt	gt
 80095a6:	1a9b      	subgt	r3, r3, r2
 80095a8:	18ed      	addgt	r5, r5, r3
 80095aa:	f04f 0900 	mov.w	r9, #0
 80095ae:	341a      	adds	r4, #26
 80095b0:	454d      	cmp	r5, r9
 80095b2:	d11a      	bne.n	80095ea <_printf_common+0xd6>
 80095b4:	2000      	movs	r0, #0
 80095b6:	e008      	b.n	80095ca <_printf_common+0xb6>
 80095b8:	2301      	movs	r3, #1
 80095ba:	4652      	mov	r2, sl
 80095bc:	4639      	mov	r1, r7
 80095be:	4630      	mov	r0, r6
 80095c0:	47c0      	blx	r8
 80095c2:	3001      	adds	r0, #1
 80095c4:	d103      	bne.n	80095ce <_printf_common+0xba>
 80095c6:	f04f 30ff 	mov.w	r0, #4294967295
 80095ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ce:	3501      	adds	r5, #1
 80095d0:	e7c3      	b.n	800955a <_printf_common+0x46>
 80095d2:	18e1      	adds	r1, r4, r3
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	2030      	movs	r0, #48	; 0x30
 80095d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095dc:	4422      	add	r2, r4
 80095de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095e6:	3302      	adds	r3, #2
 80095e8:	e7c5      	b.n	8009576 <_printf_common+0x62>
 80095ea:	2301      	movs	r3, #1
 80095ec:	4622      	mov	r2, r4
 80095ee:	4639      	mov	r1, r7
 80095f0:	4630      	mov	r0, r6
 80095f2:	47c0      	blx	r8
 80095f4:	3001      	adds	r0, #1
 80095f6:	d0e6      	beq.n	80095c6 <_printf_common+0xb2>
 80095f8:	f109 0901 	add.w	r9, r9, #1
 80095fc:	e7d8      	b.n	80095b0 <_printf_common+0x9c>
	...

08009600 <_printf_i>:
 8009600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009604:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009608:	460c      	mov	r4, r1
 800960a:	7e09      	ldrb	r1, [r1, #24]
 800960c:	b085      	sub	sp, #20
 800960e:	296e      	cmp	r1, #110	; 0x6e
 8009610:	4617      	mov	r7, r2
 8009612:	4606      	mov	r6, r0
 8009614:	4698      	mov	r8, r3
 8009616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009618:	f000 80b3 	beq.w	8009782 <_printf_i+0x182>
 800961c:	d822      	bhi.n	8009664 <_printf_i+0x64>
 800961e:	2963      	cmp	r1, #99	; 0x63
 8009620:	d036      	beq.n	8009690 <_printf_i+0x90>
 8009622:	d80a      	bhi.n	800963a <_printf_i+0x3a>
 8009624:	2900      	cmp	r1, #0
 8009626:	f000 80b9 	beq.w	800979c <_printf_i+0x19c>
 800962a:	2958      	cmp	r1, #88	; 0x58
 800962c:	f000 8083 	beq.w	8009736 <_printf_i+0x136>
 8009630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009634:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009638:	e032      	b.n	80096a0 <_printf_i+0xa0>
 800963a:	2964      	cmp	r1, #100	; 0x64
 800963c:	d001      	beq.n	8009642 <_printf_i+0x42>
 800963e:	2969      	cmp	r1, #105	; 0x69
 8009640:	d1f6      	bne.n	8009630 <_printf_i+0x30>
 8009642:	6820      	ldr	r0, [r4, #0]
 8009644:	6813      	ldr	r3, [r2, #0]
 8009646:	0605      	lsls	r5, r0, #24
 8009648:	f103 0104 	add.w	r1, r3, #4
 800964c:	d52a      	bpl.n	80096a4 <_printf_i+0xa4>
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6011      	str	r1, [r2, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	da03      	bge.n	800965e <_printf_i+0x5e>
 8009656:	222d      	movs	r2, #45	; 0x2d
 8009658:	425b      	negs	r3, r3
 800965a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800965e:	486f      	ldr	r0, [pc, #444]	; (800981c <_printf_i+0x21c>)
 8009660:	220a      	movs	r2, #10
 8009662:	e039      	b.n	80096d8 <_printf_i+0xd8>
 8009664:	2973      	cmp	r1, #115	; 0x73
 8009666:	f000 809d 	beq.w	80097a4 <_printf_i+0x1a4>
 800966a:	d808      	bhi.n	800967e <_printf_i+0x7e>
 800966c:	296f      	cmp	r1, #111	; 0x6f
 800966e:	d020      	beq.n	80096b2 <_printf_i+0xb2>
 8009670:	2970      	cmp	r1, #112	; 0x70
 8009672:	d1dd      	bne.n	8009630 <_printf_i+0x30>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	f043 0320 	orr.w	r3, r3, #32
 800967a:	6023      	str	r3, [r4, #0]
 800967c:	e003      	b.n	8009686 <_printf_i+0x86>
 800967e:	2975      	cmp	r1, #117	; 0x75
 8009680:	d017      	beq.n	80096b2 <_printf_i+0xb2>
 8009682:	2978      	cmp	r1, #120	; 0x78
 8009684:	d1d4      	bne.n	8009630 <_printf_i+0x30>
 8009686:	2378      	movs	r3, #120	; 0x78
 8009688:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800968c:	4864      	ldr	r0, [pc, #400]	; (8009820 <_printf_i+0x220>)
 800968e:	e055      	b.n	800973c <_printf_i+0x13c>
 8009690:	6813      	ldr	r3, [r2, #0]
 8009692:	1d19      	adds	r1, r3, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	6011      	str	r1, [r2, #0]
 8009698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800969c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096a0:	2301      	movs	r3, #1
 80096a2:	e08c      	b.n	80097be <_printf_i+0x1be>
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6011      	str	r1, [r2, #0]
 80096a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096ac:	bf18      	it	ne
 80096ae:	b21b      	sxthne	r3, r3
 80096b0:	e7cf      	b.n	8009652 <_printf_i+0x52>
 80096b2:	6813      	ldr	r3, [r2, #0]
 80096b4:	6825      	ldr	r5, [r4, #0]
 80096b6:	1d18      	adds	r0, r3, #4
 80096b8:	6010      	str	r0, [r2, #0]
 80096ba:	0628      	lsls	r0, r5, #24
 80096bc:	d501      	bpl.n	80096c2 <_printf_i+0xc2>
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	e002      	b.n	80096c8 <_printf_i+0xc8>
 80096c2:	0668      	lsls	r0, r5, #25
 80096c4:	d5fb      	bpl.n	80096be <_printf_i+0xbe>
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	4854      	ldr	r0, [pc, #336]	; (800981c <_printf_i+0x21c>)
 80096ca:	296f      	cmp	r1, #111	; 0x6f
 80096cc:	bf14      	ite	ne
 80096ce:	220a      	movne	r2, #10
 80096d0:	2208      	moveq	r2, #8
 80096d2:	2100      	movs	r1, #0
 80096d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096d8:	6865      	ldr	r5, [r4, #4]
 80096da:	60a5      	str	r5, [r4, #8]
 80096dc:	2d00      	cmp	r5, #0
 80096de:	f2c0 8095 	blt.w	800980c <_printf_i+0x20c>
 80096e2:	6821      	ldr	r1, [r4, #0]
 80096e4:	f021 0104 	bic.w	r1, r1, #4
 80096e8:	6021      	str	r1, [r4, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d13d      	bne.n	800976a <_printf_i+0x16a>
 80096ee:	2d00      	cmp	r5, #0
 80096f0:	f040 808e 	bne.w	8009810 <_printf_i+0x210>
 80096f4:	4665      	mov	r5, ip
 80096f6:	2a08      	cmp	r2, #8
 80096f8:	d10b      	bne.n	8009712 <_printf_i+0x112>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	07db      	lsls	r3, r3, #31
 80096fe:	d508      	bpl.n	8009712 <_printf_i+0x112>
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	6862      	ldr	r2, [r4, #4]
 8009704:	429a      	cmp	r2, r3
 8009706:	bfde      	ittt	le
 8009708:	2330      	movle	r3, #48	; 0x30
 800970a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800970e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009712:	ebac 0305 	sub.w	r3, ip, r5
 8009716:	6123      	str	r3, [r4, #16]
 8009718:	f8cd 8000 	str.w	r8, [sp]
 800971c:	463b      	mov	r3, r7
 800971e:	aa03      	add	r2, sp, #12
 8009720:	4621      	mov	r1, r4
 8009722:	4630      	mov	r0, r6
 8009724:	f7ff fef6 	bl	8009514 <_printf_common>
 8009728:	3001      	adds	r0, #1
 800972a:	d14d      	bne.n	80097c8 <_printf_i+0x1c8>
 800972c:	f04f 30ff 	mov.w	r0, #4294967295
 8009730:	b005      	add	sp, #20
 8009732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009736:	4839      	ldr	r0, [pc, #228]	; (800981c <_printf_i+0x21c>)
 8009738:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800973c:	6813      	ldr	r3, [r2, #0]
 800973e:	6821      	ldr	r1, [r4, #0]
 8009740:	1d1d      	adds	r5, r3, #4
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6015      	str	r5, [r2, #0]
 8009746:	060a      	lsls	r2, r1, #24
 8009748:	d50b      	bpl.n	8009762 <_printf_i+0x162>
 800974a:	07ca      	lsls	r2, r1, #31
 800974c:	bf44      	itt	mi
 800974e:	f041 0120 	orrmi.w	r1, r1, #32
 8009752:	6021      	strmi	r1, [r4, #0]
 8009754:	b91b      	cbnz	r3, 800975e <_printf_i+0x15e>
 8009756:	6822      	ldr	r2, [r4, #0]
 8009758:	f022 0220 	bic.w	r2, r2, #32
 800975c:	6022      	str	r2, [r4, #0]
 800975e:	2210      	movs	r2, #16
 8009760:	e7b7      	b.n	80096d2 <_printf_i+0xd2>
 8009762:	064d      	lsls	r5, r1, #25
 8009764:	bf48      	it	mi
 8009766:	b29b      	uxthmi	r3, r3
 8009768:	e7ef      	b.n	800974a <_printf_i+0x14a>
 800976a:	4665      	mov	r5, ip
 800976c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009770:	fb02 3311 	mls	r3, r2, r1, r3
 8009774:	5cc3      	ldrb	r3, [r0, r3]
 8009776:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800977a:	460b      	mov	r3, r1
 800977c:	2900      	cmp	r1, #0
 800977e:	d1f5      	bne.n	800976c <_printf_i+0x16c>
 8009780:	e7b9      	b.n	80096f6 <_printf_i+0xf6>
 8009782:	6813      	ldr	r3, [r2, #0]
 8009784:	6825      	ldr	r5, [r4, #0]
 8009786:	6961      	ldr	r1, [r4, #20]
 8009788:	1d18      	adds	r0, r3, #4
 800978a:	6010      	str	r0, [r2, #0]
 800978c:	0628      	lsls	r0, r5, #24
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	d501      	bpl.n	8009796 <_printf_i+0x196>
 8009792:	6019      	str	r1, [r3, #0]
 8009794:	e002      	b.n	800979c <_printf_i+0x19c>
 8009796:	066a      	lsls	r2, r5, #25
 8009798:	d5fb      	bpl.n	8009792 <_printf_i+0x192>
 800979a:	8019      	strh	r1, [r3, #0]
 800979c:	2300      	movs	r3, #0
 800979e:	6123      	str	r3, [r4, #16]
 80097a0:	4665      	mov	r5, ip
 80097a2:	e7b9      	b.n	8009718 <_printf_i+0x118>
 80097a4:	6813      	ldr	r3, [r2, #0]
 80097a6:	1d19      	adds	r1, r3, #4
 80097a8:	6011      	str	r1, [r2, #0]
 80097aa:	681d      	ldr	r5, [r3, #0]
 80097ac:	6862      	ldr	r2, [r4, #4]
 80097ae:	2100      	movs	r1, #0
 80097b0:	4628      	mov	r0, r5
 80097b2:	f7f6 fd2d 	bl	8000210 <memchr>
 80097b6:	b108      	cbz	r0, 80097bc <_printf_i+0x1bc>
 80097b8:	1b40      	subs	r0, r0, r5
 80097ba:	6060      	str	r0, [r4, #4]
 80097bc:	6863      	ldr	r3, [r4, #4]
 80097be:	6123      	str	r3, [r4, #16]
 80097c0:	2300      	movs	r3, #0
 80097c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097c6:	e7a7      	b.n	8009718 <_printf_i+0x118>
 80097c8:	6923      	ldr	r3, [r4, #16]
 80097ca:	462a      	mov	r2, r5
 80097cc:	4639      	mov	r1, r7
 80097ce:	4630      	mov	r0, r6
 80097d0:	47c0      	blx	r8
 80097d2:	3001      	adds	r0, #1
 80097d4:	d0aa      	beq.n	800972c <_printf_i+0x12c>
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	079b      	lsls	r3, r3, #30
 80097da:	d413      	bmi.n	8009804 <_printf_i+0x204>
 80097dc:	68e0      	ldr	r0, [r4, #12]
 80097de:	9b03      	ldr	r3, [sp, #12]
 80097e0:	4298      	cmp	r0, r3
 80097e2:	bfb8      	it	lt
 80097e4:	4618      	movlt	r0, r3
 80097e6:	e7a3      	b.n	8009730 <_printf_i+0x130>
 80097e8:	2301      	movs	r3, #1
 80097ea:	464a      	mov	r2, r9
 80097ec:	4639      	mov	r1, r7
 80097ee:	4630      	mov	r0, r6
 80097f0:	47c0      	blx	r8
 80097f2:	3001      	adds	r0, #1
 80097f4:	d09a      	beq.n	800972c <_printf_i+0x12c>
 80097f6:	3501      	adds	r5, #1
 80097f8:	68e3      	ldr	r3, [r4, #12]
 80097fa:	9a03      	ldr	r2, [sp, #12]
 80097fc:	1a9b      	subs	r3, r3, r2
 80097fe:	42ab      	cmp	r3, r5
 8009800:	dcf2      	bgt.n	80097e8 <_printf_i+0x1e8>
 8009802:	e7eb      	b.n	80097dc <_printf_i+0x1dc>
 8009804:	2500      	movs	r5, #0
 8009806:	f104 0919 	add.w	r9, r4, #25
 800980a:	e7f5      	b.n	80097f8 <_printf_i+0x1f8>
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1ac      	bne.n	800976a <_printf_i+0x16a>
 8009810:	7803      	ldrb	r3, [r0, #0]
 8009812:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009816:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800981a:	e76c      	b.n	80096f6 <_printf_i+0xf6>
 800981c:	08009ac5 	.word	0x08009ac5
 8009820:	08009ad6 	.word	0x08009ad6

08009824 <_sbrk_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4c06      	ldr	r4, [pc, #24]	; (8009840 <_sbrk_r+0x1c>)
 8009828:	2300      	movs	r3, #0
 800982a:	4605      	mov	r5, r0
 800982c:	4608      	mov	r0, r1
 800982e:	6023      	str	r3, [r4, #0]
 8009830:	f7f7 fa50 	bl	8000cd4 <_sbrk>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_sbrk_r+0x1a>
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	b103      	cbz	r3, 800983e <_sbrk_r+0x1a>
 800983c:	602b      	str	r3, [r5, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	20000430 	.word	0x20000430

08009844 <__sread>:
 8009844:	b510      	push	{r4, lr}
 8009846:	460c      	mov	r4, r1
 8009848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984c:	f000 f896 	bl	800997c <_read_r>
 8009850:	2800      	cmp	r0, #0
 8009852:	bfab      	itete	ge
 8009854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009856:	89a3      	ldrhlt	r3, [r4, #12]
 8009858:	181b      	addge	r3, r3, r0
 800985a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800985e:	bfac      	ite	ge
 8009860:	6563      	strge	r3, [r4, #84]	; 0x54
 8009862:	81a3      	strhlt	r3, [r4, #12]
 8009864:	bd10      	pop	{r4, pc}

08009866 <__swrite>:
 8009866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986a:	461f      	mov	r7, r3
 800986c:	898b      	ldrh	r3, [r1, #12]
 800986e:	05db      	lsls	r3, r3, #23
 8009870:	4605      	mov	r5, r0
 8009872:	460c      	mov	r4, r1
 8009874:	4616      	mov	r6, r2
 8009876:	d505      	bpl.n	8009884 <__swrite+0x1e>
 8009878:	2302      	movs	r3, #2
 800987a:	2200      	movs	r2, #0
 800987c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009880:	f000 f868 	bl	8009954 <_lseek_r>
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800988a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	4632      	mov	r2, r6
 8009892:	463b      	mov	r3, r7
 8009894:	4628      	mov	r0, r5
 8009896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800989a:	f000 b817 	b.w	80098cc <_write_r>

0800989e <__sseek>:
 800989e:	b510      	push	{r4, lr}
 80098a0:	460c      	mov	r4, r1
 80098a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a6:	f000 f855 	bl	8009954 <_lseek_r>
 80098aa:	1c43      	adds	r3, r0, #1
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	bf15      	itete	ne
 80098b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80098b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098ba:	81a3      	strheq	r3, [r4, #12]
 80098bc:	bf18      	it	ne
 80098be:	81a3      	strhne	r3, [r4, #12]
 80098c0:	bd10      	pop	{r4, pc}

080098c2 <__sclose>:
 80098c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c6:	f000 b813 	b.w	80098f0 <_close_r>
	...

080098cc <_write_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4c07      	ldr	r4, [pc, #28]	; (80098ec <_write_r+0x20>)
 80098d0:	4605      	mov	r5, r0
 80098d2:	4608      	mov	r0, r1
 80098d4:	4611      	mov	r1, r2
 80098d6:	2200      	movs	r2, #0
 80098d8:	6022      	str	r2, [r4, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	f7f7 f910 	bl	8000b00 <_write>
 80098e0:	1c43      	adds	r3, r0, #1
 80098e2:	d102      	bne.n	80098ea <_write_r+0x1e>
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	b103      	cbz	r3, 80098ea <_write_r+0x1e>
 80098e8:	602b      	str	r3, [r5, #0]
 80098ea:	bd38      	pop	{r3, r4, r5, pc}
 80098ec:	20000430 	.word	0x20000430

080098f0 <_close_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4c06      	ldr	r4, [pc, #24]	; (800990c <_close_r+0x1c>)
 80098f4:	2300      	movs	r3, #0
 80098f6:	4605      	mov	r5, r0
 80098f8:	4608      	mov	r0, r1
 80098fa:	6023      	str	r3, [r4, #0]
 80098fc:	f7f7 f92c 	bl	8000b58 <_close>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d102      	bne.n	800990a <_close_r+0x1a>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	b103      	cbz	r3, 800990a <_close_r+0x1a>
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	20000430 	.word	0x20000430

08009910 <_fstat_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4c07      	ldr	r4, [pc, #28]	; (8009930 <_fstat_r+0x20>)
 8009914:	2300      	movs	r3, #0
 8009916:	4605      	mov	r5, r0
 8009918:	4608      	mov	r0, r1
 800991a:	4611      	mov	r1, r2
 800991c:	6023      	str	r3, [r4, #0]
 800991e:	f7f7 f96b 	bl	8000bf8 <_fstat>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d102      	bne.n	800992c <_fstat_r+0x1c>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	b103      	cbz	r3, 800992c <_fstat_r+0x1c>
 800992a:	602b      	str	r3, [r5, #0]
 800992c:	bd38      	pop	{r3, r4, r5, pc}
 800992e:	bf00      	nop
 8009930:	20000430 	.word	0x20000430

08009934 <_isatty_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	4c06      	ldr	r4, [pc, #24]	; (8009950 <_isatty_r+0x1c>)
 8009938:	2300      	movs	r3, #0
 800993a:	4605      	mov	r5, r0
 800993c:	4608      	mov	r0, r1
 800993e:	6023      	str	r3, [r4, #0]
 8009940:	f7f7 f8c8 	bl	8000ad4 <_isatty>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d102      	bne.n	800994e <_isatty_r+0x1a>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	b103      	cbz	r3, 800994e <_isatty_r+0x1a>
 800994c:	602b      	str	r3, [r5, #0]
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	20000430 	.word	0x20000430

08009954 <_lseek_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4c07      	ldr	r4, [pc, #28]	; (8009974 <_lseek_r+0x20>)
 8009958:	4605      	mov	r5, r0
 800995a:	4608      	mov	r0, r1
 800995c:	4611      	mov	r1, r2
 800995e:	2200      	movs	r2, #0
 8009960:	6022      	str	r2, [r4, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	f7f7 f90f 	bl	8000b86 <_lseek>
 8009968:	1c43      	adds	r3, r0, #1
 800996a:	d102      	bne.n	8009972 <_lseek_r+0x1e>
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	b103      	cbz	r3, 8009972 <_lseek_r+0x1e>
 8009970:	602b      	str	r3, [r5, #0]
 8009972:	bd38      	pop	{r3, r4, r5, pc}
 8009974:	20000430 	.word	0x20000430

08009978 <__malloc_lock>:
 8009978:	4770      	bx	lr

0800997a <__malloc_unlock>:
 800997a:	4770      	bx	lr

0800997c <_read_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4c07      	ldr	r4, [pc, #28]	; (800999c <_read_r+0x20>)
 8009980:	4605      	mov	r5, r0
 8009982:	4608      	mov	r0, r1
 8009984:	4611      	mov	r1, r2
 8009986:	2200      	movs	r2, #0
 8009988:	6022      	str	r2, [r4, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	f7f7 f90c 	bl	8000ba8 <_read>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_read_r+0x1e>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	b103      	cbz	r3, 800999a <_read_r+0x1e>
 8009998:	602b      	str	r3, [r5, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	20000430 	.word	0x20000430

080099a0 <_init>:
 80099a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a2:	bf00      	nop
 80099a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a6:	bc08      	pop	{r3}
 80099a8:	469e      	mov	lr, r3
 80099aa:	4770      	bx	lr

080099ac <_fini>:
 80099ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ae:	bf00      	nop
 80099b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b2:	bc08      	pop	{r3}
 80099b4:	469e      	mov	lr, r3
 80099b6:	4770      	bx	lr
